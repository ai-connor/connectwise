/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountingBatchesAPIService AccountingBatchesAPI service
type AccountingBatchesAPIService service

type ApiDeleteFinanceAccountingBatchesByIdRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAccountingBatchesByIdRequest) ClientId(clientId string) ApiDeleteFinanceAccountingBatchesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAccountingBatchesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAccountingBatchesByIdExecute(r)
}

/*
DeleteFinanceAccountingBatchesById Delete GLExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batcheId
 @return ApiDeleteFinanceAccountingBatchesByIdRequest
*/
func (a *AccountingBatchesAPIService) DeleteFinanceAccountingBatchesById(ctx context.Context, id int32) ApiDeleteFinanceAccountingBatchesByIdRequest {
	return ApiDeleteFinanceAccountingBatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AccountingBatchesAPIService) DeleteFinanceAccountingBatchesByIdExecute(r ApiDeleteFinanceAccountingBatchesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.DeleteFinanceAccountingBatchesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAccountingBatchesRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) Conditions(conditions string) ApiGetFinanceAccountingBatchesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingBatchesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingBatchesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) OrderBy(orderBy string) ApiGetFinanceAccountingBatchesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) Fields(fields string) ApiGetFinanceAccountingBatchesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) Page(page int32) ApiGetFinanceAccountingBatchesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) PageSize(pageSize int32) ApiGetFinanceAccountingBatchesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) PageId(pageId int32) ApiGetFinanceAccountingBatchesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesRequest) ClientId(clientId string) ApiGetFinanceAccountingBatchesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAccountingBatchesRequest) Execute() ([]AccountingBatch, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingBatchesExecute(r)
}

/*
GetFinanceAccountingBatches Get List of AccountingBatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAccountingBatchesRequest
*/
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatches(ctx context.Context) ApiGetFinanceAccountingBatchesRequest {
	return ApiGetFinanceAccountingBatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AccountingBatch
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatchesExecute(r ApiGetFinanceAccountingBatchesRequest) ([]AccountingBatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AccountingBatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.GetFinanceAccountingBatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAccountingBatchesByIdRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) Conditions(conditions string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) OrderBy(orderBy string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) Fields(fields string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) Page(page int32) ApiGetFinanceAccountingBatchesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) PageSize(pageSize int32) ApiGetFinanceAccountingBatchesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) PageId(pageId int32) ApiGetFinanceAccountingBatchesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesByIdRequest) ClientId(clientId string) ApiGetFinanceAccountingBatchesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAccountingBatchesByIdRequest) Execute() (*AccountingBatch, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingBatchesByIdExecute(r)
}

/*
GetFinanceAccountingBatchesById Get AccountingBatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batcheId
 @return ApiGetFinanceAccountingBatchesByIdRequest
*/
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatchesById(ctx context.Context, id int32) ApiGetFinanceAccountingBatchesByIdRequest {
	return ApiGetFinanceAccountingBatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AccountingBatch
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatchesByIdExecute(r ApiGetFinanceAccountingBatchesByIdRequest) (*AccountingBatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountingBatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.GetFinanceAccountingBatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAccountingBatchesCountRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) Conditions(conditions string) ApiGetFinanceAccountingBatchesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingBatchesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingBatchesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) OrderBy(orderBy string) ApiGetFinanceAccountingBatchesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) Fields(fields string) ApiGetFinanceAccountingBatchesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) Page(page int32) ApiGetFinanceAccountingBatchesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) PageSize(pageSize int32) ApiGetFinanceAccountingBatchesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) PageId(pageId int32) ApiGetFinanceAccountingBatchesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAccountingBatchesCountRequest) ClientId(clientId string) ApiGetFinanceAccountingBatchesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAccountingBatchesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingBatchesCountExecute(r)
}

/*
GetFinanceAccountingBatchesCount Get Count of AccountingBatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAccountingBatchesCountRequest
*/
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatchesCount(ctx context.Context) ApiGetFinanceAccountingBatchesCountRequest {
	return ApiGetFinanceAccountingBatchesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AccountingBatchesAPIService) GetFinanceAccountingBatchesCountExecute(r ApiGetFinanceAccountingBatchesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.GetFinanceAccountingBatchesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAccountingBatchesRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	createAccountingBatchRequest *CreateAccountingBatchRequest
	clientId *string
}

// accountingBatchParameters
func (r ApiPostFinanceAccountingBatchesRequest) CreateAccountingBatchRequest(createAccountingBatchRequest CreateAccountingBatchRequest) ApiPostFinanceAccountingBatchesRequest {
	r.createAccountingBatchRequest = &createAccountingBatchRequest
	return r
}

// 
func (r ApiPostFinanceAccountingBatchesRequest) ClientId(clientId string) ApiPostFinanceAccountingBatchesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAccountingBatchesRequest) Execute() (*GLExport, *http.Response, error) {
	return r.ApiService.PostFinanceAccountingBatchesExecute(r)
}

/*
PostFinanceAccountingBatches Post GLExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceAccountingBatchesRequest
*/
func (a *AccountingBatchesAPIService) PostFinanceAccountingBatches(ctx context.Context) ApiPostFinanceAccountingBatchesRequest {
	return ApiPostFinanceAccountingBatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GLExport
func (a *AccountingBatchesAPIService) PostFinanceAccountingBatchesExecute(r ApiPostFinanceAccountingBatchesRequest) (*GLExport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLExport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.PostFinanceAccountingBatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createAccountingBatchRequest == nil {
		return localVarReturnValue, nil, reportError("createAccountingBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.createAccountingBatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAccountingBatchesByIdExportRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	id int32
	exportAccountingBatchRequest *ExportAccountingBatchRequest
	clientId *string
}

// batchExportParameters
func (r ApiPostFinanceAccountingBatchesByIdExportRequest) ExportAccountingBatchRequest(exportAccountingBatchRequest ExportAccountingBatchRequest) ApiPostFinanceAccountingBatchesByIdExportRequest {
	r.exportAccountingBatchRequest = &exportAccountingBatchRequest
	return r
}

// 
func (r ApiPostFinanceAccountingBatchesByIdExportRequest) ClientId(clientId string) ApiPostFinanceAccountingBatchesByIdExportRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAccountingBatchesByIdExportRequest) Execute() (*GLExport, *http.Response, error) {
	return r.ApiService.PostFinanceAccountingBatchesByIdExportExecute(r)
}

/*
PostFinanceAccountingBatchesByIdExport Post GLExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batcheId
 @return ApiPostFinanceAccountingBatchesByIdExportRequest
*/
func (a *AccountingBatchesAPIService) PostFinanceAccountingBatchesByIdExport(ctx context.Context, id int32) ApiPostFinanceAccountingBatchesByIdExportRequest {
	return ApiPostFinanceAccountingBatchesByIdExportRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLExport
func (a *AccountingBatchesAPIService) PostFinanceAccountingBatchesByIdExportExecute(r ApiPostFinanceAccountingBatchesByIdExportRequest) (*GLExport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLExport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.PostFinanceAccountingBatchesByIdExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/batches/{id}/export"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportAccountingBatchRequest == nil {
		return localVarReturnValue, nil, reportError("exportAccountingBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.exportAccountingBatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAccountingExportRequest struct {
	ctx context.Context
	ApiService *AccountingBatchesAPIService
	exportAccountingBatchRequest *ExportAccountingBatchRequest
	clientId *string
}

// batchExportParameters
func (r ApiPostFinanceAccountingExportRequest) ExportAccountingBatchRequest(exportAccountingBatchRequest ExportAccountingBatchRequest) ApiPostFinanceAccountingExportRequest {
	r.exportAccountingBatchRequest = &exportAccountingBatchRequest
	return r
}

// 
func (r ApiPostFinanceAccountingExportRequest) ClientId(clientId string) ApiPostFinanceAccountingExportRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAccountingExportRequest) Execute() (*GLExport, *http.Response, error) {
	return r.ApiService.PostFinanceAccountingExportExecute(r)
}

/*
PostFinanceAccountingExport Post GLExport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceAccountingExportRequest
*/
func (a *AccountingBatchesAPIService) PostFinanceAccountingExport(ctx context.Context) ApiPostFinanceAccountingExportRequest {
	return ApiPostFinanceAccountingExportRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GLExport
func (a *AccountingBatchesAPIService) PostFinanceAccountingExportExecute(r ApiPostFinanceAccountingExportRequest) (*GLExport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLExport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingBatchesAPIService.PostFinanceAccountingExport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/export"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportAccountingBatchRequest == nil {
		return localVarReturnValue, nil, reportError("exportAccountingBatchRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.exportAccountingBatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
