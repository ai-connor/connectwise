/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AccountingUnpostedExpensesAPIService AccountingUnpostedExpensesAPI service
type AccountingUnpostedExpensesAPIService service

type ApiGetFinanceAccountingUnpostedexpensesRequest struct {
	ctx context.Context
	ApiService *AccountingUnpostedExpensesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) ClientId(clientId string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) Conditions(conditions string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) OrderBy(orderBy string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) Fields(fields string) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) Page(page int32) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) PageSize(pageSize int32) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesRequest) PageId(pageId int32) ApiGetFinanceAccountingUnpostedexpensesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAccountingUnpostedexpensesRequest) Execute() ([]UnpostedExpense, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingUnpostedexpensesExecute(r)
}

/*
GetFinanceAccountingUnpostedexpenses Get List of UnpostedExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAccountingUnpostedexpensesRequest
*/
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpenses(ctx context.Context) ApiGetFinanceAccountingUnpostedexpensesRequest {
	return ApiGetFinanceAccountingUnpostedexpensesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UnpostedExpense
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpensesExecute(r ApiGetFinanceAccountingUnpostedexpensesRequest) ([]UnpostedExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UnpostedExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingUnpostedExpensesAPIService.GetFinanceAccountingUnpostedexpenses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/unpostedexpenses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAccountingUnpostedexpensesByIdRequest struct {
	ctx context.Context
	ApiService *AccountingUnpostedExpensesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) ClientId(clientId string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) Conditions(conditions string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) OrderBy(orderBy string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) Fields(fields string) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) Page(page int32) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) PageSize(pageSize int32) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) PageId(pageId int32) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) Execute() (*UnpostedExpense, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingUnpostedexpensesByIdExecute(r)
}

/*
GetFinanceAccountingUnpostedexpensesById Get UnpostedExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unpostedexpensId
 @return ApiGetFinanceAccountingUnpostedexpensesByIdRequest
*/
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpensesById(ctx context.Context, id int32) ApiGetFinanceAccountingUnpostedexpensesByIdRequest {
	return ApiGetFinanceAccountingUnpostedexpensesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UnpostedExpense
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpensesByIdExecute(r ApiGetFinanceAccountingUnpostedexpensesByIdRequest) (*UnpostedExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnpostedExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingUnpostedExpensesAPIService.GetFinanceAccountingUnpostedexpensesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/unpostedexpenses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAccountingUnpostedexpensesCountRequest struct {
	ctx context.Context
	ApiService *AccountingUnpostedExpensesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) ClientId(clientId string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) Conditions(conditions string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) ChildConditions(childConditions string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) OrderBy(orderBy string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) Fields(fields string) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) Page(page int32) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) PageSize(pageSize int32) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) PageId(pageId int32) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAccountingUnpostedexpensesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAccountingUnpostedexpensesCountExecute(r)
}

/*
GetFinanceAccountingUnpostedexpensesCount Get Count of UnpostedExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAccountingUnpostedexpensesCountRequest
*/
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpensesCount(ctx context.Context) ApiGetFinanceAccountingUnpostedexpensesCountRequest {
	return ApiGetFinanceAccountingUnpostedexpensesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AccountingUnpostedExpensesAPIService) GetFinanceAccountingUnpostedexpensesCountExecute(r ApiGetFinanceAccountingUnpostedexpensesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountingUnpostedExpensesAPIService.GetFinanceAccountingUnpostedexpensesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/accounting/unpostedexpenses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
