/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ActivityStatusInfosAPIService ActivityStatusInfosAPI service
type ActivityStatusInfosAPIService service

type ApiGetSalesActivitiesStatusesByIdInfoRequest struct {
	ctx context.Context
	ApiService *ActivityStatusInfosAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) Fields(fields string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) Page(page int32) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesActivitiesStatusesByIdInfoRequest) Execute() (*ActivityStatusInfo, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesByIdInfoExecute(r)
}

/*
GetSalesActivitiesStatusesByIdInfo Get ActivityStatusInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ActivityStatusInfoId
 @return ApiGetSalesActivitiesStatusesByIdInfoRequest
*/
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesByIdInfo(ctx context.Context, id int32) ApiGetSalesActivitiesStatusesByIdInfoRequest {
	return ApiGetSalesActivitiesStatusesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityStatusInfo
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesByIdInfoExecute(r ApiGetSalesActivitiesStatusesByIdInfoRequest) (*ActivityStatusInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityStatusInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusInfosAPIService.GetSalesActivitiesStatusesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesStatusesInfoRequest struct {
	ctx context.Context
	ApiService *ActivityStatusInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) Fields(fields string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) Page(page int32) ApiGetSalesActivitiesStatusesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesActivitiesStatusesInfoRequest) Execute() ([]ActivityStatusInfo, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesInfoExecute(r)
}

/*
GetSalesActivitiesStatusesInfo Get List of ActivityStatusInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesStatusesInfoRequest
*/
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesInfo(ctx context.Context) ApiGetSalesActivitiesStatusesInfoRequest {
	return ApiGetSalesActivitiesStatusesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ActivityStatusInfo
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesInfoExecute(r ApiGetSalesActivitiesStatusesInfoRequest) ([]ActivityStatusInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ActivityStatusInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusInfosAPIService.GetSalesActivitiesStatusesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesStatusesInfoCountRequest struct {
	ctx context.Context
	ApiService *ActivityStatusInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) Fields(fields string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) Page(page int32) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesInfoCountRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesActivitiesStatusesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesInfoCountExecute(r)
}

/*
GetSalesActivitiesStatusesInfoCount Get Count of ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesStatusesInfoCountRequest
*/
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesInfoCount(ctx context.Context) ApiGetSalesActivitiesStatusesInfoCountRequest {
	return ApiGetSalesActivitiesStatusesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ActivityStatusInfosAPIService) GetSalesActivitiesStatusesInfoCountExecute(r ApiGetSalesActivitiesStatusesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusInfosAPIService.GetSalesActivitiesStatusesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
