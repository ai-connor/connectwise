/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ActivityStatusesAPIService ActivityStatusesAPI service
type ActivityStatusesAPIService service

type ApiDeleteSalesActivitiesStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesActivitiesStatusesByIdRequest) ClientId(clientId string) ApiDeleteSalesActivitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesActivitiesStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesActivitiesStatusesByIdExecute(r)
}

/*
DeleteSalesActivitiesStatusesById Delete ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiDeleteSalesActivitiesStatusesByIdRequest
*/
func (a *ActivityStatusesAPIService) DeleteSalesActivitiesStatusesById(ctx context.Context, id int32) ApiDeleteSalesActivitiesStatusesByIdRequest {
	return ApiDeleteSalesActivitiesStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ActivityStatusesAPIService) DeleteSalesActivitiesStatusesByIdExecute(r ApiDeleteSalesActivitiesStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.DeleteSalesActivitiesStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesStatusesRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) Fields(fields string) ApiGetSalesActivitiesStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) Page(page int32) ApiGetSalesActivitiesStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesStatusesRequest) Execute() ([]ActivityStatus, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesExecute(r)
}

/*
GetSalesActivitiesStatuses Get List of ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesStatusesRequest
*/
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatuses(ctx context.Context) ApiGetSalesActivitiesStatusesRequest {
	return ApiGetSalesActivitiesStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ActivityStatus
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatusesExecute(r ApiGetSalesActivitiesStatusesRequest) ([]ActivityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ActivityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.GetSalesActivitiesStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) Fields(fields string) ApiGetSalesActivitiesStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) Page(page int32) ApiGetSalesActivitiesStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesByIdRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesStatusesByIdRequest) Execute() (*ActivityStatus, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesByIdExecute(r)
}

/*
GetSalesActivitiesStatusesById Get ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiGetSalesActivitiesStatusesByIdRequest
*/
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatusesById(ctx context.Context, id int32) ApiGetSalesActivitiesStatusesByIdRequest {
	return ApiGetSalesActivitiesStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityStatus
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatusesByIdExecute(r ApiGetSalesActivitiesStatusesByIdRequest) (*ActivityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.GetSalesActivitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesStatusesCountRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) ClientId(clientId string) ApiGetSalesActivitiesStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) Conditions(conditions string) ApiGetSalesActivitiesStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) OrderBy(orderBy string) ApiGetSalesActivitiesStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) Fields(fields string) ApiGetSalesActivitiesStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) Page(page int32) ApiGetSalesActivitiesStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) PageSize(pageSize int32) ApiGetSalesActivitiesStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesStatusesCountRequest) PageId(pageId int32) ApiGetSalesActivitiesStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesStatusesCountExecute(r)
}

/*
GetSalesActivitiesStatusesCount Get Count of ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesStatusesCountRequest
*/
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatusesCount(ctx context.Context) ApiGetSalesActivitiesStatusesCountRequest {
	return ApiGetSalesActivitiesStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ActivityStatusesAPIService) GetSalesActivitiesStatusesCountExecute(r ApiGetSalesActivitiesStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.GetSalesActivitiesStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesActivitiesStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesActivitiesStatusesByIdRequest) ClientId(clientId string) ApiPatchSalesActivitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesActivitiesStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesActivitiesStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesActivitiesStatusesByIdRequest) Execute() (*ActivityStatus, *http.Response, error) {
	return r.ApiService.PatchSalesActivitiesStatusesByIdExecute(r)
}

/*
PatchSalesActivitiesStatusesById Patch ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPatchSalesActivitiesStatusesByIdRequest
*/
func (a *ActivityStatusesAPIService) PatchSalesActivitiesStatusesById(ctx context.Context, id int32) ApiPatchSalesActivitiesStatusesByIdRequest {
	return ApiPatchSalesActivitiesStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityStatus
func (a *ActivityStatusesAPIService) PatchSalesActivitiesStatusesByIdExecute(r ApiPatchSalesActivitiesStatusesByIdRequest) (*ActivityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.PatchSalesActivitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesActivitiesStatusesRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	clientId *string
	activityStatus *ActivityStatus
}

// 
func (r ApiPostSalesActivitiesStatusesRequest) ClientId(clientId string) ApiPostSalesActivitiesStatusesRequest {
	r.clientId = &clientId
	return r
}

// activityStatus
func (r ApiPostSalesActivitiesStatusesRequest) ActivityStatus(activityStatus ActivityStatus) ApiPostSalesActivitiesStatusesRequest {
	r.activityStatus = &activityStatus
	return r
}

func (r ApiPostSalesActivitiesStatusesRequest) Execute() (*ActivityStatus, *http.Response, error) {
	return r.ApiService.PostSalesActivitiesStatusesExecute(r)
}

/*
PostSalesActivitiesStatuses Post ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesActivitiesStatusesRequest
*/
func (a *ActivityStatusesAPIService) PostSalesActivitiesStatuses(ctx context.Context) ApiPostSalesActivitiesStatusesRequest {
	return ApiPostSalesActivitiesStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ActivityStatus
func (a *ActivityStatusesAPIService) PostSalesActivitiesStatusesExecute(r ApiPostSalesActivitiesStatusesRequest) (*ActivityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.PostSalesActivitiesStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.activityStatus == nil {
		return localVarReturnValue, nil, reportError("activityStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.activityStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesActivitiesStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityStatusesAPIService
	id int32
	clientId *string
	activityStatus *ActivityStatus
}

// 
func (r ApiPutSalesActivitiesStatusesByIdRequest) ClientId(clientId string) ApiPutSalesActivitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// activityStatus
func (r ApiPutSalesActivitiesStatusesByIdRequest) ActivityStatus(activityStatus ActivityStatus) ApiPutSalesActivitiesStatusesByIdRequest {
	r.activityStatus = &activityStatus
	return r
}

func (r ApiPutSalesActivitiesStatusesByIdRequest) Execute() (*ActivityStatus, *http.Response, error) {
	return r.ApiService.PutSalesActivitiesStatusesByIdExecute(r)
}

/*
PutSalesActivitiesStatusesById Put ActivityStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPutSalesActivitiesStatusesByIdRequest
*/
func (a *ActivityStatusesAPIService) PutSalesActivitiesStatusesById(ctx context.Context, id int32) ApiPutSalesActivitiesStatusesByIdRequest {
	return ApiPutSalesActivitiesStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityStatus
func (a *ActivityStatusesAPIService) PutSalesActivitiesStatusesByIdExecute(r ApiPutSalesActivitiesStatusesByIdRequest) (*ActivityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityStatusesAPIService.PutSalesActivitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.activityStatus == nil {
		return localVarReturnValue, nil, reportError("activityStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.activityStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
