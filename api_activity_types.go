/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ActivityTypesAPIService ActivityTypesAPI service
type ActivityTypesAPIService service

type ApiDeleteSalesActivitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesActivitiesTypesByIdRequest) ClientId(clientId string) ApiDeleteSalesActivitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesActivitiesTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesActivitiesTypesByIdExecute(r)
}

/*
DeleteSalesActivitiesTypesById Delete ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteSalesActivitiesTypesByIdRequest
*/
func (a *ActivityTypesAPIService) DeleteSalesActivitiesTypesById(ctx context.Context, id int32) ApiDeleteSalesActivitiesTypesByIdRequest {
	return ApiDeleteSalesActivitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ActivityTypesAPIService) DeleteSalesActivitiesTypesByIdExecute(r ApiDeleteSalesActivitiesTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.DeleteSalesActivitiesTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesTypesRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesTypesRequest) ClientId(clientId string) ApiGetSalesActivitiesTypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) Conditions(conditions string) ApiGetSalesActivitiesTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) OrderBy(orderBy string) ApiGetSalesActivitiesTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) Fields(fields string) ApiGetSalesActivitiesTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) Page(page int32) ApiGetSalesActivitiesTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) PageSize(pageSize int32) ApiGetSalesActivitiesTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesTypesRequest) PageId(pageId int32) ApiGetSalesActivitiesTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesTypesRequest) Execute() ([]ActivityType, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesTypesExecute(r)
}

/*
GetSalesActivitiesTypes Get List of ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesTypesRequest
*/
func (a *ActivityTypesAPIService) GetSalesActivitiesTypes(ctx context.Context) ApiGetSalesActivitiesTypesRequest {
	return ApiGetSalesActivitiesTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ActivityType
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesExecute(r ApiGetSalesActivitiesTypesRequest) ([]ActivityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ActivityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.GetSalesActivitiesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) ClientId(clientId string) ApiGetSalesActivitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) Conditions(conditions string) ApiGetSalesActivitiesTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) OrderBy(orderBy string) ApiGetSalesActivitiesTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) Fields(fields string) ApiGetSalesActivitiesTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) Page(page int32) ApiGetSalesActivitiesTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) PageSize(pageSize int32) ApiGetSalesActivitiesTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdRequest) PageId(pageId int32) ApiGetSalesActivitiesTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesTypesByIdRequest) Execute() (*ActivityType, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesTypesByIdExecute(r)
}

/*
GetSalesActivitiesTypesById Get ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesActivitiesTypesByIdRequest
*/
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesById(ctx context.Context, id int32) ApiGetSalesActivitiesTypesByIdRequest {
	return ApiGetSalesActivitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityType
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesByIdExecute(r ApiGetSalesActivitiesTypesByIdRequest) (*ActivityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.GetSalesActivitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) ClientId(clientId string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) Conditions(conditions string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) Fields(fields string) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) Page(page int32) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) PageId(pageId int32) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesTypesByIdUsagesExecute(r)
}

/*
GetSalesActivitiesTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesActivitiesTypesByIdUsagesRequest
*/
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesByIdUsages(ctx context.Context, id int32) ApiGetSalesActivitiesTypesByIdUsagesRequest {
	return ApiGetSalesActivitiesTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesByIdUsagesExecute(r ApiGetSalesActivitiesTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.GetSalesActivitiesTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) Fields(fields string) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) Page(page int32) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesTypesByIdUsagesListExecute(r)
}

/*
GetSalesActivitiesTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesActivitiesTypesByIdUsagesListRequest
*/
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesByIdUsagesList(ctx context.Context, id int32) ApiGetSalesActivitiesTypesByIdUsagesListRequest {
	return ApiGetSalesActivitiesTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesByIdUsagesListExecute(r ApiGetSalesActivitiesTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.GetSalesActivitiesTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesActivitiesTypesCountRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) ClientId(clientId string) ApiGetSalesActivitiesTypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) Conditions(conditions string) ApiGetSalesActivitiesTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) ChildConditions(childConditions string) ApiGetSalesActivitiesTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesActivitiesTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) OrderBy(orderBy string) ApiGetSalesActivitiesTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) Fields(fields string) ApiGetSalesActivitiesTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) Page(page int32) ApiGetSalesActivitiesTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) PageSize(pageSize int32) ApiGetSalesActivitiesTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesActivitiesTypesCountRequest) PageId(pageId int32) ApiGetSalesActivitiesTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesActivitiesTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesActivitiesTypesCountExecute(r)
}

/*
GetSalesActivitiesTypesCount Get Count of ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesActivitiesTypesCountRequest
*/
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesCount(ctx context.Context) ApiGetSalesActivitiesTypesCountRequest {
	return ApiGetSalesActivitiesTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ActivityTypesAPIService) GetSalesActivitiesTypesCountExecute(r ApiGetSalesActivitiesTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.GetSalesActivitiesTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesActivitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesActivitiesTypesByIdRequest) ClientId(clientId string) ApiPatchSalesActivitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesActivitiesTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesActivitiesTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesActivitiesTypesByIdRequest) Execute() (*ActivityType, *http.Response, error) {
	return r.ApiService.PatchSalesActivitiesTypesByIdExecute(r)
}

/*
PatchSalesActivitiesTypesById Patch ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchSalesActivitiesTypesByIdRequest
*/
func (a *ActivityTypesAPIService) PatchSalesActivitiesTypesById(ctx context.Context, id int32) ApiPatchSalesActivitiesTypesByIdRequest {
	return ApiPatchSalesActivitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityType
func (a *ActivityTypesAPIService) PatchSalesActivitiesTypesByIdExecute(r ApiPatchSalesActivitiesTypesByIdRequest) (*ActivityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.PatchSalesActivitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesActivitiesTypesRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	clientId *string
	activityType *ActivityType
}

// 
func (r ApiPostSalesActivitiesTypesRequest) ClientId(clientId string) ApiPostSalesActivitiesTypesRequest {
	r.clientId = &clientId
	return r
}

// activityType
func (r ApiPostSalesActivitiesTypesRequest) ActivityType(activityType ActivityType) ApiPostSalesActivitiesTypesRequest {
	r.activityType = &activityType
	return r
}

func (r ApiPostSalesActivitiesTypesRequest) Execute() (*ActivityType, *http.Response, error) {
	return r.ApiService.PostSalesActivitiesTypesExecute(r)
}

/*
PostSalesActivitiesTypes Post ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesActivitiesTypesRequest
*/
func (a *ActivityTypesAPIService) PostSalesActivitiesTypes(ctx context.Context) ApiPostSalesActivitiesTypesRequest {
	return ApiPostSalesActivitiesTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ActivityType
func (a *ActivityTypesAPIService) PostSalesActivitiesTypesExecute(r ApiPostSalesActivitiesTypesRequest) (*ActivityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.PostSalesActivitiesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.activityType == nil {
		return localVarReturnValue, nil, reportError("activityType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.activityType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesActivitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *ActivityTypesAPIService
	id int32
	clientId *string
	activityType *ActivityType
}

// 
func (r ApiPutSalesActivitiesTypesByIdRequest) ClientId(clientId string) ApiPutSalesActivitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// activityType
func (r ApiPutSalesActivitiesTypesByIdRequest) ActivityType(activityType ActivityType) ApiPutSalesActivitiesTypesByIdRequest {
	r.activityType = &activityType
	return r
}

func (r ApiPutSalesActivitiesTypesByIdRequest) Execute() (*ActivityType, *http.Response, error) {
	return r.ApiService.PutSalesActivitiesTypesByIdExecute(r)
}

/*
PutSalesActivitiesTypesById Put ActivityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutSalesActivitiesTypesByIdRequest
*/
func (a *ActivityTypesAPIService) PutSalesActivitiesTypesById(ctx context.Context, id int32) ApiPutSalesActivitiesTypesByIdRequest {
	return ApiPutSalesActivitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ActivityType
func (a *ActivityTypesAPIService) PutSalesActivitiesTypesByIdExecute(r ApiPutSalesActivitiesTypesByIdRequest) (*ActivityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ActivityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ActivityTypesAPIService.PutSalesActivitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/activities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.activityType == nil {
		return localVarReturnValue, nil, reportError("activityType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.activityType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
