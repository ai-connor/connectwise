/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AddressFormatsAPIService AddressFormatsAPI service
type AddressFormatsAPIService service

type ApiDeleteCompanyAddressFormatsByIdRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyAddressFormatsByIdRequest) ClientId(clientId string) ApiDeleteCompanyAddressFormatsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyAddressFormatsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyAddressFormatsByIdExecute(r)
}

/*
DeleteCompanyAddressFormatsById Delete AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id addressFormatId
 @return ApiDeleteCompanyAddressFormatsByIdRequest
*/
func (a *AddressFormatsAPIService) DeleteCompanyAddressFormatsById(ctx context.Context, id int32) ApiDeleteCompanyAddressFormatsByIdRequest {
	return ApiDeleteCompanyAddressFormatsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AddressFormatsAPIService) DeleteCompanyAddressFormatsByIdExecute(r ApiDeleteCompanyAddressFormatsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.DeleteCompanyAddressFormatsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyAddressFormatsRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyAddressFormatsRequest) ClientId(clientId string) ApiGetCompanyAddressFormatsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) Conditions(conditions string) ApiGetCompanyAddressFormatsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) ChildConditions(childConditions string) ApiGetCompanyAddressFormatsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyAddressFormatsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) OrderBy(orderBy string) ApiGetCompanyAddressFormatsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) Fields(fields string) ApiGetCompanyAddressFormatsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) Page(page int32) ApiGetCompanyAddressFormatsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) PageSize(pageSize int32) ApiGetCompanyAddressFormatsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyAddressFormatsRequest) PageId(pageId int32) ApiGetCompanyAddressFormatsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyAddressFormatsRequest) Execute() ([]AddressFormat, *http.Response, error) {
	return r.ApiService.GetCompanyAddressFormatsExecute(r)
}

/*
GetCompanyAddressFormats Get List of AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyAddressFormatsRequest
*/
func (a *AddressFormatsAPIService) GetCompanyAddressFormats(ctx context.Context) ApiGetCompanyAddressFormatsRequest {
	return ApiGetCompanyAddressFormatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AddressFormat
func (a *AddressFormatsAPIService) GetCompanyAddressFormatsExecute(r ApiGetCompanyAddressFormatsRequest) ([]AddressFormat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AddressFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.GetCompanyAddressFormats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyAddressFormatsByIdRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) ClientId(clientId string) ApiGetCompanyAddressFormatsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) Conditions(conditions string) ApiGetCompanyAddressFormatsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyAddressFormatsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyAddressFormatsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) OrderBy(orderBy string) ApiGetCompanyAddressFormatsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) Fields(fields string) ApiGetCompanyAddressFormatsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) Page(page int32) ApiGetCompanyAddressFormatsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) PageSize(pageSize int32) ApiGetCompanyAddressFormatsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyAddressFormatsByIdRequest) PageId(pageId int32) ApiGetCompanyAddressFormatsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyAddressFormatsByIdRequest) Execute() (*AddressFormat, *http.Response, error) {
	return r.ApiService.GetCompanyAddressFormatsByIdExecute(r)
}

/*
GetCompanyAddressFormatsById Get AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id addressFormatId
 @return ApiGetCompanyAddressFormatsByIdRequest
*/
func (a *AddressFormatsAPIService) GetCompanyAddressFormatsById(ctx context.Context, id int32) ApiGetCompanyAddressFormatsByIdRequest {
	return ApiGetCompanyAddressFormatsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AddressFormat
func (a *AddressFormatsAPIService) GetCompanyAddressFormatsByIdExecute(r ApiGetCompanyAddressFormatsByIdRequest) (*AddressFormat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.GetCompanyAddressFormatsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyAddressFormatsCountRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) ClientId(clientId string) ApiGetCompanyAddressFormatsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) Conditions(conditions string) ApiGetCompanyAddressFormatsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) ChildConditions(childConditions string) ApiGetCompanyAddressFormatsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyAddressFormatsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) OrderBy(orderBy string) ApiGetCompanyAddressFormatsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) Fields(fields string) ApiGetCompanyAddressFormatsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) Page(page int32) ApiGetCompanyAddressFormatsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) PageSize(pageSize int32) ApiGetCompanyAddressFormatsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyAddressFormatsCountRequest) PageId(pageId int32) ApiGetCompanyAddressFormatsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyAddressFormatsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyAddressFormatsCountExecute(r)
}

/*
GetCompanyAddressFormatsCount Get Count of AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyAddressFormatsCountRequest
*/
func (a *AddressFormatsAPIService) GetCompanyAddressFormatsCount(ctx context.Context) ApiGetCompanyAddressFormatsCountRequest {
	return ApiGetCompanyAddressFormatsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AddressFormatsAPIService) GetCompanyAddressFormatsCountExecute(r ApiGetCompanyAddressFormatsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.GetCompanyAddressFormatsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyAddressFormatsByIdRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyAddressFormatsByIdRequest) ClientId(clientId string) ApiPatchCompanyAddressFormatsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyAddressFormatsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyAddressFormatsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyAddressFormatsByIdRequest) Execute() (*AddressFormat, *http.Response, error) {
	return r.ApiService.PatchCompanyAddressFormatsByIdExecute(r)
}

/*
PatchCompanyAddressFormatsById Patch AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id addressFormatId
 @return ApiPatchCompanyAddressFormatsByIdRequest
*/
func (a *AddressFormatsAPIService) PatchCompanyAddressFormatsById(ctx context.Context, id int32) ApiPatchCompanyAddressFormatsByIdRequest {
	return ApiPatchCompanyAddressFormatsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AddressFormat
func (a *AddressFormatsAPIService) PatchCompanyAddressFormatsByIdExecute(r ApiPatchCompanyAddressFormatsByIdRequest) (*AddressFormat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.PatchCompanyAddressFormatsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyAddressFormatsRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	clientId *string
	addressFormat *AddressFormat
}

// 
func (r ApiPostCompanyAddressFormatsRequest) ClientId(clientId string) ApiPostCompanyAddressFormatsRequest {
	r.clientId = &clientId
	return r
}

// addressFormat
func (r ApiPostCompanyAddressFormatsRequest) AddressFormat(addressFormat AddressFormat) ApiPostCompanyAddressFormatsRequest {
	r.addressFormat = &addressFormat
	return r
}

func (r ApiPostCompanyAddressFormatsRequest) Execute() (*AddressFormat, *http.Response, error) {
	return r.ApiService.PostCompanyAddressFormatsExecute(r)
}

/*
PostCompanyAddressFormats Post AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyAddressFormatsRequest
*/
func (a *AddressFormatsAPIService) PostCompanyAddressFormats(ctx context.Context) ApiPostCompanyAddressFormatsRequest {
	return ApiPostCompanyAddressFormatsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AddressFormat
func (a *AddressFormatsAPIService) PostCompanyAddressFormatsExecute(r ApiPostCompanyAddressFormatsRequest) (*AddressFormat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.PostCompanyAddressFormats")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.addressFormat == nil {
		return localVarReturnValue, nil, reportError("addressFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.addressFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyAddressFormatsByIdRequest struct {
	ctx context.Context
	ApiService *AddressFormatsAPIService
	id int32
	clientId *string
	addressFormat *AddressFormat
}

// 
func (r ApiPutCompanyAddressFormatsByIdRequest) ClientId(clientId string) ApiPutCompanyAddressFormatsByIdRequest {
	r.clientId = &clientId
	return r
}

// addressFormat
func (r ApiPutCompanyAddressFormatsByIdRequest) AddressFormat(addressFormat AddressFormat) ApiPutCompanyAddressFormatsByIdRequest {
	r.addressFormat = &addressFormat
	return r
}

func (r ApiPutCompanyAddressFormatsByIdRequest) Execute() (*AddressFormat, *http.Response, error) {
	return r.ApiService.PutCompanyAddressFormatsByIdExecute(r)
}

/*
PutCompanyAddressFormatsById Put AddressFormat

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id addressFormatId
 @return ApiPutCompanyAddressFormatsByIdRequest
*/
func (a *AddressFormatsAPIService) PutCompanyAddressFormatsById(ctx context.Context, id int32) ApiPutCompanyAddressFormatsByIdRequest {
	return ApiPutCompanyAddressFormatsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AddressFormat
func (a *AddressFormatsAPIService) PutCompanyAddressFormatsByIdExecute(r ApiPutCompanyAddressFormatsByIdRequest) (*AddressFormat, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AddressFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AddressFormatsAPIService.PutCompanyAddressFormatsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/addressFormats/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.addressFormat == nil {
		return localVarReturnValue, nil, reportError("addressFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.addressFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
