/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AdjustmentTypesAPIService AdjustmentTypesAPI service
type AdjustmentTypesAPIService service

type ApiDeleteProcurementAdjustmentsTypesByIdRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementAdjustmentsTypesByIdRequest) ClientId(clientId string) ApiDeleteProcurementAdjustmentsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementAdjustmentsTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementAdjustmentsTypesByIdExecute(r)
}

/*
DeleteProcurementAdjustmentsTypesById Delete AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteProcurementAdjustmentsTypesByIdRequest
*/
func (a *AdjustmentTypesAPIService) DeleteProcurementAdjustmentsTypesById(ctx context.Context, id int32) ApiDeleteProcurementAdjustmentsTypesByIdRequest {
	return ApiDeleteProcurementAdjustmentsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AdjustmentTypesAPIService) DeleteProcurementAdjustmentsTypesByIdExecute(r ApiDeleteProcurementAdjustmentsTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.DeleteProcurementAdjustmentsTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsTypesRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) Fields(fields string) ApiGetProcurementAdjustmentsTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) Page(page int32) ApiGetProcurementAdjustmentsTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsTypesRequest) Execute() ([]AdjustmentType, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsTypesExecute(r)
}

/*
GetProcurementAdjustmentsTypes Get List of AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementAdjustmentsTypesRequest
*/
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypes(ctx context.Context) ApiGetProcurementAdjustmentsTypesRequest {
	return ApiGetProcurementAdjustmentsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AdjustmentType
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesExecute(r ApiGetProcurementAdjustmentsTypesRequest) ([]AdjustmentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AdjustmentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.GetProcurementAdjustmentsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsTypesByIdRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) Fields(fields string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) Page(page int32) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsTypesByIdRequest) Execute() (*AdjustmentType, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsTypesByIdExecute(r)
}

/*
GetProcurementAdjustmentsTypesById Get AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementAdjustmentsTypesByIdRequest
*/
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesById(ctx context.Context, id int32) ApiGetProcurementAdjustmentsTypesByIdRequest {
	return ApiGetProcurementAdjustmentsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdjustmentType
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesByIdExecute(r ApiGetProcurementAdjustmentsTypesByIdRequest) (*AdjustmentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdjustmentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.GetProcurementAdjustmentsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) Fields(fields string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) Page(page int32) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsTypesByIdUsagesExecute(r)
}

/*
GetProcurementAdjustmentsTypesByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementAdjustmentsTypesByIdUsagesRequest
*/
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesByIdUsages(ctx context.Context, id int32) ApiGetProcurementAdjustmentsTypesByIdUsagesRequest {
	return ApiGetProcurementAdjustmentsTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesByIdUsagesExecute(r ApiGetProcurementAdjustmentsTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.GetProcurementAdjustmentsTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) Fields(fields string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) Page(page int32) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsTypesByIdUsagesListExecute(r)
}

/*
GetProcurementAdjustmentsTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest
*/
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest {
	return ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesByIdUsagesListExecute(r ApiGetProcurementAdjustmentsTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.GetProcurementAdjustmentsTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsTypesCountRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) Fields(fields string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) Page(page int32) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementAdjustmentsTypesCountRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsTypesCountExecute(r)
}

/*
GetProcurementAdjustmentsTypesCount Get Count of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementAdjustmentsTypesCountRequest
*/
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesCount(ctx context.Context) ApiGetProcurementAdjustmentsTypesCountRequest {
	return ApiGetProcurementAdjustmentsTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AdjustmentTypesAPIService) GetProcurementAdjustmentsTypesCountExecute(r ApiGetProcurementAdjustmentsTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.GetProcurementAdjustmentsTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementAdjustmentsTypesByIdRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementAdjustmentsTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementAdjustmentsTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementAdjustmentsTypesByIdRequest) ClientId(clientId string) ApiPatchProcurementAdjustmentsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementAdjustmentsTypesByIdRequest) Execute() (*AdjustmentType, *http.Response, error) {
	return r.ApiService.PatchProcurementAdjustmentsTypesByIdExecute(r)
}

/*
PatchProcurementAdjustmentsTypesById Patch AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchProcurementAdjustmentsTypesByIdRequest
*/
func (a *AdjustmentTypesAPIService) PatchProcurementAdjustmentsTypesById(ctx context.Context, id int32) ApiPatchProcurementAdjustmentsTypesByIdRequest {
	return ApiPatchProcurementAdjustmentsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdjustmentType
func (a *AdjustmentTypesAPIService) PatchProcurementAdjustmentsTypesByIdExecute(r ApiPatchProcurementAdjustmentsTypesByIdRequest) (*AdjustmentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdjustmentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.PatchProcurementAdjustmentsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementAdjustmentsTypesRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	adjustmentType *AdjustmentType
	clientId *string
}

// adjustmentTypes
func (r ApiPostProcurementAdjustmentsTypesRequest) AdjustmentType(adjustmentType AdjustmentType) ApiPostProcurementAdjustmentsTypesRequest {
	r.adjustmentType = &adjustmentType
	return r
}

// 
func (r ApiPostProcurementAdjustmentsTypesRequest) ClientId(clientId string) ApiPostProcurementAdjustmentsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementAdjustmentsTypesRequest) Execute() (*AdjustmentType, *http.Response, error) {
	return r.ApiService.PostProcurementAdjustmentsTypesExecute(r)
}

/*
PostProcurementAdjustmentsTypes Post AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementAdjustmentsTypesRequest
*/
func (a *AdjustmentTypesAPIService) PostProcurementAdjustmentsTypes(ctx context.Context) ApiPostProcurementAdjustmentsTypesRequest {
	return ApiPostProcurementAdjustmentsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdjustmentType
func (a *AdjustmentTypesAPIService) PostProcurementAdjustmentsTypesExecute(r ApiPostProcurementAdjustmentsTypesRequest) (*AdjustmentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdjustmentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.PostProcurementAdjustmentsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adjustmentType == nil {
		return localVarReturnValue, nil, reportError("adjustmentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.adjustmentType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementAdjustmentsTypesByIdRequest struct {
	ctx context.Context
	ApiService *AdjustmentTypesAPIService
	id int32
	adjustmentType *AdjustmentType
	clientId *string
}

// adjustmentTypes
func (r ApiPutProcurementAdjustmentsTypesByIdRequest) AdjustmentType(adjustmentType AdjustmentType) ApiPutProcurementAdjustmentsTypesByIdRequest {
	r.adjustmentType = &adjustmentType
	return r
}

// 
func (r ApiPutProcurementAdjustmentsTypesByIdRequest) ClientId(clientId string) ApiPutProcurementAdjustmentsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementAdjustmentsTypesByIdRequest) Execute() (*AdjustmentType, *http.Response, error) {
	return r.ApiService.PutProcurementAdjustmentsTypesByIdExecute(r)
}

/*
PutProcurementAdjustmentsTypesById Put AdjustmentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutProcurementAdjustmentsTypesByIdRequest
*/
func (a *AdjustmentTypesAPIService) PutProcurementAdjustmentsTypesById(ctx context.Context, id int32) ApiPutProcurementAdjustmentsTypesByIdRequest {
	return ApiPutProcurementAdjustmentsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AdjustmentType
func (a *AdjustmentTypesAPIService) PutProcurementAdjustmentsTypesByIdExecute(r ApiPutProcurementAdjustmentsTypesByIdRequest) (*AdjustmentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdjustmentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentTypesAPIService.PutProcurementAdjustmentsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.adjustmentType == nil {
		return localVarReturnValue, nil, reportError("adjustmentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.adjustmentType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
