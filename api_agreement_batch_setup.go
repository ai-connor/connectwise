/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementBatchSetupAPIService AgreementBatchSetupAPI service
type AgreementBatchSetupAPIService service

type ApiGetFinanceBatchSetupsRequest struct {
	ctx context.Context
	ApiService *AgreementBatchSetupAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBatchSetupsRequest) ClientId(clientId string) ApiGetFinanceBatchSetupsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) Conditions(conditions string) ApiGetFinanceBatchSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) ChildConditions(childConditions string) ApiGetFinanceBatchSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBatchSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) OrderBy(orderBy string) ApiGetFinanceBatchSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) Fields(fields string) ApiGetFinanceBatchSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) Page(page int32) ApiGetFinanceBatchSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) PageSize(pageSize int32) ApiGetFinanceBatchSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBatchSetupsRequest) PageId(pageId int32) ApiGetFinanceBatchSetupsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBatchSetupsRequest) Execute() ([]AgreementBatchSetup, *http.Response, error) {
	return r.ApiService.GetFinanceBatchSetupsExecute(r)
}

/*
GetFinanceBatchSetups Get List of AgreementBatchSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBatchSetupsRequest
*/
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetups(ctx context.Context) ApiGetFinanceBatchSetupsRequest {
	return ApiGetFinanceBatchSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AgreementBatchSetup
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetupsExecute(r ApiGetFinanceBatchSetupsRequest) ([]AgreementBatchSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AgreementBatchSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBatchSetupAPIService.GetFinanceBatchSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/batchSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBatchSetupsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBatchSetupAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) ClientId(clientId string) ApiGetFinanceBatchSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) Conditions(conditions string) ApiGetFinanceBatchSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBatchSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBatchSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) OrderBy(orderBy string) ApiGetFinanceBatchSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) Fields(fields string) ApiGetFinanceBatchSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) Page(page int32) ApiGetFinanceBatchSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) PageSize(pageSize int32) ApiGetFinanceBatchSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBatchSetupsByIdRequest) PageId(pageId int32) ApiGetFinanceBatchSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBatchSetupsByIdRequest) Execute() (*AgreementBatchSetup, *http.Response, error) {
	return r.ApiService.GetFinanceBatchSetupsByIdExecute(r)
}

/*
GetFinanceBatchSetupsById Get AgreementBatchSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batchSetupId
 @return ApiGetFinanceBatchSetupsByIdRequest
*/
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetupsById(ctx context.Context, id int32) ApiGetFinanceBatchSetupsByIdRequest {
	return ApiGetFinanceBatchSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AgreementBatchSetup
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetupsByIdExecute(r ApiGetFinanceBatchSetupsByIdRequest) (*AgreementBatchSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementBatchSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBatchSetupAPIService.GetFinanceBatchSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/batchSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBatchSetupsCountRequest struct {
	ctx context.Context
	ApiService *AgreementBatchSetupAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) ClientId(clientId string) ApiGetFinanceBatchSetupsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) Conditions(conditions string) ApiGetFinanceBatchSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) ChildConditions(childConditions string) ApiGetFinanceBatchSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBatchSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) OrderBy(orderBy string) ApiGetFinanceBatchSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) Fields(fields string) ApiGetFinanceBatchSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) Page(page int32) ApiGetFinanceBatchSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) PageSize(pageSize int32) ApiGetFinanceBatchSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBatchSetupsCountRequest) PageId(pageId int32) ApiGetFinanceBatchSetupsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBatchSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBatchSetupsCountExecute(r)
}

/*
GetFinanceBatchSetupsCount Get Count of AgreementBatchSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBatchSetupsCountRequest
*/
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetupsCount(ctx context.Context) ApiGetFinanceBatchSetupsCountRequest {
	return ApiGetFinanceBatchSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementBatchSetupAPIService) GetFinanceBatchSetupsCountExecute(r ApiGetFinanceBatchSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBatchSetupAPIService.GetFinanceBatchSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/batchSetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBatchSetupsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBatchSetupAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceBatchSetupsByIdRequest) ClientId(clientId string) ApiPatchFinanceBatchSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceBatchSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBatchSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceBatchSetupsByIdRequest) Execute() (*AgreementBatchSetup, *http.Response, error) {
	return r.ApiService.PatchFinanceBatchSetupsByIdExecute(r)
}

/*
PatchFinanceBatchSetupsById Patch AgreementBatchSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batchSetupId
 @return ApiPatchFinanceBatchSetupsByIdRequest
*/
func (a *AgreementBatchSetupAPIService) PatchFinanceBatchSetupsById(ctx context.Context, id int32) ApiPatchFinanceBatchSetupsByIdRequest {
	return ApiPatchFinanceBatchSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AgreementBatchSetup
func (a *AgreementBatchSetupAPIService) PatchFinanceBatchSetupsByIdExecute(r ApiPatchFinanceBatchSetupsByIdRequest) (*AgreementBatchSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementBatchSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBatchSetupAPIService.PatchFinanceBatchSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/batchSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBatchSetupsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBatchSetupAPIService
	id int32
	clientId *string
	agreementBatchSetup *AgreementBatchSetup
}

// 
func (r ApiPutFinanceBatchSetupsByIdRequest) ClientId(clientId string) ApiPutFinanceBatchSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// batchSetup
func (r ApiPutFinanceBatchSetupsByIdRequest) AgreementBatchSetup(agreementBatchSetup AgreementBatchSetup) ApiPutFinanceBatchSetupsByIdRequest {
	r.agreementBatchSetup = &agreementBatchSetup
	return r
}

func (r ApiPutFinanceBatchSetupsByIdRequest) Execute() (*AgreementBatchSetup, *http.Response, error) {
	return r.ApiService.PutFinanceBatchSetupsByIdExecute(r)
}

/*
PutFinanceBatchSetupsById Put AgreementBatchSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id batchSetupId
 @return ApiPutFinanceBatchSetupsByIdRequest
*/
func (a *AgreementBatchSetupAPIService) PutFinanceBatchSetupsById(ctx context.Context, id int32) ApiPutFinanceBatchSetupsByIdRequest {
	return ApiPutFinanceBatchSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AgreementBatchSetup
func (a *AgreementBatchSetupAPIService) PutFinanceBatchSetupsByIdExecute(r ApiPutFinanceBatchSetupsByIdRequest) (*AgreementBatchSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementBatchSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBatchSetupAPIService.PutFinanceBatchSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/batchSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementBatchSetup == nil {
		return localVarReturnValue, nil, reportError("agreementBatchSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementBatchSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
