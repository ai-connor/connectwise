/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementBoardDefaultsAPIService AgreementBoardDefaultsAPI service
type AgreementBoardDefaultsAPIService service

type ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r)
}

/*
DeleteFinanceAgreementsByParentIdBoardDefaultsById Delete BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementId
 @return ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementBoardDefaultsAPIService) DeleteFinanceAgreementsByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	return ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *AgreementBoardDefaultsAPIService) DeleteFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r ApiDeleteFinanceAgreementsByParentIdBoardDefaultsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.DeleteFinanceAgreementsByParentIdBoardDefaultsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) Execute() ([]BoardDefault, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdBoardDefaultsExecute(r)
}

/*
GetFinanceAgreementsByParentIdBoardDefaults Get List of BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest
*/
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaults(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest {
	return ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardDefault
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaultsExecute(r ApiGetFinanceAgreementsByParentIdBoardDefaultsRequest) ([]BoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.GetFinanceAgreementsByParentIdBoardDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Execute() (*BoardDefault, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r)
}

/*
GetFinanceAgreementsByParentIdBoardDefaultsById Get BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	return ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardDefault
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r ApiGetFinanceAgreementsByParentIdBoardDefaultsByIdRequest) (*BoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.GetFinanceAgreementsByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdBoardDefaultsCountExecute(r)
}

/*
GetFinanceAgreementsByParentIdBoardDefaultsCount Get Count of BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest
*/
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaultsCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest {
	return ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementBoardDefaultsAPIService) GetFinanceAgreementsByParentIdBoardDefaultsCountExecute(r ApiGetFinanceAgreementsByParentIdBoardDefaultsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.GetFinanceAgreementsByParentIdBoardDefaultsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Execute() (*BoardDefault, *http.Response, error) {
	return r.ApiService.PatchFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r)
}

/*
PatchFinanceAgreementsByParentIdBoardDefaultsById Patch BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementId
 @return ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementBoardDefaultsAPIService) PatchFinanceAgreementsByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	return ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardDefault
func (a *AgreementBoardDefaultsAPIService) PatchFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r ApiPatchFinanceAgreementsByParentIdBoardDefaultsByIdRequest) (*BoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.PatchFinanceAgreementsByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	parentId int32
	boardDefault *BoardDefault
	clientId *string
}

// boardDefault
func (r ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest) BoardDefault(boardDefault BoardDefault) ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.boardDefault = &boardDefault
	return r
}

// 
func (r ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest) ClientId(clientId string) ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest) Execute() (*BoardDefault, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsByParentIdBoardDefaultsExecute(r)
}

/*
PostFinanceAgreementsByParentIdBoardDefaults Post BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest
*/
func (a *AgreementBoardDefaultsAPIService) PostFinanceAgreementsByParentIdBoardDefaults(ctx context.Context, parentId int32) ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest {
	return ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardDefault
func (a *AgreementBoardDefaultsAPIService) PostFinanceAgreementsByParentIdBoardDefaultsExecute(r ApiPostFinanceAgreementsByParentIdBoardDefaultsRequest) (*BoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.PostFinanceAgreementsByParentIdBoardDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardDefault == nil {
		return localVarReturnValue, nil, reportError("boardDefault is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardDefault
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementBoardDefaultsAPIService
	id int32
	parentId int32
	boardDefault *BoardDefault
	clientId *string
}

// boardDefault
func (r ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest) BoardDefault(boardDefault BoardDefault) ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.boardDefault = &boardDefault
	return r
}

// 
func (r ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest) Execute() (*BoardDefault, *http.Response, error) {
	return r.ApiService.PutFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r)
}

/*
PutFinanceAgreementsByParentIdBoardDefaultsById Put BoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementId
 @return ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementBoardDefaultsAPIService) PutFinanceAgreementsByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest {
	return ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardDefault
func (a *AgreementBoardDefaultsAPIService) PutFinanceAgreementsByParentIdBoardDefaultsByIdExecute(r ApiPutFinanceAgreementsByParentIdBoardDefaultsByIdRequest) (*BoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementBoardDefaultsAPIService.PutFinanceAgreementsByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardDefault == nil {
		return localVarReturnValue, nil, reportError("boardDefault is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardDefault
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
