/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementTypeBoardDefaultsAPIService AgreementTypeBoardDefaultsAPI service
type AgreementTypeBoardDefaultsAPIService service

type ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r)
}

/*
DeleteFinanceAgreementTypesByParentIdBoardDefaultsById Delete AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementTypeId
 @return ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) DeleteFinanceAgreementTypesByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	return ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *AgreementTypeBoardDefaultsAPIService) DeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r ApiDeleteFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.DeleteFinanceAgreementTypesByParentIdBoardDefaultsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) Execute() ([]AgreementTypeBoardDefault, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdBoardDefaultsExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdBoardDefaults Get List of AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaults(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []AgreementTypeBoardDefault
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaultsExecute(r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsRequest) ([]AgreementTypeBoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AgreementTypeBoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.GetFinanceAgreementTypesByParentIdBoardDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Execute() (*AgreementTypeBoardDefault, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdBoardDefaultsById Get AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeBoardDefault
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) (*AgreementTypeBoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeBoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.GetFinanceAgreementTypesByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdBoardDefaultsCountExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdBoardDefaultsCount Get Count of AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaultsCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest {
	return ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementTypeBoardDefaultsAPIService) GetFinanceAgreementTypesByParentIdBoardDefaultsCountExecute(r ApiGetFinanceAgreementTypesByParentIdBoardDefaultsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.GetFinanceAgreementTypesByParentIdBoardDefaultsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Execute() (*AgreementTypeBoardDefault, *http.Response, error) {
	return r.ApiService.PatchFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r)
}

/*
PatchFinanceAgreementTypesByParentIdBoardDefaultsById Patch AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementTypeId
 @return ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) PatchFinanceAgreementTypesByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	return ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeBoardDefault
func (a *AgreementTypeBoardDefaultsAPIService) PatchFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r ApiPatchFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) (*AgreementTypeBoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeBoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.PatchFinanceAgreementTypesByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	parentId int32
	clientId *string
	agreementTypeBoardDefault *AgreementTypeBoardDefault
}

// 
func (r ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest) ClientId(clientId string) ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.clientId = &clientId
	return r
}

// boardDefault
func (r ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest) AgreementTypeBoardDefault(agreementTypeBoardDefault AgreementTypeBoardDefault) ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	r.agreementTypeBoardDefault = &agreementTypeBoardDefault
	return r
}

func (r ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest) Execute() (*AgreementTypeBoardDefault, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementTypesByParentIdBoardDefaultsExecute(r)
}

/*
PostFinanceAgreementTypesByParentIdBoardDefaults Post AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) PostFinanceAgreementTypesByParentIdBoardDefaults(ctx context.Context, parentId int32) ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest {
	return ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeBoardDefault
func (a *AgreementTypeBoardDefaultsAPIService) PostFinanceAgreementTypesByParentIdBoardDefaultsExecute(r ApiPostFinanceAgreementTypesByParentIdBoardDefaultsRequest) (*AgreementTypeBoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeBoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.PostFinanceAgreementTypesByParentIdBoardDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeBoardDefault == nil {
		return localVarReturnValue, nil, reportError("agreementTypeBoardDefault is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeBoardDefault
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeBoardDefaultsAPIService
	id int32
	parentId int32
	clientId *string
	agreementTypeBoardDefault *AgreementTypeBoardDefault
}

// 
func (r ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) ClientId(clientId string) ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.clientId = &clientId
	return r
}

// boardDefault
func (r ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) AgreementTypeBoardDefault(agreementTypeBoardDefault AgreementTypeBoardDefault) ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	r.agreementTypeBoardDefault = &agreementTypeBoardDefault
	return r
}

func (r ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) Execute() (*AgreementTypeBoardDefault, *http.Response, error) {
	return r.ApiService.PutFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r)
}

/*
PutFinanceAgreementTypesByParentIdBoardDefaultsById Put AgreementTypeBoardDefault

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardDefaultId
 @param parentId agreementTypeId
 @return ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest
*/
func (a *AgreementTypeBoardDefaultsAPIService) PutFinanceAgreementTypesByParentIdBoardDefaultsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest {
	return ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeBoardDefault
func (a *AgreementTypeBoardDefaultsAPIService) PutFinanceAgreementTypesByParentIdBoardDefaultsByIdExecute(r ApiPutFinanceAgreementTypesByParentIdBoardDefaultsByIdRequest) (*AgreementTypeBoardDefault, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeBoardDefault
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeBoardDefaultsAPIService.PutFinanceAgreementTypesByParentIdBoardDefaultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/boardDefaults/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeBoardDefault == nil {
		return localVarReturnValue, nil, reportError("agreementTypeBoardDefault is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeBoardDefault
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
