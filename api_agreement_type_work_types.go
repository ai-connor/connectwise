/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementTypeWorkTypesAPIService AgreementTypeWorkTypesAPI service
type AgreementTypeWorkTypesAPIService service

type ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementTypesByParentIdWorktypesByIdExecute(r)
}

/*
DeleteFinanceAgreementTypesByParentIdWorktypesById Delete AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id worktypeId
 @param parentId agreementTypeId
 @return ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest
*/
func (a *AgreementTypeWorkTypesAPIService) DeleteFinanceAgreementTypesByParentIdWorktypesById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	return ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *AgreementTypeWorkTypesAPIService) DeleteFinanceAgreementTypesByParentIdWorktypesByIdExecute(r ApiDeleteFinanceAgreementTypesByParentIdWorktypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.DeleteFinanceAgreementTypesByParentIdWorktypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorktypesRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) Execute() ([]AgreementTypeWorkType, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorktypesExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorktypes Get List of AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdWorktypesRequest
*/
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypes(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorktypesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []AgreementTypeWorkType
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypesExecute(r ApiGetFinanceAgreementTypesByParentIdWorktypesRequest) ([]AgreementTypeWorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AgreementTypeWorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.GetFinanceAgreementTypesByParentIdWorktypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) Execute() (*AgreementTypeWorkType, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorktypesByIdExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorktypesById Get AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id worktypeId
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest
*/
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypesById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeWorkType
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypesByIdExecute(r ApiGetFinanceAgreementTypesByParentIdWorktypesByIdRequest) (*AgreementTypeWorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeWorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.GetFinanceAgreementTypesByParentIdWorktypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorktypesCountExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorktypesCount Get Count of AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest
*/
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypesCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementTypeWorkTypesAPIService) GetFinanceAgreementTypesByParentIdWorktypesCountExecute(r ApiGetFinanceAgreementTypesByParentIdWorktypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.GetFinanceAgreementTypesByParentIdWorktypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest) ClientId(clientId string) ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest) Execute() (*AgreementTypeWorkType, *http.Response, error) {
	return r.ApiService.PatchFinanceAgreementTypesByParentIdWorktypesByIdExecute(r)
}

/*
PatchFinanceAgreementTypesByParentIdWorktypesById Patch AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id worktypeId
 @param parentId agreementTypeId
 @return ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest
*/
func (a *AgreementTypeWorkTypesAPIService) PatchFinanceAgreementTypesByParentIdWorktypesById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	return ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeWorkType
func (a *AgreementTypeWorkTypesAPIService) PatchFinanceAgreementTypesByParentIdWorktypesByIdExecute(r ApiPatchFinanceAgreementTypesByParentIdWorktypesByIdRequest) (*AgreementTypeWorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeWorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.PatchFinanceAgreementTypesByParentIdWorktypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementTypesByParentIdWorktypesRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	parentId int32
	clientId *string
	agreementTypeWorkType *AgreementTypeWorkType
}

// 
func (r ApiPostFinanceAgreementTypesByParentIdWorktypesRequest) ClientId(clientId string) ApiPostFinanceAgreementTypesByParentIdWorktypesRequest {
	r.clientId = &clientId
	return r
}

// workType
func (r ApiPostFinanceAgreementTypesByParentIdWorktypesRequest) AgreementTypeWorkType(agreementTypeWorkType AgreementTypeWorkType) ApiPostFinanceAgreementTypesByParentIdWorktypesRequest {
	r.agreementTypeWorkType = &agreementTypeWorkType
	return r
}

func (r ApiPostFinanceAgreementTypesByParentIdWorktypesRequest) Execute() (*AgreementTypeWorkType, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementTypesByParentIdWorktypesExecute(r)
}

/*
PostFinanceAgreementTypesByParentIdWorktypes Post AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementTypeId
 @return ApiPostFinanceAgreementTypesByParentIdWorktypesRequest
*/
func (a *AgreementTypeWorkTypesAPIService) PostFinanceAgreementTypesByParentIdWorktypes(ctx context.Context, parentId int32) ApiPostFinanceAgreementTypesByParentIdWorktypesRequest {
	return ApiPostFinanceAgreementTypesByParentIdWorktypesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeWorkType
func (a *AgreementTypeWorkTypesAPIService) PostFinanceAgreementTypesByParentIdWorktypesExecute(r ApiPostFinanceAgreementTypesByParentIdWorktypesRequest) (*AgreementTypeWorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeWorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.PostFinanceAgreementTypesByParentIdWorktypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeWorkType == nil {
		return localVarReturnValue, nil, reportError("agreementTypeWorkType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeWorkType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest struct {
	ctx context.Context
	ApiService *AgreementTypeWorkTypesAPIService
	id int32
	parentId int32
	clientId *string
	agreementTypeWorkType *AgreementTypeWorkType
}

// 
func (r ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest) ClientId(clientId string) ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.clientId = &clientId
	return r
}

// workType
func (r ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest) AgreementTypeWorkType(agreementTypeWorkType AgreementTypeWorkType) ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	r.agreementTypeWorkType = &agreementTypeWorkType
	return r
}

func (r ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest) Execute() (*AgreementTypeWorkType, *http.Response, error) {
	return r.ApiService.PutFinanceAgreementTypesByParentIdWorktypesByIdExecute(r)
}

/*
PutFinanceAgreementTypesByParentIdWorktypesById Put AgreementTypeWorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id worktypeId
 @param parentId agreementTypeId
 @return ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest
*/
func (a *AgreementTypeWorkTypesAPIService) PutFinanceAgreementTypesByParentIdWorktypesById(ctx context.Context, id int32, parentId int32) ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest {
	return ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementTypeWorkType
func (a *AgreementTypeWorkTypesAPIService) PutFinanceAgreementTypesByParentIdWorktypesByIdExecute(r ApiPutFinanceAgreementTypesByParentIdWorktypesByIdRequest) (*AgreementTypeWorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementTypeWorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypesAPIService.PutFinanceAgreementTypesByParentIdWorktypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/worktypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeWorkType == nil {
		return localVarReturnValue, nil, reportError("agreementTypeWorkType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeWorkType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
