/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementWorkTypeExclusionsAPIService AgreementWorkTypeExclusionsAPI service
type AgreementWorkTypeExclusionsAPIService service

type ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementWorkTypeExclusionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdExecute(r)
}

/*
DeleteFinanceAgreementsByParentIdWorkTypeExclusionsById Delete AgreementWorkTypeExclusion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeExclusionId
 @param parentId agreementId
 @return ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest
*/
func (a *AgreementWorkTypeExclusionsAPIService) DeleteFinanceAgreementsByParentIdWorkTypeExclusionsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest {
	return ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *AgreementWorkTypeExclusionsAPIService) DeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdExecute(r ApiDeleteFinanceAgreementsByParentIdWorkTypeExclusionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementWorkTypeExclusionsAPIService.DeleteFinanceAgreementsByParentIdWorkTypeExclusionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/workTypeExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest struct {
	ctx context.Context
	ApiService *AgreementWorkTypeExclusionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) Execute() ([]AgreementWorkTypeExclusion, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdWorkTypeExclusionsExecute(r)
}

/*
GetFinanceAgreementsByParentIdWorkTypeExclusions Get List of AgreementWorkTypeExclusion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest
*/
func (a *AgreementWorkTypeExclusionsAPIService) GetFinanceAgreementsByParentIdWorkTypeExclusions(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	return ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []AgreementWorkTypeExclusion
func (a *AgreementWorkTypeExclusionsAPIService) GetFinanceAgreementsByParentIdWorkTypeExclusionsExecute(r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsRequest) ([]AgreementWorkTypeExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AgreementWorkTypeExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementWorkTypeExclusionsAPIService.GetFinanceAgreementsByParentIdWorkTypeExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/workTypeExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest struct {
	ctx context.Context
	ApiService *AgreementWorkTypeExclusionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdWorkTypeExclusionsCountExecute(r)
}

/*
GetFinanceAgreementsByParentIdWorkTypeExclusionsCount Get Count of AgreementWorkTypeExclusion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest
*/
func (a *AgreementWorkTypeExclusionsAPIService) GetFinanceAgreementsByParentIdWorkTypeExclusionsCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest {
	return ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementWorkTypeExclusionsAPIService) GetFinanceAgreementsByParentIdWorkTypeExclusionsCountExecute(r ApiGetFinanceAgreementsByParentIdWorkTypeExclusionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementWorkTypeExclusionsAPIService.GetFinanceAgreementsByParentIdWorkTypeExclusionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/workTypeExclusions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest struct {
	ctx context.Context
	ApiService *AgreementWorkTypeExclusionsAPIService
	parentId int32
	agreementWorkTypeExclusion *AgreementWorkTypeExclusion
	clientId *string
}

// workTypeExclusion
func (r ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest) AgreementWorkTypeExclusion(agreementWorkTypeExclusion AgreementWorkTypeExclusion) ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.agreementWorkTypeExclusion = &agreementWorkTypeExclusion
	return r
}

// 
func (r ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest) ClientId(clientId string) ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest) Execute() (*AgreementWorkTypeExclusion, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsByParentIdWorkTypeExclusionsExecute(r)
}

/*
PostFinanceAgreementsByParentIdWorkTypeExclusions Post AgreementWorkTypeExclusion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest
*/
func (a *AgreementWorkTypeExclusionsAPIService) PostFinanceAgreementsByParentIdWorkTypeExclusions(ctx context.Context, parentId int32) ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest {
	return ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return AgreementWorkTypeExclusion
func (a *AgreementWorkTypeExclusionsAPIService) PostFinanceAgreementsByParentIdWorkTypeExclusionsExecute(r ApiPostFinanceAgreementsByParentIdWorkTypeExclusionsRequest) (*AgreementWorkTypeExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementWorkTypeExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementWorkTypeExclusionsAPIService.PostFinanceAgreementsByParentIdWorkTypeExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/workTypeExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agreementWorkTypeExclusion == nil {
		return localVarReturnValue, nil, reportError("agreementWorkTypeExclusion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.agreementWorkTypeExclusion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
