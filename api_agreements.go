/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AgreementsAPIService AgreementsAPI service
type AgreementsAPIService service

type ApiDeleteFinanceAgreementsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementsByIdExecute(r)
}

/*
DeleteFinanceAgreementsById Delete Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementId
 @return ApiDeleteFinanceAgreementsByIdRequest
*/
func (a *AgreementsAPIService) DeleteFinanceAgreementsById(ctx context.Context, id int32) ApiDeleteFinanceAgreementsByIdRequest {
	return ApiDeleteFinanceAgreementsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AgreementsAPIService) DeleteFinanceAgreementsByIdExecute(r ApiDeleteFinanceAgreementsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.DeleteFinanceAgreementsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementsByParentIdConfigurationsByIdExecute(r)
}

/*
DeleteFinanceAgreementsByParentIdConfigurationsById Delete ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id configurationId
 @param parentId agreementId
 @return ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest
*/
func (a *AgreementsAPIService) DeleteFinanceAgreementsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest {
	return ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *AgreementsAPIService) DeleteFinanceAgreementsByParentIdConfigurationsByIdExecute(r ApiDeleteFinanceAgreementsByParentIdConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.DeleteFinanceAgreementsByParentIdConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsRequest) Conditions(conditions string) ApiGetFinanceAgreementsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) Fields(fields string) ApiGetFinanceAgreementsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) Page(page int32) ApiGetFinanceAgreementsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) PageId(pageId int32) ApiGetFinanceAgreementsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsRequest) ClientId(clientId string) ApiGetFinanceAgreementsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsRequest) Execute() ([]Agreement, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsExecute(r)
}

/*
GetFinanceAgreements Get List of Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAgreementsRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreements(ctx context.Context) ApiGetFinanceAgreementsRequest {
	return ApiGetFinanceAgreementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Agreement
func (a *AgreementsAPIService) GetFinanceAgreementsExecute(r ApiGetFinanceAgreementsRequest) ([]Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) Fields(fields string) ApiGetFinanceAgreementsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) Page(page int32) ApiGetFinanceAgreementsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByIdRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByIdExecute(r)
}

/*
GetFinanceAgreementsById Get Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementId
 @return ApiGetFinanceAgreementsByIdRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsById(ctx context.Context, id int32) ApiGetFinanceAgreementsByIdRequest {
	return ApiGetFinanceAgreementsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Agreement
func (a *AgreementsAPIService) GetFinanceAgreementsByIdExecute(r ApiGetFinanceAgreementsByIdRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	podId string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) Conditions(conditions string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) Fields(fields string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) Page(page int32) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) PageId(pageId int32) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) ClientId(clientId string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) Execute() (*AgreementApplicationParameters, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByIdApplicationParametersByPodIdExecute(r)
}

/*
GetFinanceAgreementsByIdApplicationParametersByPodId Get AgreementApplicationParameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementHeaderId
 @param podId podId
 @return ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByIdApplicationParametersByPodId(ctx context.Context, id int32, podId string) ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest {
	return ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		podId: podId,
	}
}

// Execute executes the request
//  @return AgreementApplicationParameters
func (a *AgreementsAPIService) GetFinanceAgreementsByIdApplicationParametersByPodIdExecute(r ApiGetFinanceAgreementsByIdApplicationParametersByPodIdRequest) (*AgreementApplicationParameters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementApplicationParameters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByIdApplicationParametersByPodId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}/applicationParameters/{podId}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podId"+"}", url.PathEscape(parameterValueToString(r.podId, "podId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByIdQuickAccessCountRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) Conditions(conditions string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) Fields(fields string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) Page(page int32) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) PageId(pageId int32) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) ClientId(clientId string) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByIdQuickAccessCountExecute(r)
}

/*
GetFinanceAgreementsByIdQuickAccessCount Get Agreement Tab Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementHeaderId
 @return ApiGetFinanceAgreementsByIdQuickAccessCountRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByIdQuickAccessCount(ctx context.Context, id int32) ApiGetFinanceAgreementsByIdQuickAccessCountRequest {
	return ApiGetFinanceAgreementsByIdQuickAccessCountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *AgreementsAPIService) GetFinanceAgreementsByIdQuickAccessCountExecute(r ApiGetFinanceAgreementsByIdQuickAccessCountRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByIdQuickAccessCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}/quickAccess/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	podId string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) Conditions(conditions string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) Fields(fields string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) Page(page int32) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) PageId(pageId int32) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) ClientId(clientId string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) Execute() (*AgreementRecurringParameters, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByIdRecurringParametersByPodIdExecute(r)
}

/*
GetFinanceAgreementsByIdRecurringParametersByPodId Get AgreementRecurringParameters

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementId
 @param podId podId
 @return ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByIdRecurringParametersByPodId(ctx context.Context, id int32, podId string) ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest {
	return ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		podId: podId,
	}
}

// Execute executes the request
//  @return AgreementRecurringParameters
func (a *AgreementsAPIService) GetFinanceAgreementsByIdRecurringParametersByPodIdExecute(r ApiGetFinanceAgreementsByIdRecurringParametersByPodIdRequest) (*AgreementRecurringParameters, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AgreementRecurringParameters
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByIdRecurringParametersByPodId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}/recurringParameters/{podId}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"podId"+"}", url.PathEscape(parameterValueToString(r.podId, "podId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdConfigurationsRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) Execute() ([]ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdConfigurationsExecute(r)
}

/*
GetFinanceAgreementsByParentIdConfigurations Get List of ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdConfigurationsRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurations(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdConfigurationsRequest {
	return ApiGetFinanceAgreementsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ConfigurationReference
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurationsExecute(r ApiGetFinanceAgreementsByParentIdConfigurationsRequest) ([]ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdConfigurationsByIdExecute(r)
}

/*
GetFinanceAgreementsByParentIdConfigurationsById Get ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id configurationId
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest {
	return ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationReference
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurationsByIdExecute(r ApiGetFinanceAgreementsByParentIdConfigurationsByIdRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByParentIdConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) Fields(fields string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) Page(page int32) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsByParentIdConfigurationsCountExecute(r)
}

/*
GetFinanceAgreementsByParentIdConfigurationsCount Get Count of ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurationsCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest {
	return ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementsAPIService) GetFinanceAgreementsByParentIdConfigurationsCountExecute(r ApiGetFinanceAgreementsByParentIdConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsByParentIdConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/configurations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementsCountRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceAgreementsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) Fields(fields string) ApiGetFinanceAgreementsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) Page(page int32) ApiGetFinanceAgreementsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceAgreementsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementsCountExecute(r)
}

/*
GetFinanceAgreementsCount Get Count of Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceAgreementsCountRequest
*/
func (a *AgreementsAPIService) GetFinanceAgreementsCount(ctx context.Context) ApiGetFinanceAgreementsCountRequest {
	return ApiGetFinanceAgreementsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AgreementsAPIService) GetFinanceAgreementsCountExecute(r ApiGetFinanceAgreementsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.GetFinanceAgreementsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceAgreementsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceAgreementsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceAgreementsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceAgreementsByIdRequest) ClientId(clientId string) ApiPatchFinanceAgreementsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceAgreementsByIdRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.PatchFinanceAgreementsByIdExecute(r)
}

/*
PatchFinanceAgreementsById Patch Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementId
 @return ApiPatchFinanceAgreementsByIdRequest
*/
func (a *AgreementsAPIService) PatchFinanceAgreementsById(ctx context.Context, id int32) ApiPatchFinanceAgreementsByIdRequest {
	return ApiPatchFinanceAgreementsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Agreement
func (a *AgreementsAPIService) PatchFinanceAgreementsByIdExecute(r ApiPatchFinanceAgreementsByIdRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PatchFinanceAgreementsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	agreement *Agreement
	clientId *string
}

// agreement
func (r ApiPostFinanceAgreementsRequest) Agreement(agreement Agreement) ApiPostFinanceAgreementsRequest {
	r.agreement = &agreement
	return r
}

// 
func (r ApiPostFinanceAgreementsRequest) ClientId(clientId string) ApiPostFinanceAgreementsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsExecute(r)
}

/*
PostFinanceAgreements Post Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceAgreementsRequest
*/
func (a *AgreementsAPIService) PostFinanceAgreements(ctx context.Context) ApiPostFinanceAgreementsRequest {
	return ApiPostFinanceAgreementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Agreement
func (a *AgreementsAPIService) PostFinanceAgreementsExecute(r ApiPostFinanceAgreementsRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PostFinanceAgreements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agreement == nil {
		return localVarReturnValue, nil, reportError("agreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.agreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsByIdInvoiceRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostFinanceAgreementsByIdInvoiceRequest) ClientId(clientId string) ApiPostFinanceAgreementsByIdInvoiceRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsByIdInvoiceRequest) Execute() (int32, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsByIdInvoiceExecute(r)
}

/*
PostFinanceAgreementsByIdInvoice Post AgreementInvoice

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id id
 @return ApiPostFinanceAgreementsByIdInvoiceRequest
*/
func (a *AgreementsAPIService) PostFinanceAgreementsByIdInvoice(ctx context.Context, id int32) ApiPostFinanceAgreementsByIdInvoiceRequest {
	return ApiPostFinanceAgreementsByIdInvoiceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return int32
func (a *AgreementsAPIService) PostFinanceAgreementsByIdInvoiceExecute(r ApiPostFinanceAgreementsByIdInvoiceRequest) (int32, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PostFinanceAgreementsByIdInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}/invoice"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsByParentIdConfigurationsRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	parentId int32
	configurationReference *ConfigurationReference
	clientId *string
}

// configuration
func (r ApiPostFinanceAgreementsByParentIdConfigurationsRequest) ConfigurationReference(configurationReference ConfigurationReference) ApiPostFinanceAgreementsByParentIdConfigurationsRequest {
	r.configurationReference = &configurationReference
	return r
}

// 
func (r ApiPostFinanceAgreementsByParentIdConfigurationsRequest) ClientId(clientId string) ApiPostFinanceAgreementsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsByParentIdConfigurationsRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsByParentIdConfigurationsExecute(r)
}

/*
PostFinanceAgreementsByParentIdConfigurations Post ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiPostFinanceAgreementsByParentIdConfigurationsRequest
*/
func (a *AgreementsAPIService) PostFinanceAgreementsByParentIdConfigurations(ctx context.Context, parentId int32) ApiPostFinanceAgreementsByParentIdConfigurationsRequest {
	return ApiPostFinanceAgreementsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationReference
func (a *AgreementsAPIService) PostFinanceAgreementsByParentIdConfigurationsExecute(r ApiPostFinanceAgreementsByParentIdConfigurationsRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PostFinanceAgreementsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationReference == nil {
		return localVarReturnValue, nil, reportError("configurationReference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementsByParentIdCopyRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	parentId int32
	clientId *string
}

// 
func (r ApiPostFinanceAgreementsByParentIdCopyRequest) ClientId(clientId string) ApiPostFinanceAgreementsByParentIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceAgreementsByParentIdCopyRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementsByParentIdCopyExecute(r)
}

/*
PostFinanceAgreementsByParentIdCopy Post CopyAgreementAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId agreementId
 @return ApiPostFinanceAgreementsByParentIdCopyRequest
*/
func (a *AgreementsAPIService) PostFinanceAgreementsByParentIdCopy(ctx context.Context, parentId int32) ApiPostFinanceAgreementsByParentIdCopyRequest {
	return ApiPostFinanceAgreementsByParentIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Agreement
func (a *AgreementsAPIService) PostFinanceAgreementsByParentIdCopyExecute(r ApiPostFinanceAgreementsByParentIdCopyRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PostFinanceAgreementsByParentIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{parentId}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceAgreementsByIdRequest struct {
	ctx context.Context
	ApiService *AgreementsAPIService
	id int32
	agreement *Agreement
	clientId *string
}

// agreement
func (r ApiPutFinanceAgreementsByIdRequest) Agreement(agreement Agreement) ApiPutFinanceAgreementsByIdRequest {
	r.agreement = &agreement
	return r
}

// 
func (r ApiPutFinanceAgreementsByIdRequest) ClientId(clientId string) ApiPutFinanceAgreementsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceAgreementsByIdRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.PutFinanceAgreementsByIdExecute(r)
}

/*
PutFinanceAgreementsById Put Agreement

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id agreementId
 @return ApiPutFinanceAgreementsByIdRequest
*/
func (a *AgreementsAPIService) PutFinanceAgreementsById(ctx context.Context, id int32) ApiPutFinanceAgreementsByIdRequest {
	return ApiPutFinanceAgreementsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Agreement
func (a *AgreementsAPIService) PutFinanceAgreementsByIdExecute(r ApiPutFinanceAgreementsByIdRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAPIService.PutFinanceAgreementsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreements/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agreement == nil {
		return localVarReturnValue, nil, reportError("agreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.agreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
