/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AllowedFileTypeAPIService AllowedFileTypeAPI service
type AllowedFileTypeAPIService service

type ApiDeleteSystemAllowedfiletypesByIdRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemAllowedfiletypesByIdRequest) ClientId(clientId string) ApiDeleteSystemAllowedfiletypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemAllowedfiletypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemAllowedfiletypesByIdExecute(r)
}

/*
DeleteSystemAllowedfiletypesById Delete AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedfiletypeId
 @return ApiDeleteSystemAllowedfiletypesByIdRequest
*/
func (a *AllowedFileTypeAPIService) DeleteSystemAllowedfiletypesById(ctx context.Context, id int32) ApiDeleteSystemAllowedfiletypesByIdRequest {
	return ApiDeleteSystemAllowedfiletypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AllowedFileTypeAPIService) DeleteSystemAllowedfiletypesByIdExecute(r ApiDeleteSystemAllowedfiletypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.DeleteSystemAllowedfiletypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemAllowedfiletypesRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) ClientId(clientId string) ApiGetSystemAllowedfiletypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) Conditions(conditions string) ApiGetSystemAllowedfiletypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) ChildConditions(childConditions string) ApiGetSystemAllowedfiletypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedfiletypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) OrderBy(orderBy string) ApiGetSystemAllowedfiletypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) Fields(fields string) ApiGetSystemAllowedfiletypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) Page(page int32) ApiGetSystemAllowedfiletypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) PageSize(pageSize int32) ApiGetSystemAllowedfiletypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesRequest) PageId(pageId int32) ApiGetSystemAllowedfiletypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedfiletypesRequest) Execute() ([]AllowedFileType, *http.Response, error) {
	return r.ApiService.GetSystemAllowedfiletypesExecute(r)
}

/*
GetSystemAllowedfiletypes Get List of AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAllowedfiletypesRequest
*/
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypes(ctx context.Context) ApiGetSystemAllowedfiletypesRequest {
	return ApiGetSystemAllowedfiletypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AllowedFileType
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypesExecute(r ApiGetSystemAllowedfiletypesRequest) ([]AllowedFileType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AllowedFileType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.GetSystemAllowedfiletypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAllowedfiletypesByIdRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) ClientId(clientId string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) Conditions(conditions string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) ChildConditions(childConditions string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) OrderBy(orderBy string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) Fields(fields string) ApiGetSystemAllowedfiletypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) Page(page int32) ApiGetSystemAllowedfiletypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) PageSize(pageSize int32) ApiGetSystemAllowedfiletypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesByIdRequest) PageId(pageId int32) ApiGetSystemAllowedfiletypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedfiletypesByIdRequest) Execute() (*AllowedFileType, *http.Response, error) {
	return r.ApiService.GetSystemAllowedfiletypesByIdExecute(r)
}

/*
GetSystemAllowedfiletypesById Get AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedfiletypeId
 @return ApiGetSystemAllowedfiletypesByIdRequest
*/
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypesById(ctx context.Context, id int32) ApiGetSystemAllowedfiletypesByIdRequest {
	return ApiGetSystemAllowedfiletypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedFileType
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypesByIdExecute(r ApiGetSystemAllowedfiletypesByIdRequest) (*AllowedFileType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedFileType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.GetSystemAllowedfiletypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAllowedfiletypesCountRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) ClientId(clientId string) ApiGetSystemAllowedfiletypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) Conditions(conditions string) ApiGetSystemAllowedfiletypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) ChildConditions(childConditions string) ApiGetSystemAllowedfiletypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedfiletypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) OrderBy(orderBy string) ApiGetSystemAllowedfiletypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) Fields(fields string) ApiGetSystemAllowedfiletypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) Page(page int32) ApiGetSystemAllowedfiletypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) PageSize(pageSize int32) ApiGetSystemAllowedfiletypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedfiletypesCountRequest) PageId(pageId int32) ApiGetSystemAllowedfiletypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedfiletypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemAllowedfiletypesCountExecute(r)
}

/*
GetSystemAllowedfiletypesCount Get Count of AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAllowedfiletypesCountRequest
*/
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypesCount(ctx context.Context) ApiGetSystemAllowedfiletypesCountRequest {
	return ApiGetSystemAllowedfiletypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AllowedFileTypeAPIService) GetSystemAllowedfiletypesCountExecute(r ApiGetSystemAllowedfiletypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.GetSystemAllowedfiletypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemAllowedfiletypesByIdRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemAllowedfiletypesByIdRequest) ClientId(clientId string) ApiPatchSystemAllowedfiletypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemAllowedfiletypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemAllowedfiletypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemAllowedfiletypesByIdRequest) Execute() (*AllowedFileType, *http.Response, error) {
	return r.ApiService.PatchSystemAllowedfiletypesByIdExecute(r)
}

/*
PatchSystemAllowedfiletypesById Patch AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedFileTypesId
 @return ApiPatchSystemAllowedfiletypesByIdRequest
*/
func (a *AllowedFileTypeAPIService) PatchSystemAllowedfiletypesById(ctx context.Context, id int32) ApiPatchSystemAllowedfiletypesByIdRequest {
	return ApiPatchSystemAllowedfiletypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedFileType
func (a *AllowedFileTypeAPIService) PatchSystemAllowedfiletypesByIdExecute(r ApiPatchSystemAllowedfiletypesByIdRequest) (*AllowedFileType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedFileType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.PatchSystemAllowedfiletypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemAllowedFileTypesRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	clientId *string
	allowedFileType *AllowedFileType
}

// 
func (r ApiPostSystemAllowedFileTypesRequest) ClientId(clientId string) ApiPostSystemAllowedFileTypesRequest {
	r.clientId = &clientId
	return r
}

// allowedFileType
func (r ApiPostSystemAllowedFileTypesRequest) AllowedFileType(allowedFileType AllowedFileType) ApiPostSystemAllowedFileTypesRequest {
	r.allowedFileType = &allowedFileType
	return r
}

func (r ApiPostSystemAllowedFileTypesRequest) Execute() (*AllowedFileType, *http.Response, error) {
	return r.ApiService.PostSystemAllowedFileTypesExecute(r)
}

/*
PostSystemAllowedFileTypes Post AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemAllowedFileTypesRequest
*/
func (a *AllowedFileTypeAPIService) PostSystemAllowedFileTypes(ctx context.Context) ApiPostSystemAllowedFileTypesRequest {
	return ApiPostSystemAllowedFileTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllowedFileType
func (a *AllowedFileTypeAPIService) PostSystemAllowedFileTypesExecute(r ApiPostSystemAllowedFileTypesRequest) (*AllowedFileType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedFileType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.PostSystemAllowedFileTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/AllowedFileTypes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.allowedFileType == nil {
		return localVarReturnValue, nil, reportError("allowedFileType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.allowedFileType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemAllowedfiletypesByIdRequest struct {
	ctx context.Context
	ApiService *AllowedFileTypeAPIService
	id int32
	clientId *string
	allowedFileType *AllowedFileType
}

// 
func (r ApiPutSystemAllowedfiletypesByIdRequest) ClientId(clientId string) ApiPutSystemAllowedfiletypesByIdRequest {
	r.clientId = &clientId
	return r
}

// AllowedFileType
func (r ApiPutSystemAllowedfiletypesByIdRequest) AllowedFileType(allowedFileType AllowedFileType) ApiPutSystemAllowedfiletypesByIdRequest {
	r.allowedFileType = &allowedFileType
	return r
}

func (r ApiPutSystemAllowedfiletypesByIdRequest) Execute() (*AllowedFileType, *http.Response, error) {
	return r.ApiService.PutSystemAllowedfiletypesByIdExecute(r)
}

/*
PutSystemAllowedfiletypesById Put AllowedFileType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedFileTypeId
 @return ApiPutSystemAllowedfiletypesByIdRequest
*/
func (a *AllowedFileTypeAPIService) PutSystemAllowedfiletypesById(ctx context.Context, id int32) ApiPutSystemAllowedfiletypesByIdRequest {
	return ApiPutSystemAllowedfiletypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedFileType
func (a *AllowedFileTypeAPIService) PutSystemAllowedfiletypesByIdExecute(r ApiPutSystemAllowedfiletypesByIdRequest) (*AllowedFileType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedFileType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedFileTypeAPIService.PutSystemAllowedfiletypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedfiletypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.allowedFileType == nil {
		return localVarReturnValue, nil, reportError("allowedFileType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.allowedFileType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
