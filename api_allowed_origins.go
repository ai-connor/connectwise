/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AllowedOriginsAPIService AllowedOriginsAPI service
type AllowedOriginsAPIService service

type ApiDeleteSystemAllowedoriginsByIdRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemAllowedoriginsByIdRequest) ClientId(clientId string) ApiDeleteSystemAllowedoriginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemAllowedoriginsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemAllowedoriginsByIdExecute(r)
}

/*
DeleteSystemAllowedoriginsById Delete AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedoriginId
 @return ApiDeleteSystemAllowedoriginsByIdRequest
*/
func (a *AllowedOriginsAPIService) DeleteSystemAllowedoriginsById(ctx context.Context, id int32) ApiDeleteSystemAllowedoriginsByIdRequest {
	return ApiDeleteSystemAllowedoriginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AllowedOriginsAPIService) DeleteSystemAllowedoriginsByIdExecute(r ApiDeleteSystemAllowedoriginsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.DeleteSystemAllowedoriginsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemAllowedoriginsRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedoriginsRequest) ClientId(clientId string) ApiGetSystemAllowedoriginsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) Conditions(conditions string) ApiGetSystemAllowedoriginsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) ChildConditions(childConditions string) ApiGetSystemAllowedoriginsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedoriginsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) OrderBy(orderBy string) ApiGetSystemAllowedoriginsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) Fields(fields string) ApiGetSystemAllowedoriginsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) Page(page int32) ApiGetSystemAllowedoriginsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) PageSize(pageSize int32) ApiGetSystemAllowedoriginsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedoriginsRequest) PageId(pageId int32) ApiGetSystemAllowedoriginsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedoriginsRequest) Execute() ([]AllowedOrigin, *http.Response, error) {
	return r.ApiService.GetSystemAllowedoriginsExecute(r)
}

/*
GetSystemAllowedorigins Get List of AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAllowedoriginsRequest
*/
func (a *AllowedOriginsAPIService) GetSystemAllowedorigins(ctx context.Context) ApiGetSystemAllowedoriginsRequest {
	return ApiGetSystemAllowedoriginsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AllowedOrigin
func (a *AllowedOriginsAPIService) GetSystemAllowedoriginsExecute(r ApiGetSystemAllowedoriginsRequest) ([]AllowedOrigin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AllowedOrigin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.GetSystemAllowedorigins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAllowedoriginsByIdRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) ClientId(clientId string) ApiGetSystemAllowedoriginsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) Conditions(conditions string) ApiGetSystemAllowedoriginsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) ChildConditions(childConditions string) ApiGetSystemAllowedoriginsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedoriginsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) OrderBy(orderBy string) ApiGetSystemAllowedoriginsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) Fields(fields string) ApiGetSystemAllowedoriginsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) Page(page int32) ApiGetSystemAllowedoriginsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) PageSize(pageSize int32) ApiGetSystemAllowedoriginsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedoriginsByIdRequest) PageId(pageId int32) ApiGetSystemAllowedoriginsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedoriginsByIdRequest) Execute() (*AllowedOrigin, *http.Response, error) {
	return r.ApiService.GetSystemAllowedoriginsByIdExecute(r)
}

/*
GetSystemAllowedoriginsById Get AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedoriginId
 @return ApiGetSystemAllowedoriginsByIdRequest
*/
func (a *AllowedOriginsAPIService) GetSystemAllowedoriginsById(ctx context.Context, id int32) ApiGetSystemAllowedoriginsByIdRequest {
	return ApiGetSystemAllowedoriginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedOrigin
func (a *AllowedOriginsAPIService) GetSystemAllowedoriginsByIdExecute(r ApiGetSystemAllowedoriginsByIdRequest) (*AllowedOrigin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedOrigin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.GetSystemAllowedoriginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAllowedoriginsCountRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) ClientId(clientId string) ApiGetSystemAllowedoriginsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) Conditions(conditions string) ApiGetSystemAllowedoriginsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) ChildConditions(childConditions string) ApiGetSystemAllowedoriginsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAllowedoriginsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) OrderBy(orderBy string) ApiGetSystemAllowedoriginsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) Fields(fields string) ApiGetSystemAllowedoriginsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) Page(page int32) ApiGetSystemAllowedoriginsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) PageSize(pageSize int32) ApiGetSystemAllowedoriginsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAllowedoriginsCountRequest) PageId(pageId int32) ApiGetSystemAllowedoriginsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemAllowedoriginsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemAllowedoriginsCountExecute(r)
}

/*
GetSystemAllowedoriginsCount Get Count of AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAllowedoriginsCountRequest
*/
func (a *AllowedOriginsAPIService) GetSystemAllowedoriginsCount(ctx context.Context) ApiGetSystemAllowedoriginsCountRequest {
	return ApiGetSystemAllowedoriginsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AllowedOriginsAPIService) GetSystemAllowedoriginsCountExecute(r ApiGetSystemAllowedoriginsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.GetSystemAllowedoriginsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemAllowedoriginsByIdRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemAllowedoriginsByIdRequest) ClientId(clientId string) ApiPatchSystemAllowedoriginsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemAllowedoriginsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemAllowedoriginsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemAllowedoriginsByIdRequest) Execute() (*AllowedOrigin, *http.Response, error) {
	return r.ApiService.PatchSystemAllowedoriginsByIdExecute(r)
}

/*
PatchSystemAllowedoriginsById Patch AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedoriginId
 @return ApiPatchSystemAllowedoriginsByIdRequest
*/
func (a *AllowedOriginsAPIService) PatchSystemAllowedoriginsById(ctx context.Context, id int32) ApiPatchSystemAllowedoriginsByIdRequest {
	return ApiPatchSystemAllowedoriginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedOrigin
func (a *AllowedOriginsAPIService) PatchSystemAllowedoriginsByIdExecute(r ApiPatchSystemAllowedoriginsByIdRequest) (*AllowedOrigin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedOrigin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.PatchSystemAllowedoriginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemAllowedoriginsRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	clientId *string
	allowedOrigin *AllowedOrigin
}

// 
func (r ApiPostSystemAllowedoriginsRequest) ClientId(clientId string) ApiPostSystemAllowedoriginsRequest {
	r.clientId = &clientId
	return r
}

// origin
func (r ApiPostSystemAllowedoriginsRequest) AllowedOrigin(allowedOrigin AllowedOrigin) ApiPostSystemAllowedoriginsRequest {
	r.allowedOrigin = &allowedOrigin
	return r
}

func (r ApiPostSystemAllowedoriginsRequest) Execute() (*AllowedOrigin, *http.Response, error) {
	return r.ApiService.PostSystemAllowedoriginsExecute(r)
}

/*
PostSystemAllowedorigins Post AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemAllowedoriginsRequest
*/
func (a *AllowedOriginsAPIService) PostSystemAllowedorigins(ctx context.Context) ApiPostSystemAllowedoriginsRequest {
	return ApiPostSystemAllowedoriginsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AllowedOrigin
func (a *AllowedOriginsAPIService) PostSystemAllowedoriginsExecute(r ApiPostSystemAllowedoriginsRequest) (*AllowedOrigin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedOrigin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.PostSystemAllowedorigins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.allowedOrigin == nil {
		return localVarReturnValue, nil, reportError("allowedOrigin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.allowedOrigin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemAllowedoriginsByIdRequest struct {
	ctx context.Context
	ApiService *AllowedOriginsAPIService
	id int32
	clientId *string
	allowedOrigin *AllowedOrigin
}

// 
func (r ApiPutSystemAllowedoriginsByIdRequest) ClientId(clientId string) ApiPutSystemAllowedoriginsByIdRequest {
	r.clientId = &clientId
	return r
}

// origin
func (r ApiPutSystemAllowedoriginsByIdRequest) AllowedOrigin(allowedOrigin AllowedOrigin) ApiPutSystemAllowedoriginsByIdRequest {
	r.allowedOrigin = &allowedOrigin
	return r
}

func (r ApiPutSystemAllowedoriginsByIdRequest) Execute() (*AllowedOrigin, *http.Response, error) {
	return r.ApiService.PutSystemAllowedoriginsByIdExecute(r)
}

/*
PutSystemAllowedoriginsById Put AllowedOrigin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id allowedoriginId
 @return ApiPutSystemAllowedoriginsByIdRequest
*/
func (a *AllowedOriginsAPIService) PutSystemAllowedoriginsById(ctx context.Context, id int32) ApiPutSystemAllowedoriginsByIdRequest {
	return ApiPutSystemAllowedoriginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AllowedOrigin
func (a *AllowedOriginsAPIService) PutSystemAllowedoriginsByIdExecute(r ApiPutSystemAllowedoriginsByIdRequest) (*AllowedOrigin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AllowedOrigin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AllowedOriginsAPIService.PutSystemAllowedoriginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/allowedorigins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.allowedOrigin == nil {
		return localVarReturnValue, nil, reportError("allowedOrigin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.allowedOrigin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
