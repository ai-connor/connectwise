/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// AutoSyncTimesAPIService AutoSyncTimesAPI service
type AutoSyncTimesAPIService service

type ApiDeleteSystemAutoSyncTimeByIdRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemAutoSyncTimeByIdRequest) ClientId(clientId string) ApiDeleteSystemAutoSyncTimeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemAutoSyncTimeByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemAutoSyncTimeByIdExecute(r)
}

/*
DeleteSystemAutoSyncTimeById Delete AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoSyncTimeId
 @return ApiDeleteSystemAutoSyncTimeByIdRequest
*/
func (a *AutoSyncTimesAPIService) DeleteSystemAutoSyncTimeById(ctx context.Context, id int32) ApiDeleteSystemAutoSyncTimeByIdRequest {
	return ApiDeleteSystemAutoSyncTimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *AutoSyncTimesAPIService) DeleteSystemAutoSyncTimeByIdExecute(r ApiDeleteSystemAutoSyncTimeByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.DeleteSystemAutoSyncTimeById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemAutoSyncTimeRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) Conditions(conditions string) ApiGetSystemAutoSyncTimeRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) ChildConditions(childConditions string) ApiGetSystemAutoSyncTimeRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAutoSyncTimeRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) OrderBy(orderBy string) ApiGetSystemAutoSyncTimeRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) Fields(fields string) ApiGetSystemAutoSyncTimeRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) Page(page int32) ApiGetSystemAutoSyncTimeRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) PageSize(pageSize int32) ApiGetSystemAutoSyncTimeRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) PageId(pageId int32) ApiGetSystemAutoSyncTimeRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeRequest) ClientId(clientId string) ApiGetSystemAutoSyncTimeRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemAutoSyncTimeRequest) Execute() ([]AutoSyncTime, *http.Response, error) {
	return r.ApiService.GetSystemAutoSyncTimeExecute(r)
}

/*
GetSystemAutoSyncTime Get List of AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAutoSyncTimeRequest
*/
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTime(ctx context.Context) ApiGetSystemAutoSyncTimeRequest {
	return ApiGetSystemAutoSyncTimeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []AutoSyncTime
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTimeExecute(r ApiGetSystemAutoSyncTimeRequest) ([]AutoSyncTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []AutoSyncTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.GetSystemAutoSyncTime")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAutoSyncTimeByIdRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) Conditions(conditions string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) ChildConditions(childConditions string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) OrderBy(orderBy string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) Fields(fields string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) Page(page int32) ApiGetSystemAutoSyncTimeByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) PageSize(pageSize int32) ApiGetSystemAutoSyncTimeByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) PageId(pageId int32) ApiGetSystemAutoSyncTimeByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeByIdRequest) ClientId(clientId string) ApiGetSystemAutoSyncTimeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemAutoSyncTimeByIdRequest) Execute() (*AutoSyncTime, *http.Response, error) {
	return r.ApiService.GetSystemAutoSyncTimeByIdExecute(r)
}

/*
GetSystemAutoSyncTimeById Get AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoSyncTimeId
 @return ApiGetSystemAutoSyncTimeByIdRequest
*/
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTimeById(ctx context.Context, id int32) ApiGetSystemAutoSyncTimeByIdRequest {
	return ApiGetSystemAutoSyncTimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AutoSyncTime
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTimeByIdExecute(r ApiGetSystemAutoSyncTimeByIdRequest) (*AutoSyncTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoSyncTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.GetSystemAutoSyncTimeById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemAutoSyncTimeCountRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) Conditions(conditions string) ApiGetSystemAutoSyncTimeCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) ChildConditions(childConditions string) ApiGetSystemAutoSyncTimeCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemAutoSyncTimeCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) OrderBy(orderBy string) ApiGetSystemAutoSyncTimeCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) Fields(fields string) ApiGetSystemAutoSyncTimeCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) Page(page int32) ApiGetSystemAutoSyncTimeCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) PageSize(pageSize int32) ApiGetSystemAutoSyncTimeCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) PageId(pageId int32) ApiGetSystemAutoSyncTimeCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemAutoSyncTimeCountRequest) ClientId(clientId string) ApiGetSystemAutoSyncTimeCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemAutoSyncTimeCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemAutoSyncTimeCountExecute(r)
}

/*
GetSystemAutoSyncTimeCount Get Count of AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemAutoSyncTimeCountRequest
*/
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTimeCount(ctx context.Context) ApiGetSystemAutoSyncTimeCountRequest {
	return ApiGetSystemAutoSyncTimeCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *AutoSyncTimesAPIService) GetSystemAutoSyncTimeCountExecute(r ApiGetSystemAutoSyncTimeCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.GetSystemAutoSyncTimeCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemAutoSyncTimeByIdRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemAutoSyncTimeByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemAutoSyncTimeByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemAutoSyncTimeByIdRequest) ClientId(clientId string) ApiPatchSystemAutoSyncTimeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemAutoSyncTimeByIdRequest) Execute() (*AutoSyncTime, *http.Response, error) {
	return r.ApiService.PatchSystemAutoSyncTimeByIdExecute(r)
}

/*
PatchSystemAutoSyncTimeById Patch AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoSyncTimeId
 @return ApiPatchSystemAutoSyncTimeByIdRequest
*/
func (a *AutoSyncTimesAPIService) PatchSystemAutoSyncTimeById(ctx context.Context, id int32) ApiPatchSystemAutoSyncTimeByIdRequest {
	return ApiPatchSystemAutoSyncTimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AutoSyncTime
func (a *AutoSyncTimesAPIService) PatchSystemAutoSyncTimeByIdExecute(r ApiPatchSystemAutoSyncTimeByIdRequest) (*AutoSyncTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoSyncTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.PatchSystemAutoSyncTimeById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemAutoSyncTimeRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	autoSyncTime *AutoSyncTime
	clientId *string
}

// autoSyncTime
func (r ApiPostSystemAutoSyncTimeRequest) AutoSyncTime(autoSyncTime AutoSyncTime) ApiPostSystemAutoSyncTimeRequest {
	r.autoSyncTime = &autoSyncTime
	return r
}

// 
func (r ApiPostSystemAutoSyncTimeRequest) ClientId(clientId string) ApiPostSystemAutoSyncTimeRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemAutoSyncTimeRequest) Execute() (*AutoSyncTime, *http.Response, error) {
	return r.ApiService.PostSystemAutoSyncTimeExecute(r)
}

/*
PostSystemAutoSyncTime Post AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemAutoSyncTimeRequest
*/
func (a *AutoSyncTimesAPIService) PostSystemAutoSyncTime(ctx context.Context) ApiPostSystemAutoSyncTimeRequest {
	return ApiPostSystemAutoSyncTimeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AutoSyncTime
func (a *AutoSyncTimesAPIService) PostSystemAutoSyncTimeExecute(r ApiPostSystemAutoSyncTimeRequest) (*AutoSyncTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoSyncTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.PostSystemAutoSyncTime")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoSyncTime == nil {
		return localVarReturnValue, nil, reportError("autoSyncTime is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.autoSyncTime
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemAutoSyncTimeByIdRequest struct {
	ctx context.Context
	ApiService *AutoSyncTimesAPIService
	id int32
	autoSyncTime *AutoSyncTime
	clientId *string
}

// autoSyncTime
func (r ApiPutSystemAutoSyncTimeByIdRequest) AutoSyncTime(autoSyncTime AutoSyncTime) ApiPutSystemAutoSyncTimeByIdRequest {
	r.autoSyncTime = &autoSyncTime
	return r
}

// 
func (r ApiPutSystemAutoSyncTimeByIdRequest) ClientId(clientId string) ApiPutSystemAutoSyncTimeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemAutoSyncTimeByIdRequest) Execute() (*AutoSyncTime, *http.Response, error) {
	return r.ApiService.PutSystemAutoSyncTimeByIdExecute(r)
}

/*
PutSystemAutoSyncTimeById Put AutoSyncTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoSyncTimeId
 @return ApiPutSystemAutoSyncTimeByIdRequest
*/
func (a *AutoSyncTimesAPIService) PutSystemAutoSyncTimeById(ctx context.Context, id int32) ApiPutSystemAutoSyncTimeByIdRequest {
	return ApiPutSystemAutoSyncTimeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AutoSyncTime
func (a *AutoSyncTimesAPIService) PutSystemAutoSyncTimeByIdExecute(r ApiPutSystemAutoSyncTimeByIdRequest) (*AutoSyncTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AutoSyncTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AutoSyncTimesAPIService.PutSystemAutoSyncTimeById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/autoSyncTime/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.autoSyncTime == nil {
		return localVarReturnValue, nil, reportError("autoSyncTime is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.autoSyncTime
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
