/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingCyclesAPIService BillingCyclesAPI service
type BillingCyclesAPIService service

type ApiDeleteFinanceBillingCyclesByIdRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceBillingCyclesByIdRequest) ClientId(clientId string) ApiDeleteFinanceBillingCyclesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceBillingCyclesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceBillingCyclesByIdExecute(r)
}

/*
DeleteFinanceBillingCyclesById Delete BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiDeleteFinanceBillingCyclesByIdRequest
*/
func (a *BillingCyclesAPIService) DeleteFinanceBillingCyclesById(ctx context.Context, id int32) ApiDeleteFinanceBillingCyclesByIdRequest {
	return ApiDeleteFinanceBillingCyclesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BillingCyclesAPIService) DeleteFinanceBillingCyclesByIdExecute(r ApiDeleteFinanceBillingCyclesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.DeleteFinanceBillingCyclesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceBillingCyclesRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingCyclesRequest) Conditions(conditions string) ApiGetFinanceBillingCyclesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) ChildConditions(childConditions string) ApiGetFinanceBillingCyclesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingCyclesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) OrderBy(orderBy string) ApiGetFinanceBillingCyclesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) Fields(fields string) ApiGetFinanceBillingCyclesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) Page(page int32) ApiGetFinanceBillingCyclesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) PageSize(pageSize int32) ApiGetFinanceBillingCyclesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) PageId(pageId int32) ApiGetFinanceBillingCyclesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingCyclesRequest) ClientId(clientId string) ApiGetFinanceBillingCyclesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingCyclesRequest) Execute() ([]BillingCycle, *http.Response, error) {
	return r.ApiService.GetFinanceBillingCyclesExecute(r)
}

/*
GetFinanceBillingCycles Get List of BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingCyclesRequest
*/
func (a *BillingCyclesAPIService) GetFinanceBillingCycles(ctx context.Context) ApiGetFinanceBillingCyclesRequest {
	return ApiGetFinanceBillingCyclesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BillingCycle
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesExecute(r ApiGetFinanceBillingCyclesRequest) ([]BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.GetFinanceBillingCycles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingCyclesByIdRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) Conditions(conditions string) ApiGetFinanceBillingCyclesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBillingCyclesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingCyclesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) OrderBy(orderBy string) ApiGetFinanceBillingCyclesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) Fields(fields string) ApiGetFinanceBillingCyclesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) Page(page int32) ApiGetFinanceBillingCyclesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) PageSize(pageSize int32) ApiGetFinanceBillingCyclesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) PageId(pageId int32) ApiGetFinanceBillingCyclesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdRequest) ClientId(clientId string) ApiGetFinanceBillingCyclesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingCyclesByIdRequest) Execute() (*BillingCycle, *http.Response, error) {
	return r.ApiService.GetFinanceBillingCyclesByIdExecute(r)
}

/*
GetFinanceBillingCyclesById Get BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiGetFinanceBillingCyclesByIdRequest
*/
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesById(ctx context.Context, id int32) ApiGetFinanceBillingCyclesByIdRequest {
	return ApiGetFinanceBillingCyclesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingCycle
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesByIdExecute(r ApiGetFinanceBillingCyclesByIdRequest) (*BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.GetFinanceBillingCyclesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingCyclesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) Fields(fields string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) Page(page int32) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingCyclesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingCyclesByIdUsagesExecute(r)
}

/*
GetFinanceBillingCyclesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiGetFinanceBillingCyclesByIdUsagesRequest
*/
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesByIdUsages(ctx context.Context, id int32) ApiGetFinanceBillingCyclesByIdUsagesRequest {
	return ApiGetFinanceBillingCyclesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesByIdUsagesExecute(r ApiGetFinanceBillingCyclesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.GetFinanceBillingCyclesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingCyclesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) Fields(fields string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) Page(page int32) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingCyclesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingCyclesByIdUsagesListExecute(r)
}

/*
GetFinanceBillingCyclesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiGetFinanceBillingCyclesByIdUsagesListRequest
*/
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceBillingCyclesByIdUsagesListRequest {
	return ApiGetFinanceBillingCyclesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesByIdUsagesListExecute(r ApiGetFinanceBillingCyclesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.GetFinanceBillingCyclesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingCyclesCountRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) Conditions(conditions string) ApiGetFinanceBillingCyclesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingCyclesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingCyclesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingCyclesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) Fields(fields string) ApiGetFinanceBillingCyclesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) Page(page int32) ApiGetFinanceBillingCyclesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingCyclesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) PageId(pageId int32) ApiGetFinanceBillingCyclesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingCyclesCountRequest) ClientId(clientId string) ApiGetFinanceBillingCyclesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingCyclesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingCyclesCountExecute(r)
}

/*
GetFinanceBillingCyclesCount Get Count of BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingCyclesCountRequest
*/
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesCount(ctx context.Context) ApiGetFinanceBillingCyclesCountRequest {
	return ApiGetFinanceBillingCyclesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *BillingCyclesAPIService) GetFinanceBillingCyclesCountExecute(r ApiGetFinanceBillingCyclesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.GetFinanceBillingCyclesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBillingCyclesByIdRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceBillingCyclesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBillingCyclesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceBillingCyclesByIdRequest) ClientId(clientId string) ApiPatchFinanceBillingCyclesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceBillingCyclesByIdRequest) Execute() (*BillingCycle, *http.Response, error) {
	return r.ApiService.PatchFinanceBillingCyclesByIdExecute(r)
}

/*
PatchFinanceBillingCyclesById Patch BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiPatchFinanceBillingCyclesByIdRequest
*/
func (a *BillingCyclesAPIService) PatchFinanceBillingCyclesById(ctx context.Context, id int32) ApiPatchFinanceBillingCyclesByIdRequest {
	return ApiPatchFinanceBillingCyclesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingCycle
func (a *BillingCyclesAPIService) PatchFinanceBillingCyclesByIdExecute(r ApiPatchFinanceBillingCyclesByIdRequest) (*BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.PatchFinanceBillingCyclesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest) ClientId(clientId string) ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest) Execute() (*BillingCycle, *http.Response, error) {
	return r.ApiService.PatchProcurementCatalogByParentIdVendorsByIdByIdExecute(r)
}

/*
PatchProcurementCatalogByParentIdVendorsByIdById Patch BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id vendorId
 @param parentId catalogId
 @return ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest
*/
func (a *BillingCyclesAPIService) PatchProcurementCatalogByParentIdVendorsByIdById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest {
	return ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BillingCycle
func (a *BillingCyclesAPIService) PatchProcurementCatalogByParentIdVendorsByIdByIdExecute(r ApiPatchProcurementCatalogByParentIdVendorsByIdByIdRequest) (*BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.PatchProcurementCatalogByParentIdVendorsByIdById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/vendors/{id}{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceBillingCyclesRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	billingCycle *BillingCycle
	clientId *string
}

// billingCycle
func (r ApiPostFinanceBillingCyclesRequest) BillingCycle(billingCycle BillingCycle) ApiPostFinanceBillingCyclesRequest {
	r.billingCycle = &billingCycle
	return r
}

// 
func (r ApiPostFinanceBillingCyclesRequest) ClientId(clientId string) ApiPostFinanceBillingCyclesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceBillingCyclesRequest) Execute() (*BillingCycle, *http.Response, error) {
	return r.ApiService.PostFinanceBillingCyclesExecute(r)
}

/*
PostFinanceBillingCycles Post BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceBillingCyclesRequest
*/
func (a *BillingCyclesAPIService) PostFinanceBillingCycles(ctx context.Context) ApiPostFinanceBillingCyclesRequest {
	return ApiPostFinanceBillingCyclesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingCycle
func (a *BillingCyclesAPIService) PostFinanceBillingCyclesExecute(r ApiPostFinanceBillingCyclesRequest) (*BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.PostFinanceBillingCycles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingCycle == nil {
		return localVarReturnValue, nil, reportError("billingCycle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.billingCycle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBillingCyclesByIdRequest struct {
	ctx context.Context
	ApiService *BillingCyclesAPIService
	id int32
	billingCycle *BillingCycle
	clientId *string
}

// billingCycle
func (r ApiPutFinanceBillingCyclesByIdRequest) BillingCycle(billingCycle BillingCycle) ApiPutFinanceBillingCyclesByIdRequest {
	r.billingCycle = &billingCycle
	return r
}

// 
func (r ApiPutFinanceBillingCyclesByIdRequest) ClientId(clientId string) ApiPutFinanceBillingCyclesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceBillingCyclesByIdRequest) Execute() (*BillingCycle, *http.Response, error) {
	return r.ApiService.PutFinanceBillingCyclesByIdExecute(r)
}

/*
PutFinanceBillingCyclesById Put BillingCycle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingCycleId
 @return ApiPutFinanceBillingCyclesByIdRequest
*/
func (a *BillingCyclesAPIService) PutFinanceBillingCyclesById(ctx context.Context, id int32) ApiPutFinanceBillingCyclesByIdRequest {
	return ApiPutFinanceBillingCyclesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingCycle
func (a *BillingCyclesAPIService) PutFinanceBillingCyclesByIdExecute(r ApiPutFinanceBillingCyclesByIdRequest) (*BillingCycle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingCyclesAPIService.PutFinanceBillingCyclesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingCycles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingCycle == nil {
		return localVarReturnValue, nil, reportError("billingCycle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.billingCycle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
