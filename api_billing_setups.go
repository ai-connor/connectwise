/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingSetupsAPIService BillingSetupsAPI service
type BillingSetupsAPIService service

type ApiDeleteFinanceBillingSetupsByIdRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceBillingSetupsByIdRequest) ClientId(clientId string) ApiDeleteFinanceBillingSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceBillingSetupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceBillingSetupsByIdExecute(r)
}

/*
DeleteFinanceBillingSetupsById Delete BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingSetupId
 @return ApiDeleteFinanceBillingSetupsByIdRequest
*/
func (a *BillingSetupsAPIService) DeleteFinanceBillingSetupsById(ctx context.Context, id int32) ApiDeleteFinanceBillingSetupsByIdRequest {
	return ApiDeleteFinanceBillingSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BillingSetupsAPIService) DeleteFinanceBillingSetupsByIdExecute(r ApiDeleteFinanceBillingSetupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.DeleteFinanceBillingSetupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingSetupsRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) Fields(fields string) ApiGetFinanceBillingSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) Page(page int32) ApiGetFinanceBillingSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingSetupsRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsRequest) Execute() ([]BillingSetup, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsExecute(r)
}

/*
GetFinanceBillingSetups Get List of BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingSetupsRequest
*/
func (a *BillingSetupsAPIService) GetFinanceBillingSetups(ctx context.Context) ApiGetFinanceBillingSetupsRequest {
	return ApiGetFinanceBillingSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BillingSetup
func (a *BillingSetupsAPIService) GetFinanceBillingSetupsExecute(r ApiGetFinanceBillingSetupsRequest) ([]BillingSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BillingSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.GetFinanceBillingSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsByIdRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) Fields(fields string) ApiGetFinanceBillingSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) Page(page int32) ApiGetFinanceBillingSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingSetupsByIdRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsByIdRequest) Execute() (*BillingSetup, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsByIdExecute(r)
}

/*
GetFinanceBillingSetupsById Get BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingSetupId
 @return ApiGetFinanceBillingSetupsByIdRequest
*/
func (a *BillingSetupsAPIService) GetFinanceBillingSetupsById(ctx context.Context, id int32) ApiGetFinanceBillingSetupsByIdRequest {
	return ApiGetFinanceBillingSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingSetup
func (a *BillingSetupsAPIService) GetFinanceBillingSetupsByIdExecute(r ApiGetFinanceBillingSetupsByIdRequest) (*BillingSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.GetFinanceBillingSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsCountRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) Fields(fields string) ApiGetFinanceBillingSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) Page(page int32) ApiGetFinanceBillingSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceBillingSetupsCountRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsCountExecute(r)
}

/*
GetFinanceBillingSetupsCount Get Count of BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingSetupsCountRequest
*/
func (a *BillingSetupsAPIService) GetFinanceBillingSetupsCount(ctx context.Context) ApiGetFinanceBillingSetupsCountRequest {
	return ApiGetFinanceBillingSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *BillingSetupsAPIService) GetFinanceBillingSetupsCountExecute(r ApiGetFinanceBillingSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.GetFinanceBillingSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBillingSetupsByIdRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceBillingSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBillingSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceBillingSetupsByIdRequest) ClientId(clientId string) ApiPatchFinanceBillingSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceBillingSetupsByIdRequest) Execute() (*BillingSetup, *http.Response, error) {
	return r.ApiService.PatchFinanceBillingSetupsByIdExecute(r)
}

/*
PatchFinanceBillingSetupsById Patch BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingSetupId
 @return ApiPatchFinanceBillingSetupsByIdRequest
*/
func (a *BillingSetupsAPIService) PatchFinanceBillingSetupsById(ctx context.Context, id int32) ApiPatchFinanceBillingSetupsByIdRequest {
	return ApiPatchFinanceBillingSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingSetup
func (a *BillingSetupsAPIService) PatchFinanceBillingSetupsByIdExecute(r ApiPatchFinanceBillingSetupsByIdRequest) (*BillingSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.PatchFinanceBillingSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceBillingSetupsRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	billingSetup *BillingSetup
	clientId *string
}

// billingSetup
func (r ApiPostFinanceBillingSetupsRequest) BillingSetup(billingSetup BillingSetup) ApiPostFinanceBillingSetupsRequest {
	r.billingSetup = &billingSetup
	return r
}

// 
func (r ApiPostFinanceBillingSetupsRequest) ClientId(clientId string) ApiPostFinanceBillingSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceBillingSetupsRequest) Execute() (*BillingSetup, *http.Response, error) {
	return r.ApiService.PostFinanceBillingSetupsExecute(r)
}

/*
PostFinanceBillingSetups Post BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceBillingSetupsRequest
*/
func (a *BillingSetupsAPIService) PostFinanceBillingSetups(ctx context.Context) ApiPostFinanceBillingSetupsRequest {
	return ApiPostFinanceBillingSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingSetup
func (a *BillingSetupsAPIService) PostFinanceBillingSetupsExecute(r ApiPostFinanceBillingSetupsRequest) (*BillingSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.PostFinanceBillingSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingSetup == nil {
		return localVarReturnValue, nil, reportError("billingSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.billingSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBillingSetupsByIdRequest struct {
	ctx context.Context
	ApiService *BillingSetupsAPIService
	id int32
	billingSetup *BillingSetup
	clientId *string
}

// billingSetup
func (r ApiPutFinanceBillingSetupsByIdRequest) BillingSetup(billingSetup BillingSetup) ApiPutFinanceBillingSetupsByIdRequest {
	r.billingSetup = &billingSetup
	return r
}

// 
func (r ApiPutFinanceBillingSetupsByIdRequest) ClientId(clientId string) ApiPutFinanceBillingSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceBillingSetupsByIdRequest) Execute() (*BillingSetup, *http.Response, error) {
	return r.ApiService.PutFinanceBillingSetupsByIdExecute(r)
}

/*
PutFinanceBillingSetupsById Put BillingSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingSetupId
 @return ApiPutFinanceBillingSetupsByIdRequest
*/
func (a *BillingSetupsAPIService) PutFinanceBillingSetupsById(ctx context.Context, id int32) ApiPutFinanceBillingSetupsByIdRequest {
	return ApiPutFinanceBillingSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingSetup
func (a *BillingSetupsAPIService) PutFinanceBillingSetupsByIdExecute(r ApiPutFinanceBillingSetupsByIdRequest) (*BillingSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupsAPIService.PutFinanceBillingSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.billingSetup == nil {
		return localVarReturnValue, nil, reportError("billingSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.billingSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
