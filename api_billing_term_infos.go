/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingTermInfosAPIService BillingTermInfosAPI service
type BillingTermInfosAPIService service

type ApiGetFinanceBillingTermsByIdInfoRequest struct {
	ctx context.Context
	ApiService *BillingTermInfosAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) ClientId(clientId string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) Conditions(conditions string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) Fields(fields string) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) Page(page int32) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdInfoRequest) PageId(pageId int32) ApiGetFinanceBillingTermsByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsByIdInfoRequest) Execute() (*BillingTermInfo, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsByIdInfoExecute(r)
}

/*
GetFinanceBillingTermsByIdInfo Get BillingTermInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiGetFinanceBillingTermsByIdInfoRequest
*/
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsByIdInfo(ctx context.Context, id int32) ApiGetFinanceBillingTermsByIdInfoRequest {
	return ApiGetFinanceBillingTermsByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingTermInfo
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsByIdInfoExecute(r ApiGetFinanceBillingTermsByIdInfoRequest) (*BillingTermInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingTermInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermInfosAPIService.GetFinanceBillingTermsByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsInfoRequest struct {
	ctx context.Context
	ApiService *BillingTermInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) ClientId(clientId string) ApiGetFinanceBillingTermsInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) Conditions(conditions string) ApiGetFinanceBillingTermsInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) Fields(fields string) ApiGetFinanceBillingTermsInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) Page(page int32) ApiGetFinanceBillingTermsInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoRequest) PageId(pageId int32) ApiGetFinanceBillingTermsInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsInfoRequest) Execute() ([]BillingTermInfo, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsInfoExecute(r)
}

/*
GetFinanceBillingTermsInfo Get List of BillingTermInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingTermsInfoRequest
*/
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsInfo(ctx context.Context) ApiGetFinanceBillingTermsInfoRequest {
	return ApiGetFinanceBillingTermsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BillingTermInfo
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsInfoExecute(r ApiGetFinanceBillingTermsInfoRequest) ([]BillingTermInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BillingTermInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermInfosAPIService.GetFinanceBillingTermsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsInfoCountRequest struct {
	ctx context.Context
	ApiService *BillingTermInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) ClientId(clientId string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) Conditions(conditions string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) Fields(fields string) ApiGetFinanceBillingTermsInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) Page(page int32) ApiGetFinanceBillingTermsInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsInfoCountRequest) PageId(pageId int32) ApiGetFinanceBillingTermsInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsInfoCountExecute(r)
}

/*
GetFinanceBillingTermsInfoCount Get Count of BillingTermInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingTermsInfoCountRequest
*/
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsInfoCount(ctx context.Context) ApiGetFinanceBillingTermsInfoCountRequest {
	return ApiGetFinanceBillingTermsInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *BillingTermInfosAPIService) GetFinanceBillingTermsInfoCountExecute(r ApiGetFinanceBillingTermsInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermInfosAPIService.GetFinanceBillingTermsInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
