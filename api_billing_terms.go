/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingTermsAPIService BillingTermsAPI service
type BillingTermsAPIService service

type ApiDeleteFinanceBillingTermsByIdRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceBillingTermsByIdRequest) ClientId(clientId string) ApiDeleteFinanceBillingTermsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceBillingTermsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceBillingTermsByIdExecute(r)
}

/*
DeleteFinanceBillingTermsById Delete BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiDeleteFinanceBillingTermsByIdRequest
*/
func (a *BillingTermsAPIService) DeleteFinanceBillingTermsById(ctx context.Context, id int32) ApiDeleteFinanceBillingTermsByIdRequest {
	return ApiDeleteFinanceBillingTermsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *BillingTermsAPIService) DeleteFinanceBillingTermsByIdExecute(r ApiDeleteFinanceBillingTermsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.DeleteFinanceBillingTermsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsRequest) ClientId(clientId string) ApiGetFinanceBillingTermsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) Conditions(conditions string) ApiGetFinanceBillingTermsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) Fields(fields string) ApiGetFinanceBillingTermsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) Page(page int32) ApiGetFinanceBillingTermsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsRequest) PageId(pageId int32) ApiGetFinanceBillingTermsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsRequest) Execute() ([]BillingTerm, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsExecute(r)
}

/*
GetFinanceBillingTerms Get List of BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingTermsRequest
*/
func (a *BillingTermsAPIService) GetFinanceBillingTerms(ctx context.Context) ApiGetFinanceBillingTermsRequest {
	return ApiGetFinanceBillingTermsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BillingTerm
func (a *BillingTermsAPIService) GetFinanceBillingTermsExecute(r ApiGetFinanceBillingTermsRequest) ([]BillingTerm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BillingTerm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.GetFinanceBillingTerms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsByIdRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) ClientId(clientId string) ApiGetFinanceBillingTermsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) Conditions(conditions string) ApiGetFinanceBillingTermsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) Fields(fields string) ApiGetFinanceBillingTermsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) Page(page int32) ApiGetFinanceBillingTermsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdRequest) PageId(pageId int32) ApiGetFinanceBillingTermsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsByIdRequest) Execute() (*BillingTerm, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsByIdExecute(r)
}

/*
GetFinanceBillingTermsById Get BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiGetFinanceBillingTermsByIdRequest
*/
func (a *BillingTermsAPIService) GetFinanceBillingTermsById(ctx context.Context, id int32) ApiGetFinanceBillingTermsByIdRequest {
	return ApiGetFinanceBillingTermsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingTerm
func (a *BillingTermsAPIService) GetFinanceBillingTermsByIdExecute(r ApiGetFinanceBillingTermsByIdRequest) (*BillingTerm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingTerm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.GetFinanceBillingTermsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) Fields(fields string) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) Page(page int32) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceBillingTermsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsByIdUsagesExecute(r)
}

/*
GetFinanceBillingTermsByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiGetFinanceBillingTermsByIdUsagesRequest
*/
func (a *BillingTermsAPIService) GetFinanceBillingTermsByIdUsages(ctx context.Context, id int32) ApiGetFinanceBillingTermsByIdUsagesRequest {
	return ApiGetFinanceBillingTermsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BillingTermsAPIService) GetFinanceBillingTermsByIdUsagesExecute(r ApiGetFinanceBillingTermsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.GetFinanceBillingTermsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) Fields(fields string) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) Page(page int32) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsByIdUsagesListExecute(r)
}

/*
GetFinanceBillingTermsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiGetFinanceBillingTermsByIdUsagesListRequest
*/
func (a *BillingTermsAPIService) GetFinanceBillingTermsByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceBillingTermsByIdUsagesListRequest {
	return ApiGetFinanceBillingTermsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BillingTermsAPIService) GetFinanceBillingTermsByIdUsagesListExecute(r ApiGetFinanceBillingTermsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.GetFinanceBillingTermsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingTermsCountRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) ClientId(clientId string) ApiGetFinanceBillingTermsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) Conditions(conditions string) ApiGetFinanceBillingTermsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingTermsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingTermsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingTermsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) Fields(fields string) ApiGetFinanceBillingTermsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) Page(page int32) ApiGetFinanceBillingTermsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingTermsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceBillingTermsCountRequest) PageId(pageId int32) ApiGetFinanceBillingTermsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingTermsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingTermsCountExecute(r)
}

/*
GetFinanceBillingTermsCount Get Count of BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceBillingTermsCountRequest
*/
func (a *BillingTermsAPIService) GetFinanceBillingTermsCount(ctx context.Context) ApiGetFinanceBillingTermsCountRequest {
	return ApiGetFinanceBillingTermsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *BillingTermsAPIService) GetFinanceBillingTermsCountExecute(r ApiGetFinanceBillingTermsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.GetFinanceBillingTermsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBillingTermsByIdRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceBillingTermsByIdRequest) ClientId(clientId string) ApiPatchFinanceBillingTermsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceBillingTermsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBillingTermsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceBillingTermsByIdRequest) Execute() (*BillingTerm, *http.Response, error) {
	return r.ApiService.PatchFinanceBillingTermsByIdExecute(r)
}

/*
PatchFinanceBillingTermsById Patch BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiPatchFinanceBillingTermsByIdRequest
*/
func (a *BillingTermsAPIService) PatchFinanceBillingTermsById(ctx context.Context, id int32) ApiPatchFinanceBillingTermsByIdRequest {
	return ApiPatchFinanceBillingTermsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingTerm
func (a *BillingTermsAPIService) PatchFinanceBillingTermsByIdExecute(r ApiPatchFinanceBillingTermsByIdRequest) (*BillingTerm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingTerm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.PatchFinanceBillingTermsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceBillingTermsRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	clientId *string
	billingTerm *BillingTerm
}

// 
func (r ApiPostFinanceBillingTermsRequest) ClientId(clientId string) ApiPostFinanceBillingTermsRequest {
	r.clientId = &clientId
	return r
}

// billingTerms
func (r ApiPostFinanceBillingTermsRequest) BillingTerm(billingTerm BillingTerm) ApiPostFinanceBillingTermsRequest {
	r.billingTerm = &billingTerm
	return r
}

func (r ApiPostFinanceBillingTermsRequest) Execute() (*BillingTerm, *http.Response, error) {
	return r.ApiService.PostFinanceBillingTermsExecute(r)
}

/*
PostFinanceBillingTerms Post BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceBillingTermsRequest
*/
func (a *BillingTermsAPIService) PostFinanceBillingTerms(ctx context.Context) ApiPostFinanceBillingTermsRequest {
	return ApiPostFinanceBillingTermsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BillingTerm
func (a *BillingTermsAPIService) PostFinanceBillingTermsExecute(r ApiPostFinanceBillingTermsRequest) (*BillingTerm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingTerm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.PostFinanceBillingTerms")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingTerm == nil {
		return localVarReturnValue, nil, reportError("billingTerm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingTerm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBillingTermsByIdRequest struct {
	ctx context.Context
	ApiService *BillingTermsAPIService
	id int32
	clientId *string
	billingTerm *BillingTerm
}

// 
func (r ApiPutFinanceBillingTermsByIdRequest) ClientId(clientId string) ApiPutFinanceBillingTermsByIdRequest {
	r.clientId = &clientId
	return r
}

// billingTerms
func (r ApiPutFinanceBillingTermsByIdRequest) BillingTerm(billingTerm BillingTerm) ApiPutFinanceBillingTermsByIdRequest {
	r.billingTerm = &billingTerm
	return r
}

func (r ApiPutFinanceBillingTermsByIdRequest) Execute() (*BillingTerm, *http.Response, error) {
	return r.ApiService.PutFinanceBillingTermsByIdExecute(r)
}

/*
PutFinanceBillingTermsById Put BillingTerm

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingTermId
 @return ApiPutFinanceBillingTermsByIdRequest
*/
func (a *BillingTermsAPIService) PutFinanceBillingTermsById(ctx context.Context, id int32) ApiPutFinanceBillingTermsByIdRequest {
	return ApiPutFinanceBillingTermsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BillingTerm
func (a *BillingTermsAPIService) PutFinanceBillingTermsByIdExecute(r ApiPutFinanceBillingTermsByIdRequest) (*BillingTerm, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BillingTerm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingTermsAPIService.PutFinanceBillingTermsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingTerms/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingTerm == nil {
		return localVarReturnValue, nil, reportError("billingTerm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingTerm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
