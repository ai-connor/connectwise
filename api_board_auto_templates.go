/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardAutoTemplatesAPIService BoardAutoTemplatesAPI service
type BoardAutoTemplatesAPIService service

type ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdAutoTemplatesByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdAutoTemplatesById Delete BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoTemplateId
 @param parentId boardId
 @return ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest
*/
func (a *BoardAutoTemplatesAPIService) DeleteServiceBoardsByParentIdAutoTemplatesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest {
	return ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *BoardAutoTemplatesAPIService) DeleteServiceBoardsByParentIdAutoTemplatesByIdExecute(r ApiDeleteServiceBoardsByParentIdAutoTemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.DeleteServiceBoardsByParentIdAutoTemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoTemplatesRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) Execute() ([]BoardAutoTemplate, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoTemplatesExecute(r)
}

/*
GetServiceBoardsByParentIdAutoTemplates Get List of BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdAutoTemplatesRequest
*/
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplates(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdAutoTemplatesRequest {
	return ApiGetServiceBoardsByParentIdAutoTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardAutoTemplate
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplatesExecute(r ApiGetServiceBoardsByParentIdAutoTemplatesRequest) ([]BoardAutoTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardAutoTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.GetServiceBoardsByParentIdAutoTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) Execute() (*BoardAutoTemplate, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoTemplatesByIdExecute(r)
}

/*
GetServiceBoardsByParentIdAutoTemplatesById Get BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoTemplateId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest
*/
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplatesById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest {
	return ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardAutoTemplate
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplatesByIdExecute(r ApiGetServiceBoardsByParentIdAutoTemplatesByIdRequest) (*BoardAutoTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardAutoTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.GetServiceBoardsByParentIdAutoTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoTemplatesCountExecute(r)
}

/*
GetServiceBoardsByParentIdAutoTemplatesCount Get Count of BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest
*/
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplatesCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest {
	return ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardAutoTemplatesAPIService) GetServiceBoardsByParentIdAutoTemplatesCountExecute(r ApiGetServiceBoardsByParentIdAutoTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.GetServiceBoardsByParentIdAutoTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest) Execute() (*BoardAutoTemplate, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdAutoTemplatesByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdAutoTemplatesById Patch BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoTemplateId
 @param parentId boardId
 @return ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest
*/
func (a *BoardAutoTemplatesAPIService) PatchServiceBoardsByParentIdAutoTemplatesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest {
	return ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardAutoTemplate
func (a *BoardAutoTemplatesAPIService) PatchServiceBoardsByParentIdAutoTemplatesByIdExecute(r ApiPatchServiceBoardsByParentIdAutoTemplatesByIdRequest) (*BoardAutoTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardAutoTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.PatchServiceBoardsByParentIdAutoTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdAutoTemplatesRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	parentId int32
	boardAutoTemplate *BoardAutoTemplate
	clientId *string
}

// boardAutoTemplate
func (r ApiPostServiceBoardsByParentIdAutoTemplatesRequest) BoardAutoTemplate(boardAutoTemplate BoardAutoTemplate) ApiPostServiceBoardsByParentIdAutoTemplatesRequest {
	r.boardAutoTemplate = &boardAutoTemplate
	return r
}

// 
func (r ApiPostServiceBoardsByParentIdAutoTemplatesRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdAutoTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceBoardsByParentIdAutoTemplatesRequest) Execute() (*BoardAutoTemplate, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdAutoTemplatesExecute(r)
}

/*
PostServiceBoardsByParentIdAutoTemplates Post BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostServiceBoardsByParentIdAutoTemplatesRequest
*/
func (a *BoardAutoTemplatesAPIService) PostServiceBoardsByParentIdAutoTemplates(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdAutoTemplatesRequest {
	return ApiPostServiceBoardsByParentIdAutoTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardAutoTemplate
func (a *BoardAutoTemplatesAPIService) PostServiceBoardsByParentIdAutoTemplatesExecute(r ApiPostServiceBoardsByParentIdAutoTemplatesRequest) (*BoardAutoTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardAutoTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.PostServiceBoardsByParentIdAutoTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardAutoTemplate == nil {
		return localVarReturnValue, nil, reportError("boardAutoTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardAutoTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *BoardAutoTemplatesAPIService
	id int32
	parentId int32
	boardAutoTemplate *BoardAutoTemplate
	clientId *string
}

// boardAutoTemplate
func (r ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest) BoardAutoTemplate(boardAutoTemplate BoardAutoTemplate) ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.boardAutoTemplate = &boardAutoTemplate
	return r
}

// 
func (r ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest) Execute() (*BoardAutoTemplate, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdAutoTemplatesByIdExecute(r)
}

/*
PutServiceBoardsByParentIdAutoTemplatesById Put BoardAutoTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id autoTemplateId
 @param parentId boardId
 @return ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest
*/
func (a *BoardAutoTemplatesAPIService) PutServiceBoardsByParentIdAutoTemplatesById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest {
	return ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardAutoTemplate
func (a *BoardAutoTemplatesAPIService) PutServiceBoardsByParentIdAutoTemplatesByIdExecute(r ApiPutServiceBoardsByParentIdAutoTemplatesByIdRequest) (*BoardAutoTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardAutoTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoTemplatesAPIService.PutServiceBoardsByParentIdAutoTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardAutoTemplate == nil {
		return localVarReturnValue, nil, reportError("boardAutoTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardAutoTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
