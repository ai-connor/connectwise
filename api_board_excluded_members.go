/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardExcludedMembersAPIService BoardExcludedMembersAPI service
type BoardExcludedMembersAPIService service

type ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest struct {
	ctx context.Context
	ApiService *BoardExcludedMembersAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdExcludedMembersByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdExcludedMembersById Delete BoardExcludedMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id excludedMemberId
 @param parentId boardId
 @return ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest
*/
func (a *BoardExcludedMembersAPIService) DeleteServiceBoardsByParentIdExcludedMembersById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest {
	return ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *BoardExcludedMembersAPIService) DeleteServiceBoardsByParentIdExcludedMembersByIdExecute(r ApiDeleteServiceBoardsByParentIdExcludedMembersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardExcludedMembersAPIService.DeleteServiceBoardsByParentIdExcludedMembersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/excludedMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdExcludedMembersRequest struct {
	ctx context.Context
	ApiService *BoardExcludedMembersAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) Fields(fields string) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) Page(page int32) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdExcludedMembersRequest) Execute() ([]BoardExcludedMember, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdExcludedMembersExecute(r)
}

/*
GetServiceBoardsByParentIdExcludedMembers Get List of BoardExcludedMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdExcludedMembersRequest
*/
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembers(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdExcludedMembersRequest {
	return ApiGetServiceBoardsByParentIdExcludedMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardExcludedMember
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembersExecute(r ApiGetServiceBoardsByParentIdExcludedMembersRequest) ([]BoardExcludedMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardExcludedMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardExcludedMembersAPIService.GetServiceBoardsByParentIdExcludedMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/excludedMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest struct {
	ctx context.Context
	ApiService *BoardExcludedMembersAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) Execute() (*BoardExcludedMember, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdExcludedMembersByIdExecute(r)
}

/*
GetServiceBoardsByParentIdExcludedMembersById Get BoardExcludedMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id excludedMemberId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest
*/
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembersById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest {
	return ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardExcludedMember
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembersByIdExecute(r ApiGetServiceBoardsByParentIdExcludedMembersByIdRequest) (*BoardExcludedMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardExcludedMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardExcludedMembersAPIService.GetServiceBoardsByParentIdExcludedMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/excludedMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdExcludedMembersCountRequest struct {
	ctx context.Context
	ApiService *BoardExcludedMembersAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdExcludedMembersCountExecute(r)
}

/*
GetServiceBoardsByParentIdExcludedMembersCount Get Count of BoardExcludedMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdExcludedMembersCountRequest
*/
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembersCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdExcludedMembersCountRequest {
	return ApiGetServiceBoardsByParentIdExcludedMembersCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardExcludedMembersAPIService) GetServiceBoardsByParentIdExcludedMembersCountExecute(r ApiGetServiceBoardsByParentIdExcludedMembersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardExcludedMembersAPIService.GetServiceBoardsByParentIdExcludedMembersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/excludedMembers/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdExcludedMembersRequest struct {
	ctx context.Context
	ApiService *BoardExcludedMembersAPIService
	parentId int32
	clientId *string
	boardExcludedMember *BoardExcludedMember
}

// 
func (r ApiPostServiceBoardsByParentIdExcludedMembersRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdExcludedMembersRequest {
	r.clientId = &clientId
	return r
}

// boardExcludedMember
func (r ApiPostServiceBoardsByParentIdExcludedMembersRequest) BoardExcludedMember(boardExcludedMember BoardExcludedMember) ApiPostServiceBoardsByParentIdExcludedMembersRequest {
	r.boardExcludedMember = &boardExcludedMember
	return r
}

func (r ApiPostServiceBoardsByParentIdExcludedMembersRequest) Execute() (*BoardExcludedMember, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdExcludedMembersExecute(r)
}

/*
PostServiceBoardsByParentIdExcludedMembers Post BoardExcludedMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostServiceBoardsByParentIdExcludedMembersRequest
*/
func (a *BoardExcludedMembersAPIService) PostServiceBoardsByParentIdExcludedMembers(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdExcludedMembersRequest {
	return ApiPostServiceBoardsByParentIdExcludedMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardExcludedMember
func (a *BoardExcludedMembersAPIService) PostServiceBoardsByParentIdExcludedMembersExecute(r ApiPostServiceBoardsByParentIdExcludedMembersRequest) (*BoardExcludedMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardExcludedMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardExcludedMembersAPIService.PostServiceBoardsByParentIdExcludedMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/excludedMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardExcludedMember == nil {
		return localVarReturnValue, nil, reportError("boardExcludedMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardExcludedMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
