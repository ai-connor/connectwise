/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardItemAssociationsAPIService BoardItemAssociationsAPI service
type BoardItemAssociationsAPIService service

type ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest struct {
	ctx context.Context
	ApiService *BoardItemAssociationsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) Execute() ([]BoardItemAssociation, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsExecute(r)
}

/*
GetServiceBoardsByGrandparentIdItemsByParentIdAssociations Get List of BoardItemAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId itemId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest
*/
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociations(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest {
	return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []BoardItemAssociation
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsExecute(r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsRequest) ([]BoardItemAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardItemAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemAssociationsAPIService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/items/{parentId}/associations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemAssociationsAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Execute() (*BoardItemAssociation, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r)
}

/*
GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsById Get BoardItemAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id associationId
 @param parentId itemId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest
*/
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardItemAssociation
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) (*BoardItemAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItemAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemAssociationsAPIService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/items/{parentId}/associations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest struct {
	ctx context.Context
	ApiService *BoardItemAssociationsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountExecute(r)
}

/*
GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCount Get Count of BoardItemAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId itemId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest
*/
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest {
	return ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardItemAssociationsAPIService) GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountExecute(r ApiGetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemAssociationsAPIService.GetServiceBoardsByGrandparentIdItemsByParentIdAssociationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/items/{parentId}/associations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemAssociationsAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Execute() (*BoardItemAssociation, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r)
}

/*
PatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsById Patch BoardItemAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id associationId
 @param parentId itemId
 @param grandparentId boardId
 @return ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest
*/
func (a *BoardItemAssociationsAPIService) PatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	return ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardItemAssociation
func (a *BoardItemAssociationsAPIService) PatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r ApiPatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) (*BoardItemAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItemAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemAssociationsAPIService.PatchServiceBoardsByGrandparentIdItemsByParentIdAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/items/{parentId}/associations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemAssociationsAPIService
	id int32
	parentId int32
	grandparentId int32
	boardItemAssociation *BoardItemAssociation
	clientId *string
}

// itemAssociation
func (r ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) BoardItemAssociation(boardItemAssociation BoardItemAssociation) ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.boardItemAssociation = &boardItemAssociation
	return r
}

// 
func (r ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) Execute() (*BoardItemAssociation, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r)
}

/*
PutServiceBoardsByGrandparentIdItemsByParentIdAssociationsById Put BoardItemAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id associationId
 @param parentId itemId
 @param grandparentId boardId
 @return ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest
*/
func (a *BoardItemAssociationsAPIService) PutServiceBoardsByGrandparentIdItemsByParentIdAssociationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest {
	return ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardItemAssociation
func (a *BoardItemAssociationsAPIService) PutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdExecute(r ApiPutServiceBoardsByGrandparentIdItemsByParentIdAssociationsByIdRequest) (*BoardItemAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItemAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemAssociationsAPIService.PutServiceBoardsByGrandparentIdItemsByParentIdAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/items/{parentId}/associations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardItemAssociation == nil {
		return localVarReturnValue, nil, reportError("boardItemAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardItemAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
