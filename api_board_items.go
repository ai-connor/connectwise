/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardItemsAPIService BoardItemsAPI service
type BoardItemsAPIService service

type ApiDeleteServiceBoardsByParentIdItemsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByParentIdItemsByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdItemsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdItemsByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdItemsById Delete BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiDeleteServiceBoardsByParentIdItemsByIdRequest
*/
func (a *BoardItemsAPIService) DeleteServiceBoardsByParentIdItemsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdItemsByIdRequest {
	return ApiDeleteServiceBoardsByParentIdItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *BoardItemsAPIService) DeleteServiceBoardsByParentIdItemsByIdExecute(r ApiDeleteServiceBoardsByParentIdItemsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.DeleteServiceBoardsByParentIdItemsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdItemsRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) Fields(fields string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) Page(page int32) ApiGetServiceBoardsByParentIdItemsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdItemsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdItemsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdItemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdItemsRequest) Execute() ([]BoardItem, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdItemsExecute(r)
}

/*
GetServiceBoardsByParentIdItems Get List of BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdItemsRequest
*/
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItems(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdItemsRequest {
	return ApiGetServiceBoardsByParentIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardItem
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsExecute(r ApiGetServiceBoardsByParentIdItemsRequest) ([]BoardItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.GetServiceBoardsByParentIdItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdItemsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdItemsByIdRequest) Execute() (*BoardItem, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdItemsByIdExecute(r)
}

/*
GetServiceBoardsByParentIdItemsById Get BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdItemsByIdRequest
*/
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdItemsByIdRequest {
	return ApiGetServiceBoardsByParentIdItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardItem
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsByIdExecute(r ApiGetServiceBoardsByParentIdItemsByIdRequest) (*BoardItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.GetServiceBoardsByParentIdItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) Page(page int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdItemsByIdUsagesExecute(r)
}

/*
GetServiceBoardsByParentIdItemsByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest
*/
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsByIdUsages(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest {
	return ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsByIdUsagesExecute(r ApiGetServiceBoardsByParentIdItemsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.GetServiceBoardsByParentIdItemsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) Fields(fields string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) Page(page int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdItemsByIdUsagesListExecute(r)
}

/*
GetServiceBoardsByParentIdItemsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest
*/
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsByIdUsagesList(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest {
	return ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsByIdUsagesListExecute(r ApiGetServiceBoardsByParentIdItemsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.GetServiceBoardsByParentIdItemsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdItemsCountRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdItemsCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdItemsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdItemsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdItemsCountExecute(r)
}

/*
GetServiceBoardsByParentIdItemsCount Get Count of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdItemsCountRequest
*/
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdItemsCountRequest {
	return ApiGetServiceBoardsByParentIdItemsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardItemsAPIService) GetServiceBoardsByParentIdItemsCountExecute(r ApiGetServiceBoardsByParentIdItemsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.GetServiceBoardsByParentIdItemsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdItemsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdItemsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdItemsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceBoardsByParentIdItemsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceBoardsByParentIdItemsByIdRequest) Execute() (*BoardItem, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdItemsByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdItemsById Patch BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiPatchServiceBoardsByParentIdItemsByIdRequest
*/
func (a *BoardItemsAPIService) PatchServiceBoardsByParentIdItemsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdItemsByIdRequest {
	return ApiPatchServiceBoardsByParentIdItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardItem
func (a *BoardItemsAPIService) PatchServiceBoardsByParentIdItemsByIdExecute(r ApiPatchServiceBoardsByParentIdItemsByIdRequest) (*BoardItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.PatchServiceBoardsByParentIdItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdItemsRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	parentId int32
	boardItem *BoardItem
	clientId *string
}

// boardItem
func (r ApiPostServiceBoardsByParentIdItemsRequest) BoardItem(boardItem BoardItem) ApiPostServiceBoardsByParentIdItemsRequest {
	r.boardItem = &boardItem
	return r
}

// 
func (r ApiPostServiceBoardsByParentIdItemsRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdItemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceBoardsByParentIdItemsRequest) Execute() (*BoardItem, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdItemsExecute(r)
}

/*
PostServiceBoardsByParentIdItems Post BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostServiceBoardsByParentIdItemsRequest
*/
func (a *BoardItemsAPIService) PostServiceBoardsByParentIdItems(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdItemsRequest {
	return ApiPostServiceBoardsByParentIdItemsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardItem
func (a *BoardItemsAPIService) PostServiceBoardsByParentIdItemsExecute(r ApiPostServiceBoardsByParentIdItemsRequest) (*BoardItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.PostServiceBoardsByParentIdItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardItem == nil {
		return localVarReturnValue, nil, reportError("boardItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdItemsByIdRequest struct {
	ctx context.Context
	ApiService *BoardItemsAPIService
	id int32
	parentId int32
	boardItem *BoardItem
	clientId *string
}

// boardItem
func (r ApiPutServiceBoardsByParentIdItemsByIdRequest) BoardItem(boardItem BoardItem) ApiPutServiceBoardsByParentIdItemsByIdRequest {
	r.boardItem = &boardItem
	return r
}

// 
func (r ApiPutServiceBoardsByParentIdItemsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceBoardsByParentIdItemsByIdRequest) Execute() (*BoardItem, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdItemsByIdExecute(r)
}

/*
PutServiceBoardsByParentIdItemsById Put BoardItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id itemId
 @param parentId boardId
 @return ApiPutServiceBoardsByParentIdItemsByIdRequest
*/
func (a *BoardItemsAPIService) PutServiceBoardsByParentIdItemsById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdItemsByIdRequest {
	return ApiPutServiceBoardsByParentIdItemsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardItem
func (a *BoardItemsAPIService) PutServiceBoardsByParentIdItemsByIdExecute(r ApiPutServiceBoardsByParentIdItemsByIdRequest) (*BoardItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardItemsAPIService.PutServiceBoardsByParentIdItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/items/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.boardItem == nil {
		return localVarReturnValue, nil, reportError("boardItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.boardItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
