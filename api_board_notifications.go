/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardNotificationsAPIService BoardNotificationsAPI service
type BoardNotificationsAPIService service

type ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdNotificationsByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdNotificationsById Delete BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId boardId
 @return ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest
*/
func (a *BoardNotificationsAPIService) DeleteServiceBoardsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest {
	return ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *BoardNotificationsAPIService) DeleteServiceBoardsByParentIdNotificationsByIdExecute(r ApiDeleteServiceBoardsByParentIdNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.DeleteServiceBoardsByParentIdNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) Fields(fields string) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) Page(page int32) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdNotificationsRequest) Execute() ([]BoardNotification, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdNotificationsExecute(r)
}

/*
GetServiceBoardsByParentIdNotifications Get List of BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdNotificationsRequest
*/
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotifications(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdNotificationsRequest {
	return ApiGetServiceBoardsByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardNotification
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotificationsExecute(r ApiGetServiceBoardsByParentIdNotificationsRequest) ([]BoardNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.GetServiceBoardsByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) Execute() (*BoardNotification, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdNotificationsByIdExecute(r)
}

/*
GetServiceBoardsByParentIdNotificationsById Get BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdNotificationsByIdRequest
*/
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdNotificationsByIdRequest {
	return ApiGetServiceBoardsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardNotification
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotificationsByIdExecute(r ApiGetServiceBoardsByParentIdNotificationsByIdRequest) (*BoardNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.GetServiceBoardsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdNotificationsCountRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdNotificationsCountExecute(r)
}

/*
GetServiceBoardsByParentIdNotificationsCount Get Count of BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdNotificationsCountRequest
*/
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotificationsCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdNotificationsCountRequest {
	return ApiGetServiceBoardsByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardNotificationsAPIService) GetServiceBoardsByParentIdNotificationsCountExecute(r ApiGetServiceBoardsByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.GetServiceBoardsByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceBoardsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdNotificationsByIdRequest) Execute() (*BoardNotification, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdNotificationsByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdNotificationsById Patch BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId boardId
 @return ApiPatchServiceBoardsByParentIdNotificationsByIdRequest
*/
func (a *BoardNotificationsAPIService) PatchServiceBoardsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdNotificationsByIdRequest {
	return ApiPatchServiceBoardsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardNotification
func (a *BoardNotificationsAPIService) PatchServiceBoardsByParentIdNotificationsByIdExecute(r ApiPatchServiceBoardsByParentIdNotificationsByIdRequest) (*BoardNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.PatchServiceBoardsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	parentId int32
	clientId *string
	boardNotification *BoardNotification
}

// 
func (r ApiPostServiceBoardsByParentIdNotificationsRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// boardNotification
func (r ApiPostServiceBoardsByParentIdNotificationsRequest) BoardNotification(boardNotification BoardNotification) ApiPostServiceBoardsByParentIdNotificationsRequest {
	r.boardNotification = &boardNotification
	return r
}

func (r ApiPostServiceBoardsByParentIdNotificationsRequest) Execute() (*BoardNotification, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdNotificationsExecute(r)
}

/*
PostServiceBoardsByParentIdNotifications Post BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostServiceBoardsByParentIdNotificationsRequest
*/
func (a *BoardNotificationsAPIService) PostServiceBoardsByParentIdNotifications(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdNotificationsRequest {
	return ApiPostServiceBoardsByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardNotification
func (a *BoardNotificationsAPIService) PostServiceBoardsByParentIdNotificationsExecute(r ApiPostServiceBoardsByParentIdNotificationsRequest) (*BoardNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.PostServiceBoardsByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardNotification == nil {
		return localVarReturnValue, nil, reportError("boardNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	boardNotification *BoardNotification
}

// 
func (r ApiPutServiceBoardsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// boardNotification
func (r ApiPutServiceBoardsByParentIdNotificationsByIdRequest) BoardNotification(boardNotification BoardNotification) ApiPutServiceBoardsByParentIdNotificationsByIdRequest {
	r.boardNotification = &boardNotification
	return r
}

func (r ApiPutServiceBoardsByParentIdNotificationsByIdRequest) Execute() (*BoardNotification, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdNotificationsByIdExecute(r)
}

/*
PutServiceBoardsByParentIdNotificationsById Put BoardNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId boardId
 @return ApiPutServiceBoardsByParentIdNotificationsByIdRequest
*/
func (a *BoardNotificationsAPIService) PutServiceBoardsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdNotificationsByIdRequest {
	return ApiPutServiceBoardsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardNotification
func (a *BoardNotificationsAPIService) PutServiceBoardsByParentIdNotificationsByIdExecute(r ApiPutServiceBoardsByParentIdNotificationsByIdRequest) (*BoardNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardNotificationsAPIService.PutServiceBoardsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardNotification == nil {
		return localVarReturnValue, nil, reportError("boardNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
