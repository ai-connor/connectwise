/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardStatusNotificationsAPIService BoardStatusNotificationsAPI service
type BoardStatusNotificationsAPIService service

type ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r)
}

/*
DeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById Delete BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId statusId
 @param grandparentId boardId
 @return ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest
*/
func (a *BoardStatusNotificationsAPIService) DeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	return ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *BoardStatusNotificationsAPIService) DeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r ApiDeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.DeleteServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) Execute() ([]BoardStatusNotification, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsExecute(r)
}

/*
GetServiceBoardsByGrandparentIdStatusesByParentIdNotifications Get List of BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest
*/
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotifications(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []BoardStatusNotification
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsExecute(r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) ([]BoardStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Execute() (*BoardStatusNotification, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r)
}

/*
GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById Get BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId statusId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest
*/
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardStatusNotification
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) (*BoardStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) Fields(fields string) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) Page(page int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountExecute(r)
}

/*
GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCount Get Count of BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @param grandparentId boardId
 @return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest
*/
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest {
	return ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardStatusNotificationsAPIService) GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountExecute(r ApiGetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.GetServiceBoardsByGrandparentIdStatusesByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Execute() (*BoardStatusNotification, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById Patch BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId statusId
 @param grandparentId boardId
 @return ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest
*/
func (a *BoardStatusNotificationsAPIService) PatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	return ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardStatusNotification
func (a *BoardStatusNotificationsAPIService) PatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r ApiPatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) (*BoardStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.PatchServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	parentId int32
	grandparentId int32
	clientId *string
	boardStatusNotification *BoardStatusNotification
}

// 
func (r ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// boardStatusNotification
func (r ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) BoardStatusNotification(boardStatusNotification BoardStatusNotification) ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	r.boardStatusNotification = &boardStatusNotification
	return r
}

func (r ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) Execute() (*BoardStatusNotification, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsExecute(r)
}

/*
PostServiceBoardsByGrandparentIdStatusesByParentIdNotifications Post BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @param grandparentId boardId
 @return ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest
*/
func (a *BoardStatusNotificationsAPIService) PostServiceBoardsByGrandparentIdStatusesByParentIdNotifications(ctx context.Context, parentId int32, grandparentId int32) ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest {
	return ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardStatusNotification
func (a *BoardStatusNotificationsAPIService) PostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsExecute(r ApiPostServiceBoardsByGrandparentIdStatusesByParentIdNotificationsRequest) (*BoardStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.PostServiceBoardsByGrandparentIdStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardStatusNotification == nil {
		return localVarReturnValue, nil, reportError("boardStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusNotificationsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	boardStatusNotification *BoardStatusNotification
}

// 
func (r ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// boardStatusNotification
func (r ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) BoardStatusNotification(boardStatusNotification BoardStatusNotification) ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	r.boardStatusNotification = &boardStatusNotification
	return r
}

func (r ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) Execute() (*BoardStatusNotification, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById Put BoardStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId statusId
 @param grandparentId boardId
 @return ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest
*/
func (a *BoardStatusNotificationsAPIService) PutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest {
	return ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return BoardStatusNotification
func (a *BoardStatusNotificationsAPIService) PutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdExecute(r ApiPutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsByIdRequest) (*BoardStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusNotificationsAPIService.PutServiceBoardsByGrandparentIdStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{grandparentId}/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardStatusNotification == nil {
		return localVarReturnValue, nil, reportError("boardStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
