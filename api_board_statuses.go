/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardStatusesAPIService BoardStatusesAPI service
type BoardStatusesAPIService service

type ApiDeleteServiceBoardsByParentIdStatusesByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceBoardsByParentIdStatusesByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdStatusesByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdStatusesById Delete BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiDeleteServiceBoardsByParentIdStatusesByIdRequest
*/
func (a *BoardStatusesAPIService) DeleteServiceBoardsByParentIdStatusesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdStatusesByIdRequest {
	return ApiDeleteServiceBoardsByParentIdStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *BoardStatusesAPIService) DeleteServiceBoardsByParentIdStatusesByIdExecute(r ApiDeleteServiceBoardsByParentIdStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.DeleteServiceBoardsByParentIdStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdStatusesRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) Page(page int32) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdStatusesRequest) Execute() ([]BoardStatus, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdStatusesExecute(r)
}

/*
GetServiceBoardsByParentIdStatuses Get List of BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdStatusesRequest
*/
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatuses(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdStatusesRequest {
	return ApiGetServiceBoardsByParentIdStatusesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardStatus
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesExecute(r ApiGetServiceBoardsByParentIdStatusesRequest) ([]BoardStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.GetServiceBoardsByParentIdStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdStatusesByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdStatusesByIdRequest) Execute() (*BoardStatus, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdStatusesByIdExecute(r)
}

/*
GetServiceBoardsByParentIdStatusesById Get BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdStatusesByIdRequest
*/
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdStatusesByIdRequest {
	return ApiGetServiceBoardsByParentIdStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardStatus
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesByIdExecute(r ApiGetServiceBoardsByParentIdStatusesByIdRequest) (*BoardStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.GetServiceBoardsByParentIdStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) Page(page int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdStatusesByIdUsagesExecute(r)
}

/*
GetServiceBoardsByParentIdStatusesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest
*/
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesByIdUsages(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest {
	return ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesByIdUsagesExecute(r ApiGetServiceBoardsByParentIdStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.GetServiceBoardsByParentIdStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) Fields(fields string) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) Page(page int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdStatusesByIdUsagesListExecute(r)
}

/*
GetServiceBoardsByParentIdStatusesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest
*/
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesByIdUsagesList(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest {
	return ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesByIdUsagesListExecute(r ApiGetServiceBoardsByParentIdStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.GetServiceBoardsByParentIdStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdStatusesCountRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdStatusesCountExecute(r)
}

/*
GetServiceBoardsByParentIdStatusesCount Get Count of BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdStatusesCountRequest
*/
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdStatusesCountRequest {
	return ApiGetServiceBoardsByParentIdStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardStatusesAPIService) GetServiceBoardsByParentIdStatusesCountExecute(r ApiGetServiceBoardsByParentIdStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.GetServiceBoardsByParentIdStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdStatusesByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceBoardsByParentIdStatusesByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdStatusesByIdRequest) Execute() (*BoardStatus, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdStatusesByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdStatusesById Patch BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiPatchServiceBoardsByParentIdStatusesByIdRequest
*/
func (a *BoardStatusesAPIService) PatchServiceBoardsByParentIdStatusesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdStatusesByIdRequest {
	return ApiPatchServiceBoardsByParentIdStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardStatus
func (a *BoardStatusesAPIService) PatchServiceBoardsByParentIdStatusesByIdExecute(r ApiPatchServiceBoardsByParentIdStatusesByIdRequest) (*BoardStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.PatchServiceBoardsByParentIdStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdStatusesRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	parentId int32
	clientId *string
	boardStatus *BoardStatus
}

// 
func (r ApiPostServiceBoardsByParentIdStatusesRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdStatusesRequest {
	r.clientId = &clientId
	return r
}

// boardStatus
func (r ApiPostServiceBoardsByParentIdStatusesRequest) BoardStatus(boardStatus BoardStatus) ApiPostServiceBoardsByParentIdStatusesRequest {
	r.boardStatus = &boardStatus
	return r
}

func (r ApiPostServiceBoardsByParentIdStatusesRequest) Execute() (*BoardStatus, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdStatusesExecute(r)
}

/*
PostServiceBoardsByParentIdStatuses Post BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostServiceBoardsByParentIdStatusesRequest
*/
func (a *BoardStatusesAPIService) PostServiceBoardsByParentIdStatuses(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdStatusesRequest {
	return ApiPostServiceBoardsByParentIdStatusesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardStatus
func (a *BoardStatusesAPIService) PostServiceBoardsByParentIdStatusesExecute(r ApiPostServiceBoardsByParentIdStatusesRequest) (*BoardStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.PostServiceBoardsByParentIdStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardStatus == nil {
		return localVarReturnValue, nil, reportError("boardStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdStatusesByIdRequest struct {
	ctx context.Context
	ApiService *BoardStatusesAPIService
	id int32
	parentId int32
	clientId *string
	boardStatus *BoardStatus
}

// 
func (r ApiPutServiceBoardsByParentIdStatusesByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// boardStatus
func (r ApiPutServiceBoardsByParentIdStatusesByIdRequest) BoardStatus(boardStatus BoardStatus) ApiPutServiceBoardsByParentIdStatusesByIdRequest {
	r.boardStatus = &boardStatus
	return r
}

func (r ApiPutServiceBoardsByParentIdStatusesByIdRequest) Execute() (*BoardStatus, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdStatusesByIdExecute(r)
}

/*
PutServiceBoardsByParentIdStatusesById Put BoardStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @param parentId boardId
 @return ApiPutServiceBoardsByParentIdStatusesByIdRequest
*/
func (a *BoardStatusesAPIService) PutServiceBoardsByParentIdStatusesById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdStatusesByIdRequest {
	return ApiPutServiceBoardsByParentIdStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BoardStatus
func (a *BoardStatusesAPIService) PutServiceBoardsByParentIdStatusesByIdExecute(r ApiPutServiceBoardsByParentIdStatusesByIdRequest) (*BoardStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardStatusesAPIService.PutServiceBoardsByParentIdStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardStatus == nil {
		return localVarReturnValue, nil, reportError("boardStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
