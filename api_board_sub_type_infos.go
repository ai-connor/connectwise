/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardSubTypeInfosAPIService BoardSubTypeInfosAPI service
type BoardSubTypeInfosAPIService service

type ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *BoardSubTypeInfosAPIService
	parentId int32
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) Execute() (*BoardSubTypeInfo, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesByIdInfoExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesByIdInfo Get BoardSubTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @param id BoardSubTypeInfoId
 @return ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest
*/
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesByIdInfo(ctx context.Context, parentId int32, id int32) ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest {
	return ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		id: id,
	}
}

// Execute executes the request
//  @return BoardSubTypeInfo
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesByIdInfoExecute(r ApiGetServiceBoardsByParentIdSubtypesByIdInfoRequest) (*BoardSubTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardSubTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypeInfosAPIService.GetServiceBoardsByParentIdSubtypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesInfoRequest struct {
	ctx context.Context
	ApiService *BoardSubTypeInfosAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) Execute() ([]BoardSubTypeInfo, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesInfoExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesInfo Get List of BoardSubTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdSubtypesInfoRequest
*/
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesInfo(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSubtypesInfoRequest {
	return ApiGetServiceBoardsByParentIdSubtypesInfoRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []BoardSubTypeInfo
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesInfoExecute(r ApiGetServiceBoardsByParentIdSubtypesInfoRequest) ([]BoardSubTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardSubTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypeInfosAPIService.GetServiceBoardsByParentIdSubtypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/info"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest struct {
	ctx context.Context
	ApiService *BoardSubTypeInfosAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesInfoCountExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesInfoCount Get Count of BoardSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest
*/
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesInfoCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest {
	return ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardSubTypeInfosAPIService) GetServiceBoardsByParentIdSubtypesInfoCountExecute(r ApiGetServiceBoardsByParentIdSubtypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypeInfosAPIService.GetServiceBoardsByParentIdSubtypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/info/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
