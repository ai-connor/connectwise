/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BoardTypeInfosAPIService BoardTypeInfosAPI service
type BoardTypeInfosAPIService service

type ApiGetServiceInfoBoardtypesRequest struct {
	ctx context.Context
	ApiService *BoardTypeInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) Conditions(conditions string) ApiGetServiceInfoBoardtypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardtypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardtypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardtypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) Fields(fields string) ApiGetServiceInfoBoardtypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) Page(page int32) ApiGetServiceInfoBoardtypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardtypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) PageId(pageId int32) ApiGetServiceInfoBoardtypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesRequest) ClientId(clientId string) ApiGetServiceInfoBoardtypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardtypesRequest) Execute() ([]BoardTypeInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardtypesExecute(r)
}

/*
GetServiceInfoBoardtypes Get List of BoardTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceInfoBoardtypesRequest
*/
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypes(ctx context.Context) ApiGetServiceInfoBoardtypesRequest {
	return ApiGetServiceInfoBoardtypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []BoardTypeInfo
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypesExecute(r ApiGetServiceInfoBoardtypesRequest) ([]BoardTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []BoardTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypeInfosAPIService.GetServiceInfoBoardtypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boardtypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoBoardtypesByIdRequest struct {
	ctx context.Context
	ApiService *BoardTypeInfosAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) Conditions(conditions string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) Fields(fields string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) Page(page int32) ApiGetServiceInfoBoardtypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardtypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) PageId(pageId int32) ApiGetServiceInfoBoardtypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesByIdRequest) ClientId(clientId string) ApiGetServiceInfoBoardtypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardtypesByIdRequest) Execute() (*BoardTypeInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardtypesByIdExecute(r)
}

/*
GetServiceInfoBoardtypesById Get BoardTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id boardtypeId
 @return ApiGetServiceInfoBoardtypesByIdRequest
*/
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypesById(ctx context.Context, id int32) ApiGetServiceInfoBoardtypesByIdRequest {
	return ApiGetServiceInfoBoardtypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BoardTypeInfo
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypesByIdExecute(r ApiGetServiceInfoBoardtypesByIdRequest) (*BoardTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoardTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypeInfosAPIService.GetServiceInfoBoardtypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boardtypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoBoardtypesCountRequest struct {
	ctx context.Context
	ApiService *BoardTypeInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) Conditions(conditions string) ApiGetServiceInfoBoardtypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardtypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardtypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardtypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) Fields(fields string) ApiGetServiceInfoBoardtypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) Page(page int32) ApiGetServiceInfoBoardtypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardtypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) PageId(pageId int32) ApiGetServiceInfoBoardtypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceInfoBoardtypesCountRequest) ClientId(clientId string) ApiGetServiceInfoBoardtypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardtypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardtypesCountExecute(r)
}

/*
GetServiceInfoBoardtypesCount Get Count of BoardTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceInfoBoardtypesCountRequest
*/
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypesCount(ctx context.Context) ApiGetServiceInfoBoardtypesCountRequest {
	return ApiGetServiceInfoBoardtypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *BoardTypeInfosAPIService) GetServiceInfoBoardtypesCountExecute(r ApiGetServiceInfoBoardtypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypeInfosAPIService.GetServiceInfoBoardtypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boardtypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
