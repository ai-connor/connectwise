/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// BundlesAPIService BundlesAPI service
type BundlesAPIService service

type ApiPostSystemBundlesRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleRequestsCollection *BundleRequestsCollection
	clientId *string
}

// requests
func (r ApiPostSystemBundlesRequest) BundleRequestsCollection(bundleRequestsCollection BundleRequestsCollection) ApiPostSystemBundlesRequest {
	r.bundleRequestsCollection = &bundleRequestsCollection
	return r
}

// 
func (r ApiPostSystemBundlesRequest) ClientId(clientId string) ApiPostSystemBundlesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemBundlesRequest) Execute() (*BundleResultsCollection, *http.Response, error) {
	return r.ApiService.PostSystemBundlesExecute(r)
}

/*
PostSystemBundles Post BundleResultsCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemBundlesRequest
*/
func (a *BundlesAPIService) PostSystemBundles(ctx context.Context) ApiPostSystemBundlesRequest {
	return ApiPostSystemBundlesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BundleResultsCollection
func (a *BundlesAPIService) PostSystemBundlesExecute(r ApiPostSystemBundlesRequest) (*BundleResultsCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BundleResultsCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.PostSystemBundles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/bundles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bundleRequestsCollection == nil {
		return localVarReturnValue, nil, reportError("bundleRequestsCollection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.bundleRequestsCollection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemBundlesCountRequest struct {
	ctx context.Context
	ApiService *BundlesAPIService
	bundleRequestsCollection *BundleRequestsCollection
	clientId *string
}

// requests
func (r ApiPostSystemBundlesCountRequest) BundleRequestsCollection(bundleRequestsCollection BundleRequestsCollection) ApiPostSystemBundlesCountRequest {
	r.bundleRequestsCollection = &bundleRequestsCollection
	return r
}

// 
func (r ApiPostSystemBundlesCountRequest) ClientId(clientId string) ApiPostSystemBundlesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemBundlesCountRequest) Execute() (*BundleResultsCollection, *http.Response, error) {
	return r.ApiService.PostSystemBundlesCountExecute(r)
}

/*
PostSystemBundlesCount Post BundleResultsCollection

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemBundlesCountRequest
*/
func (a *BundlesAPIService) PostSystemBundlesCount(ctx context.Context) ApiPostSystemBundlesCountRequest {
	return ApiPostSystemBundlesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BundleResultsCollection
func (a *BundlesAPIService) PostSystemBundlesCountExecute(r ApiPostSystemBundlesCountRequest) (*BundleResultsCollection, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BundleResultsCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BundlesAPIService.PostSystemBundlesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/bundles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bundleRequestsCollection == nil {
		return localVarReturnValue, nil, reportError("bundleRequestsCollection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.bundleRequestsCollection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
