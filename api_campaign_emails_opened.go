/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignEmailsOpenedAPIService CampaignEmailsOpenedAPI service
type CampaignEmailsOpenedAPIService service

type ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r)
}

/*
DeleteMarketingCampaignsByParentIdEmailsOpenedById Delete EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailsOpenedId
 @param parentId campaignId
 @return ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest
*/
func (a *CampaignEmailsOpenedAPIService) DeleteMarketingCampaignsByParentIdEmailsOpenedById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	return ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CampaignEmailsOpenedAPIService) DeleteMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r ApiDeleteMarketingCampaignsByParentIdEmailsOpenedByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.DeleteMarketingCampaignsByParentIdEmailsOpenedById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) Execute() ([]EmailOpened, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdEmailsOpenedExecute(r)
}

/*
GetMarketingCampaignsByParentIdEmailsOpened Get List of EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest
*/
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpened(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest {
	return ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []EmailOpened
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpenedExecute(r ApiGetMarketingCampaignsByParentIdEmailsOpenedRequest) ([]EmailOpened, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EmailOpened
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.GetMarketingCampaignsByParentIdEmailsOpened")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Execute() (*EmailOpened, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r)
}

/*
GetMarketingCampaignsByParentIdEmailsOpenedById Get EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailsOpenedId
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest
*/
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpenedById(ctx context.Context, id int32, parentId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	return ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailOpened
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r ApiGetMarketingCampaignsByParentIdEmailsOpenedByIdRequest) (*EmailOpened, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailOpened
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.GetMarketingCampaignsByParentIdEmailsOpenedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdEmailsOpenedCountExecute(r)
}

/*
GetMarketingCampaignsByParentIdEmailsOpenedCount Get Count of EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest
*/
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpenedCount(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest {
	return ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignEmailsOpenedAPIService) GetMarketingCampaignsByParentIdEmailsOpenedCountExecute(r ApiGetMarketingCampaignsByParentIdEmailsOpenedCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.GetMarketingCampaignsByParentIdEmailsOpenedCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Execute() (*EmailOpened, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r)
}

/*
PatchMarketingCampaignsByParentIdEmailsOpenedById Patch EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailsOpenedId
 @param parentId campaignId
 @return ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest
*/
func (a *CampaignEmailsOpenedAPIService) PatchMarketingCampaignsByParentIdEmailsOpenedById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	return ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailOpened
func (a *CampaignEmailsOpenedAPIService) PatchMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r ApiPatchMarketingCampaignsByParentIdEmailsOpenedByIdRequest) (*EmailOpened, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailOpened
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.PatchMarketingCampaignsByParentIdEmailsOpenedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	parentId int32
	emailOpened *EmailOpened
	clientId *string
}

// emailOpened
func (r ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest) EmailOpened(emailOpened EmailOpened) ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.emailOpened = &emailOpened
	return r
}

// 
func (r ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest) ClientId(clientId string) ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest) Execute() (*EmailOpened, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsByParentIdEmailsOpenedExecute(r)
}

/*
PostMarketingCampaignsByParentIdEmailsOpened Post EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest
*/
func (a *CampaignEmailsOpenedAPIService) PostMarketingCampaignsByParentIdEmailsOpened(ctx context.Context, parentId int32) ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest {
	return ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailOpened
func (a *CampaignEmailsOpenedAPIService) PostMarketingCampaignsByParentIdEmailsOpenedExecute(r ApiPostMarketingCampaignsByParentIdEmailsOpenedRequest) (*EmailOpened, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailOpened
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.PostMarketingCampaignsByParentIdEmailsOpened")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailOpened == nil {
		return localVarReturnValue, nil, reportError("emailOpened is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.emailOpened
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignEmailsOpenedAPIService
	id int32
	parentId int32
	emailOpened *EmailOpened
	clientId *string
}

// emailOpened
func (r ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest) EmailOpened(emailOpened EmailOpened) ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.emailOpened = &emailOpened
	return r
}

// 
func (r ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest) Execute() (*EmailOpened, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r)
}

/*
PutMarketingCampaignsByParentIdEmailsOpenedById Put EmailOpened

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailsOpenedId
 @param parentId campaignId
 @return ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest
*/
func (a *CampaignEmailsOpenedAPIService) PutMarketingCampaignsByParentIdEmailsOpenedById(ctx context.Context, id int32, parentId int32) ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest {
	return ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailOpened
func (a *CampaignEmailsOpenedAPIService) PutMarketingCampaignsByParentIdEmailsOpenedByIdExecute(r ApiPutMarketingCampaignsByParentIdEmailsOpenedByIdRequest) (*EmailOpened, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailOpened
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignEmailsOpenedAPIService.PutMarketingCampaignsByParentIdEmailsOpenedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/emailsOpened/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailOpened == nil {
		return localVarReturnValue, nil, reportError("emailOpened is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.emailOpened
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
