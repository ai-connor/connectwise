/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignFormsSubmittedAPIService CampaignFormsSubmittedAPI service
type CampaignFormsSubmittedAPIService service

type ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r)
}

/*
DeleteMarketingCampaignsByParentIdFormsSubmittedById Delete FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id formsSubmittedId
 @param parentId campaignId
 @return ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest
*/
func (a *CampaignFormsSubmittedAPIService) DeleteMarketingCampaignsByParentIdFormsSubmittedById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	return ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CampaignFormsSubmittedAPIService) DeleteMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r ApiDeleteMarketingCampaignsByParentIdFormsSubmittedByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.DeleteMarketingCampaignsByParentIdFormsSubmittedById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) Execute() ([]FormSubmitted, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdFormsSubmittedExecute(r)
}

/*
GetMarketingCampaignsByParentIdFormsSubmitted Get List of FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest
*/
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmitted(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest {
	return ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []FormSubmitted
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmittedExecute(r ApiGetMarketingCampaignsByParentIdFormsSubmittedRequest) ([]FormSubmitted, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FormSubmitted
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.GetMarketingCampaignsByParentIdFormsSubmitted")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Execute() (*FormSubmitted, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r)
}

/*
GetMarketingCampaignsByParentIdFormsSubmittedById Get FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id formsSubmittedId
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest
*/
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmittedById(ctx context.Context, id int32, parentId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	return ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return FormSubmitted
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r ApiGetMarketingCampaignsByParentIdFormsSubmittedByIdRequest) (*FormSubmitted, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormSubmitted
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.GetMarketingCampaignsByParentIdFormsSubmittedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdFormsSubmittedCountExecute(r)
}

/*
GetMarketingCampaignsByParentIdFormsSubmittedCount Get Count of FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest
*/
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmittedCount(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest {
	return ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignFormsSubmittedAPIService) GetMarketingCampaignsByParentIdFormsSubmittedCountExecute(r ApiGetMarketingCampaignsByParentIdFormsSubmittedCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.GetMarketingCampaignsByParentIdFormsSubmittedCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Execute() (*FormSubmitted, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r)
}

/*
PatchMarketingCampaignsByParentIdFormsSubmittedById Patch FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id formsSubmittedId
 @param parentId campaignId
 @return ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest
*/
func (a *CampaignFormsSubmittedAPIService) PatchMarketingCampaignsByParentIdFormsSubmittedById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	return ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return FormSubmitted
func (a *CampaignFormsSubmittedAPIService) PatchMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r ApiPatchMarketingCampaignsByParentIdFormsSubmittedByIdRequest) (*FormSubmitted, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormSubmitted
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.PatchMarketingCampaignsByParentIdFormsSubmittedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	parentId int32
	formSubmitted *FormSubmitted
	clientId *string
}

// formSubmitted
func (r ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest) FormSubmitted(formSubmitted FormSubmitted) ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.formSubmitted = &formSubmitted
	return r
}

// 
func (r ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest) ClientId(clientId string) ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest) Execute() (*FormSubmitted, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsByParentIdFormsSubmittedExecute(r)
}

/*
PostMarketingCampaignsByParentIdFormsSubmitted Post FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest
*/
func (a *CampaignFormsSubmittedAPIService) PostMarketingCampaignsByParentIdFormsSubmitted(ctx context.Context, parentId int32) ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest {
	return ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return FormSubmitted
func (a *CampaignFormsSubmittedAPIService) PostMarketingCampaignsByParentIdFormsSubmittedExecute(r ApiPostMarketingCampaignsByParentIdFormsSubmittedRequest) (*FormSubmitted, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormSubmitted
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.PostMarketingCampaignsByParentIdFormsSubmitted")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.formSubmitted == nil {
		return localVarReturnValue, nil, reportError("formSubmitted is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.formSubmitted
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignFormsSubmittedAPIService
	id int32
	parentId int32
	formSubmitted *FormSubmitted
	clientId *string
}

// formSubmitted
func (r ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest) FormSubmitted(formSubmitted FormSubmitted) ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.formSubmitted = &formSubmitted
	return r
}

// 
func (r ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest) Execute() (*FormSubmitted, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r)
}

/*
PutMarketingCampaignsByParentIdFormsSubmittedById Put FormSubmitted

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id formsSubmittedId
 @param parentId campaignId
 @return ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest
*/
func (a *CampaignFormsSubmittedAPIService) PutMarketingCampaignsByParentIdFormsSubmittedById(ctx context.Context, id int32, parentId int32) ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest {
	return ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return FormSubmitted
func (a *CampaignFormsSubmittedAPIService) PutMarketingCampaignsByParentIdFormsSubmittedByIdExecute(r ApiPutMarketingCampaignsByParentIdFormsSubmittedByIdRequest) (*FormSubmitted, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FormSubmitted
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignFormsSubmittedAPIService.PutMarketingCampaignsByParentIdFormsSubmittedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/formsSubmitted/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.formSubmitted == nil {
		return localVarReturnValue, nil, reportError("formSubmitted is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.formSubmitted
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
