/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignLinksClickedAPIService CampaignLinksClickedAPI service
type CampaignLinksClickedAPIService service

type ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsByParentIdLinksClickedByIdExecute(r)
}

/*
DeleteMarketingCampaignsByParentIdLinksClickedById Delete LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linksClickedId
 @param parentId campaignId
 @return ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest
*/
func (a *CampaignLinksClickedAPIService) DeleteMarketingCampaignsByParentIdLinksClickedById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest {
	return ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CampaignLinksClickedAPIService) DeleteMarketingCampaignsByParentIdLinksClickedByIdExecute(r ApiDeleteMarketingCampaignsByParentIdLinksClickedByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.DeleteMarketingCampaignsByParentIdLinksClickedById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdLinksClickedRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) Execute() ([]LinkClicked, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdLinksClickedExecute(r)
}

/*
GetMarketingCampaignsByParentIdLinksClicked Get List of LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdLinksClickedRequest
*/
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClicked(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdLinksClickedRequest {
	return ApiGetMarketingCampaignsByParentIdLinksClickedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []LinkClicked
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClickedExecute(r ApiGetMarketingCampaignsByParentIdLinksClickedRequest) ([]LinkClicked, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LinkClicked
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.GetMarketingCampaignsByParentIdLinksClicked")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) Execute() (*LinkClicked, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdLinksClickedByIdExecute(r)
}

/*
GetMarketingCampaignsByParentIdLinksClickedById Get LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linksClickedId
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest
*/
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClickedById(ctx context.Context, id int32, parentId int32) ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest {
	return ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return LinkClicked
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClickedByIdExecute(r ApiGetMarketingCampaignsByParentIdLinksClickedByIdRequest) (*LinkClicked, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkClicked
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.GetMarketingCampaignsByParentIdLinksClickedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdLinksClickedCountExecute(r)
}

/*
GetMarketingCampaignsByParentIdLinksClickedCount Get Count of LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest
*/
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClickedCount(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest {
	return ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignLinksClickedAPIService) GetMarketingCampaignsByParentIdLinksClickedCountExecute(r ApiGetMarketingCampaignsByParentIdLinksClickedCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.GetMarketingCampaignsByParentIdLinksClickedCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest) Execute() (*LinkClicked, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsByParentIdLinksClickedByIdExecute(r)
}

/*
PatchMarketingCampaignsByParentIdLinksClickedById Patch LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linksClickedId
 @param parentId campaignId
 @return ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest
*/
func (a *CampaignLinksClickedAPIService) PatchMarketingCampaignsByParentIdLinksClickedById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest {
	return ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return LinkClicked
func (a *CampaignLinksClickedAPIService) PatchMarketingCampaignsByParentIdLinksClickedByIdExecute(r ApiPatchMarketingCampaignsByParentIdLinksClickedByIdRequest) (*LinkClicked, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkClicked
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.PatchMarketingCampaignsByParentIdLinksClickedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsByParentIdLinksClickedRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	parentId int32
	clientId *string
	linkClicked *LinkClicked
}

// 
func (r ApiPostMarketingCampaignsByParentIdLinksClickedRequest) ClientId(clientId string) ApiPostMarketingCampaignsByParentIdLinksClickedRequest {
	r.clientId = &clientId
	return r
}

// linkClicked
func (r ApiPostMarketingCampaignsByParentIdLinksClickedRequest) LinkClicked(linkClicked LinkClicked) ApiPostMarketingCampaignsByParentIdLinksClickedRequest {
	r.linkClicked = &linkClicked
	return r
}

func (r ApiPostMarketingCampaignsByParentIdLinksClickedRequest) Execute() (*LinkClicked, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsByParentIdLinksClickedExecute(r)
}

/*
PostMarketingCampaignsByParentIdLinksClicked Post LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId campaignId
 @return ApiPostMarketingCampaignsByParentIdLinksClickedRequest
*/
func (a *CampaignLinksClickedAPIService) PostMarketingCampaignsByParentIdLinksClicked(ctx context.Context, parentId int32) ApiPostMarketingCampaignsByParentIdLinksClickedRequest {
	return ApiPostMarketingCampaignsByParentIdLinksClickedRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return LinkClicked
func (a *CampaignLinksClickedAPIService) PostMarketingCampaignsByParentIdLinksClickedExecute(r ApiPostMarketingCampaignsByParentIdLinksClickedRequest) (*LinkClicked, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkClicked
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.PostMarketingCampaignsByParentIdLinksClicked")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.linkClicked == nil {
		return localVarReturnValue, nil, reportError("linkClicked is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.linkClicked
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest struct {
	ctx context.Context
	ApiService *CampaignLinksClickedAPIService
	id int32
	parentId int32
	clientId *string
	linkClicked *LinkClicked
}

// 
func (r ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.clientId = &clientId
	return r
}

// linkClicked
func (r ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest) LinkClicked(linkClicked LinkClicked) ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest {
	r.linkClicked = &linkClicked
	return r
}

func (r ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest) Execute() (*LinkClicked, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsByParentIdLinksClickedByIdExecute(r)
}

/*
PutMarketingCampaignsByParentIdLinksClickedById Put LinkClicked

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linksClickedId
 @param parentId campaignId
 @return ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest
*/
func (a *CampaignLinksClickedAPIService) PutMarketingCampaignsByParentIdLinksClickedById(ctx context.Context, id int32, parentId int32) ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest {
	return ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return LinkClicked
func (a *CampaignLinksClickedAPIService) PutMarketingCampaignsByParentIdLinksClickedByIdExecute(r ApiPutMarketingCampaignsByParentIdLinksClickedByIdRequest) (*LinkClicked, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkClicked
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignLinksClickedAPIService.PutMarketingCampaignsByParentIdLinksClickedById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/linksClicked/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.linkClicked == nil {
		return localVarReturnValue, nil, reportError("linkClicked is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.linkClicked
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
