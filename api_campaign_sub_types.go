/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignSubTypesAPIService CampaignSubTypesAPI service
type CampaignSubTypesAPIService service

type ApiDeleteMarketingCampaignsSubTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsSubTypesByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsSubTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsSubTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsSubTypesByIdExecute(r)
}

/*
DeleteMarketingCampaignsSubTypesById Delete CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subTypeId
 @return ApiDeleteMarketingCampaignsSubTypesByIdRequest
*/
func (a *CampaignSubTypesAPIService) DeleteMarketingCampaignsSubTypesById(ctx context.Context, id int32) ApiDeleteMarketingCampaignsSubTypesByIdRequest {
	return ApiDeleteMarketingCampaignsSubTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CampaignSubTypesAPIService) DeleteMarketingCampaignsSubTypesByIdExecute(r ApiDeleteMarketingCampaignsSubTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.DeleteMarketingCampaignsSubTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsSubTypesRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) ClientId(clientId string) ApiGetMarketingCampaignsSubTypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) Conditions(conditions string) ApiGetMarketingCampaignsSubTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsSubTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsSubTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsSubTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) Fields(fields string) ApiGetMarketingCampaignsSubTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) Page(page int32) ApiGetMarketingCampaignsSubTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsSubTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesRequest) PageId(pageId int32) ApiGetMarketingCampaignsSubTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsSubTypesRequest) Execute() ([]CampaignSubTypeCampaignSubType, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsSubTypesExecute(r)
}

/*
GetMarketingCampaignsSubTypes Get List of CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsSubTypesRequest
*/
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypes(ctx context.Context) ApiGetMarketingCampaignsSubTypesRequest {
	return ApiGetMarketingCampaignsSubTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CampaignSubTypeCampaignSubType
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypesExecute(r ApiGetMarketingCampaignsSubTypesRequest) ([]CampaignSubTypeCampaignSubType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CampaignSubTypeCampaignSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.GetMarketingCampaignsSubTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsSubTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) Fields(fields string) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) Page(page int32) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsSubTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsSubTypesByIdRequest) Execute() (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsSubTypesByIdExecute(r)
}

/*
GetMarketingCampaignsSubTypesById Get CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subTypeId
 @return ApiGetMarketingCampaignsSubTypesByIdRequest
*/
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypesById(ctx context.Context, id int32) ApiGetMarketingCampaignsSubTypesByIdRequest {
	return ApiGetMarketingCampaignsSubTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignSubTypeCampaignSubType
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypesByIdExecute(r ApiGetMarketingCampaignsSubTypesByIdRequest) (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignSubTypeCampaignSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.GetMarketingCampaignsSubTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsSubTypesCountRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) Fields(fields string) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) Page(page int32) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsSubTypesCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsSubTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsSubTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsSubTypesCountExecute(r)
}

/*
GetMarketingCampaignsSubTypesCount Get Count of CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsSubTypesCountRequest
*/
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypesCount(ctx context.Context) ApiGetMarketingCampaignsSubTypesCountRequest {
	return ApiGetMarketingCampaignsSubTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignSubTypesAPIService) GetMarketingCampaignsSubTypesCountExecute(r ApiGetMarketingCampaignsSubTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.GetMarketingCampaignsSubTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsSubTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchMarketingCampaignsSubTypesByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsSubTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsSubTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsSubTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingCampaignsSubTypesByIdRequest) Execute() (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsSubTypesByIdExecute(r)
}

/*
PatchMarketingCampaignsSubTypesById Patch CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subTypeId
 @return ApiPatchMarketingCampaignsSubTypesByIdRequest
*/
func (a *CampaignSubTypesAPIService) PatchMarketingCampaignsSubTypesById(ctx context.Context, id int32) ApiPatchMarketingCampaignsSubTypesByIdRequest {
	return ApiPatchMarketingCampaignsSubTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignSubTypeCampaignSubType
func (a *CampaignSubTypesAPIService) PatchMarketingCampaignsSubTypesByIdExecute(r ApiPatchMarketingCampaignsSubTypesByIdRequest) (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignSubTypeCampaignSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.PatchMarketingCampaignsSubTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsSubTypesRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	clientId *string
	campaignSubTypeCampaignSubType *CampaignSubTypeCampaignSubType
}

// 
func (r ApiPostMarketingCampaignsSubTypesRequest) ClientId(clientId string) ApiPostMarketingCampaignsSubTypesRequest {
	r.clientId = &clientId
	return r
}

// campaignSubType
func (r ApiPostMarketingCampaignsSubTypesRequest) CampaignSubTypeCampaignSubType(campaignSubTypeCampaignSubType CampaignSubTypeCampaignSubType) ApiPostMarketingCampaignsSubTypesRequest {
	r.campaignSubTypeCampaignSubType = &campaignSubTypeCampaignSubType
	return r
}

func (r ApiPostMarketingCampaignsSubTypesRequest) Execute() (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsSubTypesExecute(r)
}

/*
PostMarketingCampaignsSubTypes Post CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingCampaignsSubTypesRequest
*/
func (a *CampaignSubTypesAPIService) PostMarketingCampaignsSubTypes(ctx context.Context) ApiPostMarketingCampaignsSubTypesRequest {
	return ApiPostMarketingCampaignsSubTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CampaignSubTypeCampaignSubType
func (a *CampaignSubTypesAPIService) PostMarketingCampaignsSubTypesExecute(r ApiPostMarketingCampaignsSubTypesRequest) (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignSubTypeCampaignSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.PostMarketingCampaignsSubTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignSubTypeCampaignSubType == nil {
		return localVarReturnValue, nil, reportError("campaignSubTypeCampaignSubType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignSubTypeCampaignSubType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsSubTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignSubTypesAPIService
	id int32
	clientId *string
	campaignSubTypeCampaignSubType *CampaignSubTypeCampaignSubType
}

// 
func (r ApiPutMarketingCampaignsSubTypesByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsSubTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// campaignSubType
func (r ApiPutMarketingCampaignsSubTypesByIdRequest) CampaignSubTypeCampaignSubType(campaignSubTypeCampaignSubType CampaignSubTypeCampaignSubType) ApiPutMarketingCampaignsSubTypesByIdRequest {
	r.campaignSubTypeCampaignSubType = &campaignSubTypeCampaignSubType
	return r
}

func (r ApiPutMarketingCampaignsSubTypesByIdRequest) Execute() (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsSubTypesByIdExecute(r)
}

/*
PutMarketingCampaignsSubTypesById Put CampaignSubType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subTypeId
 @return ApiPutMarketingCampaignsSubTypesByIdRequest
*/
func (a *CampaignSubTypesAPIService) PutMarketingCampaignsSubTypesById(ctx context.Context, id int32) ApiPutMarketingCampaignsSubTypesByIdRequest {
	return ApiPutMarketingCampaignsSubTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignSubTypeCampaignSubType
func (a *CampaignSubTypesAPIService) PutMarketingCampaignsSubTypesByIdExecute(r ApiPutMarketingCampaignsSubTypesByIdRequest) (*CampaignSubTypeCampaignSubType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignSubTypeCampaignSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignSubTypesAPIService.PutMarketingCampaignsSubTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/subTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignSubTypeCampaignSubType == nil {
		return localVarReturnValue, nil, reportError("campaignSubTypeCampaignSubType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignSubTypeCampaignSubType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
