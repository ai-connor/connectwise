/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignTypesAPIService CampaignTypesAPI service
type CampaignTypesAPIService service

type ApiDeleteMarketingCampaignsTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsTypesByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsTypesByIdExecute(r)
}

/*
DeleteMarketingCampaignsTypesById Delete CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteMarketingCampaignsTypesByIdRequest
*/
func (a *CampaignTypesAPIService) DeleteMarketingCampaignsTypesById(ctx context.Context, id int32) ApiDeleteMarketingCampaignsTypesByIdRequest {
	return ApiDeleteMarketingCampaignsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CampaignTypesAPIService) DeleteMarketingCampaignsTypesByIdExecute(r ApiDeleteMarketingCampaignsTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.DeleteMarketingCampaignsTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsTypesRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) Conditions(conditions string) ApiGetMarketingCampaignsTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) Fields(fields string) ApiGetMarketingCampaignsTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) Page(page int32) ApiGetMarketingCampaignsTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) PageId(pageId int32) ApiGetMarketingCampaignsTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesRequest) ClientId(clientId string) ApiGetMarketingCampaignsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsTypesRequest) Execute() ([]CampaignType, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsTypesExecute(r)
}

/*
GetMarketingCampaignsTypes Get List of CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsTypesRequest
*/
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypes(ctx context.Context) ApiGetMarketingCampaignsTypesRequest {
	return ApiGetMarketingCampaignsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CampaignType
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypesExecute(r ApiGetMarketingCampaignsTypesRequest) ([]CampaignType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CampaignType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.GetMarketingCampaignsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) Fields(fields string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) Page(page int32) ApiGetMarketingCampaignsTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsTypesByIdRequest) Execute() (*CampaignType, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsTypesByIdExecute(r)
}

/*
GetMarketingCampaignsTypesById Get CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetMarketingCampaignsTypesByIdRequest
*/
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypesById(ctx context.Context, id int32) ApiGetMarketingCampaignsTypesByIdRequest {
	return ApiGetMarketingCampaignsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignType
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypesByIdExecute(r ApiGetMarketingCampaignsTypesByIdRequest) (*CampaignType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.GetMarketingCampaignsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsTypesCountRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) Fields(fields string) ApiGetMarketingCampaignsTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) Page(page int32) ApiGetMarketingCampaignsTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingCampaignsTypesCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsTypesCountExecute(r)
}

/*
GetMarketingCampaignsTypesCount Get Count of CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsTypesCountRequest
*/
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypesCount(ctx context.Context) ApiGetMarketingCampaignsTypesCountRequest {
	return ApiGetMarketingCampaignsTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignTypesAPIService) GetMarketingCampaignsTypesCountExecute(r ApiGetMarketingCampaignsTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.GetMarketingCampaignsTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchMarketingCampaignsTypesByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchMarketingCampaignsTypesByIdRequest) Execute() (*CampaignType, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsTypesByIdExecute(r)
}

/*
PatchMarketingCampaignsTypesById Patch CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchMarketingCampaignsTypesByIdRequest
*/
func (a *CampaignTypesAPIService) PatchMarketingCampaignsTypesById(ctx context.Context, id int32) ApiPatchMarketingCampaignsTypesByIdRequest {
	return ApiPatchMarketingCampaignsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignType
func (a *CampaignTypesAPIService) PatchMarketingCampaignsTypesByIdExecute(r ApiPatchMarketingCampaignsTypesByIdRequest) (*CampaignType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.PatchMarketingCampaignsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsTypesRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	campaignType *CampaignType
	clientId *string
}

// campaignType
func (r ApiPostMarketingCampaignsTypesRequest) CampaignType(campaignType CampaignType) ApiPostMarketingCampaignsTypesRequest {
	r.campaignType = &campaignType
	return r
}

// 
func (r ApiPostMarketingCampaignsTypesRequest) ClientId(clientId string) ApiPostMarketingCampaignsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostMarketingCampaignsTypesRequest) Execute() (*CampaignType, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsTypesExecute(r)
}

/*
PostMarketingCampaignsTypes Post CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingCampaignsTypesRequest
*/
func (a *CampaignTypesAPIService) PostMarketingCampaignsTypes(ctx context.Context) ApiPostMarketingCampaignsTypesRequest {
	return ApiPostMarketingCampaignsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CampaignType
func (a *CampaignTypesAPIService) PostMarketingCampaignsTypesExecute(r ApiPostMarketingCampaignsTypesRequest) (*CampaignType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.PostMarketingCampaignsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.campaignType == nil {
		return localVarReturnValue, nil, reportError("campaignType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.campaignType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsTypesByIdRequest struct {
	ctx context.Context
	ApiService *CampaignTypesAPIService
	id int32
	campaignType *CampaignType
	clientId *string
}

// campaignType
func (r ApiPutMarketingCampaignsTypesByIdRequest) CampaignType(campaignType CampaignType) ApiPutMarketingCampaignsTypesByIdRequest {
	r.campaignType = &campaignType
	return r
}

// 
func (r ApiPutMarketingCampaignsTypesByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutMarketingCampaignsTypesByIdRequest) Execute() (*CampaignType, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsTypesByIdExecute(r)
}

/*
PutMarketingCampaignsTypesById Put CampaignType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutMarketingCampaignsTypesByIdRequest
*/
func (a *CampaignTypesAPIService) PutMarketingCampaignsTypesById(ctx context.Context, id int32) ApiPutMarketingCampaignsTypesByIdRequest {
	return ApiPutMarketingCampaignsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CampaignType
func (a *CampaignTypesAPIService) PutMarketingCampaignsTypesByIdExecute(r ApiPutMarketingCampaignsTypesByIdRequest) (*CampaignType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CampaignType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignTypesAPIService.PutMarketingCampaignsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.campaignType == nil {
		return localVarReturnValue, nil, reportError("campaignType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.campaignType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
