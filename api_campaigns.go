/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CampaignsAPIService CampaignsAPI service
type CampaignsAPIService service

type ApiDeleteMarketingCampaignsByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteMarketingCampaignsByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsByIdExecute(r)
}

/*
DeleteMarketingCampaignsById Delete Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiDeleteMarketingCampaignsByIdRequest
*/
func (a *CampaignsAPIService) DeleteMarketingCampaignsById(ctx context.Context, id int32) ApiDeleteMarketingCampaignsByIdRequest {
	return ApiDeleteMarketingCampaignsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CampaignsAPIService) DeleteMarketingCampaignsByIdExecute(r ApiDeleteMarketingCampaignsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.DeleteMarketingCampaignsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsRequest) ClientId(clientId string) ApiGetMarketingCampaignsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) Conditions(conditions string) ApiGetMarketingCampaignsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) Fields(fields string) ApiGetMarketingCampaignsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) Page(page int32) ApiGetMarketingCampaignsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsRequest) PageId(pageId int32) ApiGetMarketingCampaignsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsRequest) Execute() ([]Campaign, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsExecute(r)
}

/*
GetMarketingCampaigns Get List of Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaigns(ctx context.Context) ApiGetMarketingCampaignsRequest {
	return ApiGetMarketingCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Campaign
func (a *CampaignsAPIService) GetMarketingCampaignsExecute(r ApiGetMarketingCampaignsRequest) ([]Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) Fields(fields string) ApiGetMarketingCampaignsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) Page(page int32) ApiGetMarketingCampaignsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByIdRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByIdExecute(r)
}

/*
GetMarketingCampaignsById Get Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiGetMarketingCampaignsByIdRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsById(ctx context.Context, id int32) ApiGetMarketingCampaignsByIdRequest {
	return ApiGetMarketingCampaignsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) GetMarketingCampaignsByIdExecute(r ApiGetMarketingCampaignsByIdRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByIdActivitiesRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) ClientId(clientId string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) Conditions(conditions string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) Fields(fields string) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) Page(page int32) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesRequest) PageId(pageId int32) ApiGetMarketingCampaignsByIdActivitiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByIdActivitiesRequest) Execute() ([]ActivityReference, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByIdActivitiesExecute(r)
}

/*
GetMarketingCampaignsByIdActivities Get List of ActivityReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiGetMarketingCampaignsByIdActivitiesRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsByIdActivities(ctx context.Context, id int32) ApiGetMarketingCampaignsByIdActivitiesRequest {
	return ApiGetMarketingCampaignsByIdActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []ActivityReference
func (a *CampaignsAPIService) GetMarketingCampaignsByIdActivitiesExecute(r ApiGetMarketingCampaignsByIdActivitiesRequest) ([]ActivityReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ActivityReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsByIdActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}/activities"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByIdActivitiesCountRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) Fields(fields string) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) Page(page int32) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByIdActivitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByIdActivitiesCountExecute(r)
}

/*
GetMarketingCampaignsByIdActivitiesCount Get Count of ActivityReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiGetMarketingCampaignsByIdActivitiesCountRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsByIdActivitiesCount(ctx context.Context, id int32) ApiGetMarketingCampaignsByIdActivitiesCountRequest {
	return ApiGetMarketingCampaignsByIdActivitiesCountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignsAPIService) GetMarketingCampaignsByIdActivitiesCountExecute(r ApiGetMarketingCampaignsByIdActivitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsByIdActivitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}/activities/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByIdOpportunitiesRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) ClientId(clientId string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) Conditions(conditions string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) Fields(fields string) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) Page(page int32) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) PageId(pageId int32) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByIdOpportunitiesRequest) Execute() ([]OpportunityReference, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByIdOpportunitiesExecute(r)
}

/*
GetMarketingCampaignsByIdOpportunities Get List of OpportunityReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiGetMarketingCampaignsByIdOpportunitiesRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsByIdOpportunities(ctx context.Context, id int32) ApiGetMarketingCampaignsByIdOpportunitiesRequest {
	return ApiGetMarketingCampaignsByIdOpportunitiesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []OpportunityReference
func (a *CampaignsAPIService) GetMarketingCampaignsByIdOpportunitiesExecute(r ApiGetMarketingCampaignsByIdOpportunitiesRequest) ([]OpportunityReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsByIdOpportunities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}/opportunities"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByIdOpportunitiesCountRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) Fields(fields string) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) Page(page int32) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByIdOpportunitiesCountExecute(r)
}

/*
GetMarketingCampaignsByIdOpportunitiesCount Get Count of OpportunityReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiGetMarketingCampaignsByIdOpportunitiesCountRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsByIdOpportunitiesCount(ctx context.Context, id int32) ApiGetMarketingCampaignsByIdOpportunitiesCountRequest {
	return ApiGetMarketingCampaignsByIdOpportunitiesCountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignsAPIService) GetMarketingCampaignsByIdOpportunitiesCountExecute(r ApiGetMarketingCampaignsByIdOpportunitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsByIdOpportunitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}/opportunities/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsCountRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetMarketingCampaignsCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) Fields(fields string) ApiGetMarketingCampaignsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) Page(page int32) ApiGetMarketingCampaignsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingCampaignsCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsCountExecute(r)
}

/*
GetMarketingCampaignsCount Get Count of Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetMarketingCampaignsCountRequest
*/
func (a *CampaignsAPIService) GetMarketingCampaignsCount(ctx context.Context) ApiGetMarketingCampaignsCountRequest {
	return ApiGetMarketingCampaignsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CampaignsAPIService) GetMarketingCampaignsCountExecute(r ApiGetMarketingCampaignsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.GetMarketingCampaignsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchMarketingCampaignsByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingCampaignsByIdRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsByIdExecute(r)
}

/*
PatchMarketingCampaignsById Patch Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiPatchMarketingCampaignsByIdRequest
*/
func (a *CampaignsAPIService) PatchMarketingCampaignsById(ctx context.Context, id int32) ApiPatchMarketingCampaignsByIdRequest {
	return ApiPatchMarketingCampaignsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) PatchMarketingCampaignsByIdExecute(r ApiPatchMarketingCampaignsByIdRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PatchMarketingCampaignsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	clientId *string
	campaign *Campaign
}

// 
func (r ApiPostMarketingCampaignsRequest) ClientId(clientId string) ApiPostMarketingCampaignsRequest {
	r.clientId = &clientId
	return r
}

// campaign
func (r ApiPostMarketingCampaignsRequest) Campaign(campaign Campaign) ApiPostMarketingCampaignsRequest {
	r.campaign = &campaign
	return r
}

func (r ApiPostMarketingCampaignsRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsExecute(r)
}

/*
PostMarketingCampaigns Post Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostMarketingCampaignsRequest
*/
func (a *CampaignsAPIService) PostMarketingCampaigns(ctx context.Context) ApiPostMarketingCampaignsRequest {
	return ApiPostMarketingCampaignsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) PostMarketingCampaignsExecute(r ApiPostMarketingCampaignsRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PostMarketingCampaigns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaign == nil {
		return localVarReturnValue, nil, reportError("campaign is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaign
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsByIdRequest struct {
	ctx context.Context
	ApiService *CampaignsAPIService
	id int32
	clientId *string
	campaign *Campaign
}

// 
func (r ApiPutMarketingCampaignsByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsByIdRequest {
	r.clientId = &clientId
	return r
}

// campaign
func (r ApiPutMarketingCampaignsByIdRequest) Campaign(campaign Campaign) ApiPutMarketingCampaignsByIdRequest {
	r.campaign = &campaign
	return r
}

func (r ApiPutMarketingCampaignsByIdRequest) Execute() (*Campaign, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsByIdExecute(r)
}

/*
PutMarketingCampaignsById Put Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id campaignId
 @return ApiPutMarketingCampaignsByIdRequest
*/
func (a *CampaignsAPIService) PutMarketingCampaignsById(ctx context.Context, id int32) ApiPutMarketingCampaignsByIdRequest {
	return ApiPutMarketingCampaignsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Campaign
func (a *CampaignsAPIService) PutMarketingCampaignsByIdExecute(r ApiPutMarketingCampaignsByIdRequest) (*Campaign, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Campaign
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignsAPIService.PutMarketingCampaignsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaign == nil {
		return localVarReturnValue, nil, reportError("campaign is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaign
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
