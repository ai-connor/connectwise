/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ChangeOrderAPIService ChangeOrderAPI service
type ChangeOrderAPIService service

type ApiDeleteProcurementChangeorderByIdRequest struct {
	ctx context.Context
	ApiService *ChangeOrderAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementChangeorderByIdRequest) ClientId(clientId string) ApiDeleteProcurementChangeorderByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementChangeorderByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementChangeorderByIdExecute(r)
}

/*
DeleteProcurementChangeorderById Deletes ChangeOrder By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ChangeOrderId
 @return ApiDeleteProcurementChangeorderByIdRequest
*/
func (a *ChangeOrderAPIService) DeleteProcurementChangeorderById(ctx context.Context, id int32) ApiDeleteProcurementChangeorderByIdRequest {
	return ApiDeleteProcurementChangeorderByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ChangeOrderAPIService) DeleteProcurementChangeorderByIdExecute(r ApiDeleteProcurementChangeorderByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeOrderAPIService.DeleteProcurementChangeorderById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/changeorder/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementChangeorderRequest struct {
	ctx context.Context
	ApiService *ChangeOrderAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementChangeorderRequest) ClientId(clientId string) ApiGetProcurementChangeorderRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) Conditions(conditions string) ApiGetProcurementChangeorderRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) ChildConditions(childConditions string) ApiGetProcurementChangeorderRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementChangeorderRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) OrderBy(orderBy string) ApiGetProcurementChangeorderRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) Fields(fields string) ApiGetProcurementChangeorderRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) Page(page int32) ApiGetProcurementChangeorderRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) PageSize(pageSize int32) ApiGetProcurementChangeorderRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementChangeorderRequest) PageId(pageId int32) ApiGetProcurementChangeorderRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementChangeorderRequest) Execute() ([]ChangeOrder, *http.Response, error) {
	return r.ApiService.GetProcurementChangeorderExecute(r)
}

/*
GetProcurementChangeorder Get List of ChangeOrders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementChangeorderRequest
*/
func (a *ChangeOrderAPIService) GetProcurementChangeorder(ctx context.Context) ApiGetProcurementChangeorderRequest {
	return ApiGetProcurementChangeorderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ChangeOrder
func (a *ChangeOrderAPIService) GetProcurementChangeorderExecute(r ApiGetProcurementChangeorderRequest) ([]ChangeOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ChangeOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeOrderAPIService.GetProcurementChangeorder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/changeorder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementChangeordersCountRequest struct {
	ctx context.Context
	ApiService *ChangeOrderAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementChangeordersCountRequest) ClientId(clientId string) ApiGetProcurementChangeordersCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) Conditions(conditions string) ApiGetProcurementChangeordersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) ChildConditions(childConditions string) ApiGetProcurementChangeordersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementChangeordersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) OrderBy(orderBy string) ApiGetProcurementChangeordersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) Fields(fields string) ApiGetProcurementChangeordersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) Page(page int32) ApiGetProcurementChangeordersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) PageSize(pageSize int32) ApiGetProcurementChangeordersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementChangeordersCountRequest) PageId(pageId int32) ApiGetProcurementChangeordersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementChangeordersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementChangeordersCountExecute(r)
}

/*
GetProcurementChangeordersCount Get Count of changeOrders

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementChangeordersCountRequest
*/
func (a *ChangeOrderAPIService) GetProcurementChangeordersCount(ctx context.Context) ApiGetProcurementChangeordersCountRequest {
	return ApiGetProcurementChangeordersCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ChangeOrderAPIService) GetProcurementChangeordersCountExecute(r ApiGetProcurementChangeordersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeOrderAPIService.GetProcurementChangeordersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/changeorders/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementChangeorderByIdRequest struct {
	ctx context.Context
	ApiService *ChangeOrderAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementChangeorderByIdRequest) ClientId(clientId string) ApiPatchProcurementChangeorderByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementChangeorderByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementChangeorderByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementChangeorderByIdRequest) Execute() (*ChangeOrder, *http.Response, error) {
	return r.ApiService.PatchProcurementChangeorderByIdExecute(r)
}

/*
PatchProcurementChangeorderById Patch ChangeOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ChangeOrderId
 @return ApiPatchProcurementChangeorderByIdRequest
*/
func (a *ChangeOrderAPIService) PatchProcurementChangeorderById(ctx context.Context, id int32) ApiPatchProcurementChangeorderByIdRequest {
	return ApiPatchProcurementChangeorderByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ChangeOrder
func (a *ChangeOrderAPIService) PatchProcurementChangeorderByIdExecute(r ApiPatchProcurementChangeorderByIdRequest) (*ChangeOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeOrderAPIService.PatchProcurementChangeorderById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/changeorder/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementChangeorderRequest struct {
	ctx context.Context
	ApiService *ChangeOrderAPIService
	clientId *string
	changeOrder *ChangeOrder
}

// 
func (r ApiPostProcurementChangeorderRequest) ClientId(clientId string) ApiPostProcurementChangeorderRequest {
	r.clientId = &clientId
	return r
}

// changeOrder
func (r ApiPostProcurementChangeorderRequest) ChangeOrder(changeOrder ChangeOrder) ApiPostProcurementChangeorderRequest {
	r.changeOrder = &changeOrder
	return r
}

func (r ApiPostProcurementChangeorderRequest) Execute() (*ChangeOrder, *http.Response, error) {
	return r.ApiService.PostProcurementChangeorderExecute(r)
}

/*
PostProcurementChangeorder Post ChangeOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementChangeorderRequest
*/
func (a *ChangeOrderAPIService) PostProcurementChangeorder(ctx context.Context) ApiPostProcurementChangeorderRequest {
	return ApiPostProcurementChangeorderRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChangeOrder
func (a *ChangeOrderAPIService) PostProcurementChangeorderExecute(r ApiPostProcurementChangeorderRequest) (*ChangeOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChangeOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeOrderAPIService.PostProcurementChangeorder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/changeorder"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.changeOrder == nil {
		return localVarReturnValue, nil, reportError("changeOrder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.changeOrder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
