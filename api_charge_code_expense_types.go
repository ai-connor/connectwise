/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ChargeCodeExpenseTypesAPIService ChargeCodeExpenseTypesAPI service
type ChargeCodeExpenseTypesAPIService service

type ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest) ClientId(clientId string) ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeChargeCodesByParentIdExpenseTypesByIdExecute(r)
}

/*
DeleteTimeChargeCodesByParentIdExpenseTypesById Delete ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeId
 @param parentId chargeCodeId
 @return ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) DeleteTimeChargeCodesByParentIdExpenseTypesById(ctx context.Context, id int32, parentId int32) ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	return ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ChargeCodeExpenseTypesAPIService) DeleteTimeChargeCodesByParentIdExpenseTypesByIdExecute(r ApiDeleteTimeChargeCodesByParentIdExpenseTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.DeleteTimeChargeCodesByParentIdExpenseTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByParentIdExpenseTypesRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) Conditions(conditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) Fields(fields string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) Page(page int32) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) PageId(pageId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) ClientId(clientId string) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) Execute() ([]ChargeCodeExpenseType, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByParentIdExpenseTypesExecute(r)
}

/*
GetTimeChargeCodesByParentIdExpenseTypes Get List of ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId chargeCodeId
 @return ApiGetTimeChargeCodesByParentIdExpenseTypesRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypes(ctx context.Context, parentId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesRequest {
	return ApiGetTimeChargeCodesByParentIdExpenseTypesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ChargeCodeExpenseType
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypesExecute(r ApiGetTimeChargeCodesByParentIdExpenseTypesRequest) ([]ChargeCodeExpenseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ChargeCodeExpenseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.GetTimeChargeCodesByParentIdExpenseTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) Conditions(conditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) Fields(fields string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) Page(page int32) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) PageId(pageId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) ClientId(clientId string) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) Execute() (*ChargeCodeExpenseType, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByParentIdExpenseTypesByIdExecute(r)
}

/*
GetTimeChargeCodesByParentIdExpenseTypesById Get ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeId
 @param parentId chargeCodeId
 @return ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypesById(ctx context.Context, id int32, parentId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	return ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ChargeCodeExpenseType
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypesByIdExecute(r ApiGetTimeChargeCodesByParentIdExpenseTypesByIdRequest) (*ChargeCodeExpenseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCodeExpenseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.GetTimeChargeCodesByParentIdExpenseTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) Conditions(conditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) Fields(fields string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) Page(page int32) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) PageId(pageId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) ClientId(clientId string) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByParentIdExpenseTypesCountExecute(r)
}

/*
GetTimeChargeCodesByParentIdExpenseTypesCount Get Count of ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId chargeCodeId
 @return ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypesCount(ctx context.Context, parentId int32) ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest {
	return ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ChargeCodeExpenseTypesAPIService) GetTimeChargeCodesByParentIdExpenseTypesCountExecute(r ApiGetTimeChargeCodesByParentIdExpenseTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.GetTimeChargeCodesByParentIdExpenseTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest) ClientId(clientId string) ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest) Execute() (*ChargeCodeExpenseType, *http.Response, error) {
	return r.ApiService.PatchTimeChargeCodesByParentIdExpenseTypesByIdExecute(r)
}

/*
PatchTimeChargeCodesByParentIdExpenseTypesById Patch ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeId
 @param parentId chargeCodeId
 @return ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) PatchTimeChargeCodesByParentIdExpenseTypesById(ctx context.Context, id int32, parentId int32) ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	return ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ChargeCodeExpenseType
func (a *ChargeCodeExpenseTypesAPIService) PatchTimeChargeCodesByParentIdExpenseTypesByIdExecute(r ApiPatchTimeChargeCodesByParentIdExpenseTypesByIdRequest) (*ChargeCodeExpenseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCodeExpenseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.PatchTimeChargeCodesByParentIdExpenseTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeChargeCodesByParentIdExpenseTypesRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	parentId int32
	chargeCodeExpenseType *ChargeCodeExpenseType
	clientId *string
}

// chargeCodeExpenseType
func (r ApiPostTimeChargeCodesByParentIdExpenseTypesRequest) ChargeCodeExpenseType(chargeCodeExpenseType ChargeCodeExpenseType) ApiPostTimeChargeCodesByParentIdExpenseTypesRequest {
	r.chargeCodeExpenseType = &chargeCodeExpenseType
	return r
}

// 
func (r ApiPostTimeChargeCodesByParentIdExpenseTypesRequest) ClientId(clientId string) ApiPostTimeChargeCodesByParentIdExpenseTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostTimeChargeCodesByParentIdExpenseTypesRequest) Execute() (*ChargeCodeExpenseType, *http.Response, error) {
	return r.ApiService.PostTimeChargeCodesByParentIdExpenseTypesExecute(r)
}

/*
PostTimeChargeCodesByParentIdExpenseTypes Post ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId chargeCodeId
 @return ApiPostTimeChargeCodesByParentIdExpenseTypesRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) PostTimeChargeCodesByParentIdExpenseTypes(ctx context.Context, parentId int32) ApiPostTimeChargeCodesByParentIdExpenseTypesRequest {
	return ApiPostTimeChargeCodesByParentIdExpenseTypesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ChargeCodeExpenseType
func (a *ChargeCodeExpenseTypesAPIService) PostTimeChargeCodesByParentIdExpenseTypesExecute(r ApiPostTimeChargeCodesByParentIdExpenseTypesRequest) (*ChargeCodeExpenseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCodeExpenseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.PostTimeChargeCodesByParentIdExpenseTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargeCodeExpenseType == nil {
		return localVarReturnValue, nil, reportError("chargeCodeExpenseType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.chargeCodeExpenseType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodeExpenseTypesAPIService
	id int32
	parentId int32
	chargeCodeExpenseType *ChargeCodeExpenseType
	clientId *string
}

// chargeCodeExpenseType
func (r ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest) ChargeCodeExpenseType(chargeCodeExpenseType ChargeCodeExpenseType) ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.chargeCodeExpenseType = &chargeCodeExpenseType
	return r
}

// 
func (r ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest) ClientId(clientId string) ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest) Execute() (*ChargeCodeExpenseType, *http.Response, error) {
	return r.ApiService.PutTimeChargeCodesByParentIdExpenseTypesByIdExecute(r)
}

/*
PutTimeChargeCodesByParentIdExpenseTypesById Put ChargeCodeExpenseType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeId
 @param parentId chargeCodeId
 @return ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest
*/
func (a *ChargeCodeExpenseTypesAPIService) PutTimeChargeCodesByParentIdExpenseTypesById(ctx context.Context, id int32, parentId int32) ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest {
	return ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ChargeCodeExpenseType
func (a *ChargeCodeExpenseTypesAPIService) PutTimeChargeCodesByParentIdExpenseTypesByIdExecute(r ApiPutTimeChargeCodesByParentIdExpenseTypesByIdRequest) (*ChargeCodeExpenseType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCodeExpenseType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodeExpenseTypesAPIService.PutTimeChargeCodesByParentIdExpenseTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{parentId}/expenseTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargeCodeExpenseType == nil {
		return localVarReturnValue, nil, reportError("chargeCodeExpenseType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.chargeCodeExpenseType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
