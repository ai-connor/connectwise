/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ChargeCodesAPIService ChargeCodesAPI service
type ChargeCodesAPIService service

type ApiDeleteTimeChargeCodesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeChargeCodesByIdRequest) ClientId(clientId string) ApiDeleteTimeChargeCodesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeChargeCodesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeChargeCodesByIdExecute(r)
}

/*
DeleteTimeChargeCodesById Delete ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiDeleteTimeChargeCodesByIdRequest
*/
func (a *ChargeCodesAPIService) DeleteTimeChargeCodesById(ctx context.Context, id int32) ApiDeleteTimeChargeCodesByIdRequest {
	return ApiDeleteTimeChargeCodesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ChargeCodesAPIService) DeleteTimeChargeCodesByIdExecute(r ApiDeleteTimeChargeCodesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.DeleteTimeChargeCodesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesRequest) Conditions(conditions string) ApiGetTimeChargeCodesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) Fields(fields string) ApiGetTimeChargeCodesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) Page(page int32) ApiGetTimeChargeCodesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) PageId(pageId int32) ApiGetTimeChargeCodesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesRequest) ClientId(clientId string) ApiGetTimeChargeCodesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesRequest) Execute() ([]ChargeCode, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesExecute(r)
}

/*
GetTimeChargeCodes Get List of ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeChargeCodesRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodes(ctx context.Context) ApiGetTimeChargeCodesRequest {
	return ApiGetTimeChargeCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ChargeCode
func (a *ChargeCodesAPIService) GetTimeChargeCodesExecute(r ApiGetTimeChargeCodesRequest) ([]ChargeCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ChargeCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) Conditions(conditions string) ApiGetTimeChargeCodesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) Fields(fields string) ApiGetTimeChargeCodesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) Page(page int32) ApiGetTimeChargeCodesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) PageId(pageId int32) ApiGetTimeChargeCodesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdRequest) ClientId(clientId string) ApiGetTimeChargeCodesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByIdRequest) Execute() (*ChargeCode, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByIdExecute(r)
}

/*
GetTimeChargeCodesById Get ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiGetTimeChargeCodesByIdRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesById(ctx context.Context, id int32) ApiGetTimeChargeCodesByIdRequest {
	return ApiGetTimeChargeCodesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ChargeCode
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdExecute(r ApiGetTimeChargeCodesByIdRequest) (*ChargeCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByIdInfoRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) Conditions(conditions string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) Fields(fields string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) Page(page int32) ApiGetTimeChargeCodesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) PageId(pageId int32) ApiGetTimeChargeCodesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdInfoRequest) ClientId(clientId string) ApiGetTimeChargeCodesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByIdInfoRequest) Execute() (*ChargeCodeInfo, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByIdInfoExecute(r)
}

/*
GetTimeChargeCodesByIdInfo Get ChargeCodeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiGetTimeChargeCodesByIdInfoRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdInfo(ctx context.Context, id int32) ApiGetTimeChargeCodesByIdInfoRequest {
	return ApiGetTimeChargeCodesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ChargeCodeInfo
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdInfoExecute(r ApiGetTimeChargeCodesByIdInfoRequest) (*ChargeCodeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCodeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) Conditions(conditions string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) Fields(fields string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) Page(page int32) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) PageId(pageId int32) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesRequest) ClientId(clientId string) ApiGetTimeChargeCodesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByIdUsagesExecute(r)
}

/*
GetTimeChargeCodesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiGetTimeChargeCodesByIdUsagesRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdUsages(ctx context.Context, id int32) ApiGetTimeChargeCodesByIdUsagesRequest {
	return ApiGetTimeChargeCodesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdUsagesExecute(r ApiGetTimeChargeCodesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) Conditions(conditions string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) Fields(fields string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) Page(page int32) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) PageId(pageId int32) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesByIdUsagesListRequest) ClientId(clientId string) ApiGetTimeChargeCodesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesByIdUsagesListExecute(r)
}

/*
GetTimeChargeCodesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiGetTimeChargeCodesByIdUsagesListRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdUsagesList(ctx context.Context, id int32) ApiGetTimeChargeCodesByIdUsagesListRequest {
	return ApiGetTimeChargeCodesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ChargeCodesAPIService) GetTimeChargeCodesByIdUsagesListExecute(r ApiGetTimeChargeCodesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesCountRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesCountRequest) Conditions(conditions string) ApiGetTimeChargeCodesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) Fields(fields string) ApiGetTimeChargeCodesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) Page(page int32) ApiGetTimeChargeCodesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) PageId(pageId int32) ApiGetTimeChargeCodesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesCountRequest) ClientId(clientId string) ApiGetTimeChargeCodesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesCountExecute(r)
}

/*
GetTimeChargeCodesCount Get Count of ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeChargeCodesCountRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesCount(ctx context.Context) ApiGetTimeChargeCodesCountRequest {
	return ApiGetTimeChargeCodesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ChargeCodesAPIService) GetTimeChargeCodesCountExecute(r ApiGetTimeChargeCodesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesInfoRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) Conditions(conditions string) ApiGetTimeChargeCodesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) Fields(fields string) ApiGetTimeChargeCodesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) Page(page int32) ApiGetTimeChargeCodesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) PageId(pageId int32) ApiGetTimeChargeCodesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoRequest) ClientId(clientId string) ApiGetTimeChargeCodesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesInfoRequest) Execute() ([]ChargeCodeInfo, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesInfoExecute(r)
}

/*
GetTimeChargeCodesInfo Get List of ChargeCodeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeChargeCodesInfoRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesInfo(ctx context.Context) ApiGetTimeChargeCodesInfoRequest {
	return ApiGetTimeChargeCodesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ChargeCodeInfo
func (a *ChargeCodesAPIService) GetTimeChargeCodesInfoExecute(r ApiGetTimeChargeCodesInfoRequest) ([]ChargeCodeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ChargeCodeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeChargeCodesInfoCountRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) Conditions(conditions string) ApiGetTimeChargeCodesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) ChildConditions(childConditions string) ApiGetTimeChargeCodesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeChargeCodesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) OrderBy(orderBy string) ApiGetTimeChargeCodesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) Fields(fields string) ApiGetTimeChargeCodesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) Page(page int32) ApiGetTimeChargeCodesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) PageSize(pageSize int32) ApiGetTimeChargeCodesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) PageId(pageId int32) ApiGetTimeChargeCodesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeChargeCodesInfoCountRequest) ClientId(clientId string) ApiGetTimeChargeCodesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeChargeCodesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeChargeCodesInfoCountExecute(r)
}

/*
GetTimeChargeCodesInfoCount Get Count of ChargeCodeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeChargeCodesInfoCountRequest
*/
func (a *ChargeCodesAPIService) GetTimeChargeCodesInfoCount(ctx context.Context) ApiGetTimeChargeCodesInfoCountRequest {
	return ApiGetTimeChargeCodesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ChargeCodesAPIService) GetTimeChargeCodesInfoCountExecute(r ApiGetTimeChargeCodesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.GetTimeChargeCodesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeChargeCodesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchTimeChargeCodesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeChargeCodesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchTimeChargeCodesByIdRequest) ClientId(clientId string) ApiPatchTimeChargeCodesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchTimeChargeCodesByIdRequest) Execute() (*ChargeCode, *http.Response, error) {
	return r.ApiService.PatchTimeChargeCodesByIdExecute(r)
}

/*
PatchTimeChargeCodesById Patch ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiPatchTimeChargeCodesByIdRequest
*/
func (a *ChargeCodesAPIService) PatchTimeChargeCodesById(ctx context.Context, id int32) ApiPatchTimeChargeCodesByIdRequest {
	return ApiPatchTimeChargeCodesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ChargeCode
func (a *ChargeCodesAPIService) PatchTimeChargeCodesByIdExecute(r ApiPatchTimeChargeCodesByIdRequest) (*ChargeCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.PatchTimeChargeCodesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeChargeCodesRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	chargeCode *ChargeCode
	clientId *string
}

// chargeCode
func (r ApiPostTimeChargeCodesRequest) ChargeCode(chargeCode ChargeCode) ApiPostTimeChargeCodesRequest {
	r.chargeCode = &chargeCode
	return r
}

// 
func (r ApiPostTimeChargeCodesRequest) ClientId(clientId string) ApiPostTimeChargeCodesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostTimeChargeCodesRequest) Execute() (*ChargeCode, *http.Response, error) {
	return r.ApiService.PostTimeChargeCodesExecute(r)
}

/*
PostTimeChargeCodes Post ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeChargeCodesRequest
*/
func (a *ChargeCodesAPIService) PostTimeChargeCodes(ctx context.Context) ApiPostTimeChargeCodesRequest {
	return ApiPostTimeChargeCodesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChargeCode
func (a *ChargeCodesAPIService) PostTimeChargeCodesExecute(r ApiPostTimeChargeCodesRequest) (*ChargeCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.PostTimeChargeCodes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargeCode == nil {
		return localVarReturnValue, nil, reportError("chargeCode is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.chargeCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeChargeCodesByIdRequest struct {
	ctx context.Context
	ApiService *ChargeCodesAPIService
	id int32
	chargeCode *ChargeCode
	clientId *string
}

// chargeCode
func (r ApiPutTimeChargeCodesByIdRequest) ChargeCode(chargeCode ChargeCode) ApiPutTimeChargeCodesByIdRequest {
	r.chargeCode = &chargeCode
	return r
}

// 
func (r ApiPutTimeChargeCodesByIdRequest) ClientId(clientId string) ApiPutTimeChargeCodesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutTimeChargeCodesByIdRequest) Execute() (*ChargeCode, *http.Response, error) {
	return r.ApiService.PutTimeChargeCodesByIdExecute(r)
}

/*
PutTimeChargeCodesById Put ChargeCode

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id chargeCodeId
 @return ApiPutTimeChargeCodesByIdRequest
*/
func (a *ChargeCodesAPIService) PutTimeChargeCodesById(ctx context.Context, id int32) ApiPutTimeChargeCodesByIdRequest {
	return ApiPutTimeChargeCodesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ChargeCode
func (a *ChargeCodesAPIService) PutTimeChargeCodesByIdExecute(r ApiPutTimeChargeCodesByIdRequest) (*ChargeCode, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChargeCode
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChargeCodesAPIService.PutTimeChargeCodesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/chargeCodes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chargeCode == nil {
		return localVarReturnValue, nil, reportError("chargeCode is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.chargeCode
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
