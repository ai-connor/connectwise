/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ClosedInvoicesAPIService ClosedInvoicesAPI service
type ClosedInvoicesAPIService service

type ApiPatchFinanceClosedInvoicesByIdRequest struct {
	ctx context.Context
	ApiService *ClosedInvoicesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceClosedInvoicesByIdRequest) ClientId(clientId string) ApiPatchFinanceClosedInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceClosedInvoicesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceClosedInvoicesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceClosedInvoicesByIdRequest) Execute() (*ClosedInvoice, *http.Response, error) {
	return r.ApiService.PatchFinanceClosedInvoicesByIdExecute(r)
}

/*
PatchFinanceClosedInvoicesById Patch ClosedInvoice

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id closedInvoiceId
 @return ApiPatchFinanceClosedInvoicesByIdRequest
*/
func (a *ClosedInvoicesAPIService) PatchFinanceClosedInvoicesById(ctx context.Context, id int32) ApiPatchFinanceClosedInvoicesByIdRequest {
	return ApiPatchFinanceClosedInvoicesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClosedInvoice
func (a *ClosedInvoicesAPIService) PatchFinanceClosedInvoicesByIdExecute(r ApiPatchFinanceClosedInvoicesByIdRequest) (*ClosedInvoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClosedInvoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClosedInvoicesAPIService.PatchFinanceClosedInvoicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/closedInvoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceClosedInvoicesByIdRequest struct {
	ctx context.Context
	ApiService *ClosedInvoicesAPIService
	id int32
	clientId *string
	closedInvoice *ClosedInvoice
}

// 
func (r ApiPutFinanceClosedInvoicesByIdRequest) ClientId(clientId string) ApiPutFinanceClosedInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

// closedInvoice
func (r ApiPutFinanceClosedInvoicesByIdRequest) ClosedInvoice(closedInvoice ClosedInvoice) ApiPutFinanceClosedInvoicesByIdRequest {
	r.closedInvoice = &closedInvoice
	return r
}

func (r ApiPutFinanceClosedInvoicesByIdRequest) Execute() (*ClosedInvoice, *http.Response, error) {
	return r.ApiService.PutFinanceClosedInvoicesByIdExecute(r)
}

/*
PutFinanceClosedInvoicesById Put ClosedInvoice

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id closedInvoiceId
 @return ApiPutFinanceClosedInvoicesByIdRequest
*/
func (a *ClosedInvoicesAPIService) PutFinanceClosedInvoicesById(ctx context.Context, id int32) ApiPutFinanceClosedInvoicesByIdRequest {
	return ApiPutFinanceClosedInvoicesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClosedInvoice
func (a *ClosedInvoicesAPIService) PutFinanceClosedInvoicesByIdExecute(r ApiPutFinanceClosedInvoicesByIdRequest) (*ClosedInvoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClosedInvoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ClosedInvoicesAPIService.PutFinanceClosedInvoicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/closedInvoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.closedInvoice == nil {
		return localVarReturnValue, nil, reportError("closedInvoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.closedInvoice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
