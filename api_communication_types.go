/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CommunicationTypesAPIService CommunicationTypesAPI service
type CommunicationTypesAPIService service

type ApiDeleteCompanyCommunicationTypesByIdRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCommunicationTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyCommunicationTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCommunicationTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCommunicationTypesByIdExecute(r)
}

/*
DeleteCompanyCommunicationTypesById Delete CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiDeleteCompanyCommunicationTypesByIdRequest
*/
func (a *CommunicationTypesAPIService) DeleteCompanyCommunicationTypesById(ctx context.Context, id int32) ApiDeleteCompanyCommunicationTypesByIdRequest {
	return ApiDeleteCompanyCommunicationTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CommunicationTypesAPIService) DeleteCompanyCommunicationTypesByIdExecute(r ApiDeleteCompanyCommunicationTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.DeleteCompanyCommunicationTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCommunicationTypesRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) Conditions(conditions string) ApiGetCompanyCommunicationTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) ChildConditions(childConditions string) ApiGetCompanyCommunicationTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCommunicationTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) OrderBy(orderBy string) ApiGetCompanyCommunicationTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) Fields(fields string) ApiGetCompanyCommunicationTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) Page(page int32) ApiGetCompanyCommunicationTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) PageSize(pageSize int32) ApiGetCompanyCommunicationTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) PageId(pageId int32) ApiGetCompanyCommunicationTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesRequest) ClientId(clientId string) ApiGetCompanyCommunicationTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCommunicationTypesRequest) Execute() ([]CommunicationType, *http.Response, error) {
	return r.ApiService.GetCompanyCommunicationTypesExecute(r)
}

/*
GetCompanyCommunicationTypes Get List of CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyCommunicationTypesRequest
*/
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypes(ctx context.Context) ApiGetCompanyCommunicationTypesRequest {
	return ApiGetCompanyCommunicationTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CommunicationType
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesExecute(r ApiGetCompanyCommunicationTypesRequest) ([]CommunicationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CommunicationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.GetCompanyCommunicationTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCommunicationTypesByIdRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) Conditions(conditions string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) Fields(fields string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) Page(page int32) ApiGetCompanyCommunicationTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyCommunicationTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) PageId(pageId int32) ApiGetCompanyCommunicationTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdRequest) ClientId(clientId string) ApiGetCompanyCommunicationTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCommunicationTypesByIdRequest) Execute() (*CommunicationType, *http.Response, error) {
	return r.ApiService.GetCompanyCommunicationTypesByIdExecute(r)
}

/*
GetCompanyCommunicationTypesById Get CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiGetCompanyCommunicationTypesByIdRequest
*/
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesById(ctx context.Context, id int32) ApiGetCompanyCommunicationTypesByIdRequest {
	return ApiGetCompanyCommunicationTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CommunicationType
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesByIdExecute(r ApiGetCompanyCommunicationTypesByIdRequest) (*CommunicationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommunicationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.GetCompanyCommunicationTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCommunicationTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) Fields(fields string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) Page(page int32) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCommunicationTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyCommunicationTypesByIdUsagesExecute(r)
}

/*
GetCompanyCommunicationTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiGetCompanyCommunicationTypesByIdUsagesRequest
*/
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesByIdUsages(ctx context.Context, id int32) ApiGetCompanyCommunicationTypesByIdUsagesRequest {
	return ApiGetCompanyCommunicationTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesByIdUsagesExecute(r ApiGetCompanyCommunicationTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.GetCompanyCommunicationTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCommunicationTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) Page(page int32) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyCommunicationTypesByIdUsagesListExecute(r)
}

/*
GetCompanyCommunicationTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiGetCompanyCommunicationTypesByIdUsagesListRequest
*/
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyCommunicationTypesByIdUsagesListRequest {
	return ApiGetCompanyCommunicationTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesByIdUsagesListExecute(r ApiGetCompanyCommunicationTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.GetCompanyCommunicationTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCommunicationTypesCountRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) Conditions(conditions string) ApiGetCompanyCommunicationTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyCommunicationTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCommunicationTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyCommunicationTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) Fields(fields string) ApiGetCompanyCommunicationTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) Page(page int32) ApiGetCompanyCommunicationTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyCommunicationTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) PageId(pageId int32) ApiGetCompanyCommunicationTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCommunicationTypesCountRequest) ClientId(clientId string) ApiGetCompanyCommunicationTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCommunicationTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCommunicationTypesCountExecute(r)
}

/*
GetCompanyCommunicationTypesCount Get Count of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyCommunicationTypesCountRequest
*/
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesCount(ctx context.Context) ApiGetCompanyCommunicationTypesCountRequest {
	return ApiGetCompanyCommunicationTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CommunicationTypesAPIService) GetCompanyCommunicationTypesCountExecute(r ApiGetCompanyCommunicationTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.GetCompanyCommunicationTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCommunicationTypesByIdRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyCommunicationTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCommunicationTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyCommunicationTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyCommunicationTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyCommunicationTypesByIdRequest) Execute() (*CommunicationType, *http.Response, error) {
	return r.ApiService.PatchCompanyCommunicationTypesByIdExecute(r)
}

/*
PatchCompanyCommunicationTypesById Patch CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiPatchCompanyCommunicationTypesByIdRequest
*/
func (a *CommunicationTypesAPIService) PatchCompanyCommunicationTypesById(ctx context.Context, id int32) ApiPatchCompanyCommunicationTypesByIdRequest {
	return ApiPatchCompanyCommunicationTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CommunicationType
func (a *CommunicationTypesAPIService) PatchCompanyCommunicationTypesByIdExecute(r ApiPatchCompanyCommunicationTypesByIdRequest) (*CommunicationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommunicationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.PatchCompanyCommunicationTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCommunicationTypesRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	communicationType *CommunicationType
	clientId *string
}

// communicationType
func (r ApiPostCompanyCommunicationTypesRequest) CommunicationType(communicationType CommunicationType) ApiPostCompanyCommunicationTypesRequest {
	r.communicationType = &communicationType
	return r
}

// 
func (r ApiPostCompanyCommunicationTypesRequest) ClientId(clientId string) ApiPostCompanyCommunicationTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyCommunicationTypesRequest) Execute() (*CommunicationType, *http.Response, error) {
	return r.ApiService.PostCompanyCommunicationTypesExecute(r)
}

/*
PostCompanyCommunicationTypes Post CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyCommunicationTypesRequest
*/
func (a *CommunicationTypesAPIService) PostCompanyCommunicationTypes(ctx context.Context) ApiPostCompanyCommunicationTypesRequest {
	return ApiPostCompanyCommunicationTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CommunicationType
func (a *CommunicationTypesAPIService) PostCompanyCommunicationTypesExecute(r ApiPostCompanyCommunicationTypesRequest) (*CommunicationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommunicationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.PostCompanyCommunicationTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communicationType == nil {
		return localVarReturnValue, nil, reportError("communicationType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.communicationType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCommunicationTypesByIdRequest struct {
	ctx context.Context
	ApiService *CommunicationTypesAPIService
	id int32
	communicationType *CommunicationType
	clientId *string
}

// communicationType
func (r ApiPutCompanyCommunicationTypesByIdRequest) CommunicationType(communicationType CommunicationType) ApiPutCompanyCommunicationTypesByIdRequest {
	r.communicationType = &communicationType
	return r
}

// 
func (r ApiPutCompanyCommunicationTypesByIdRequest) ClientId(clientId string) ApiPutCompanyCommunicationTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyCommunicationTypesByIdRequest) Execute() (*CommunicationType, *http.Response, error) {
	return r.ApiService.PutCompanyCommunicationTypesByIdExecute(r)
}

/*
PutCompanyCommunicationTypesById Put CommunicationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id communicationTypeId
 @return ApiPutCompanyCommunicationTypesByIdRequest
*/
func (a *CommunicationTypesAPIService) PutCompanyCommunicationTypesById(ctx context.Context, id int32) ApiPutCompanyCommunicationTypesByIdRequest {
	return ApiPutCompanyCommunicationTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CommunicationType
func (a *CommunicationTypesAPIService) PutCompanyCommunicationTypesByIdExecute(r ApiPutCompanyCommunicationTypesByIdRequest) (*CommunicationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CommunicationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommunicationTypesAPIService.PutCompanyCommunicationTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/communicationTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.communicationType == nil {
		return localVarReturnValue, nil, reportError("communicationType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.communicationType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
