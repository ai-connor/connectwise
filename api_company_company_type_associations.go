/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyCompanyTypeAssociationsAPIService CompanyCompanyTypeAssociationsAPI service
type CompanyCompanyTypeAssociationsAPIService service

type ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdTypeAssociationsById Delete CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeAssociationId
 @param parentId companyId
 @return ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) DeleteCompanyCompaniesByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CompanyCompanyTypeAssociationsAPIService) DeleteCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r ApiDeleteCompanyCompaniesByParentIdTypeAssociationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.DeleteCompanyCompaniesByParentIdTypeAssociationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) Execute() ([]CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTypeAssociationsExecute(r)
}

/*
GetCompanyCompaniesByParentIdTypeAssociations Get List of CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociations(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest {
	return ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []CompanyCompanyTypeAssociationCompanyTypeAssociation
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociationsExecute(r ApiGetCompanyCompaniesByParentIdTypeAssociationsRequest) ([]CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyCompanyTypeAssociationCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.GetCompanyCompaniesByParentIdTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdTypeAssociationsById Get CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeAssociationId
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	return ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociationCompanyTypeAssociation
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r ApiGetCompanyCompaniesByParentIdTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociationCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.GetCompanyCompaniesByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTypeAssociationsCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdTypeAssociationsCount Get Count of CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociationsCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest {
	return ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyCompanyTypeAssociationsAPIService) GetCompanyCompaniesByParentIdTypeAssociationsCountExecute(r ApiGetCompanyCompaniesByParentIdTypeAssociationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.GetCompanyCompaniesByParentIdTypeAssociationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdTypeAssociationsById Patch CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeAssociationId
 @param parentId companyId
 @return ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) PatchCompanyCompaniesByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociationCompanyTypeAssociation
func (a *CompanyCompanyTypeAssociationsAPIService) PatchCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r ApiPatchCompanyCompaniesByParentIdTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociationCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.PatchCompanyCompaniesByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	parentId int32
	clientId *string
	companyCompanyTypeAssociationCompanyTypeAssociation *CompanyCompanyTypeAssociationCompanyTypeAssociation
}

// 
func (r ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest) CompanyCompanyTypeAssociationCompanyTypeAssociation(companyCompanyTypeAssociationCompanyTypeAssociation CompanyCompanyTypeAssociationCompanyTypeAssociation) ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest {
	r.companyCompanyTypeAssociationCompanyTypeAssociation = &companyCompanyTypeAssociationCompanyTypeAssociation
	return r
}

func (r ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest) Execute() (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdTypeAssociationsExecute(r)
}

/*
PostCompanyCompaniesByParentIdTypeAssociations Post CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) PostCompanyCompaniesByParentIdTypeAssociations(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest {
	return ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociationCompanyTypeAssociation
func (a *CompanyCompanyTypeAssociationsAPIService) PostCompanyCompaniesByParentIdTypeAssociationsExecute(r ApiPostCompanyCompaniesByParentIdTypeAssociationsRequest) (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociationCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.PostCompanyCompaniesByParentIdTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCompanyTypeAssociationCompanyTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyCompanyTypeAssociationCompanyTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCompanyTypeAssociationCompanyTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCompanyTypeAssociationsAPIService
	id int32
	parentId int32
	clientId *string
	companyCompanyTypeAssociationCompanyTypeAssociation *CompanyCompanyTypeAssociationCompanyTypeAssociation
}

// 
func (r ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest) CompanyCompanyTypeAssociationCompanyTypeAssociation(companyCompanyTypeAssociationCompanyTypeAssociation CompanyCompanyTypeAssociationCompanyTypeAssociation) ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	r.companyCompanyTypeAssociationCompanyTypeAssociation = &companyCompanyTypeAssociationCompanyTypeAssociation
	return r
}

func (r ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdTypeAssociationsById Put CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeAssociationId
 @param parentId companyId
 @return ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest
*/
func (a *CompanyCompanyTypeAssociationsAPIService) PutCompanyCompaniesByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest {
	return ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociationCompanyTypeAssociation
func (a *CompanyCompanyTypeAssociationsAPIService) PutCompanyCompaniesByParentIdTypeAssociationsByIdExecute(r ApiPutCompanyCompaniesByParentIdTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociationCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociationCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCompanyTypeAssociationsAPIService.PutCompanyCompaniesByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCompanyTypeAssociationCompanyTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyCompanyTypeAssociationCompanyTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCompanyTypeAssociationCompanyTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
