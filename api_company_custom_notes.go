/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyCustomNotesAPIService CompanyCustomNotesAPI service
type CompanyCustomNotesAPIService service

type ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdCustomStatusNotesById Delete CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customStatusNoteId
 @param parentId companyId
 @return ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest
*/
func (a *CompanyCustomNotesAPIService) DeleteCompanyCompaniesByParentIdCustomStatusNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CompanyCustomNotesAPIService) DeleteCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r ApiDeleteCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.DeleteCompanyCompaniesByParentIdCustomStatusNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) Execute() ([]CompanyCustomNote, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdCustomStatusNotesExecute(r)
}

/*
GetCompanyCompaniesByParentIdCustomStatusNotes Get List of CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest
*/
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotes(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest {
	return ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []CompanyCustomNote
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotesExecute(r ApiGetCompanyCompaniesByParentIdCustomStatusNotesRequest) ([]CompanyCustomNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyCustomNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.GetCompanyCompaniesByParentIdCustomStatusNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Execute() (*CompanyCustomNote, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdCustomStatusNotesById Get CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customStatusNoteId
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest
*/
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotesById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	return ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCustomNote
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r ApiGetCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) (*CompanyCustomNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCustomNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.GetCompanyCompaniesByParentIdCustomStatusNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdCustomStatusNotesCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdCustomStatusNotesCount Get Count of CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest
*/
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotesCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest {
	return ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyCustomNotesAPIService) GetCompanyCompaniesByParentIdCustomStatusNotesCountExecute(r ApiGetCompanyCompaniesByParentIdCustomStatusNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.GetCompanyCompaniesByParentIdCustomStatusNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Execute() (*CompanyCustomNote, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdCustomStatusNotesById Patch CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customStatusNoteId
 @param parentId companyId
 @return ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest
*/
func (a *CompanyCustomNotesAPIService) PatchCompanyCompaniesByParentIdCustomStatusNotesById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCustomNote
func (a *CompanyCustomNotesAPIService) PatchCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r ApiPatchCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) (*CompanyCustomNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCustomNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.PatchCompanyCompaniesByParentIdCustomStatusNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	parentId int32
	clientId *string
	companyCustomNote *CompanyCustomNote
}

// 
func (r ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.clientId = &clientId
	return r
}

// customNote
func (r ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest) CompanyCustomNote(companyCustomNote CompanyCustomNote) ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest {
	r.companyCustomNote = &companyCustomNote
	return r
}

func (r ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest) Execute() (*CompanyCustomNote, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdCustomStatusNotesExecute(r)
}

/*
PostCompanyCompaniesByParentIdCustomStatusNotes Post CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest
*/
func (a *CompanyCustomNotesAPIService) PostCompanyCompaniesByParentIdCustomStatusNotes(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest {
	return ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCustomNote
func (a *CompanyCustomNotesAPIService) PostCompanyCompaniesByParentIdCustomStatusNotesExecute(r ApiPostCompanyCompaniesByParentIdCustomStatusNotesRequest) (*CompanyCustomNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCustomNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.PostCompanyCompaniesByParentIdCustomStatusNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCustomNote == nil {
		return localVarReturnValue, nil, reportError("companyCustomNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCustomNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyCustomNotesAPIService
	id int32
	parentId int32
	clientId *string
	companyCustomNote *CompanyCustomNote
}

// 
func (r ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// customNote
func (r ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) CompanyCustomNote(companyCustomNote CompanyCustomNote) ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	r.companyCustomNote = &companyCustomNote
	return r
}

func (r ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) Execute() (*CompanyCustomNote, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdCustomStatusNotesById Put CompanyCustomNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customStatusNoteId
 @param parentId companyId
 @return ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest
*/
func (a *CompanyCustomNotesAPIService) PutCompanyCompaniesByParentIdCustomStatusNotesById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest {
	return ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyCustomNote
func (a *CompanyCustomNotesAPIService) PutCompanyCompaniesByParentIdCustomStatusNotesByIdExecute(r ApiPutCompanyCompaniesByParentIdCustomStatusNotesByIdRequest) (*CompanyCustomNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCustomNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyCustomNotesAPIService.PutCompanyCompaniesByParentIdCustomStatusNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/customStatusNotes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCustomNote == nil {
		return localVarReturnValue, nil, reportError("companyCustomNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCustomNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
