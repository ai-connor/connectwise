/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyManagementSummarysAPIService CompanyManagementSummarysAPI service
type CompanyManagementSummarysAPIService service

type ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdManagementSummaryReportsById Delete CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementSummaryReportId
 @param parentId companyId
 @return ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest
*/
func (a *CompanyManagementSummarysAPIService) DeleteCompanyCompaniesByParentIdManagementSummaryReportsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CompanyManagementSummarysAPIService) DeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r ApiDeleteCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.DeleteCompanyCompaniesByParentIdManagementSummaryReportsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) Execute() ([]CompanyManagementSummary, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementSummaryReportsExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementSummaryReports Get List of CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest
*/
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReports(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []CompanyManagementSummary
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReportsExecute(r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsRequest) ([]CompanyManagementSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyManagementSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.GetCompanyCompaniesByParentIdManagementSummaryReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Execute() (*CompanyManagementSummary, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementSummaryReportsById Get CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementSummaryReportId
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest
*/
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReportsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyManagementSummary
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) (*CompanyManagementSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyManagementSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.GetCompanyCompaniesByParentIdManagementSummaryReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementSummaryReportsCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementSummaryReportsCount Get Count of CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest
*/
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReportsCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest {
	return ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyManagementSummarysAPIService) GetCompanyCompaniesByParentIdManagementSummaryReportsCountExecute(r ApiGetCompanyCompaniesByParentIdManagementSummaryReportsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.GetCompanyCompaniesByParentIdManagementSummaryReportsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Execute() (*CompanyManagementSummary, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdManagementSummaryReportsById Patch CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementSummaryReportId
 @param parentId companyId
 @return ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest
*/
func (a *CompanyManagementSummarysAPIService) PatchCompanyCompaniesByParentIdManagementSummaryReportsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyManagementSummary
func (a *CompanyManagementSummarysAPIService) PatchCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r ApiPatchCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) (*CompanyManagementSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyManagementSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.PatchCompanyCompaniesByParentIdManagementSummaryReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	parentId int32
	companyManagementSummary *CompanyManagementSummary
	clientId *string
}

// managementSummary
func (r ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest) CompanyManagementSummary(companyManagementSummary CompanyManagementSummary) ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.companyManagementSummary = &companyManagementSummary
	return r
}

// 
func (r ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest) Execute() (*CompanyManagementSummary, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdManagementSummaryReportsExecute(r)
}

/*
PostCompanyCompaniesByParentIdManagementSummaryReports Post CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest
*/
func (a *CompanyManagementSummarysAPIService) PostCompanyCompaniesByParentIdManagementSummaryReports(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest {
	return ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyManagementSummary
func (a *CompanyManagementSummarysAPIService) PostCompanyCompaniesByParentIdManagementSummaryReportsExecute(r ApiPostCompanyCompaniesByParentIdManagementSummaryReportsRequest) (*CompanyManagementSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyManagementSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.PostCompanyCompaniesByParentIdManagementSummaryReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyManagementSummary == nil {
		return localVarReturnValue, nil, reportError("companyManagementSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.companyManagementSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyManagementSummarysAPIService
	id int32
	parentId int32
	companyManagementSummary *CompanyManagementSummary
	clientId *string
}

// managementSummary
func (r ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) CompanyManagementSummary(companyManagementSummary CompanyManagementSummary) ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.companyManagementSummary = &companyManagementSummary
	return r
}

// 
func (r ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) Execute() (*CompanyManagementSummary, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdManagementSummaryReportsById Put CompanyManagementSummary

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementSummaryReportId
 @param parentId companyId
 @return ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest
*/
func (a *CompanyManagementSummarysAPIService) PutCompanyCompaniesByParentIdManagementSummaryReportsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest {
	return ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyManagementSummary
func (a *CompanyManagementSummarysAPIService) PutCompanyCompaniesByParentIdManagementSummaryReportsByIdExecute(r ApiPutCompanyCompaniesByParentIdManagementSummaryReportsByIdRequest) (*CompanyManagementSummary, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyManagementSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyManagementSummarysAPIService.PutCompanyCompaniesByParentIdManagementSummaryReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementSummaryReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.companyManagementSummary == nil {
		return localVarReturnValue, nil, reportError("companyManagementSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.companyManagementSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
