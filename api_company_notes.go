/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyNotesAPIService CompanyNotesAPI service
type CompanyNotesAPIService service

type ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdNotesByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdNotesById Delete CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId companyId
 @return ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest
*/
func (a *CompanyNotesAPIService) DeleteCompanyCompaniesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *CompanyNotesAPIService) DeleteCompanyCompaniesByParentIdNotesByIdExecute(r ApiDeleteCompanyCompaniesByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.DeleteCompanyCompaniesByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdNotesRequest) Execute() ([]CompanyNote, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdNotesExecute(r)
}

/*
GetCompanyCompaniesByParentIdNotes Get List of CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdNotesRequest
*/
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotes(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdNotesRequest {
	return ApiGetCompanyCompaniesByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []CompanyNote
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotesExecute(r ApiGetCompanyCompaniesByParentIdNotesRequest) ([]CompanyNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.GetCompanyCompaniesByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) Execute() (*CompanyNote, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdNotesByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdNotesById Get CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdNotesByIdRequest
*/
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdNotesByIdRequest {
	return ApiGetCompanyCompaniesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyNote
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotesByIdExecute(r ApiGetCompanyCompaniesByParentIdNotesByIdRequest) (*CompanyNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.GetCompanyCompaniesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdNotesCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdNotesCount Get Count of CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdNotesCountRequest
*/
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdNotesCountRequest {
	return ApiGetCompanyCompaniesByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyNotesAPIService) GetCompanyCompaniesByParentIdNotesCountExecute(r ApiGetCompanyCompaniesByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.GetCompanyCompaniesByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyCompaniesByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdNotesByIdRequest) Execute() (*CompanyNote, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdNotesByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdNotesById Patch CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId companyId
 @return ApiPatchCompanyCompaniesByParentIdNotesByIdRequest
*/
func (a *CompanyNotesAPIService) PatchCompanyCompaniesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdNotesByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyNote
func (a *CompanyNotesAPIService) PatchCompanyCompaniesByParentIdNotesByIdExecute(r ApiPatchCompanyCompaniesByParentIdNotesByIdRequest) (*CompanyNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.PatchCompanyCompaniesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	parentId int32
	clientId *string
	companyNote *CompanyNote
}

// 
func (r ApiPostCompanyCompaniesByParentIdNotesRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

// companyNote
func (r ApiPostCompanyCompaniesByParentIdNotesRequest) CompanyNote(companyNote CompanyNote) ApiPostCompanyCompaniesByParentIdNotesRequest {
	r.companyNote = &companyNote
	return r
}

func (r ApiPostCompanyCompaniesByParentIdNotesRequest) Execute() (*CompanyNote, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdNotesExecute(r)
}

/*
PostCompanyCompaniesByParentIdNotes Post CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiPostCompanyCompaniesByParentIdNotesRequest
*/
func (a *CompanyNotesAPIService) PostCompanyCompaniesByParentIdNotes(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdNotesRequest {
	return ApiPostCompanyCompaniesByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyNote
func (a *CompanyNotesAPIService) PostCompanyCompaniesByParentIdNotesExecute(r ApiPostCompanyCompaniesByParentIdNotesRequest) (*CompanyNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.PostCompanyCompaniesByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyNote == nil {
		return localVarReturnValue, nil, reportError("companyNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyNotesAPIService
	id int32
	parentId int32
	clientId *string
	companyNote *CompanyNote
}

// 
func (r ApiPutCompanyCompaniesByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

// companyNote
func (r ApiPutCompanyCompaniesByParentIdNotesByIdRequest) CompanyNote(companyNote CompanyNote) ApiPutCompanyCompaniesByParentIdNotesByIdRequest {
	r.companyNote = &companyNote
	return r
}

func (r ApiPutCompanyCompaniesByParentIdNotesByIdRequest) Execute() (*CompanyNote, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdNotesByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdNotesById Put CompanyNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId companyId
 @return ApiPutCompanyCompaniesByParentIdNotesByIdRequest
*/
func (a *CompanyNotesAPIService) PutCompanyCompaniesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdNotesByIdRequest {
	return ApiPutCompanyCompaniesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return CompanyNote
func (a *CompanyNotesAPIService) PutCompanyCompaniesByParentIdNotesByIdExecute(r ApiPutCompanyCompaniesByParentIdNotesByIdRequest) (*CompanyNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNotesAPIService.PutCompanyCompaniesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyNote == nil {
		return localVarReturnValue, nil, reportError("companyNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
