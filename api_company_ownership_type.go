/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyOwnershipTypeAPIService CompanyOwnershipTypeAPI service
type CompanyOwnershipTypeAPIService service

type ApiDeleteCompanyOwnershipTypesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyOwnershipTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyOwnershipTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyOwnershipTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyOwnershipTypesByIdExecute(r)
}

/*
DeleteCompanyOwnershipTypesById Delete OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ownershipTypeId
 @return ApiDeleteCompanyOwnershipTypesByIdRequest
*/
func (a *CompanyOwnershipTypeAPIService) DeleteCompanyOwnershipTypesById(ctx context.Context, id int32) ApiDeleteCompanyOwnershipTypesByIdRequest {
	return ApiDeleteCompanyOwnershipTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CompanyOwnershipTypeAPIService) DeleteCompanyOwnershipTypesByIdExecute(r ApiDeleteCompanyOwnershipTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.DeleteCompanyOwnershipTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyOwnershipTypesRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) Fields(fields string) ApiGetCompanyOwnershipTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) Page(page int32) ApiGetCompanyOwnershipTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyOwnershipTypesRequest) Execute() ([]OwnershipType, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesExecute(r)
}

/*
GetCompanyOwnershipTypes Get List of OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyOwnershipTypesRequest
*/
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypes(ctx context.Context) ApiGetCompanyOwnershipTypesRequest {
	return ApiGetCompanyOwnershipTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OwnershipType
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypesExecute(r ApiGetCompanyOwnershipTypesRequest) ([]OwnershipType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OwnershipType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.GetCompanyOwnershipTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyOwnershipTypesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) Fields(fields string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) Page(page int32) ApiGetCompanyOwnershipTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyOwnershipTypesByIdRequest) Execute() (*OwnershipType, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesByIdExecute(r)
}

/*
GetCompanyOwnershipTypesById Get OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ownershipTypeId
 @return ApiGetCompanyOwnershipTypesByIdRequest
*/
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypesById(ctx context.Context, id int32) ApiGetCompanyOwnershipTypesByIdRequest {
	return ApiGetCompanyOwnershipTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OwnershipType
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypesByIdExecute(r ApiGetCompanyOwnershipTypesByIdRequest) (*OwnershipType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OwnershipType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.GetCompanyOwnershipTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyOwnershipTypesCountRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) Fields(fields string) ApiGetCompanyOwnershipTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) Page(page int32) ApiGetCompanyOwnershipTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesCountRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyOwnershipTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesCountExecute(r)
}

/*
GetCompanyOwnershipTypesCount Get Count of OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyOwnershipTypesCountRequest
*/
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypesCount(ctx context.Context) ApiGetCompanyOwnershipTypesCountRequest {
	return ApiGetCompanyOwnershipTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyOwnershipTypeAPIService) GetCompanyOwnershipTypesCountExecute(r ApiGetCompanyOwnershipTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.GetCompanyOwnershipTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyOwnershipTypesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyOwnershipTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyOwnershipTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyOwnershipTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyOwnershipTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyOwnershipTypesByIdRequest) Execute() (*OwnershipType, *http.Response, error) {
	return r.ApiService.PatchCompanyOwnershipTypesByIdExecute(r)
}

/*
PatchCompanyOwnershipTypesById Patch OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ownershipTypeId
 @return ApiPatchCompanyOwnershipTypesByIdRequest
*/
func (a *CompanyOwnershipTypeAPIService) PatchCompanyOwnershipTypesById(ctx context.Context, id int32) ApiPatchCompanyOwnershipTypesByIdRequest {
	return ApiPatchCompanyOwnershipTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OwnershipType
func (a *CompanyOwnershipTypeAPIService) PatchCompanyOwnershipTypesByIdExecute(r ApiPatchCompanyOwnershipTypesByIdRequest) (*OwnershipType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OwnershipType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.PatchCompanyOwnershipTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyOwnershipTypesRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	ownershipType *OwnershipType
	clientId *string
}

// ownershipType
func (r ApiPostCompanyOwnershipTypesRequest) OwnershipType(ownershipType OwnershipType) ApiPostCompanyOwnershipTypesRequest {
	r.ownershipType = &ownershipType
	return r
}

// 
func (r ApiPostCompanyOwnershipTypesRequest) ClientId(clientId string) ApiPostCompanyOwnershipTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyOwnershipTypesRequest) Execute() (*OwnershipType, *http.Response, error) {
	return r.ApiService.PostCompanyOwnershipTypesExecute(r)
}

/*
PostCompanyOwnershipTypes Post OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyOwnershipTypesRequest
*/
func (a *CompanyOwnershipTypeAPIService) PostCompanyOwnershipTypes(ctx context.Context) ApiPostCompanyOwnershipTypesRequest {
	return ApiPostCompanyOwnershipTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OwnershipType
func (a *CompanyOwnershipTypeAPIService) PostCompanyOwnershipTypesExecute(r ApiPostCompanyOwnershipTypesRequest) (*OwnershipType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OwnershipType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.PostCompanyOwnershipTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ownershipType == nil {
		return localVarReturnValue, nil, reportError("ownershipType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ownershipType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyOwnershipTypesByIdRequest struct {
	ctx context.Context
	ApiService *CompanyOwnershipTypeAPIService
	id int32
	ownershipType *OwnershipType
	clientId *string
}

// ownershipType
func (r ApiPutCompanyOwnershipTypesByIdRequest) OwnershipType(ownershipType OwnershipType) ApiPutCompanyOwnershipTypesByIdRequest {
	r.ownershipType = &ownershipType
	return r
}

// 
func (r ApiPutCompanyOwnershipTypesByIdRequest) ClientId(clientId string) ApiPutCompanyOwnershipTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyOwnershipTypesByIdRequest) Execute() (*OwnershipType, *http.Response, error) {
	return r.ApiService.PutCompanyOwnershipTypesByIdExecute(r)
}

/*
PutCompanyOwnershipTypesById Put OwnershipType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ownershipTypeId
 @return ApiPutCompanyOwnershipTypesByIdRequest
*/
func (a *CompanyOwnershipTypeAPIService) PutCompanyOwnershipTypesById(ctx context.Context, id int32) ApiPutCompanyOwnershipTypesByIdRequest {
	return ApiPutCompanyOwnershipTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OwnershipType
func (a *CompanyOwnershipTypeAPIService) PutCompanyOwnershipTypesByIdExecute(r ApiPutCompanyOwnershipTypesByIdRequest) (*OwnershipType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OwnershipType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyOwnershipTypeAPIService.PutCompanyOwnershipTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ownershipType == nil {
		return localVarReturnValue, nil, reportError("ownershipType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ownershipType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
