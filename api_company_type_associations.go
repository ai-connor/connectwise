/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CompanyTypeAssociationsAPIService CompanyTypeAssociationsAPI service
type CompanyTypeAssociationsAPIService service

type ApiDeleteCompanyCompanyTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyCompanyTypeAssociationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompanyTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompanyTypeAssociationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompanyTypeAssociationsByIdExecute(r)
}

/*
DeleteCompanyCompanyTypeAssociationsById Delete CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id companyTypeAssociationId
 @return ApiDeleteCompanyCompanyTypeAssociationsByIdRequest
*/
func (a *CompanyTypeAssociationsAPIService) DeleteCompanyCompanyTypeAssociationsById(ctx context.Context, id int32) ApiDeleteCompanyCompanyTypeAssociationsByIdRequest {
	return ApiDeleteCompanyCompanyTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CompanyTypeAssociationsAPIService) DeleteCompanyCompanyTypeAssociationsByIdExecute(r ApiDeleteCompanyCompanyTypeAssociationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.DeleteCompanyCompanyTypeAssociationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) ClientId(clientId string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) Conditions(conditions string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) OrderBy(orderBy string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) Fields(fields string) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) Page(page int32) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) PageSize(pageSize int32) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsRequest) PageId(pageId int32) ApiGetCompanyCompanyTypeAssociationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyTypeAssociationsRequest) Execute() ([]CompanyCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyTypeAssociationsExecute(r)
}

/*
GetCompanyCompanyTypeAssociations Get List of CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyCompanyTypeAssociationsRequest
*/
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociations(ctx context.Context) ApiGetCompanyCompanyTypeAssociationsRequest {
	return ApiGetCompanyCompanyTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CompanyCompanyTypeAssociation
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociationsExecute(r ApiGetCompanyCompanyTypeAssociationsRequest) ([]CompanyCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.GetCompanyCompanyTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) ClientId(clientId string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) Conditions(conditions string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) Fields(fields string) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) Page(page int32) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) PageId(pageId int32) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyTypeAssociationsByIdExecute(r)
}

/*
GetCompanyCompanyTypeAssociationsById Get CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id companyTypeAssociationId
 @return ApiGetCompanyCompanyTypeAssociationsByIdRequest
*/
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociationsById(ctx context.Context, id int32) ApiGetCompanyCompanyTypeAssociationsByIdRequest {
	return ApiGetCompanyCompanyTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociation
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociationsByIdExecute(r ApiGetCompanyCompanyTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.GetCompanyCompanyTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyTypeAssociationsCountRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) ClientId(clientId string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) Conditions(conditions string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) OrderBy(orderBy string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) Fields(fields string) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) Page(page int32) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) PageSize(pageSize int32) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) PageId(pageId int32) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyTypeAssociationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyTypeAssociationsCountExecute(r)
}

/*
GetCompanyCompanyTypeAssociationsCount Get Count of CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyCompanyTypeAssociationsCountRequest
*/
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociationsCount(ctx context.Context) ApiGetCompanyCompanyTypeAssociationsCountRequest {
	return ApiGetCompanyCompanyTypeAssociationsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CompanyTypeAssociationsAPIService) GetCompanyCompanyTypeAssociationsCountExecute(r ApiGetCompanyCompanyTypeAssociationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.GetCompanyCompanyTypeAssociationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompanyTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyCompanyTypeAssociationsByIdRequest) ClientId(clientId string) ApiPatchCompanyCompanyTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompanyTypeAssociationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompanyTypeAssociationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompanyTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PatchCompanyCompanyTypeAssociationsByIdExecute(r)
}

/*
PatchCompanyCompanyTypeAssociationsById Patch CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id companyTypeAssociationId
 @return ApiPatchCompanyCompanyTypeAssociationsByIdRequest
*/
func (a *CompanyTypeAssociationsAPIService) PatchCompanyCompanyTypeAssociationsById(ctx context.Context, id int32) ApiPatchCompanyCompanyTypeAssociationsByIdRequest {
	return ApiPatchCompanyCompanyTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociation
func (a *CompanyTypeAssociationsAPIService) PatchCompanyCompanyTypeAssociationsByIdExecute(r ApiPatchCompanyCompanyTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.PatchCompanyCompanyTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompanyTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	clientId *string
	companyCompanyTypeAssociation *CompanyCompanyTypeAssociation
}

// 
func (r ApiPostCompanyCompanyTypeAssociationsRequest) ClientId(clientId string) ApiPostCompanyCompanyTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPostCompanyCompanyTypeAssociationsRequest) CompanyCompanyTypeAssociation(companyCompanyTypeAssociation CompanyCompanyTypeAssociation) ApiPostCompanyCompanyTypeAssociationsRequest {
	r.companyCompanyTypeAssociation = &companyCompanyTypeAssociation
	return r
}

func (r ApiPostCompanyCompanyTypeAssociationsRequest) Execute() (*CompanyCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PostCompanyCompanyTypeAssociationsExecute(r)
}

/*
PostCompanyCompanyTypeAssociations Post CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyCompanyTypeAssociationsRequest
*/
func (a *CompanyTypeAssociationsAPIService) PostCompanyCompanyTypeAssociations(ctx context.Context) ApiPostCompanyCompanyTypeAssociationsRequest {
	return ApiPostCompanyCompanyTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociation
func (a *CompanyTypeAssociationsAPIService) PostCompanyCompanyTypeAssociationsExecute(r ApiPostCompanyCompanyTypeAssociationsRequest) (*CompanyCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.PostCompanyCompanyTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCompanyTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyCompanyTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCompanyTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompanyTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *CompanyTypeAssociationsAPIService
	id int32
	clientId *string
	companyCompanyTypeAssociation *CompanyCompanyTypeAssociation
}

// 
func (r ApiPutCompanyCompanyTypeAssociationsByIdRequest) ClientId(clientId string) ApiPutCompanyCompanyTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutCompanyCompanyTypeAssociationsByIdRequest) CompanyCompanyTypeAssociation(companyCompanyTypeAssociation CompanyCompanyTypeAssociation) ApiPutCompanyCompanyTypeAssociationsByIdRequest {
	r.companyCompanyTypeAssociation = &companyCompanyTypeAssociation
	return r
}

func (r ApiPutCompanyCompanyTypeAssociationsByIdRequest) Execute() (*CompanyCompanyTypeAssociation, *http.Response, error) {
	return r.ApiService.PutCompanyCompanyTypeAssociationsByIdExecute(r)
}

/*
PutCompanyCompanyTypeAssociationsById Put CompanyTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id companyTypeAssociationId
 @return ApiPutCompanyCompanyTypeAssociationsByIdRequest
*/
func (a *CompanyTypeAssociationsAPIService) PutCompanyCompanyTypeAssociationsById(ctx context.Context, id int32) ApiPutCompanyCompanyTypeAssociationsByIdRequest {
	return ApiPutCompanyCompanyTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyCompanyTypeAssociation
func (a *CompanyTypeAssociationsAPIService) PutCompanyCompanyTypeAssociationsByIdExecute(r ApiPutCompanyCompanyTypeAssociationsByIdRequest) (*CompanyCompanyTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyCompanyTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypeAssociationsAPIService.PutCompanyCompanyTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyCompanyTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyCompanyTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyCompanyTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
