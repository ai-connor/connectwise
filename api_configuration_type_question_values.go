/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationTypeQuestionValuesAPIService ConfigurationTypeQuestionValuesAPI service
type ConfigurationTypeQuestionValuesAPIService service

type ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r)
}

/*
DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById Delete ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	return ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *ConfigurationTypeQuestionValuesAPIService) DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r ApiDeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.DeleteCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) Execute() ([]ConfigurationTypeQuestionValue, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesExecute(r)
}

/*
GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues Get List of ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId typeId
 @return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(ctx context.Context, parentId int32, grandparentId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []ConfigurationTypeQuestionValue
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesExecute(r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) ([]ConfigurationTypeQuestionValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigurationTypeQuestionValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Execute() (*ConfigurationTypeQuestionValue, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r)
}

/*
GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById Get ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestionValue
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) (*ConfigurationTypeQuestionValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestionValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesExecute(r)
}

/*
GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest {
	return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesExecute(r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListExecute(r)
}

/*
GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest {
	return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListExecute(r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountExecute(r)
}

/*
GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount Get Count of ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId typeId
 @return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest {
	return ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ConfigurationTypeQuestionValuesAPIService) GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountExecute(r ApiGetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.GetCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Execute() (*ConfigurationTypeQuestionValue, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r)
}

/*
PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById Patch ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	return ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestionValue
func (a *ConfigurationTypeQuestionValuesAPIService) PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r ApiPatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) (*ConfigurationTypeQuestionValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestionValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.PatchCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	parentId int32
	grandparentId int32
	configurationTypeQuestionValue *ConfigurationTypeQuestionValue
	clientId *string
}

// configurationTypeQuestionValue
func (r ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) ConfigurationTypeQuestionValue(configurationTypeQuestionValue ConfigurationTypeQuestionValue) ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.configurationTypeQuestionValue = &configurationTypeQuestionValue
	return r
}

// 
func (r ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) ClientId(clientId string) ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) Execute() (*ConfigurationTypeQuestionValue, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesExecute(r)
}

/*
PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues Post ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId typeId
 @return ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues(ctx context.Context, parentId int32, grandparentId int32) ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest {
	return ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestionValue
func (a *ConfigurationTypeQuestionValuesAPIService) PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesExecute(r ApiPostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesRequest) (*ConfigurationTypeQuestionValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestionValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.PostCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValues")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationTypeQuestionValue == nil {
		return localVarReturnValue, nil, reportError("configurationTypeQuestionValue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationTypeQuestionValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionValuesAPIService
	id int32
	parentId int32
	grandparentId int32
	configurationTypeQuestionValue *ConfigurationTypeQuestionValue
	clientId *string
}

// configurationTypeQuestionValue
func (r ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ConfigurationTypeQuestionValue(configurationTypeQuestionValue ConfigurationTypeQuestionValue) ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.configurationTypeQuestionValue = &configurationTypeQuestionValue
	return r
}

// 
func (r ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) ClientId(clientId string) ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) Execute() (*ConfigurationTypeQuestionValue, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r)
}

/*
PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById Put ConfigurationTypeQuestionValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id valueId
 @param parentId questionId
 @param grandparentId typeId
 @return ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest
*/
func (a *ConfigurationTypeQuestionValuesAPIService) PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest {
	return ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestionValue
func (a *ConfigurationTypeQuestionValuesAPIService) PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdExecute(r ApiPutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesByIdRequest) (*ConfigurationTypeQuestionValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestionValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionValuesAPIService.PutCompanyConfigurationsTypesByGrandparentIdQuestionsByParentIdValuesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{grandparentId}/questions/{parentId}/values/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationTypeQuestionValue == nil {
		return localVarReturnValue, nil, reportError("configurationTypeQuestionValue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationTypeQuestionValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
