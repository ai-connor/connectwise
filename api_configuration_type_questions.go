/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationTypeQuestionsAPIService ConfigurationTypeQuestionsAPI service
type ConfigurationTypeQuestionsAPIService service

type ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r)
}

/*
DeleteCompanyConfigurationsTypesByParentIdQuestionsById Delete ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId typeId
 @return ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) DeleteCompanyConfigurationsTypesByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	return ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ConfigurationTypeQuestionsAPIService) DeleteCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r ApiDeleteCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.DeleteCompanyConfigurationsTypesByParentIdQuestionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) Execute() ([]ConfigurationTypeQuestion, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByParentIdQuestionsExecute(r)
}

/*
GetCompanyConfigurationsTypesByParentIdQuestions Get List of ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId typeId
 @return ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestions(ctx context.Context, parentId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest {
	return ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ConfigurationTypeQuestion
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestionsExecute(r ApiGetCompanyConfigurationsTypesByParentIdQuestionsRequest) ([]ConfigurationTypeQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigurationTypeQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.GetCompanyConfigurationsTypesByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Execute() (*ConfigurationTypeQuestion, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r)
}

/*
GetCompanyConfigurationsTypesByParentIdQuestionsById Get ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId typeId
 @return ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	return ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestion
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r ApiGetCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) (*ConfigurationTypeQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.GetCompanyConfigurationsTypesByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByParentIdQuestionsCountExecute(r)
}

/*
GetCompanyConfigurationsTypesByParentIdQuestionsCount Get Count of ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId typeId
 @return ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestionsCount(ctx context.Context, parentId int32) ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest {
	return ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ConfigurationTypeQuestionsAPIService) GetCompanyConfigurationsTypesByParentIdQuestionsCountExecute(r ApiGetCompanyConfigurationsTypesByParentIdQuestionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.GetCompanyConfigurationsTypesByParentIdQuestionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Execute() (*ConfigurationTypeQuestion, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r)
}

/*
PatchCompanyConfigurationsTypesByParentIdQuestionsById Patch ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId typeId
 @return ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) PatchCompanyConfigurationsTypesByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	return ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestion
func (a *ConfigurationTypeQuestionsAPIService) PatchCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r ApiPatchCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) (*ConfigurationTypeQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.PatchCompanyConfigurationsTypesByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	parentId int32
	configurationTypeQuestion *ConfigurationTypeQuestion
	clientId *string
}

// configurationTypeQuestion
func (r ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest) ConfigurationTypeQuestion(configurationTypeQuestion ConfigurationTypeQuestion) ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.configurationTypeQuestion = &configurationTypeQuestion
	return r
}

// 
func (r ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest) ClientId(clientId string) ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest) Execute() (*ConfigurationTypeQuestion, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsTypesByParentIdQuestionsExecute(r)
}

/*
PostCompanyConfigurationsTypesByParentIdQuestions Post ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId typeId
 @return ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) PostCompanyConfigurationsTypesByParentIdQuestions(ctx context.Context, parentId int32) ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest {
	return ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestion
func (a *ConfigurationTypeQuestionsAPIService) PostCompanyConfigurationsTypesByParentIdQuestionsExecute(r ApiPostCompanyConfigurationsTypesByParentIdQuestionsRequest) (*ConfigurationTypeQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.PostCompanyConfigurationsTypesByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationTypeQuestion == nil {
		return localVarReturnValue, nil, reportError("configurationTypeQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationTypeQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypeQuestionsAPIService
	id int32
	parentId int32
	configurationTypeQuestion *ConfigurationTypeQuestion
	clientId *string
}

// configurationTypeQuestion
func (r ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ConfigurationTypeQuestion(configurationTypeQuestion ConfigurationTypeQuestion) ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.configurationTypeQuestion = &configurationTypeQuestion
	return r
}

// 
func (r ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) Execute() (*ConfigurationTypeQuestion, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r)
}

/*
PutCompanyConfigurationsTypesByParentIdQuestionsById Put ConfigurationTypeQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId typeId
 @return ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest
*/
func (a *ConfigurationTypeQuestionsAPIService) PutCompanyConfigurationsTypesByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest {
	return ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationTypeQuestion
func (a *ConfigurationTypeQuestionsAPIService) PutCompanyConfigurationsTypesByParentIdQuestionsByIdExecute(r ApiPutCompanyConfigurationsTypesByParentIdQuestionsByIdRequest) (*ConfigurationTypeQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationTypeQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypeQuestionsAPIService.PutCompanyConfigurationsTypesByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationTypeQuestion == nil {
		return localVarReturnValue, nil, reportError("configurationTypeQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationTypeQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
