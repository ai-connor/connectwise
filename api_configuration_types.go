/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ConfigurationTypesAPIService ConfigurationTypesAPI service
type ConfigurationTypesAPIService service

type ApiDeleteCompanyConfigurationsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyConfigurationsTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsTypesByIdExecute(r)
}

/*
DeleteCompanyConfigurationsTypesById Delete ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteCompanyConfigurationsTypesByIdRequest
*/
func (a *ConfigurationTypesAPIService) DeleteCompanyConfigurationsTypesById(ctx context.Context, id int32) ApiDeleteCompanyConfigurationsTypesByIdRequest {
	return ApiDeleteCompanyConfigurationsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConfigurationTypesAPIService) DeleteCompanyConfigurationsTypesByIdExecute(r ApiDeleteCompanyConfigurationsTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.DeleteCompanyConfigurationsTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) Page(page int32) ApiGetCompanyConfigurationsTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesRequest) Execute() ([]ConfigurationType, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesExecute(r)
}

/*
GetCompanyConfigurationsTypes Get List of ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyConfigurationsTypesRequest
*/
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypes(ctx context.Context) ApiGetCompanyConfigurationsTypesRequest {
	return ApiGetCompanyConfigurationsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConfigurationType
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesExecute(r ApiGetCompanyConfigurationsTypesRequest) ([]ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.GetCompanyConfigurationsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByIdRequest) Execute() (*ConfigurationType, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByIdExecute(r)
}

/*
GetCompanyConfigurationsTypesById Get ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyConfigurationsTypesByIdRequest
*/
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesById(ctx context.Context, id int32) ApiGetCompanyConfigurationsTypesByIdRequest {
	return ApiGetCompanyConfigurationsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigurationType
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesByIdExecute(r ApiGetCompanyConfigurationsTypesByIdRequest) (*ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.GetCompanyConfigurationsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByIdUsagesExecute(r)
}

/*
GetCompanyConfigurationsTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyConfigurationsTypesByIdUsagesRequest
*/
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesByIdUsages(ctx context.Context, id int32) ApiGetCompanyConfigurationsTypesByIdUsagesRequest {
	return ApiGetCompanyConfigurationsTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesByIdUsagesExecute(r ApiGetCompanyConfigurationsTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.GetCompanyConfigurationsTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) Page(page int32) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesByIdUsagesListExecute(r)
}

/*
GetCompanyConfigurationsTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyConfigurationsTypesByIdUsagesListRequest
*/
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyConfigurationsTypesByIdUsagesListRequest {
	return ApiGetCompanyConfigurationsTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesByIdUsagesListExecute(r ApiGetCompanyConfigurationsTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.GetCompanyConfigurationsTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsTypesCountRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) Fields(fields string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) Page(page int32) ApiGetCompanyConfigurationsTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyConfigurationsTypesCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsTypesCountExecute(r)
}

/*
GetCompanyConfigurationsTypesCount Get Count of ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyConfigurationsTypesCountRequest
*/
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesCount(ctx context.Context) ApiGetCompanyConfigurationsTypesCountRequest {
	return ApiGetCompanyConfigurationsTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ConfigurationTypesAPIService) GetCompanyConfigurationsTypesCountExecute(r ApiGetCompanyConfigurationsTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.GetCompanyConfigurationsTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyConfigurationsTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyConfigurationsTypesByIdRequest) Execute() (*ConfigurationType, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsTypesByIdExecute(r)
}

/*
PatchCompanyConfigurationsTypesById Patch ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchCompanyConfigurationsTypesByIdRequest
*/
func (a *ConfigurationTypesAPIService) PatchCompanyConfigurationsTypesById(ctx context.Context, id int32) ApiPatchCompanyConfigurationsTypesByIdRequest {
	return ApiPatchCompanyConfigurationsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigurationType
func (a *ConfigurationTypesAPIService) PatchCompanyConfigurationsTypesByIdExecute(r ApiPatchCompanyConfigurationsTypesByIdRequest) (*ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.PatchCompanyConfigurationsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsTypesRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	configurationType *ConfigurationType
	clientId *string
}

// configurationType
func (r ApiPostCompanyConfigurationsTypesRequest) ConfigurationType(configurationType ConfigurationType) ApiPostCompanyConfigurationsTypesRequest {
	r.configurationType = &configurationType
	return r
}

// 
func (r ApiPostCompanyConfigurationsTypesRequest) ClientId(clientId string) ApiPostCompanyConfigurationsTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyConfigurationsTypesRequest) Execute() (*ConfigurationType, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsTypesExecute(r)
}

/*
PostCompanyConfigurationsTypes Post ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyConfigurationsTypesRequest
*/
func (a *ConfigurationTypesAPIService) PostCompanyConfigurationsTypes(ctx context.Context) ApiPostCompanyConfigurationsTypesRequest {
	return ApiPostCompanyConfigurationsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigurationType
func (a *ConfigurationTypesAPIService) PostCompanyConfigurationsTypesExecute(r ApiPostCompanyConfigurationsTypesRequest) (*ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.PostCompanyConfigurationsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationType == nil {
		return localVarReturnValue, nil, reportError("configurationType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsTypesCopyRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	configurationTypeCopy *ConfigurationTypeCopy
	clientId *string
}

// copy
func (r ApiPostCompanyConfigurationsTypesCopyRequest) ConfigurationTypeCopy(configurationTypeCopy ConfigurationTypeCopy) ApiPostCompanyConfigurationsTypesCopyRequest {
	r.configurationTypeCopy = &configurationTypeCopy
	return r
}

// 
func (r ApiPostCompanyConfigurationsTypesCopyRequest) ClientId(clientId string) ApiPostCompanyConfigurationsTypesCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyConfigurationsTypesCopyRequest) Execute() (*ConfigurationType, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsTypesCopyExecute(r)
}

/*
PostCompanyConfigurationsTypesCopy Post Board

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyConfigurationsTypesCopyRequest
*/
func (a *ConfigurationTypesAPIService) PostCompanyConfigurationsTypesCopy(ctx context.Context) ApiPostCompanyConfigurationsTypesCopyRequest {
	return ApiPostCompanyConfigurationsTypesCopyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigurationType
func (a *ConfigurationTypesAPIService) PostCompanyConfigurationsTypesCopyExecute(r ApiPostCompanyConfigurationsTypesCopyRequest) (*ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.PostCompanyConfigurationsTypesCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationTypeCopy == nil {
		return localVarReturnValue, nil, reportError("configurationTypeCopy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationTypeCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ConfigurationTypesAPIService
	id int32
	configurationType *ConfigurationType
	clientId *string
}

// configurationType
func (r ApiPutCompanyConfigurationsTypesByIdRequest) ConfigurationType(configurationType ConfigurationType) ApiPutCompanyConfigurationsTypesByIdRequest {
	r.configurationType = &configurationType
	return r
}

// 
func (r ApiPutCompanyConfigurationsTypesByIdRequest) ClientId(clientId string) ApiPutCompanyConfigurationsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyConfigurationsTypesByIdRequest) Execute() (*ConfigurationType, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsTypesByIdExecute(r)
}

/*
PutCompanyConfigurationsTypesById Put ConfigurationType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutCompanyConfigurationsTypesByIdRequest
*/
func (a *ConfigurationTypesAPIService) PutCompanyConfigurationsTypesById(ctx context.Context, id int32) ApiPutCompanyConfigurationsTypesByIdRequest {
	return ApiPutCompanyConfigurationsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigurationType
func (a *ConfigurationTypesAPIService) PutCompanyConfigurationsTypesByIdExecute(r ApiPutCompanyConfigurationsTypesByIdRequest) (*ConfigurationType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationTypesAPIService.PutCompanyConfigurationsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configurationType == nil {
		return localVarReturnValue, nil, reportError("configurationType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.configurationType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
