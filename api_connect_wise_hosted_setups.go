/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ConnectWiseHostedSetupsAPIService ConnectWiseHostedSetupsAPI service
type ConnectWiseHostedSetupsAPIService service

type ApiDeleteSystemConnectwisehostedsetupsByIdRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemConnectwisehostedsetupsByIdRequest) ClientId(clientId string) ApiDeleteSystemConnectwisehostedsetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemConnectwisehostedsetupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemConnectwisehostedsetupsByIdExecute(r)
}

/*
DeleteSystemConnectwisehostedsetupsById Delete ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id connectwisehostedsetupId
 @return ApiDeleteSystemConnectwisehostedsetupsByIdRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) DeleteSystemConnectwisehostedsetupsById(ctx context.Context, id int32) ApiDeleteSystemConnectwisehostedsetupsByIdRequest {
	return ApiDeleteSystemConnectwisehostedsetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ConnectWiseHostedSetupsAPIService) DeleteSystemConnectwisehostedsetupsByIdExecute(r ApiDeleteSystemConnectwisehostedsetupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.DeleteSystemConnectwisehostedsetupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemConnectwisehostedsetupsRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) Conditions(conditions string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) ChildConditions(childConditions string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) OrderBy(orderBy string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) Fields(fields string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) Page(page int32) ApiGetSystemConnectwisehostedsetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) PageSize(pageSize int32) ApiGetSystemConnectwisehostedsetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) PageId(pageId int32) ApiGetSystemConnectwisehostedsetupsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsRequest) ClientId(clientId string) ApiGetSystemConnectwisehostedsetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemConnectwisehostedsetupsRequest) Execute() ([]ConnectWiseHostedSetup, *http.Response, error) {
	return r.ApiService.GetSystemConnectwisehostedsetupsExecute(r)
}

/*
GetSystemConnectwisehostedsetups Get List of ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemConnectwisehostedsetupsRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetups(ctx context.Context) ApiGetSystemConnectwisehostedsetupsRequest {
	return ApiGetSystemConnectwisehostedsetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ConnectWiseHostedSetup
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetupsExecute(r ApiGetSystemConnectwisehostedsetupsRequest) ([]ConnectWiseHostedSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConnectWiseHostedSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.GetSystemConnectwisehostedsetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemConnectwisehostedsetupsByIdRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) Conditions(conditions string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) ChildConditions(childConditions string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) OrderBy(orderBy string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) Fields(fields string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) Page(page int32) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) PageSize(pageSize int32) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) PageId(pageId int32) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) ClientId(clientId string) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemConnectwisehostedsetupsByIdRequest) Execute() (*ConnectWiseHostedSetup, *http.Response, error) {
	return r.ApiService.GetSystemConnectwisehostedsetupsByIdExecute(r)
}

/*
GetSystemConnectwisehostedsetupsById Get ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id connectwisehostedsetupId
 @return ApiGetSystemConnectwisehostedsetupsByIdRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetupsById(ctx context.Context, id int32) ApiGetSystemConnectwisehostedsetupsByIdRequest {
	return ApiGetSystemConnectwisehostedsetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectWiseHostedSetup
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetupsByIdExecute(r ApiGetSystemConnectwisehostedsetupsByIdRequest) (*ConnectWiseHostedSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectWiseHostedSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.GetSystemConnectwisehostedsetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemConnectwisehostedsetupsCountRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) Conditions(conditions string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) ChildConditions(childConditions string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) OrderBy(orderBy string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) Fields(fields string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) Page(page int32) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) PageSize(pageSize int32) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) PageId(pageId int32) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemConnectwisehostedsetupsCountRequest) ClientId(clientId string) ApiGetSystemConnectwisehostedsetupsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemConnectwisehostedsetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemConnectwisehostedsetupsCountExecute(r)
}

/*
GetSystemConnectwisehostedsetupsCount Get Count of ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemConnectwisehostedsetupsCountRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetupsCount(ctx context.Context) ApiGetSystemConnectwisehostedsetupsCountRequest {
	return ApiGetSystemConnectwisehostedsetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ConnectWiseHostedSetupsAPIService) GetSystemConnectwisehostedsetupsCountExecute(r ApiGetSystemConnectwisehostedsetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.GetSystemConnectwisehostedsetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemConnectwisehostedsetupsByIdRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemConnectwisehostedsetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemConnectwisehostedsetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemConnectwisehostedsetupsByIdRequest) ClientId(clientId string) ApiPatchSystemConnectwisehostedsetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemConnectwisehostedsetupsByIdRequest) Execute() (*ConnectWiseHostedSetup, *http.Response, error) {
	return r.ApiService.PatchSystemConnectwisehostedsetupsByIdExecute(r)
}

/*
PatchSystemConnectwisehostedsetupsById Patch ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id connectwisehostedsetupId
 @return ApiPatchSystemConnectwisehostedsetupsByIdRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) PatchSystemConnectwisehostedsetupsById(ctx context.Context, id int32) ApiPatchSystemConnectwisehostedsetupsByIdRequest {
	return ApiPatchSystemConnectwisehostedsetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectWiseHostedSetup
func (a *ConnectWiseHostedSetupsAPIService) PatchSystemConnectwisehostedsetupsByIdExecute(r ApiPatchSystemConnectwisehostedsetupsByIdRequest) (*ConnectWiseHostedSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectWiseHostedSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.PatchSystemConnectwisehostedsetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemConnectwisehostedsetupsRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	connectWiseHostedSetup *ConnectWiseHostedSetup
	clientId *string
}

// connectWiseHostedSetup
func (r ApiPostSystemConnectwisehostedsetupsRequest) ConnectWiseHostedSetup(connectWiseHostedSetup ConnectWiseHostedSetup) ApiPostSystemConnectwisehostedsetupsRequest {
	r.connectWiseHostedSetup = &connectWiseHostedSetup
	return r
}

// 
func (r ApiPostSystemConnectwisehostedsetupsRequest) ClientId(clientId string) ApiPostSystemConnectwisehostedsetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemConnectwisehostedsetupsRequest) Execute() (*ConnectWiseHostedSetup, *http.Response, error) {
	return r.ApiService.PostSystemConnectwisehostedsetupsExecute(r)
}

/*
PostSystemConnectwisehostedsetups Post ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemConnectwisehostedsetupsRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) PostSystemConnectwisehostedsetups(ctx context.Context) ApiPostSystemConnectwisehostedsetupsRequest {
	return ApiPostSystemConnectwisehostedsetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConnectWiseHostedSetup
func (a *ConnectWiseHostedSetupsAPIService) PostSystemConnectwisehostedsetupsExecute(r ApiPostSystemConnectwisehostedsetupsRequest) (*ConnectWiseHostedSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectWiseHostedSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.PostSystemConnectwisehostedsetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectWiseHostedSetup == nil {
		return localVarReturnValue, nil, reportError("connectWiseHostedSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.connectWiseHostedSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemConnectwisehostedsetupsByIdRequest struct {
	ctx context.Context
	ApiService *ConnectWiseHostedSetupsAPIService
	id int32
	connectWiseHostedSetup *ConnectWiseHostedSetup
	clientId *string
}

// connectWiseHostedSetup
func (r ApiPutSystemConnectwisehostedsetupsByIdRequest) ConnectWiseHostedSetup(connectWiseHostedSetup ConnectWiseHostedSetup) ApiPutSystemConnectwisehostedsetupsByIdRequest {
	r.connectWiseHostedSetup = &connectWiseHostedSetup
	return r
}

// 
func (r ApiPutSystemConnectwisehostedsetupsByIdRequest) ClientId(clientId string) ApiPutSystemConnectwisehostedsetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemConnectwisehostedsetupsByIdRequest) Execute() (*ConnectWiseHostedSetup, *http.Response, error) {
	return r.ApiService.PutSystemConnectwisehostedsetupsByIdExecute(r)
}

/*
PutSystemConnectwisehostedsetupsById Put ConnectWiseHostedSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id connectwisehostedsetupId
 @return ApiPutSystemConnectwisehostedsetupsByIdRequest
*/
func (a *ConnectWiseHostedSetupsAPIService) PutSystemConnectwisehostedsetupsById(ctx context.Context, id int32) ApiPutSystemConnectwisehostedsetupsByIdRequest {
	return ApiPutSystemConnectwisehostedsetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConnectWiseHostedSetup
func (a *ConnectWiseHostedSetupsAPIService) PutSystemConnectwisehostedsetupsByIdExecute(r ApiPutSystemConnectwisehostedsetupsByIdRequest) (*ConnectWiseHostedSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectWiseHostedSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectWiseHostedSetupsAPIService.PutSystemConnectwisehostedsetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/connectwisehostedsetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectWiseHostedSetup == nil {
		return localVarReturnValue, nil, reportError("connectWiseHostedSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.connectWiseHostedSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
