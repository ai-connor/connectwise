/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactDepartmentsAPIService ContactDepartmentsAPI service
type ContactDepartmentsAPIService service

type ApiDeleteCompanyContactsDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactsDepartmentsByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsDepartmentsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsDepartmentsByIdExecute(r)
}

/*
DeleteCompanyContactsDepartmentsById Delete Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiDeleteCompanyContactsDepartmentsByIdRequest
*/
func (a *ContactDepartmentsAPIService) DeleteCompanyContactsDepartmentsById(ctx context.Context, id int32) ApiDeleteCompanyContactsDepartmentsByIdRequest {
	return ApiDeleteCompanyContactsDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ContactDepartmentsAPIService) DeleteCompanyContactsDepartmentsByIdExecute(r ApiDeleteCompanyContactsDepartmentsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.DeleteCompanyContactsDepartmentsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsDepartmentsRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) Conditions(conditions string) ApiGetCompanyContactsDepartmentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) ChildConditions(childConditions string) ApiGetCompanyContactsDepartmentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsDepartmentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) OrderBy(orderBy string) ApiGetCompanyContactsDepartmentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) Fields(fields string) ApiGetCompanyContactsDepartmentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) Page(page int32) ApiGetCompanyContactsDepartmentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) PageSize(pageSize int32) ApiGetCompanyContactsDepartmentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) PageId(pageId int32) ApiGetCompanyContactsDepartmentsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsRequest) ClientId(clientId string) ApiGetCompanyContactsDepartmentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsDepartmentsRequest) Execute() ([]ContactDepartment, *http.Response, error) {
	return r.ApiService.GetCompanyContactsDepartmentsExecute(r)
}

/*
GetCompanyContactsDepartments Get List of ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsDepartmentsRequest
*/
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartments(ctx context.Context) ApiGetCompanyContactsDepartmentsRequest {
	return ApiGetCompanyContactsDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactDepartment
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsExecute(r ApiGetCompanyContactsDepartmentsRequest) ([]ContactDepartment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactDepartment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.GetCompanyContactsDepartments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) Conditions(conditions string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) Fields(fields string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) Page(page int32) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) PageId(pageId int32) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdRequest) ClientId(clientId string) ApiGetCompanyContactsDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsDepartmentsByIdRequest) Execute() (*ContactDepartment, *http.Response, error) {
	return r.ApiService.GetCompanyContactsDepartmentsByIdExecute(r)
}

/*
GetCompanyContactsDepartmentsById Get ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetCompanyContactsDepartmentsByIdRequest
*/
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsById(ctx context.Context, id int32) ApiGetCompanyContactsDepartmentsByIdRequest {
	return ApiGetCompanyContactsDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactDepartment
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsByIdExecute(r ApiGetCompanyContactsDepartmentsByIdRequest) (*ContactDepartment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactDepartment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.GetCompanyContactsDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsDepartmentsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) Fields(fields string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) Page(page int32) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyContactsDepartmentsByIdUsagesExecute(r)
}

/*
GetCompanyContactsDepartmentsByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetCompanyContactsDepartmentsByIdUsagesRequest
*/
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsByIdUsages(ctx context.Context, id int32) ApiGetCompanyContactsDepartmentsByIdUsagesRequest {
	return ApiGetCompanyContactsDepartmentsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsByIdUsagesExecute(r ApiGetCompanyContactsDepartmentsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.GetCompanyContactsDepartmentsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsDepartmentsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) Fields(fields string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) Page(page int32) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyContactsDepartmentsByIdUsagesListExecute(r)
}

/*
GetCompanyContactsDepartmentsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetCompanyContactsDepartmentsByIdUsagesListRequest
*/
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyContactsDepartmentsByIdUsagesListRequest {
	return ApiGetCompanyContactsDepartmentsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsByIdUsagesListExecute(r ApiGetCompanyContactsDepartmentsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.GetCompanyContactsDepartmentsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsDepartmentsCountRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) Conditions(conditions string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) Fields(fields string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) Page(page int32) ApiGetCompanyContactsDepartmentsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsDepartmentsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) PageId(pageId int32) ApiGetCompanyContactsDepartmentsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsDepartmentsCountRequest) ClientId(clientId string) ApiGetCompanyContactsDepartmentsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsDepartmentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsDepartmentsCountExecute(r)
}

/*
GetCompanyContactsDepartmentsCount Get Count of ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsDepartmentsCountRequest
*/
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsCount(ctx context.Context) ApiGetCompanyContactsDepartmentsCountRequest {
	return ApiGetCompanyContactsDepartmentsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactDepartmentsAPIService) GetCompanyContactsDepartmentsCountExecute(r ApiGetCompanyContactsDepartmentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.GetCompanyContactsDepartmentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyContactsDepartmentsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsDepartmentsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyContactsDepartmentsByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyContactsDepartmentsByIdRequest) Execute() (*ContactDepartment, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsDepartmentsByIdExecute(r)
}

/*
PatchCompanyContactsDepartmentsById Patch ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiPatchCompanyContactsDepartmentsByIdRequest
*/
func (a *ContactDepartmentsAPIService) PatchCompanyContactsDepartmentsById(ctx context.Context, id int32) ApiPatchCompanyContactsDepartmentsByIdRequest {
	return ApiPatchCompanyContactsDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactDepartment
func (a *ContactDepartmentsAPIService) PatchCompanyContactsDepartmentsByIdExecute(r ApiPatchCompanyContactsDepartmentsByIdRequest) (*ContactDepartment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactDepartment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.PatchCompanyContactsDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsDepartmentsRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	contactDepartment *ContactDepartment
	clientId *string
}

// contactDepartment
func (r ApiPostCompanyContactsDepartmentsRequest) ContactDepartment(contactDepartment ContactDepartment) ApiPostCompanyContactsDepartmentsRequest {
	r.contactDepartment = &contactDepartment
	return r
}

// 
func (r ApiPostCompanyContactsDepartmentsRequest) ClientId(clientId string) ApiPostCompanyContactsDepartmentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyContactsDepartmentsRequest) Execute() (*ContactDepartment, *http.Response, error) {
	return r.ApiService.PostCompanyContactsDepartmentsExecute(r)
}

/*
PostCompanyContactsDepartments Post ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyContactsDepartmentsRequest
*/
func (a *ContactDepartmentsAPIService) PostCompanyContactsDepartments(ctx context.Context) ApiPostCompanyContactsDepartmentsRequest {
	return ApiPostCompanyContactsDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ContactDepartment
func (a *ContactDepartmentsAPIService) PostCompanyContactsDepartmentsExecute(r ApiPostCompanyContactsDepartmentsRequest) (*ContactDepartment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactDepartment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.PostCompanyContactsDepartments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactDepartment == nil {
		return localVarReturnValue, nil, reportError("contactDepartment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactDepartment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *ContactDepartmentsAPIService
	id int32
	contactDepartment *ContactDepartment
	clientId *string
}

// contactDepartment
func (r ApiPutCompanyContactsDepartmentsByIdRequest) ContactDepartment(contactDepartment ContactDepartment) ApiPutCompanyContactsDepartmentsByIdRequest {
	r.contactDepartment = &contactDepartment
	return r
}

// 
func (r ApiPutCompanyContactsDepartmentsByIdRequest) ClientId(clientId string) ApiPutCompanyContactsDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyContactsDepartmentsByIdRequest) Execute() (*ContactDepartment, *http.Response, error) {
	return r.ApiService.PutCompanyContactsDepartmentsByIdExecute(r)
}

/*
PutCompanyContactsDepartmentsById Put ContactDepartment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiPutCompanyContactsDepartmentsByIdRequest
*/
func (a *ContactDepartmentsAPIService) PutCompanyContactsDepartmentsById(ctx context.Context, id int32) ApiPutCompanyContactsDepartmentsByIdRequest {
	return ApiPutCompanyContactsDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactDepartment
func (a *ContactDepartmentsAPIService) PutCompanyContactsDepartmentsByIdExecute(r ApiPutCompanyContactsDepartmentsByIdRequest) (*ContactDepartment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactDepartment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactDepartmentsAPIService.PutCompanyContactsDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactDepartment == nil {
		return localVarReturnValue, nil, reportError("contactDepartment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactDepartment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
