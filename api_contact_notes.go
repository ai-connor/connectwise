/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactNotesAPIService ContactNotesAPI service
type ContactNotesAPIService service

type ApiDeleteCompanyContactsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactsByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsByParentIdNotesByIdExecute(r)
}

/*
DeleteCompanyContactsByParentIdNotesById Delete ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId contactId
 @return ApiDeleteCompanyContactsByParentIdNotesByIdRequest
*/
func (a *ContactNotesAPIService) DeleteCompanyContactsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyContactsByParentIdNotesByIdRequest {
	return ApiDeleteCompanyContactsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ContactNotesAPIService) DeleteCompanyContactsByParentIdNotesByIdExecute(r ApiDeleteCompanyContactsByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.DeleteCompanyContactsByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) Fields(fields string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) Page(page int32) ApiGetCompanyContactsByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdNotesRequest) Execute() ([]ContactNote, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdNotesExecute(r)
}

/*
GetCompanyContactsByParentIdNotes Get List of ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdNotesRequest
*/
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotes(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdNotesRequest {
	return ApiGetCompanyContactsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ContactNote
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotesExecute(r ApiGetCompanyContactsByParentIdNotesRequest) ([]ContactNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.GetCompanyContactsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) Fields(fields string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) Page(page int32) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdNotesByIdRequest) Execute() (*ContactNote, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdNotesByIdExecute(r)
}

/*
GetCompanyContactsByParentIdNotesById Get ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdNotesByIdRequest
*/
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetCompanyContactsByParentIdNotesByIdRequest {
	return ApiGetCompanyContactsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactNote
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotesByIdExecute(r ApiGetCompanyContactsByParentIdNotesByIdRequest) (*ContactNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.GetCompanyContactsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) Fields(fields string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) Page(page int32) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdNotesCountRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdNotesCountExecute(r)
}

/*
GetCompanyContactsByParentIdNotesCount Get Count of ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdNotesCountRequest
*/
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdNotesCountRequest {
	return ApiGetCompanyContactsByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactNotesAPIService) GetCompanyContactsByParentIdNotesCountExecute(r ApiGetCompanyContactsByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.GetCompanyContactsByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyContactsByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyContactsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyContactsByParentIdNotesByIdRequest) Execute() (*ContactNote, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsByParentIdNotesByIdExecute(r)
}

/*
PatchCompanyContactsByParentIdNotesById Patch ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId contactId
 @return ApiPatchCompanyContactsByParentIdNotesByIdRequest
*/
func (a *ContactNotesAPIService) PatchCompanyContactsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyContactsByParentIdNotesByIdRequest {
	return ApiPatchCompanyContactsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactNote
func (a *ContactNotesAPIService) PatchCompanyContactsByParentIdNotesByIdExecute(r ApiPatchCompanyContactsByParentIdNotesByIdRequest) (*ContactNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.PatchCompanyContactsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	parentId int32
	contactNote *ContactNote
	clientId *string
}

// contactNote
func (r ApiPostCompanyContactsByParentIdNotesRequest) ContactNote(contactNote ContactNote) ApiPostCompanyContactsByParentIdNotesRequest {
	r.contactNote = &contactNote
	return r
}

// 
func (r ApiPostCompanyContactsByParentIdNotesRequest) ClientId(clientId string) ApiPostCompanyContactsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyContactsByParentIdNotesRequest) Execute() (*ContactNote, *http.Response, error) {
	return r.ApiService.PostCompanyContactsByParentIdNotesExecute(r)
}

/*
PostCompanyContactsByParentIdNotes Post ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiPostCompanyContactsByParentIdNotesRequest
*/
func (a *ContactNotesAPIService) PostCompanyContactsByParentIdNotes(ctx context.Context, parentId int32) ApiPostCompanyContactsByParentIdNotesRequest {
	return ApiPostCompanyContactsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactNote
func (a *ContactNotesAPIService) PostCompanyContactsByParentIdNotesExecute(r ApiPostCompanyContactsByParentIdNotesRequest) (*ContactNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.PostCompanyContactsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactNote == nil {
		return localVarReturnValue, nil, reportError("contactNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ContactNotesAPIService
	id int32
	parentId int32
	contactNote *ContactNote
	clientId *string
}

// contactNote
func (r ApiPutCompanyContactsByParentIdNotesByIdRequest) ContactNote(contactNote ContactNote) ApiPutCompanyContactsByParentIdNotesByIdRequest {
	r.contactNote = &contactNote
	return r
}

// 
func (r ApiPutCompanyContactsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutCompanyContactsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyContactsByParentIdNotesByIdRequest) Execute() (*ContactNote, *http.Response, error) {
	return r.ApiService.PutCompanyContactsByParentIdNotesByIdExecute(r)
}

/*
PutCompanyContactsByParentIdNotesById Put ContactNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId contactId
 @return ApiPutCompanyContactsByParentIdNotesByIdRequest
*/
func (a *ContactNotesAPIService) PutCompanyContactsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutCompanyContactsByParentIdNotesByIdRequest {
	return ApiPutCompanyContactsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactNote
func (a *ContactNotesAPIService) PutCompanyContactsByParentIdNotesByIdExecute(r ApiPutCompanyContactsByParentIdNotesByIdRequest) (*ContactNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactNotesAPIService.PutCompanyContactsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactNote == nil {
		return localVarReturnValue, nil, reportError("contactNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
