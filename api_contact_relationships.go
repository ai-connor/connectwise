/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactRelationshipsAPIService ContactRelationshipsAPI service
type ContactRelationshipsAPIService service

type ApiDeleteCompanyContactsRelationshipsByIdRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactsRelationshipsByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsRelationshipsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsRelationshipsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsRelationshipsByIdExecute(r)
}

/*
DeleteCompanyContactsRelationshipsById Delete ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id relationshipId
 @return ApiDeleteCompanyContactsRelationshipsByIdRequest
*/
func (a *ContactRelationshipsAPIService) DeleteCompanyContactsRelationshipsById(ctx context.Context, id int32) ApiDeleteCompanyContactsRelationshipsByIdRequest {
	return ApiDeleteCompanyContactsRelationshipsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ContactRelationshipsAPIService) DeleteCompanyContactsRelationshipsByIdExecute(r ApiDeleteCompanyContactsRelationshipsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.DeleteCompanyContactsRelationshipsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsRelationshipsRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) Conditions(conditions string) ApiGetCompanyContactsRelationshipsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) ChildConditions(childConditions string) ApiGetCompanyContactsRelationshipsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsRelationshipsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) OrderBy(orderBy string) ApiGetCompanyContactsRelationshipsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) Fields(fields string) ApiGetCompanyContactsRelationshipsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) Page(page int32) ApiGetCompanyContactsRelationshipsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) PageSize(pageSize int32) ApiGetCompanyContactsRelationshipsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) PageId(pageId int32) ApiGetCompanyContactsRelationshipsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsRequest) ClientId(clientId string) ApiGetCompanyContactsRelationshipsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsRelationshipsRequest) Execute() ([]ContactRelationship, *http.Response, error) {
	return r.ApiService.GetCompanyContactsRelationshipsExecute(r)
}

/*
GetCompanyContactsRelationships Get List of ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsRelationshipsRequest
*/
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationships(ctx context.Context) ApiGetCompanyContactsRelationshipsRequest {
	return ApiGetCompanyContactsRelationshipsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactRelationship
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationshipsExecute(r ApiGetCompanyContactsRelationshipsRequest) ([]ContactRelationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactRelationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.GetCompanyContactsRelationships")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsRelationshipsByIdRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) Conditions(conditions string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) Fields(fields string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) Page(page int32) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) PageId(pageId int32) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsByIdRequest) ClientId(clientId string) ApiGetCompanyContactsRelationshipsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsRelationshipsByIdRequest) Execute() (*ContactRelationship, *http.Response, error) {
	return r.ApiService.GetCompanyContactsRelationshipsByIdExecute(r)
}

/*
GetCompanyContactsRelationshipsById Get ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id relationshipId
 @return ApiGetCompanyContactsRelationshipsByIdRequest
*/
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationshipsById(ctx context.Context, id int32) ApiGetCompanyContactsRelationshipsByIdRequest {
	return ApiGetCompanyContactsRelationshipsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactRelationship
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationshipsByIdExecute(r ApiGetCompanyContactsRelationshipsByIdRequest) (*ContactRelationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactRelationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.GetCompanyContactsRelationshipsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsRelationshipsCountRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) Conditions(conditions string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) Fields(fields string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) Page(page int32) ApiGetCompanyContactsRelationshipsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsRelationshipsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) PageId(pageId int32) ApiGetCompanyContactsRelationshipsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsRelationshipsCountRequest) ClientId(clientId string) ApiGetCompanyContactsRelationshipsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsRelationshipsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsRelationshipsCountExecute(r)
}

/*
GetCompanyContactsRelationshipsCount Get Count of ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsRelationshipsCountRequest
*/
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationshipsCount(ctx context.Context) ApiGetCompanyContactsRelationshipsCountRequest {
	return ApiGetCompanyContactsRelationshipsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactRelationshipsAPIService) GetCompanyContactsRelationshipsCountExecute(r ApiGetCompanyContactsRelationshipsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.GetCompanyContactsRelationshipsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsRelationshipsByIdRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyContactsRelationshipsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsRelationshipsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyContactsRelationshipsByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsRelationshipsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyContactsRelationshipsByIdRequest) Execute() (*ContactRelationship, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsRelationshipsByIdExecute(r)
}

/*
PatchCompanyContactsRelationshipsById Patch ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id relationshipId
 @return ApiPatchCompanyContactsRelationshipsByIdRequest
*/
func (a *ContactRelationshipsAPIService) PatchCompanyContactsRelationshipsById(ctx context.Context, id int32) ApiPatchCompanyContactsRelationshipsByIdRequest {
	return ApiPatchCompanyContactsRelationshipsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactRelationship
func (a *ContactRelationshipsAPIService) PatchCompanyContactsRelationshipsByIdExecute(r ApiPatchCompanyContactsRelationshipsByIdRequest) (*ContactRelationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactRelationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.PatchCompanyContactsRelationshipsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsRelationshipsRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	contactRelationship *ContactRelationship
	clientId *string
}

// contactRelationship
func (r ApiPostCompanyContactsRelationshipsRequest) ContactRelationship(contactRelationship ContactRelationship) ApiPostCompanyContactsRelationshipsRequest {
	r.contactRelationship = &contactRelationship
	return r
}

// 
func (r ApiPostCompanyContactsRelationshipsRequest) ClientId(clientId string) ApiPostCompanyContactsRelationshipsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyContactsRelationshipsRequest) Execute() (*ContactRelationship, *http.Response, error) {
	return r.ApiService.PostCompanyContactsRelationshipsExecute(r)
}

/*
PostCompanyContactsRelationships Post ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyContactsRelationshipsRequest
*/
func (a *ContactRelationshipsAPIService) PostCompanyContactsRelationships(ctx context.Context) ApiPostCompanyContactsRelationshipsRequest {
	return ApiPostCompanyContactsRelationshipsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ContactRelationship
func (a *ContactRelationshipsAPIService) PostCompanyContactsRelationshipsExecute(r ApiPostCompanyContactsRelationshipsRequest) (*ContactRelationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactRelationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.PostCompanyContactsRelationships")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactRelationship == nil {
		return localVarReturnValue, nil, reportError("contactRelationship is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactRelationship
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsRelationshipsByIdRequest struct {
	ctx context.Context
	ApiService *ContactRelationshipsAPIService
	id int32
	contactRelationship *ContactRelationship
	clientId *string
}

// contactRelationship
func (r ApiPutCompanyContactsRelationshipsByIdRequest) ContactRelationship(contactRelationship ContactRelationship) ApiPutCompanyContactsRelationshipsByIdRequest {
	r.contactRelationship = &contactRelationship
	return r
}

// 
func (r ApiPutCompanyContactsRelationshipsByIdRequest) ClientId(clientId string) ApiPutCompanyContactsRelationshipsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyContactsRelationshipsByIdRequest) Execute() (*ContactRelationship, *http.Response, error) {
	return r.ApiService.PutCompanyContactsRelationshipsByIdExecute(r)
}

/*
PutCompanyContactsRelationshipsById Put ContactRelationship

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id relationshipId
 @return ApiPutCompanyContactsRelationshipsByIdRequest
*/
func (a *ContactRelationshipsAPIService) PutCompanyContactsRelationshipsById(ctx context.Context, id int32) ApiPutCompanyContactsRelationshipsByIdRequest {
	return ApiPutCompanyContactsRelationshipsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactRelationship
func (a *ContactRelationshipsAPIService) PutCompanyContactsRelationshipsByIdExecute(r ApiPutCompanyContactsRelationshipsByIdRequest) (*ContactRelationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactRelationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactRelationshipsAPIService.PutCompanyContactsRelationshipsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/relationships/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactRelationship == nil {
		return localVarReturnValue, nil, reportError("contactRelationship is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactRelationship
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
