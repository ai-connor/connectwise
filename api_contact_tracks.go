/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactTracksAPIService ContactTracksAPI service
type ContactTracksAPIService service

type ApiDeleteCompanyContactsByParentIdTracksByIdRequest struct {
	ctx context.Context
	ApiService *ContactTracksAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactsByParentIdTracksByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsByParentIdTracksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsByParentIdTracksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsByParentIdTracksByIdExecute(r)
}

/*
DeleteCompanyContactsByParentIdTracksById Delete ContactTrack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id trackId
 @param parentId contactId
 @return ApiDeleteCompanyContactsByParentIdTracksByIdRequest
*/
func (a *ContactTracksAPIService) DeleteCompanyContactsByParentIdTracksById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyContactsByParentIdTracksByIdRequest {
	return ApiDeleteCompanyContactsByParentIdTracksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ContactTracksAPIService) DeleteCompanyContactsByParentIdTracksByIdExecute(r ApiDeleteCompanyContactsByParentIdTracksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTracksAPIService.DeleteCompanyContactsByParentIdTracksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/tracks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTracksRequest struct {
	ctx context.Context
	ApiService *ContactTracksAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) Page(page int32) ApiGetCompanyContactsByParentIdTracksRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTracksRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTracksRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTracksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTracksRequest) Execute() ([]ContactTrack, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTracksExecute(r)
}

/*
GetCompanyContactsByParentIdTracks Get List of ContactTrack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdTracksRequest
*/
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracks(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdTracksRequest {
	return ApiGetCompanyContactsByParentIdTracksRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ContactTrack
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracksExecute(r ApiGetCompanyContactsByParentIdTracksRequest) ([]ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTracksAPIService.GetCompanyContactsByParentIdTracks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/tracks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTracksByIdRequest struct {
	ctx context.Context
	ApiService *ContactTracksAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) Page(page int32) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTracksByIdRequest) Execute() (*ContactTrack, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTracksByIdExecute(r)
}

/*
GetCompanyContactsByParentIdTracksById Get ContactTrack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id trackId
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdTracksByIdRequest
*/
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracksById(ctx context.Context, id int32, parentId int32) ApiGetCompanyContactsByParentIdTracksByIdRequest {
	return ApiGetCompanyContactsByParentIdTracksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactTrack
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracksByIdExecute(r ApiGetCompanyContactsByParentIdTracksByIdRequest) (*ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTracksAPIService.GetCompanyContactsByParentIdTracksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/tracks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTracksCountRequest struct {
	ctx context.Context
	ApiService *ContactTracksAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) Page(page int32) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyContactsByParentIdTracksCountRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTracksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTracksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTracksCountExecute(r)
}

/*
GetCompanyContactsByParentIdTracksCount Get Count of ContactTrack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiGetCompanyContactsByParentIdTracksCountRequest
*/
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracksCount(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdTracksCountRequest {
	return ApiGetCompanyContactsByParentIdTracksCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactTracksAPIService) GetCompanyContactsByParentIdTracksCountExecute(r ApiGetCompanyContactsByParentIdTracksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTracksAPIService.GetCompanyContactsByParentIdTracksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/tracks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsByParentIdTracksRequest struct {
	ctx context.Context
	ApiService *ContactTracksAPIService
	parentId int32
	contactTrack *ContactTrack
	clientId *string
}

// track
func (r ApiPostCompanyContactsByParentIdTracksRequest) ContactTrack(contactTrack ContactTrack) ApiPostCompanyContactsByParentIdTracksRequest {
	r.contactTrack = &contactTrack
	return r
}

// 
func (r ApiPostCompanyContactsByParentIdTracksRequest) ClientId(clientId string) ApiPostCompanyContactsByParentIdTracksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyContactsByParentIdTracksRequest) Execute() (*ContactTrack, *http.Response, error) {
	return r.ApiService.PostCompanyContactsByParentIdTracksExecute(r)
}

/*
PostCompanyContactsByParentIdTracks Post ContactTrack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId contactId
 @return ApiPostCompanyContactsByParentIdTracksRequest
*/
func (a *ContactTracksAPIService) PostCompanyContactsByParentIdTracks(ctx context.Context, parentId int32) ApiPostCompanyContactsByParentIdTracksRequest {
	return ApiPostCompanyContactsByParentIdTracksRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ContactTrack
func (a *ContactTracksAPIService) PostCompanyContactsByParentIdTracksExecute(r ApiPostCompanyContactsByParentIdTracksRequest) (*ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTracksAPIService.PostCompanyContactsByParentIdTracks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/tracks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.contactTrack == nil {
		return localVarReturnValue, nil, reportError("contactTrack is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.contactTrack
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
