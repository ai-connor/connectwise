/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactTypeAssociationsAPIService ContactTypeAssociationsAPI service
type ContactTypeAssociationsAPIService service

type ApiDeleteCompanyContactTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactTypeAssociationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactTypeAssociationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactTypeAssociationsByIdExecute(r)
}

/*
DeleteCompanyContactTypeAssociationsById Delete ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactTypeAssociationId
 @return ApiDeleteCompanyContactTypeAssociationsByIdRequest
*/
func (a *ContactTypeAssociationsAPIService) DeleteCompanyContactTypeAssociationsById(ctx context.Context, id int32) ApiDeleteCompanyContactTypeAssociationsByIdRequest {
	return ApiDeleteCompanyContactTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ContactTypeAssociationsAPIService) DeleteCompanyContactTypeAssociationsByIdExecute(r ApiDeleteCompanyContactTypeAssociationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.DeleteCompanyContactTypeAssociationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) ClientId(clientId string) ApiGetCompanyContactTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) Conditions(conditions string) ApiGetCompanyContactTypeAssociationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) ChildConditions(childConditions string) ApiGetCompanyContactTypeAssociationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactTypeAssociationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) OrderBy(orderBy string) ApiGetCompanyContactTypeAssociationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) Fields(fields string) ApiGetCompanyContactTypeAssociationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) Page(page int32) ApiGetCompanyContactTypeAssociationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) PageSize(pageSize int32) ApiGetCompanyContactTypeAssociationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsRequest) PageId(pageId int32) ApiGetCompanyContactTypeAssociationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactTypeAssociationsRequest) Execute() ([]CompanyContactTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyContactTypeAssociationsExecute(r)
}

/*
GetCompanyContactTypeAssociations Get List of ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactTypeAssociationsRequest
*/
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociations(ctx context.Context) ApiGetCompanyContactTypeAssociationsRequest {
	return ApiGetCompanyContactTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CompanyContactTypeAssociation
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociationsExecute(r ApiGetCompanyContactTypeAssociationsRequest) ([]CompanyContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CompanyContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.GetCompanyContactTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) ClientId(clientId string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) Conditions(conditions string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) Fields(fields string) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) Page(page int32) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsByIdRequest) PageId(pageId int32) ApiGetCompanyContactTypeAssociationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactTypeAssociationsByIdRequest) Execute() (*CompanyContactTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyContactTypeAssociationsByIdExecute(r)
}

/*
GetCompanyContactTypeAssociationsById Get ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactTypeAssociationId
 @return ApiGetCompanyContactTypeAssociationsByIdRequest
*/
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociationsById(ctx context.Context, id int32) ApiGetCompanyContactTypeAssociationsByIdRequest {
	return ApiGetCompanyContactTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyContactTypeAssociation
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociationsByIdExecute(r ApiGetCompanyContactTypeAssociationsByIdRequest) (*CompanyContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.GetCompanyContactTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactTypeAssociationsCountRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) ClientId(clientId string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) Conditions(conditions string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) OrderBy(orderBy string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) Fields(fields string) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) Page(page int32) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) PageSize(pageSize int32) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactTypeAssociationsCountRequest) PageId(pageId int32) ApiGetCompanyContactTypeAssociationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactTypeAssociationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactTypeAssociationsCountExecute(r)
}

/*
GetCompanyContactTypeAssociationsCount Get Count of ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactTypeAssociationsCountRequest
*/
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociationsCount(ctx context.Context) ApiGetCompanyContactTypeAssociationsCountRequest {
	return ApiGetCompanyContactTypeAssociationsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactTypeAssociationsAPIService) GetCompanyContactTypeAssociationsCountExecute(r ApiGetCompanyContactTypeAssociationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.GetCompanyContactTypeAssociationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyContactTypeAssociationsByIdRequest) ClientId(clientId string) ApiPatchCompanyContactTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyContactTypeAssociationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactTypeAssociationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyContactTypeAssociationsByIdRequest) Execute() (*CompanyContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PatchCompanyContactTypeAssociationsByIdExecute(r)
}

/*
PatchCompanyContactTypeAssociationsById Patch ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactTypeAssociationId
 @return ApiPatchCompanyContactTypeAssociationsByIdRequest
*/
func (a *ContactTypeAssociationsAPIService) PatchCompanyContactTypeAssociationsById(ctx context.Context, id int32) ApiPatchCompanyContactTypeAssociationsByIdRequest {
	return ApiPatchCompanyContactTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyContactTypeAssociation
func (a *ContactTypeAssociationsAPIService) PatchCompanyContactTypeAssociationsByIdExecute(r ApiPatchCompanyContactTypeAssociationsByIdRequest) (*CompanyContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.PatchCompanyContactTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactTypeAssociationsRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	clientId *string
	companyContactTypeAssociation *CompanyContactTypeAssociation
}

// 
func (r ApiPostCompanyContactTypeAssociationsRequest) ClientId(clientId string) ApiPostCompanyContactTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// contactTypeAssociation
func (r ApiPostCompanyContactTypeAssociationsRequest) CompanyContactTypeAssociation(companyContactTypeAssociation CompanyContactTypeAssociation) ApiPostCompanyContactTypeAssociationsRequest {
	r.companyContactTypeAssociation = &companyContactTypeAssociation
	return r
}

func (r ApiPostCompanyContactTypeAssociationsRequest) Execute() (*CompanyContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PostCompanyContactTypeAssociationsExecute(r)
}

/*
PostCompanyContactTypeAssociations Post ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyContactTypeAssociationsRequest
*/
func (a *ContactTypeAssociationsAPIService) PostCompanyContactTypeAssociations(ctx context.Context) ApiPostCompanyContactTypeAssociationsRequest {
	return ApiPostCompanyContactTypeAssociationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CompanyContactTypeAssociation
func (a *ContactTypeAssociationsAPIService) PostCompanyContactTypeAssociationsExecute(r ApiPostCompanyContactTypeAssociationsRequest) (*CompanyContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.PostCompanyContactTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyContactTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyContactTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyContactTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactTypeAssociationsByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypeAssociationsAPIService
	id int32
	clientId *string
	companyContactTypeAssociation *CompanyContactTypeAssociation
}

// 
func (r ApiPutCompanyContactTypeAssociationsByIdRequest) ClientId(clientId string) ApiPutCompanyContactTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// contactTypeAssociation
func (r ApiPutCompanyContactTypeAssociationsByIdRequest) CompanyContactTypeAssociation(companyContactTypeAssociation CompanyContactTypeAssociation) ApiPutCompanyContactTypeAssociationsByIdRequest {
	r.companyContactTypeAssociation = &companyContactTypeAssociation
	return r
}

func (r ApiPutCompanyContactTypeAssociationsByIdRequest) Execute() (*CompanyContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PutCompanyContactTypeAssociationsByIdExecute(r)
}

/*
PutCompanyContactTypeAssociationsById Put ContactTypeAssociation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactTypeAssociationId
 @return ApiPutCompanyContactTypeAssociationsByIdRequest
*/
func (a *ContactTypeAssociationsAPIService) PutCompanyContactTypeAssociationsById(ctx context.Context, id int32) ApiPutCompanyContactTypeAssociationsByIdRequest {
	return ApiPutCompanyContactTypeAssociationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CompanyContactTypeAssociation
func (a *ContactTypeAssociationsAPIService) PutCompanyContactTypeAssociationsByIdExecute(r ApiPutCompanyContactTypeAssociationsByIdRequest) (*CompanyContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypeAssociationsAPIService.PutCompanyContactTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contactTypeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyContactTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("companyContactTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyContactTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
