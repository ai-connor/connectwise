/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ContactTypesAPIService ContactTypesAPI service
type ContactTypesAPIService service

type ApiDeleteCompanyContactsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyContactsTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsTypesByIdExecute(r)
}

/*
DeleteCompanyContactsTypesById Delete ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteCompanyContactsTypesByIdRequest
*/
func (a *ContactTypesAPIService) DeleteCompanyContactsTypesById(ctx context.Context, id int32) ApiDeleteCompanyContactsTypesByIdRequest {
	return ApiDeleteCompanyContactsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ContactTypesAPIService) DeleteCompanyContactsTypesByIdExecute(r ApiDeleteCompanyContactsTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.DeleteCompanyContactsTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) Page(page int32) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyContactTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyContactTypesByIdUsagesListExecute(r)
}

/*
GetCompanyContactTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyContactTypesByIdUsagesListRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactTypesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyContactTypesByIdUsagesListRequest {
	return ApiGetCompanyContactTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ContactTypesAPIService) GetCompanyContactTypesByIdUsagesListExecute(r ApiGetCompanyContactTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contact/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesRequest) ClientId(clientId string) ApiGetCompanyContactsTypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) Conditions(conditions string) ApiGetCompanyContactsTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) Fields(fields string) ApiGetCompanyContactsTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) Page(page int32) ApiGetCompanyContactsTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesRequest) PageId(pageId int32) ApiGetCompanyContactsTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesRequest) Execute() ([]ContactType, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesExecute(r)
}

/*
GetCompanyContactsTypes Get List of ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsTypesRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypes(ctx context.Context) ApiGetCompanyContactsTypesRequest {
	return ApiGetCompanyContactsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactType
func (a *ContactTypesAPIService) GetCompanyContactsTypesExecute(r ApiGetCompanyContactsTypesRequest) ([]ContactType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) ClientId(clientId string) ApiGetCompanyContactsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) Conditions(conditions string) ApiGetCompanyContactsTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) Fields(fields string) ApiGetCompanyContactsTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) Page(page int32) ApiGetCompanyContactsTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdRequest) PageId(pageId int32) ApiGetCompanyContactsTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesByIdRequest) Execute() (*ContactType, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesByIdExecute(r)
}

/*
GetCompanyContactsTypesById Get ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyContactsTypesByIdRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypesById(ctx context.Context, id int32) ApiGetCompanyContactsTypesByIdRequest {
	return ApiGetCompanyContactsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactType
func (a *ContactTypesAPIService) GetCompanyContactsTypesByIdExecute(r ApiGetCompanyContactsTypesByIdRequest) (*ContactType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) ClientId(clientId string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) Conditions(conditions string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) Fields(fields string) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) Page(page int32) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesByIdInfoRequest) PageId(pageId int32) ApiGetCompanyContactsTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesByIdInfoRequest) Execute() (*ContactTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesByIdInfoExecute(r)
}

/*
GetCompanyContactsTypesByIdInfo Get ContactTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetCompanyContactsTypesByIdInfoRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypesByIdInfo(ctx context.Context, id int32) ApiGetCompanyContactsTypesByIdInfoRequest {
	return ApiGetCompanyContactsTypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactTypeInfo
func (a *ContactTypesAPIService) GetCompanyContactsTypesByIdInfoExecute(r ApiGetCompanyContactsTypesByIdInfoRequest) (*ContactTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesCountRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) ClientId(clientId string) ApiGetCompanyContactsTypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) Conditions(conditions string) ApiGetCompanyContactsTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) Fields(fields string) ApiGetCompanyContactsTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) Page(page int32) ApiGetCompanyContactsTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountRequest) PageId(pageId int32) ApiGetCompanyContactsTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesCountExecute(r)
}

/*
GetCompanyContactsTypesCount Get Count of ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsTypesCountRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypesCount(ctx context.Context) ApiGetCompanyContactsTypesCountRequest {
	return ApiGetCompanyContactsTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactTypesAPIService) GetCompanyContactsTypesCountExecute(r ApiGetCompanyContactsTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesCountInfoRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) ClientId(clientId string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) Conditions(conditions string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) Fields(fields string) ApiGetCompanyContactsTypesCountInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) Page(page int32) ApiGetCompanyContactsTypesCountInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesCountInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesCountInfoRequest) PageId(pageId int32) ApiGetCompanyContactsTypesCountInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesCountInfoRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesCountInfoExecute(r)
}

/*
GetCompanyContactsTypesCountInfo Get Count of ContactTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsTypesCountInfoRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypesCountInfo(ctx context.Context) ApiGetCompanyContactsTypesCountInfoRequest {
	return ApiGetCompanyContactsTypesCountInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ContactTypesAPIService) GetCompanyContactsTypesCountInfoExecute(r ApiGetCompanyContactsTypesCountInfoRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypesCountInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/count/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsTypesInfoRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) ClientId(clientId string) ApiGetCompanyContactsTypesInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) Conditions(conditions string) ApiGetCompanyContactsTypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) ChildConditions(childConditions string) ApiGetCompanyContactsTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) OrderBy(orderBy string) ApiGetCompanyContactsTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) Fields(fields string) ApiGetCompanyContactsTypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) Page(page int32) ApiGetCompanyContactsTypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) PageSize(pageSize int32) ApiGetCompanyContactsTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyContactsTypesInfoRequest) PageId(pageId int32) ApiGetCompanyContactsTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsTypesInfoRequest) Execute() ([]ContactTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyContactsTypesInfoExecute(r)
}

/*
GetCompanyContactsTypesInfo Get List of ContactTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyContactsTypesInfoRequest
*/
func (a *ContactTypesAPIService) GetCompanyContactsTypesInfo(ctx context.Context) ApiGetCompanyContactsTypesInfoRequest {
	return ApiGetCompanyContactsTypesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ContactTypeInfo
func (a *ContactTypesAPIService) GetCompanyContactsTypesInfoExecute(r ApiGetCompanyContactsTypesInfoRequest) ([]ContactTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ContactTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.GetCompanyContactsTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyContactsTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyContactsTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyContactsTypesByIdRequest) Execute() (*ContactType, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsTypesByIdExecute(r)
}

/*
PatchCompanyContactsTypesById Patch ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchCompanyContactsTypesByIdRequest
*/
func (a *ContactTypesAPIService) PatchCompanyContactsTypesById(ctx context.Context, id int32) ApiPatchCompanyContactsTypesByIdRequest {
	return ApiPatchCompanyContactsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactType
func (a *ContactTypesAPIService) PatchCompanyContactsTypesByIdExecute(r ApiPatchCompanyContactsTypesByIdRequest) (*ContactType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.PatchCompanyContactsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsTypesRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	clientId *string
	contactType *ContactType
}

// 
func (r ApiPostCompanyContactsTypesRequest) ClientId(clientId string) ApiPostCompanyContactsTypesRequest {
	r.clientId = &clientId
	return r
}

// contactType
func (r ApiPostCompanyContactsTypesRequest) ContactType(contactType ContactType) ApiPostCompanyContactsTypesRequest {
	r.contactType = &contactType
	return r
}

func (r ApiPostCompanyContactsTypesRequest) Execute() (*ContactType, *http.Response, error) {
	return r.ApiService.PostCompanyContactsTypesExecute(r)
}

/*
PostCompanyContactsTypes Post ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyContactsTypesRequest
*/
func (a *ContactTypesAPIService) PostCompanyContactsTypes(ctx context.Context) ApiPostCompanyContactsTypesRequest {
	return ApiPostCompanyContactsTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ContactType
func (a *ContactTypesAPIService) PostCompanyContactsTypesExecute(r ApiPostCompanyContactsTypesRequest) (*ContactType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.PostCompanyContactsTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactType == nil {
		return localVarReturnValue, nil, reportError("contactType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsTypesByIdRequest struct {
	ctx context.Context
	ApiService *ContactTypesAPIService
	id int32
	clientId *string
	contactType *ContactType
}

// 
func (r ApiPutCompanyContactsTypesByIdRequest) ClientId(clientId string) ApiPutCompanyContactsTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// contactType
func (r ApiPutCompanyContactsTypesByIdRequest) ContactType(contactType ContactType) ApiPutCompanyContactsTypesByIdRequest {
	r.contactType = &contactType
	return r
}

func (r ApiPutCompanyContactsTypesByIdRequest) Execute() (*ContactType, *http.Response, error) {
	return r.ApiService.PutCompanyContactsTypesByIdExecute(r)
}

/*
PutCompanyContactsTypesById Put ContactType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutCompanyContactsTypesByIdRequest
*/
func (a *ContactTypesAPIService) PutCompanyContactsTypesById(ctx context.Context, id int32) ApiPutCompanyContactsTypesByIdRequest {
	return ApiPutCompanyContactsTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContactType
func (a *ContactTypesAPIService) PutCompanyContactsTypesByIdExecute(r ApiPutCompanyContactsTypesByIdRequest) (*ContactType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContactType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactTypesAPIService.PutCompanyContactsTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactType == nil {
		return localVarReturnValue, nil, reportError("contactType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
