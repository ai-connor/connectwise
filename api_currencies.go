/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CurrenciesAPIService CurrenciesAPI service
type CurrenciesAPIService service

type ApiDeleteFinanceCurrenciesByIdRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceCurrenciesByIdRequest) ClientId(clientId string) ApiDeleteFinanceCurrenciesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceCurrenciesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceCurrenciesByIdExecute(r)
}

/*
DeleteFinanceCurrenciesById Delete Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiDeleteFinanceCurrenciesByIdRequest
*/
func (a *CurrenciesAPIService) DeleteFinanceCurrenciesById(ctx context.Context, id int32) ApiDeleteFinanceCurrenciesByIdRequest {
	return ApiDeleteFinanceCurrenciesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CurrenciesAPIService) DeleteFinanceCurrenciesByIdExecute(r ApiDeleteFinanceCurrenciesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.DeleteFinanceCurrenciesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceCurrenciesRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceCurrenciesRequest) Conditions(conditions string) ApiGetFinanceCurrenciesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) ChildConditions(childConditions string) ApiGetFinanceCurrenciesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCurrenciesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) OrderBy(orderBy string) ApiGetFinanceCurrenciesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) Fields(fields string) ApiGetFinanceCurrenciesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) Page(page int32) ApiGetFinanceCurrenciesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) PageSize(pageSize int32) ApiGetFinanceCurrenciesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) PageId(pageId int32) ApiGetFinanceCurrenciesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceCurrenciesRequest) ClientId(clientId string) ApiGetFinanceCurrenciesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCurrenciesRequest) Execute() ([]FinanceCurrency, *http.Response, error) {
	return r.ApiService.GetFinanceCurrenciesExecute(r)
}

/*
GetFinanceCurrencies Get List of Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceCurrenciesRequest
*/
func (a *CurrenciesAPIService) GetFinanceCurrencies(ctx context.Context) ApiGetFinanceCurrenciesRequest {
	return ApiGetFinanceCurrenciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FinanceCurrency
func (a *CurrenciesAPIService) GetFinanceCurrenciesExecute(r ApiGetFinanceCurrenciesRequest) ([]FinanceCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FinanceCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.GetFinanceCurrencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCurrenciesByIdRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) Conditions(conditions string) ApiGetFinanceCurrenciesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceCurrenciesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCurrenciesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) OrderBy(orderBy string) ApiGetFinanceCurrenciesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) Fields(fields string) ApiGetFinanceCurrenciesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) Page(page int32) ApiGetFinanceCurrenciesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) PageSize(pageSize int32) ApiGetFinanceCurrenciesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) PageId(pageId int32) ApiGetFinanceCurrenciesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdRequest) ClientId(clientId string) ApiGetFinanceCurrenciesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCurrenciesByIdRequest) Execute() (*FinanceCurrency, *http.Response, error) {
	return r.ApiService.GetFinanceCurrenciesByIdExecute(r)
}

/*
GetFinanceCurrenciesById Get Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiGetFinanceCurrenciesByIdRequest
*/
func (a *CurrenciesAPIService) GetFinanceCurrenciesById(ctx context.Context, id int32) ApiGetFinanceCurrenciesByIdRequest {
	return ApiGetFinanceCurrenciesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FinanceCurrency
func (a *CurrenciesAPIService) GetFinanceCurrenciesByIdExecute(r ApiGetFinanceCurrenciesByIdRequest) (*FinanceCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FinanceCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.GetFinanceCurrenciesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCurrenciesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) Fields(fields string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) Page(page int32) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceCurrenciesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCurrenciesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceCurrenciesByIdUsagesExecute(r)
}

/*
GetFinanceCurrenciesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiGetFinanceCurrenciesByIdUsagesRequest
*/
func (a *CurrenciesAPIService) GetFinanceCurrenciesByIdUsages(ctx context.Context, id int32) ApiGetFinanceCurrenciesByIdUsagesRequest {
	return ApiGetFinanceCurrenciesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *CurrenciesAPIService) GetFinanceCurrenciesByIdUsagesExecute(r ApiGetFinanceCurrenciesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.GetFinanceCurrenciesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCurrenciesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) Fields(fields string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) Page(page int32) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCurrenciesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceCurrenciesByIdUsagesListExecute(r)
}

/*
GetFinanceCurrenciesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiGetFinanceCurrenciesByIdUsagesListRequest
*/
func (a *CurrenciesAPIService) GetFinanceCurrenciesByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceCurrenciesByIdUsagesListRequest {
	return ApiGetFinanceCurrenciesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *CurrenciesAPIService) GetFinanceCurrenciesByIdUsagesListExecute(r ApiGetFinanceCurrenciesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.GetFinanceCurrenciesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCurrenciesCountRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) Conditions(conditions string) ApiGetFinanceCurrenciesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) ChildConditions(childConditions string) ApiGetFinanceCurrenciesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCurrenciesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) OrderBy(orderBy string) ApiGetFinanceCurrenciesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) Fields(fields string) ApiGetFinanceCurrenciesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) Page(page int32) ApiGetFinanceCurrenciesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) PageSize(pageSize int32) ApiGetFinanceCurrenciesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) PageId(pageId int32) ApiGetFinanceCurrenciesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceCurrenciesCountRequest) ClientId(clientId string) ApiGetFinanceCurrenciesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCurrenciesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceCurrenciesCountExecute(r)
}

/*
GetFinanceCurrenciesCount Get Count of Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceCurrenciesCountRequest
*/
func (a *CurrenciesAPIService) GetFinanceCurrenciesCount(ctx context.Context) ApiGetFinanceCurrenciesCountRequest {
	return ApiGetFinanceCurrenciesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CurrenciesAPIService) GetFinanceCurrenciesCountExecute(r ApiGetFinanceCurrenciesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.GetFinanceCurrenciesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceCurrenciesByIdRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceCurrenciesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceCurrenciesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceCurrenciesByIdRequest) ClientId(clientId string) ApiPatchFinanceCurrenciesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceCurrenciesByIdRequest) Execute() (*FinanceCurrency, *http.Response, error) {
	return r.ApiService.PatchFinanceCurrenciesByIdExecute(r)
}

/*
PatchFinanceCurrenciesById Patch Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiPatchFinanceCurrenciesByIdRequest
*/
func (a *CurrenciesAPIService) PatchFinanceCurrenciesById(ctx context.Context, id int32) ApiPatchFinanceCurrenciesByIdRequest {
	return ApiPatchFinanceCurrenciesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FinanceCurrency
func (a *CurrenciesAPIService) PatchFinanceCurrenciesByIdExecute(r ApiPatchFinanceCurrenciesByIdRequest) (*FinanceCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FinanceCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.PatchFinanceCurrenciesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceCurrenciesRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	financeCurrency *FinanceCurrency
	clientId *string
}

// currency
func (r ApiPostFinanceCurrenciesRequest) FinanceCurrency(financeCurrency FinanceCurrency) ApiPostFinanceCurrenciesRequest {
	r.financeCurrency = &financeCurrency
	return r
}

// 
func (r ApiPostFinanceCurrenciesRequest) ClientId(clientId string) ApiPostFinanceCurrenciesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceCurrenciesRequest) Execute() (*FinanceCurrency, *http.Response, error) {
	return r.ApiService.PostFinanceCurrenciesExecute(r)
}

/*
PostFinanceCurrencies Post Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceCurrenciesRequest
*/
func (a *CurrenciesAPIService) PostFinanceCurrencies(ctx context.Context) ApiPostFinanceCurrenciesRequest {
	return ApiPostFinanceCurrenciesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FinanceCurrency
func (a *CurrenciesAPIService) PostFinanceCurrenciesExecute(r ApiPostFinanceCurrenciesRequest) (*FinanceCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FinanceCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.PostFinanceCurrencies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.financeCurrency == nil {
		return localVarReturnValue, nil, reportError("financeCurrency is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.financeCurrency
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceCurrenciesByIdRequest struct {
	ctx context.Context
	ApiService *CurrenciesAPIService
	id int32
	financeCurrency *FinanceCurrency
	clientId *string
}

// currency
func (r ApiPutFinanceCurrenciesByIdRequest) FinanceCurrency(financeCurrency FinanceCurrency) ApiPutFinanceCurrenciesByIdRequest {
	r.financeCurrency = &financeCurrency
	return r
}

// 
func (r ApiPutFinanceCurrenciesByIdRequest) ClientId(clientId string) ApiPutFinanceCurrenciesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceCurrenciesByIdRequest) Execute() (*FinanceCurrency, *http.Response, error) {
	return r.ApiService.PutFinanceCurrenciesByIdExecute(r)
}

/*
PutFinanceCurrenciesById Put Currency

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id currencyId
 @return ApiPutFinanceCurrenciesByIdRequest
*/
func (a *CurrenciesAPIService) PutFinanceCurrenciesById(ctx context.Context, id int32) ApiPutFinanceCurrenciesByIdRequest {
	return ApiPutFinanceCurrenciesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FinanceCurrency
func (a *CurrenciesAPIService) PutFinanceCurrenciesByIdExecute(r ApiPutFinanceCurrenciesByIdRequest) (*FinanceCurrency, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FinanceCurrency
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CurrenciesAPIService.PutFinanceCurrenciesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/currencies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.financeCurrency == nil {
		return localVarReturnValue, nil, reportError("financeCurrency is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.financeCurrency
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
