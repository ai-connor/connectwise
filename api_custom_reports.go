/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// CustomReportsAPIService CustomReportsAPI service
type CustomReportsAPIService service

type ApiDeleteSystemCustomReportsByIdRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemCustomReportsByIdRequest) ClientId(clientId string) ApiDeleteSystemCustomReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemCustomReportsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemCustomReportsByIdExecute(r)
}

/*
DeleteSystemCustomReportsById Delete CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customReportId
 @return ApiDeleteSystemCustomReportsByIdRequest
*/
func (a *CustomReportsAPIService) DeleteSystemCustomReportsById(ctx context.Context, id int32) ApiDeleteSystemCustomReportsByIdRequest {
	return ApiDeleteSystemCustomReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *CustomReportsAPIService) DeleteSystemCustomReportsByIdExecute(r ApiDeleteSystemCustomReportsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.DeleteSystemCustomReportsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemCustomReportsRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemCustomReportsRequest) ClientId(clientId string) ApiGetSystemCustomReportsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) Conditions(conditions string) ApiGetSystemCustomReportsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) ChildConditions(childConditions string) ApiGetSystemCustomReportsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCustomReportsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) OrderBy(orderBy string) ApiGetSystemCustomReportsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) Fields(fields string) ApiGetSystemCustomReportsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) Page(page int32) ApiGetSystemCustomReportsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) PageSize(pageSize int32) ApiGetSystemCustomReportsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemCustomReportsRequest) PageId(pageId int32) ApiGetSystemCustomReportsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCustomReportsRequest) Execute() ([]CustomReport, *http.Response, error) {
	return r.ApiService.GetSystemCustomReportsExecute(r)
}

/*
GetSystemCustomReports Get List of CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemCustomReportsRequest
*/
func (a *CustomReportsAPIService) GetSystemCustomReports(ctx context.Context) ApiGetSystemCustomReportsRequest {
	return ApiGetSystemCustomReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []CustomReport
func (a *CustomReportsAPIService) GetSystemCustomReportsExecute(r ApiGetSystemCustomReportsRequest) ([]CustomReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CustomReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.GetSystemCustomReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemCustomReportsByIdRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) ClientId(clientId string) ApiGetSystemCustomReportsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) Conditions(conditions string) ApiGetSystemCustomReportsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) ChildConditions(childConditions string) ApiGetSystemCustomReportsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCustomReportsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) OrderBy(orderBy string) ApiGetSystemCustomReportsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) Fields(fields string) ApiGetSystemCustomReportsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) Page(page int32) ApiGetSystemCustomReportsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) PageSize(pageSize int32) ApiGetSystemCustomReportsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemCustomReportsByIdRequest) PageId(pageId int32) ApiGetSystemCustomReportsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCustomReportsByIdRequest) Execute() (*CustomReport, *http.Response, error) {
	return r.ApiService.GetSystemCustomReportsByIdExecute(r)
}

/*
GetSystemCustomReportsById Get CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customReportId
 @return ApiGetSystemCustomReportsByIdRequest
*/
func (a *CustomReportsAPIService) GetSystemCustomReportsById(ctx context.Context, id int32) ApiGetSystemCustomReportsByIdRequest {
	return ApiGetSystemCustomReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomReport
func (a *CustomReportsAPIService) GetSystemCustomReportsByIdExecute(r ApiGetSystemCustomReportsByIdRequest) (*CustomReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.GetSystemCustomReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemCustomReportsCountRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemCustomReportsCountRequest) ClientId(clientId string) ApiGetSystemCustomReportsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) Conditions(conditions string) ApiGetSystemCustomReportsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) ChildConditions(childConditions string) ApiGetSystemCustomReportsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCustomReportsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) OrderBy(orderBy string) ApiGetSystemCustomReportsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) Fields(fields string) ApiGetSystemCustomReportsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) Page(page int32) ApiGetSystemCustomReportsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) PageSize(pageSize int32) ApiGetSystemCustomReportsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemCustomReportsCountRequest) PageId(pageId int32) ApiGetSystemCustomReportsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCustomReportsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemCustomReportsCountExecute(r)
}

/*
GetSystemCustomReportsCount Get Count of CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemCustomReportsCountRequest
*/
func (a *CustomReportsAPIService) GetSystemCustomReportsCount(ctx context.Context) ApiGetSystemCustomReportsCountRequest {
	return ApiGetSystemCustomReportsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *CustomReportsAPIService) GetSystemCustomReportsCountExecute(r ApiGetSystemCustomReportsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.GetSystemCustomReportsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemCustomReportsByIdRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemCustomReportsByIdRequest) ClientId(clientId string) ApiPatchSystemCustomReportsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemCustomReportsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemCustomReportsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemCustomReportsByIdRequest) Execute() (*CustomReport, *http.Response, error) {
	return r.ApiService.PatchSystemCustomReportsByIdExecute(r)
}

/*
PatchSystemCustomReportsById Patch CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customReportId
 @return ApiPatchSystemCustomReportsByIdRequest
*/
func (a *CustomReportsAPIService) PatchSystemCustomReportsById(ctx context.Context, id int32) ApiPatchSystemCustomReportsByIdRequest {
	return ApiPatchSystemCustomReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomReport
func (a *CustomReportsAPIService) PatchSystemCustomReportsByIdExecute(r ApiPatchSystemCustomReportsByIdRequest) (*CustomReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.PatchSystemCustomReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemCustomReportsRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	clientId *string
	customReport *CustomReport
}

// 
func (r ApiPostSystemCustomReportsRequest) ClientId(clientId string) ApiPostSystemCustomReportsRequest {
	r.clientId = &clientId
	return r
}

// customReport
func (r ApiPostSystemCustomReportsRequest) CustomReport(customReport CustomReport) ApiPostSystemCustomReportsRequest {
	r.customReport = &customReport
	return r
}

func (r ApiPostSystemCustomReportsRequest) Execute() (*CustomReport, *http.Response, error) {
	return r.ApiService.PostSystemCustomReportsExecute(r)
}

/*
PostSystemCustomReports Post CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemCustomReportsRequest
*/
func (a *CustomReportsAPIService) PostSystemCustomReports(ctx context.Context) ApiPostSystemCustomReportsRequest {
	return ApiPostSystemCustomReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomReport
func (a *CustomReportsAPIService) PostSystemCustomReportsExecute(r ApiPostSystemCustomReportsRequest) (*CustomReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.PostSystemCustomReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.customReport == nil {
		return localVarReturnValue, nil, reportError("customReport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.customReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemCustomReportsByIdRequest struct {
	ctx context.Context
	ApiService *CustomReportsAPIService
	id int32
	clientId *string
	customReport *CustomReport
}

// 
func (r ApiPutSystemCustomReportsByIdRequest) ClientId(clientId string) ApiPutSystemCustomReportsByIdRequest {
	r.clientId = &clientId
	return r
}

// customReport
func (r ApiPutSystemCustomReportsByIdRequest) CustomReport(customReport CustomReport) ApiPutSystemCustomReportsByIdRequest {
	r.customReport = &customReport
	return r
}

func (r ApiPutSystemCustomReportsByIdRequest) Execute() (*CustomReport, *http.Response, error) {
	return r.ApiService.PutSystemCustomReportsByIdExecute(r)
}

/*
PutSystemCustomReportsById Put CustomReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id customReportId
 @return ApiPutSystemCustomReportsByIdRequest
*/
func (a *CustomReportsAPIService) PutSystemCustomReportsById(ctx context.Context, id int32) ApiPutSystemCustomReportsByIdRequest {
	return ApiPutSystemCustomReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomReport
func (a *CustomReportsAPIService) PutSystemCustomReportsByIdExecute(r ApiPutSystemCustomReportsByIdRequest) (*CustomReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CustomReportsAPIService.PutSystemCustomReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/customReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.customReport == nil {
		return localVarReturnValue, nil, reportError("customReport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.customReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
