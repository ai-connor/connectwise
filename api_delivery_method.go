/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DeliveryMethodAPIService DeliveryMethodAPI service
type DeliveryMethodAPIService service

type ApiDeleteFinanceDeliveryMethodsByIdRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceDeliveryMethodsByIdRequest) ClientId(clientId string) ApiDeleteFinanceDeliveryMethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceDeliveryMethodsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceDeliveryMethodsByIdExecute(r)
}

/*
DeleteFinanceDeliveryMethodsById Delete DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id deliveryMethodId
 @return ApiDeleteFinanceDeliveryMethodsByIdRequest
*/
func (a *DeliveryMethodAPIService) DeleteFinanceDeliveryMethodsById(ctx context.Context, id int32) ApiDeleteFinanceDeliveryMethodsByIdRequest {
	return ApiDeleteFinanceDeliveryMethodsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DeliveryMethodAPIService) DeleteFinanceDeliveryMethodsByIdExecute(r ApiDeleteFinanceDeliveryMethodsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.DeleteFinanceDeliveryMethodsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) Conditions(conditions string) ApiGetFinanceDeliveryMethodsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) ChildConditions(childConditions string) ApiGetFinanceDeliveryMethodsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceDeliveryMethodsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) OrderBy(orderBy string) ApiGetFinanceDeliveryMethodsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) Fields(fields string) ApiGetFinanceDeliveryMethodsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) Page(page int32) ApiGetFinanceDeliveryMethodsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) PageSize(pageSize int32) ApiGetFinanceDeliveryMethodsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) PageId(pageId int32) ApiGetFinanceDeliveryMethodsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsRequest) ClientId(clientId string) ApiGetFinanceDeliveryMethodsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceDeliveryMethodsRequest) Execute() ([]DeliveryMethod, *http.Response, error) {
	return r.ApiService.GetFinanceDeliveryMethodsExecute(r)
}

/*
GetFinanceDeliveryMethods Get List of DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceDeliveryMethodsRequest
*/
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethods(ctx context.Context) ApiGetFinanceDeliveryMethodsRequest {
	return ApiGetFinanceDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []DeliveryMethod
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethodsExecute(r ApiGetFinanceDeliveryMethodsRequest) ([]DeliveryMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DeliveryMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.GetFinanceDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceDeliveryMethodsByIdRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) Conditions(conditions string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) OrderBy(orderBy string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) Fields(fields string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) Page(page int32) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) PageSize(pageSize int32) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) PageId(pageId int32) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsByIdRequest) ClientId(clientId string) ApiGetFinanceDeliveryMethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceDeliveryMethodsByIdRequest) Execute() (*DeliveryMethod, *http.Response, error) {
	return r.ApiService.GetFinanceDeliveryMethodsByIdExecute(r)
}

/*
GetFinanceDeliveryMethodsById Get DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id deliveryMethodId
 @return ApiGetFinanceDeliveryMethodsByIdRequest
*/
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethodsById(ctx context.Context, id int32) ApiGetFinanceDeliveryMethodsByIdRequest {
	return ApiGetFinanceDeliveryMethodsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeliveryMethod
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethodsByIdExecute(r ApiGetFinanceDeliveryMethodsByIdRequest) (*DeliveryMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeliveryMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.GetFinanceDeliveryMethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceDeliveryMethodsCountRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) Conditions(conditions string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) ChildConditions(childConditions string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) OrderBy(orderBy string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) Fields(fields string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) Page(page int32) ApiGetFinanceDeliveryMethodsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) PageSize(pageSize int32) ApiGetFinanceDeliveryMethodsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) PageId(pageId int32) ApiGetFinanceDeliveryMethodsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceDeliveryMethodsCountRequest) ClientId(clientId string) ApiGetFinanceDeliveryMethodsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceDeliveryMethodsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceDeliveryMethodsCountExecute(r)
}

/*
GetFinanceDeliveryMethodsCount Get Count of DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceDeliveryMethodsCountRequest
*/
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethodsCount(ctx context.Context) ApiGetFinanceDeliveryMethodsCountRequest {
	return ApiGetFinanceDeliveryMethodsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *DeliveryMethodAPIService) GetFinanceDeliveryMethodsCountExecute(r ApiGetFinanceDeliveryMethodsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.GetFinanceDeliveryMethodsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceDeliveryMethodsByIdRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceDeliveryMethodsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceDeliveryMethodsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceDeliveryMethodsByIdRequest) ClientId(clientId string) ApiPatchFinanceDeliveryMethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceDeliveryMethodsByIdRequest) Execute() (*DeliveryMethod, *http.Response, error) {
	return r.ApiService.PatchFinanceDeliveryMethodsByIdExecute(r)
}

/*
PatchFinanceDeliveryMethodsById Patch DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id deliveryMethodId
 @return ApiPatchFinanceDeliveryMethodsByIdRequest
*/
func (a *DeliveryMethodAPIService) PatchFinanceDeliveryMethodsById(ctx context.Context, id int32) ApiPatchFinanceDeliveryMethodsByIdRequest {
	return ApiPatchFinanceDeliveryMethodsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeliveryMethod
func (a *DeliveryMethodAPIService) PatchFinanceDeliveryMethodsByIdExecute(r ApiPatchFinanceDeliveryMethodsByIdRequest) (*DeliveryMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeliveryMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.PatchFinanceDeliveryMethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceDeliveryMethodsRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	deliveryMethod *DeliveryMethod
	clientId *string
}

// deliveryMethod
func (r ApiPostFinanceDeliveryMethodsRequest) DeliveryMethod(deliveryMethod DeliveryMethod) ApiPostFinanceDeliveryMethodsRequest {
	r.deliveryMethod = &deliveryMethod
	return r
}

// 
func (r ApiPostFinanceDeliveryMethodsRequest) ClientId(clientId string) ApiPostFinanceDeliveryMethodsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceDeliveryMethodsRequest) Execute() (*DeliveryMethod, *http.Response, error) {
	return r.ApiService.PostFinanceDeliveryMethodsExecute(r)
}

/*
PostFinanceDeliveryMethods Post DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceDeliveryMethodsRequest
*/
func (a *DeliveryMethodAPIService) PostFinanceDeliveryMethods(ctx context.Context) ApiPostFinanceDeliveryMethodsRequest {
	return ApiPostFinanceDeliveryMethodsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeliveryMethod
func (a *DeliveryMethodAPIService) PostFinanceDeliveryMethodsExecute(r ApiPostFinanceDeliveryMethodsRequest) (*DeliveryMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeliveryMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.PostFinanceDeliveryMethods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deliveryMethod == nil {
		return localVarReturnValue, nil, reportError("deliveryMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.deliveryMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceDeliveryMethodsByIdRequest struct {
	ctx context.Context
	ApiService *DeliveryMethodAPIService
	id int32
	deliveryMethod *DeliveryMethod
	clientId *string
}

// deliveryMethod
func (r ApiPutFinanceDeliveryMethodsByIdRequest) DeliveryMethod(deliveryMethod DeliveryMethod) ApiPutFinanceDeliveryMethodsByIdRequest {
	r.deliveryMethod = &deliveryMethod
	return r
}

// 
func (r ApiPutFinanceDeliveryMethodsByIdRequest) ClientId(clientId string) ApiPutFinanceDeliveryMethodsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceDeliveryMethodsByIdRequest) Execute() (*DeliveryMethod, *http.Response, error) {
	return r.ApiService.PutFinanceDeliveryMethodsByIdExecute(r)
}

/*
PutFinanceDeliveryMethodsById Put DeliveryMethod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id deliveryMethodId
 @return ApiPutFinanceDeliveryMethodsByIdRequest
*/
func (a *DeliveryMethodAPIService) PutFinanceDeliveryMethodsById(ctx context.Context, id int32) ApiPutFinanceDeliveryMethodsByIdRequest {
	return ApiPutFinanceDeliveryMethodsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeliveryMethod
func (a *DeliveryMethodAPIService) PutFinanceDeliveryMethodsByIdExecute(r ApiPutFinanceDeliveryMethodsByIdRequest) (*DeliveryMethod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeliveryMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeliveryMethodAPIService.PutFinanceDeliveryMethodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/deliveryMethods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deliveryMethod == nil {
		return localVarReturnValue, nil, reportError("deliveryMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.deliveryMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
