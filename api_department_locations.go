/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DepartmentLocationsAPIService DepartmentLocationsAPI service
type DepartmentLocationsAPIService service

type ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest) ClientId(clientId string) ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemDepartmentsByParentIdLocationsByIdExecute(r)
}

/*
DeleteSystemDepartmentsByParentIdLocationsById Delete DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId departmentId
 @return ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest
*/
func (a *DepartmentLocationsAPIService) DeleteSystemDepartmentsByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest {
	return ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *DepartmentLocationsAPIService) DeleteSystemDepartmentsByParentIdLocationsByIdExecute(r ApiDeleteSystemDepartmentsByParentIdLocationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.DeleteSystemDepartmentsByParentIdLocationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByParentIdLocationsRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) Conditions(conditions string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) Fields(fields string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) Page(page int32) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) PageId(pageId int32) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) ClientId(clientId string) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByParentIdLocationsRequest) Execute() ([]DepartmentLocation, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByParentIdLocationsExecute(r)
}

/*
GetSystemDepartmentsByParentIdLocations Get List of DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId departmentId
 @return ApiGetSystemDepartmentsByParentIdLocationsRequest
*/
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocations(ctx context.Context, parentId int32) ApiGetSystemDepartmentsByParentIdLocationsRequest {
	return ApiGetSystemDepartmentsByParentIdLocationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []DepartmentLocation
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocationsExecute(r ApiGetSystemDepartmentsByParentIdLocationsRequest) ([]DepartmentLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DepartmentLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.GetSystemDepartmentsByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) Conditions(conditions string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) Fields(fields string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) Page(page int32) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) PageId(pageId int32) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) ClientId(clientId string) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) Execute() (*DepartmentLocation, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByParentIdLocationsByIdExecute(r)
}

/*
GetSystemDepartmentsByParentIdLocationsById Get DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId departmentId
 @return ApiGetSystemDepartmentsByParentIdLocationsByIdRequest
*/
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemDepartmentsByParentIdLocationsByIdRequest {
	return ApiGetSystemDepartmentsByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return DepartmentLocation
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocationsByIdExecute(r ApiGetSystemDepartmentsByParentIdLocationsByIdRequest) (*DepartmentLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepartmentLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.GetSystemDepartmentsByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByParentIdLocationsCountRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) Conditions(conditions string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) Fields(fields string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) Page(page int32) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) PageId(pageId int32) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) ClientId(clientId string) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByParentIdLocationsCountExecute(r)
}

/*
GetSystemDepartmentsByParentIdLocationsCount Get Count of DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId departmentId
 @return ApiGetSystemDepartmentsByParentIdLocationsCountRequest
*/
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocationsCount(ctx context.Context, parentId int32) ApiGetSystemDepartmentsByParentIdLocationsCountRequest {
	return ApiGetSystemDepartmentsByParentIdLocationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *DepartmentLocationsAPIService) GetSystemDepartmentsByParentIdLocationsCountExecute(r ApiGetSystemDepartmentsByParentIdLocationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.GetSystemDepartmentsByParentIdLocationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest) ClientId(clientId string) ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest) Execute() (*DepartmentLocation, *http.Response, error) {
	return r.ApiService.PatchSystemDepartmentsByParentIdLocationsByIdExecute(r)
}

/*
PatchSystemDepartmentsByParentIdLocationsById Patch DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId departmentId
 @return ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest
*/
func (a *DepartmentLocationsAPIService) PatchSystemDepartmentsByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest {
	return ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return DepartmentLocation
func (a *DepartmentLocationsAPIService) PatchSystemDepartmentsByParentIdLocationsByIdExecute(r ApiPatchSystemDepartmentsByParentIdLocationsByIdRequest) (*DepartmentLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepartmentLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.PatchSystemDepartmentsByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemDepartmentsByParentIdLocationsRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	parentId int32
	departmentLocation *DepartmentLocation
	clientId *string
}

// departmentLocation
func (r ApiPostSystemDepartmentsByParentIdLocationsRequest) DepartmentLocation(departmentLocation DepartmentLocation) ApiPostSystemDepartmentsByParentIdLocationsRequest {
	r.departmentLocation = &departmentLocation
	return r
}

// 
func (r ApiPostSystemDepartmentsByParentIdLocationsRequest) ClientId(clientId string) ApiPostSystemDepartmentsByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemDepartmentsByParentIdLocationsRequest) Execute() (*DepartmentLocation, *http.Response, error) {
	return r.ApiService.PostSystemDepartmentsByParentIdLocationsExecute(r)
}

/*
PostSystemDepartmentsByParentIdLocations Post DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId departmentId
 @return ApiPostSystemDepartmentsByParentIdLocationsRequest
*/
func (a *DepartmentLocationsAPIService) PostSystemDepartmentsByParentIdLocations(ctx context.Context, parentId int32) ApiPostSystemDepartmentsByParentIdLocationsRequest {
	return ApiPostSystemDepartmentsByParentIdLocationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return DepartmentLocation
func (a *DepartmentLocationsAPIService) PostSystemDepartmentsByParentIdLocationsExecute(r ApiPostSystemDepartmentsByParentIdLocationsRequest) (*DepartmentLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepartmentLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.PostSystemDepartmentsByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.departmentLocation == nil {
		return localVarReturnValue, nil, reportError("departmentLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.departmentLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemDepartmentsByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentLocationsAPIService
	id int32
	parentId int32
	departmentLocation *DepartmentLocation
	clientId *string
}

// departmentLocation
func (r ApiPutSystemDepartmentsByParentIdLocationsByIdRequest) DepartmentLocation(departmentLocation DepartmentLocation) ApiPutSystemDepartmentsByParentIdLocationsByIdRequest {
	r.departmentLocation = &departmentLocation
	return r
}

// 
func (r ApiPutSystemDepartmentsByParentIdLocationsByIdRequest) ClientId(clientId string) ApiPutSystemDepartmentsByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemDepartmentsByParentIdLocationsByIdRequest) Execute() (*DepartmentLocation, *http.Response, error) {
	return r.ApiService.PutSystemDepartmentsByParentIdLocationsByIdExecute(r)
}

/*
PutSystemDepartmentsByParentIdLocationsById Put DepartmentLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId departmentId
 @return ApiPutSystemDepartmentsByParentIdLocationsByIdRequest
*/
func (a *DepartmentLocationsAPIService) PutSystemDepartmentsByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiPutSystemDepartmentsByParentIdLocationsByIdRequest {
	return ApiPutSystemDepartmentsByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return DepartmentLocation
func (a *DepartmentLocationsAPIService) PutSystemDepartmentsByParentIdLocationsByIdExecute(r ApiPutSystemDepartmentsByParentIdLocationsByIdRequest) (*DepartmentLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DepartmentLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentLocationsAPIService.PutSystemDepartmentsByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.departmentLocation == nil {
		return localVarReturnValue, nil, reportError("departmentLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.departmentLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
