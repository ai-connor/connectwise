/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DepartmentsAPIService DepartmentsAPI service
type DepartmentsAPIService service

type ApiDeleteSystemDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemDepartmentsByIdRequest) ClientId(clientId string) ApiDeleteSystemDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemDepartmentsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemDepartmentsByIdExecute(r)
}

/*
DeleteSystemDepartmentsById Delete Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiDeleteSystemDepartmentsByIdRequest
*/
func (a *DepartmentsAPIService) DeleteSystemDepartmentsById(ctx context.Context, id int32) ApiDeleteSystemDepartmentsByIdRequest {
	return ApiDeleteSystemDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DepartmentsAPIService) DeleteSystemDepartmentsByIdExecute(r ApiDeleteSystemDepartmentsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.DeleteSystemDepartmentsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsRequest) Conditions(conditions string) ApiGetSystemDepartmentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) Fields(fields string) ApiGetSystemDepartmentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) Page(page int32) ApiGetSystemDepartmentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) PageId(pageId int32) ApiGetSystemDepartmentsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsRequest) ClientId(clientId string) ApiGetSystemDepartmentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsRequest) Execute() ([]Department, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsExecute(r)
}

/*
GetSystemDepartments Get List of Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemDepartmentsRequest
*/
func (a *DepartmentsAPIService) GetSystemDepartments(ctx context.Context) ApiGetSystemDepartmentsRequest {
	return ApiGetSystemDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Department
func (a *DepartmentsAPIService) GetSystemDepartmentsExecute(r ApiGetSystemDepartmentsRequest) ([]Department, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Department
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.GetSystemDepartments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) Conditions(conditions string) ApiGetSystemDepartmentsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) Fields(fields string) ApiGetSystemDepartmentsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) Page(page int32) ApiGetSystemDepartmentsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) PageId(pageId int32) ApiGetSystemDepartmentsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdRequest) ClientId(clientId string) ApiGetSystemDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByIdRequest) Execute() (*Department, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByIdExecute(r)
}

/*
GetSystemDepartmentsById Get Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetSystemDepartmentsByIdRequest
*/
func (a *DepartmentsAPIService) GetSystemDepartmentsById(ctx context.Context, id int32) ApiGetSystemDepartmentsByIdRequest {
	return ApiGetSystemDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Department
func (a *DepartmentsAPIService) GetSystemDepartmentsByIdExecute(r ApiGetSystemDepartmentsByIdRequest) (*Department, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Department
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.GetSystemDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) Conditions(conditions string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) Fields(fields string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) Page(page int32) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) PageId(pageId int32) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesRequest) ClientId(clientId string) ApiGetSystemDepartmentsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByIdUsagesExecute(r)
}

/*
GetSystemDepartmentsByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetSystemDepartmentsByIdUsagesRequest
*/
func (a *DepartmentsAPIService) GetSystemDepartmentsByIdUsages(ctx context.Context, id int32) ApiGetSystemDepartmentsByIdUsagesRequest {
	return ApiGetSystemDepartmentsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *DepartmentsAPIService) GetSystemDepartmentsByIdUsagesExecute(r ApiGetSystemDepartmentsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.GetSystemDepartmentsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) Conditions(conditions string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) Fields(fields string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) Page(page int32) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) PageId(pageId int32) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsByIdUsagesListRequest) ClientId(clientId string) ApiGetSystemDepartmentsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsByIdUsagesListExecute(r)
}

/*
GetSystemDepartmentsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiGetSystemDepartmentsByIdUsagesListRequest
*/
func (a *DepartmentsAPIService) GetSystemDepartmentsByIdUsagesList(ctx context.Context, id int32) ApiGetSystemDepartmentsByIdUsagesListRequest {
	return ApiGetSystemDepartmentsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *DepartmentsAPIService) GetSystemDepartmentsByIdUsagesListExecute(r ApiGetSystemDepartmentsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.GetSystemDepartmentsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDepartmentsCountRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemDepartmentsCountRequest) Conditions(conditions string) ApiGetSystemDepartmentsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) ChildConditions(childConditions string) ApiGetSystemDepartmentsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDepartmentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) OrderBy(orderBy string) ApiGetSystemDepartmentsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) Fields(fields string) ApiGetSystemDepartmentsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) Page(page int32) ApiGetSystemDepartmentsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) PageSize(pageSize int32) ApiGetSystemDepartmentsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) PageId(pageId int32) ApiGetSystemDepartmentsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemDepartmentsCountRequest) ClientId(clientId string) ApiGetSystemDepartmentsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDepartmentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemDepartmentsCountExecute(r)
}

/*
GetSystemDepartmentsCount Get Count of Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemDepartmentsCountRequest
*/
func (a *DepartmentsAPIService) GetSystemDepartmentsCount(ctx context.Context) ApiGetSystemDepartmentsCountRequest {
	return ApiGetSystemDepartmentsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *DepartmentsAPIService) GetSystemDepartmentsCountExecute(r ApiGetSystemDepartmentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.GetSystemDepartmentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemDepartmentsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemDepartmentsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemDepartmentsByIdRequest) ClientId(clientId string) ApiPatchSystemDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemDepartmentsByIdRequest) Execute() (*Department, *http.Response, error) {
	return r.ApiService.PatchSystemDepartmentsByIdExecute(r)
}

/*
PatchSystemDepartmentsById Patch Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiPatchSystemDepartmentsByIdRequest
*/
func (a *DepartmentsAPIService) PatchSystemDepartmentsById(ctx context.Context, id int32) ApiPatchSystemDepartmentsByIdRequest {
	return ApiPatchSystemDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Department
func (a *DepartmentsAPIService) PatchSystemDepartmentsByIdExecute(r ApiPatchSystemDepartmentsByIdRequest) (*Department, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Department
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.PatchSystemDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemDepartmentsRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	department *Department
	clientId *string
}

// department
func (r ApiPostSystemDepartmentsRequest) Department(department Department) ApiPostSystemDepartmentsRequest {
	r.department = &department
	return r
}

// 
func (r ApiPostSystemDepartmentsRequest) ClientId(clientId string) ApiPostSystemDepartmentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemDepartmentsRequest) Execute() (*Department, *http.Response, error) {
	return r.ApiService.PostSystemDepartmentsExecute(r)
}

/*
PostSystemDepartments Post Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemDepartmentsRequest
*/
func (a *DepartmentsAPIService) PostSystemDepartments(ctx context.Context) ApiPostSystemDepartmentsRequest {
	return ApiPostSystemDepartmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Department
func (a *DepartmentsAPIService) PostSystemDepartmentsExecute(r ApiPostSystemDepartmentsRequest) (*Department, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Department
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.PostSystemDepartments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.department == nil {
		return localVarReturnValue, nil, reportError("department is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.department
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemDepartmentsByIdRequest struct {
	ctx context.Context
	ApiService *DepartmentsAPIService
	id int32
	department *Department
	clientId *string
}

// department
func (r ApiPutSystemDepartmentsByIdRequest) Department(department Department) ApiPutSystemDepartmentsByIdRequest {
	r.department = &department
	return r
}

// 
func (r ApiPutSystemDepartmentsByIdRequest) ClientId(clientId string) ApiPutSystemDepartmentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemDepartmentsByIdRequest) Execute() (*Department, *http.Response, error) {
	return r.ApiService.PutSystemDepartmentsByIdExecute(r)
}

/*
PutSystemDepartmentsById Put Department

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id departmentId
 @return ApiPutSystemDepartmentsByIdRequest
*/
func (a *DepartmentsAPIService) PutSystemDepartmentsById(ctx context.Context, id int32) ApiPutSystemDepartmentsByIdRequest {
	return ApiPutSystemDepartmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Department
func (a *DepartmentsAPIService) PutSystemDepartmentsByIdExecute(r ApiPutSystemDepartmentsByIdRequest) (*Department, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Department
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepartmentsAPIService.PutSystemDepartmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/departments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.department == nil {
		return localVarReturnValue, nil, reportError("department is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.department
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
