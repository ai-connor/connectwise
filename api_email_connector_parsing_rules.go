/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailConnectorParsingRulesAPIService EmailConnectorParsingRulesAPI service
type EmailConnectorParsingRulesAPIService service

type ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) ClientId(clientId string) ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r)
}

/*
DeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById Delete EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingRuleId
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest
*/
func (a *EmailConnectorParsingRulesAPIService) DeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	return ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *EmailConnectorParsingRulesAPIService) DeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r ApiDeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.DeleteSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) Fields(fields string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) Page(page int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) Execute() ([]EmailConnectorParsingRule, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesExecute(r)
}

/*
GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules Get List of EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest
*/
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules(ctx context.Context, parentId int32, grandparentId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []EmailConnectorParsingRule
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesExecute(r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) ([]EmailConnectorParsingRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EmailConnectorParsingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Fields(fields string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Page(page int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Execute() (*EmailConnectorParsingRule, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r)
}

/*
GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById Get EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingRuleId
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest
*/
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingRule
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) (*EmailConnectorParsingRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) Fields(fields string) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) Page(page int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountExecute(r)
}

/*
GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCount Get Count of EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest
*/
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest {
	return ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *EmailConnectorParsingRulesAPIService) GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountExecute(r ApiGetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.GetSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) ClientId(clientId string) ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Execute() (*EmailConnectorParsingRule, *http.Response, error) {
	return r.ApiService.PatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r)
}

/*
PatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById Patch EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingRuleId
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest
*/
func (a *EmailConnectorParsingRulesAPIService) PatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	return ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingRule
func (a *EmailConnectorParsingRulesAPIService) PatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r ApiPatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) (*EmailConnectorParsingRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.PatchSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	parentId int32
	grandparentId int32
	clientId *string
	emailConnectorParsingRule *EmailConnectorParsingRule
}

// 
func (r ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) ClientId(clientId string) ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.clientId = &clientId
	return r
}

// emailConnectorParsingRule
func (r ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) EmailConnectorParsingRule(emailConnectorParsingRule EmailConnectorParsingRule) ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	r.emailConnectorParsingRule = &emailConnectorParsingRule
	return r
}

func (r ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) Execute() (*EmailConnectorParsingRule, *http.Response, error) {
	return r.ApiService.PostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesExecute(r)
}

/*
PostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules Post EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest
*/
func (a *EmailConnectorParsingRulesAPIService) PostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules(ctx context.Context, parentId int32, grandparentId int32) ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest {
	return ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingRule
func (a *EmailConnectorParsingRulesAPIService) PostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesExecute(r ApiPostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesRequest) (*EmailConnectorParsingRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.PostSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailConnectorParsingRule == nil {
		return localVarReturnValue, nil, reportError("emailConnectorParsingRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailConnectorParsingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingRulesAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
	emailConnectorParsingRule *EmailConnectorParsingRule
}

// 
func (r ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) ClientId(clientId string) ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.clientId = &clientId
	return r
}

// emailConnectorParsingRule
func (r ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) EmailConnectorParsingRule(emailConnectorParsingRule EmailConnectorParsingRule) ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	r.emailConnectorParsingRule = &emailConnectorParsingRule
	return r
}

func (r ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) Execute() (*EmailConnectorParsingRule, *http.Response, error) {
	return r.ApiService.PutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r)
}

/*
PutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById Put EmailConnectorParsingRule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingRuleId
 @param parentId parsingStyleId
 @param grandparentId emailConnectorId
 @return ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest
*/
func (a *EmailConnectorParsingRulesAPIService) PutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest {
	return ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingRule
func (a *EmailConnectorParsingRulesAPIService) PutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdExecute(r ApiPutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesByIdRequest) (*EmailConnectorParsingRule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingRule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingRulesAPIService.PutSystemEmailConnectorsByGrandparentIdParsingStylesByParentIdParsingRulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{grandparentId}/parsingStyles/{parentId}/parsingRules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailConnectorParsingRule == nil {
		return localVarReturnValue, nil, reportError("emailConnectorParsingRule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailConnectorParsingRule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
