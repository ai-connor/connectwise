/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailConnectorParsingStylesAPIService EmailConnectorParsingStylesAPI service
type EmailConnectorParsingStylesAPIService service

type ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest) ClientId(clientId string) ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r)
}

/*
DeleteSystemEmailConnectorsByParentIdParsingStylesById Delete EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingStyleId
 @param parentId emailConnectorId
 @return ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest
*/
func (a *EmailConnectorParsingStylesAPIService) DeleteSystemEmailConnectorsByParentIdParsingStylesById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	return ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *EmailConnectorParsingStylesAPIService) DeleteSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r ApiDeleteSystemEmailConnectorsByParentIdParsingStylesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.DeleteSystemEmailConnectorsByParentIdParsingStylesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) Fields(fields string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) Page(page int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) Execute() ([]EmailConnectorParsingStyle, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByParentIdParsingStylesExecute(r)
}

/*
GetSystemEmailConnectorsByParentIdParsingStyles Get List of EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest
*/
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStyles(ctx context.Context, parentId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest {
	return ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []EmailConnectorParsingStyle
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStylesExecute(r ApiGetSystemEmailConnectorsByParentIdParsingStylesRequest) ([]EmailConnectorParsingStyle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EmailConnectorParsingStyle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.GetSystemEmailConnectorsByParentIdParsingStyles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Fields(fields string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Page(page int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Execute() (*EmailConnectorParsingStyle, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r)
}

/*
GetSystemEmailConnectorsByParentIdParsingStylesById Get EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingStyleId
 @param parentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest
*/
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStylesById(ctx context.Context, id int32, parentId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	return ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingStyle
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r ApiGetSystemEmailConnectorsByParentIdParsingStylesByIdRequest) (*EmailConnectorParsingStyle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingStyle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.GetSystemEmailConnectorsByParentIdParsingStylesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) Fields(fields string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) Page(page int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByParentIdParsingStylesCountExecute(r)
}

/*
GetSystemEmailConnectorsByParentIdParsingStylesCount Get Count of EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId emailConnectorId
 @return ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest
*/
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStylesCount(ctx context.Context, parentId int32) ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest {
	return ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *EmailConnectorParsingStylesAPIService) GetSystemEmailConnectorsByParentIdParsingStylesCountExecute(r ApiGetSystemEmailConnectorsByParentIdParsingStylesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.GetSystemEmailConnectorsByParentIdParsingStylesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest) ClientId(clientId string) ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Execute() (*EmailConnectorParsingStyle, *http.Response, error) {
	return r.ApiService.PatchSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r)
}

/*
PatchSystemEmailConnectorsByParentIdParsingStylesById Patch EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingStyleId
 @param parentId emailConnectorId
 @return ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest
*/
func (a *EmailConnectorParsingStylesAPIService) PatchSystemEmailConnectorsByParentIdParsingStylesById(ctx context.Context, id int32, parentId int32) ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	return ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingStyle
func (a *EmailConnectorParsingStylesAPIService) PatchSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r ApiPatchSystemEmailConnectorsByParentIdParsingStylesByIdRequest) (*EmailConnectorParsingStyle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingStyle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.PatchSystemEmailConnectorsByParentIdParsingStylesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	parentId int32
	emailConnectorParsingStyle *EmailConnectorParsingStyle
	clientId *string
}

// emailConnectorParsingStyle
func (r ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest) EmailConnectorParsingStyle(emailConnectorParsingStyle EmailConnectorParsingStyle) ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.emailConnectorParsingStyle = &emailConnectorParsingStyle
	return r
}

// 
func (r ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest) ClientId(clientId string) ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest) Execute() (*EmailConnectorParsingStyle, *http.Response, error) {
	return r.ApiService.PostSystemEmailConnectorsByParentIdParsingStylesExecute(r)
}

/*
PostSystemEmailConnectorsByParentIdParsingStyles Post EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId emailConnectorId
 @return ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest
*/
func (a *EmailConnectorParsingStylesAPIService) PostSystemEmailConnectorsByParentIdParsingStyles(ctx context.Context, parentId int32) ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest {
	return ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingStyle
func (a *EmailConnectorParsingStylesAPIService) PostSystemEmailConnectorsByParentIdParsingStylesExecute(r ApiPostSystemEmailConnectorsByParentIdParsingStylesRequest) (*EmailConnectorParsingStyle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingStyle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.PostSystemEmailConnectorsByParentIdParsingStyles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailConnectorParsingStyle == nil {
		return localVarReturnValue, nil, reportError("emailConnectorParsingStyle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.emailConnectorParsingStyle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorParsingStylesAPIService
	id int32
	parentId int32
	emailConnectorParsingStyle *EmailConnectorParsingStyle
	clientId *string
}

// emailConnectorParsingStyle
func (r ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest) EmailConnectorParsingStyle(emailConnectorParsingStyle EmailConnectorParsingStyle) ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.emailConnectorParsingStyle = &emailConnectorParsingStyle
	return r
}

// 
func (r ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest) ClientId(clientId string) ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest) Execute() (*EmailConnectorParsingStyle, *http.Response, error) {
	return r.ApiService.PutSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r)
}

/*
PutSystemEmailConnectorsByParentIdParsingStylesById Put EmailConnectorParsingStyle

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id parsingStyleId
 @param parentId emailConnectorId
 @return ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest
*/
func (a *EmailConnectorParsingStylesAPIService) PutSystemEmailConnectorsByParentIdParsingStylesById(ctx context.Context, id int32, parentId int32) ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest {
	return ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return EmailConnectorParsingStyle
func (a *EmailConnectorParsingStylesAPIService) PutSystemEmailConnectorsByParentIdParsingStylesByIdExecute(r ApiPutSystemEmailConnectorsByParentIdParsingStylesByIdRequest) (*EmailConnectorParsingStyle, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnectorParsingStyle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorParsingStylesAPIService.PutSystemEmailConnectorsByParentIdParsingStylesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{parentId}/parsingStyles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.emailConnectorParsingStyle == nil {
		return localVarReturnValue, nil, reportError("emailConnectorParsingStyle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.emailConnectorParsingStyle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
