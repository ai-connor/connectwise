/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EmailConnectorsAPIService EmailConnectorsAPI service
type EmailConnectorsAPIService service

type ApiDeleteSystemEmailConnectorsByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemEmailConnectorsByIdRequest) ClientId(clientId string) ApiDeleteSystemEmailConnectorsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemEmailConnectorsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemEmailConnectorsByIdExecute(r)
}

/*
DeleteSystemEmailConnectorsById Delete EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailConnectorId
 @return ApiDeleteSystemEmailConnectorsByIdRequest
*/
func (a *EmailConnectorsAPIService) DeleteSystemEmailConnectorsById(ctx context.Context, id int32) ApiDeleteSystemEmailConnectorsByIdRequest {
	return ApiDeleteSystemEmailConnectorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *EmailConnectorsAPIService) DeleteSystemEmailConnectorsByIdExecute(r ApiDeleteSystemEmailConnectorsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.DeleteSystemEmailConnectorsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) Fields(fields string) ApiGetSystemEmailConnectorsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) Page(page int32) ApiGetSystemEmailConnectorsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsRequest) Execute() ([]EmailConnector, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsExecute(r)
}

/*
GetSystemEmailConnectors Get List of EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemEmailConnectorsRequest
*/
func (a *EmailConnectorsAPIService) GetSystemEmailConnectors(ctx context.Context) ApiGetSystemEmailConnectorsRequest {
	return ApiGetSystemEmailConnectorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EmailConnector
func (a *EmailConnectorsAPIService) GetSystemEmailConnectorsExecute(r ApiGetSystemEmailConnectorsRequest) ([]EmailConnector, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EmailConnector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.GetSystemEmailConnectors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) Fields(fields string) ApiGetSystemEmailConnectorsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) Page(page int32) ApiGetSystemEmailConnectorsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsByIdRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsByIdRequest) Execute() (*EmailConnector, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsByIdExecute(r)
}

/*
GetSystemEmailConnectorsById Get EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailConnectorId
 @return ApiGetSystemEmailConnectorsByIdRequest
*/
func (a *EmailConnectorsAPIService) GetSystemEmailConnectorsById(ctx context.Context, id int32) ApiGetSystemEmailConnectorsByIdRequest {
	return ApiGetSystemEmailConnectorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EmailConnector
func (a *EmailConnectorsAPIService) GetSystemEmailConnectorsByIdExecute(r ApiGetSystemEmailConnectorsByIdRequest) (*EmailConnector, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.GetSystemEmailConnectorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailConnectorsCountRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) ClientId(clientId string) ApiGetSystemEmailConnectorsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) Conditions(conditions string) ApiGetSystemEmailConnectorsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) ChildConditions(childConditions string) ApiGetSystemEmailConnectorsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailConnectorsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) OrderBy(orderBy string) ApiGetSystemEmailConnectorsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) Fields(fields string) ApiGetSystemEmailConnectorsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) Page(page int32) ApiGetSystemEmailConnectorsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) PageSize(pageSize int32) ApiGetSystemEmailConnectorsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemEmailConnectorsCountRequest) PageId(pageId int32) ApiGetSystemEmailConnectorsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailConnectorsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemEmailConnectorsCountExecute(r)
}

/*
GetSystemEmailConnectorsCount Get Count of EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemEmailConnectorsCountRequest
*/
func (a *EmailConnectorsAPIService) GetSystemEmailConnectorsCount(ctx context.Context) ApiGetSystemEmailConnectorsCountRequest {
	return ApiGetSystemEmailConnectorsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *EmailConnectorsAPIService) GetSystemEmailConnectorsCountExecute(r ApiGetSystemEmailConnectorsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.GetSystemEmailConnectorsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemEmailConnectorsByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemEmailConnectorsByIdRequest) ClientId(clientId string) ApiPatchSystemEmailConnectorsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemEmailConnectorsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemEmailConnectorsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemEmailConnectorsByIdRequest) Execute() (*EmailConnector, *http.Response, error) {
	return r.ApiService.PatchSystemEmailConnectorsByIdExecute(r)
}

/*
PatchSystemEmailConnectorsById Patch EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailConnectorId
 @return ApiPatchSystemEmailConnectorsByIdRequest
*/
func (a *EmailConnectorsAPIService) PatchSystemEmailConnectorsById(ctx context.Context, id int32) ApiPatchSystemEmailConnectorsByIdRequest {
	return ApiPatchSystemEmailConnectorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EmailConnector
func (a *EmailConnectorsAPIService) PatchSystemEmailConnectorsByIdExecute(r ApiPatchSystemEmailConnectorsByIdRequest) (*EmailConnector, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.PatchSystemEmailConnectorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemEmailConnectorsRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	clientId *string
	emailConnector *EmailConnector
}

// 
func (r ApiPostSystemEmailConnectorsRequest) ClientId(clientId string) ApiPostSystemEmailConnectorsRequest {
	r.clientId = &clientId
	return r
}

// emailConnector
func (r ApiPostSystemEmailConnectorsRequest) EmailConnector(emailConnector EmailConnector) ApiPostSystemEmailConnectorsRequest {
	r.emailConnector = &emailConnector
	return r
}

func (r ApiPostSystemEmailConnectorsRequest) Execute() (*EmailConnector, *http.Response, error) {
	return r.ApiService.PostSystemEmailConnectorsExecute(r)
}

/*
PostSystemEmailConnectors Post EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemEmailConnectorsRequest
*/
func (a *EmailConnectorsAPIService) PostSystemEmailConnectors(ctx context.Context) ApiPostSystemEmailConnectorsRequest {
	return ApiPostSystemEmailConnectorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EmailConnector
func (a *EmailConnectorsAPIService) PostSystemEmailConnectorsExecute(r ApiPostSystemEmailConnectorsRequest) (*EmailConnector, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.PostSystemEmailConnectors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailConnector == nil {
		return localVarReturnValue, nil, reportError("emailConnector is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailConnector
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemEmailConnectorsByIdRequest struct {
	ctx context.Context
	ApiService *EmailConnectorsAPIService
	id int32
	clientId *string
	emailConnector *EmailConnector
}

// 
func (r ApiPutSystemEmailConnectorsByIdRequest) ClientId(clientId string) ApiPutSystemEmailConnectorsByIdRequest {
	r.clientId = &clientId
	return r
}

// emailConnector
func (r ApiPutSystemEmailConnectorsByIdRequest) EmailConnector(emailConnector EmailConnector) ApiPutSystemEmailConnectorsByIdRequest {
	r.emailConnector = &emailConnector
	return r
}

func (r ApiPutSystemEmailConnectorsByIdRequest) Execute() (*EmailConnector, *http.Response, error) {
	return r.ApiService.PutSystemEmailConnectorsByIdExecute(r)
}

/*
PutSystemEmailConnectorsById Put EmailConnector

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailConnectorId
 @return ApiPutSystemEmailConnectorsByIdRequest
*/
func (a *EmailConnectorsAPIService) PutSystemEmailConnectorsById(ctx context.Context, id int32) ApiPutSystemEmailConnectorsByIdRequest {
	return ApiPutSystemEmailConnectorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EmailConnector
func (a *EmailConnectorsAPIService) PutSystemEmailConnectorsByIdExecute(r ApiPutSystemEmailConnectorsByIdRequest) (*EmailConnector, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EmailConnector
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailConnectorsAPIService.PutSystemEmailConnectorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailConnectors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailConnector == nil {
		return localVarReturnValue, nil, reportError("emailConnector is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailConnector
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
