/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// EntityTypeInfosAPIService EntityTypeInfosAPI service
type EntityTypeInfosAPIService service

type ApiGetCompanyEntityTypesInfoCountRequest struct {
	ctx context.Context
	ApiService *EntityTypeInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) Conditions(conditions string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) OrderBy(orderBy string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) Fields(fields string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) Page(page int32) ApiGetCompanyEntityTypesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) PageSize(pageSize int32) ApiGetCompanyEntityTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) PageId(pageId int32) ApiGetCompanyEntityTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyEntityTypesInfoCountRequest) ClientId(clientId string) ApiGetCompanyEntityTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyEntityTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyEntityTypesInfoCountExecute(r)
}

/*
GetCompanyEntityTypesInfoCount Get Count of EntityTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyEntityTypesInfoCountRequest
*/
func (a *EntityTypeInfosAPIService) GetCompanyEntityTypesInfoCount(ctx context.Context) ApiGetCompanyEntityTypesInfoCountRequest {
	return ApiGetCompanyEntityTypesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *EntityTypeInfosAPIService) GetCompanyEntityTypesInfoCountExecute(r ApiGetCompanyEntityTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityTypeInfosAPIService.GetCompanyEntityTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/entityTypes/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyEntitytypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *EntityTypeInfosAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) Conditions(conditions string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) OrderBy(orderBy string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) Fields(fields string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) Page(page int32) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) PageSize(pageSize int32) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) PageId(pageId int32) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyEntitytypesByIdInfoRequest) ClientId(clientId string) ApiGetCompanyEntitytypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyEntitytypesByIdInfoRequest) Execute() (*EntityTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyEntitytypesByIdInfoExecute(r)
}

/*
GetCompanyEntitytypesByIdInfo Get EntityTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id EntityTypeInfoId
 @return ApiGetCompanyEntitytypesByIdInfoRequest
*/
func (a *EntityTypeInfosAPIService) GetCompanyEntitytypesByIdInfo(ctx context.Context, id int32) ApiGetCompanyEntitytypesByIdInfoRequest {
	return ApiGetCompanyEntitytypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return EntityTypeInfo
func (a *EntityTypeInfosAPIService) GetCompanyEntitytypesByIdInfoExecute(r ApiGetCompanyEntitytypesByIdInfoRequest) (*EntityTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EntityTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityTypeInfosAPIService.GetCompanyEntitytypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/entitytypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyEntitytypesInfoRequest struct {
	ctx context.Context
	ApiService *EntityTypeInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) Conditions(conditions string) ApiGetCompanyEntitytypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) ChildConditions(childConditions string) ApiGetCompanyEntitytypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyEntitytypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) OrderBy(orderBy string) ApiGetCompanyEntitytypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) Fields(fields string) ApiGetCompanyEntitytypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) Page(page int32) ApiGetCompanyEntitytypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) PageSize(pageSize int32) ApiGetCompanyEntitytypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) PageId(pageId int32) ApiGetCompanyEntitytypesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyEntitytypesInfoRequest) ClientId(clientId string) ApiGetCompanyEntitytypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyEntitytypesInfoRequest) Execute() ([]EntityTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyEntitytypesInfoExecute(r)
}

/*
GetCompanyEntitytypesInfo Get List of EntityTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyEntitytypesInfoRequest
*/
func (a *EntityTypeInfosAPIService) GetCompanyEntitytypesInfo(ctx context.Context) ApiGetCompanyEntitytypesInfoRequest {
	return ApiGetCompanyEntitytypesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []EntityTypeInfo
func (a *EntityTypeInfosAPIService) GetCompanyEntitytypesInfoExecute(r ApiGetCompanyEntitytypesInfoRequest) ([]EntityTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []EntityTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntityTypeInfosAPIService.GetCompanyEntitytypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/entitytypes/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
