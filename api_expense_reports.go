/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ExpenseReportsAPIService ExpenseReportsAPI service
type ExpenseReportsAPIService service

type ApiGetExpenseReportsRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpenseReportsRequest) Conditions(conditions string) ApiGetExpenseReportsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpenseReportsRequest) ChildConditions(childConditions string) ApiGetExpenseReportsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpenseReportsRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseReportsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpenseReportsRequest) OrderBy(orderBy string) ApiGetExpenseReportsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpenseReportsRequest) Fields(fields string) ApiGetExpenseReportsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpenseReportsRequest) Page(page int32) ApiGetExpenseReportsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpenseReportsRequest) PageSize(pageSize int32) ApiGetExpenseReportsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpenseReportsRequest) PageId(pageId int32) ApiGetExpenseReportsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpenseReportsRequest) ClientId(clientId string) ApiGetExpenseReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseReportsRequest) Execute() ([]ExpenseReport, *http.Response, error) {
	return r.ApiService.GetExpenseReportsExecute(r)
}

/*
GetExpenseReports Get List of ExpenseReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExpenseReportsRequest
*/
func (a *ExpenseReportsAPIService) GetExpenseReports(ctx context.Context) ApiGetExpenseReportsRequest {
	return ApiGetExpenseReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ExpenseReport
func (a *ExpenseReportsAPIService) GetExpenseReportsExecute(r ApiGetExpenseReportsRequest) ([]ExpenseReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExpenseReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.GetExpenseReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpenseReportsByIdRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpenseReportsByIdRequest) Conditions(conditions string) ApiGetExpenseReportsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) ChildConditions(childConditions string) ApiGetExpenseReportsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseReportsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) OrderBy(orderBy string) ApiGetExpenseReportsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) Fields(fields string) ApiGetExpenseReportsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) Page(page int32) ApiGetExpenseReportsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) PageSize(pageSize int32) ApiGetExpenseReportsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) PageId(pageId int32) ApiGetExpenseReportsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpenseReportsByIdRequest) ClientId(clientId string) ApiGetExpenseReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseReportsByIdRequest) Execute() (*ExpenseReport, *http.Response, error) {
	return r.ApiService.GetExpenseReportsByIdExecute(r)
}

/*
GetExpenseReportsById Get ExpenseReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportId
 @return ApiGetExpenseReportsByIdRequest
*/
func (a *ExpenseReportsAPIService) GetExpenseReportsById(ctx context.Context, id int32) ApiGetExpenseReportsByIdRequest {
	return ApiGetExpenseReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExpenseReport
func (a *ExpenseReportsAPIService) GetExpenseReportsByIdExecute(r ApiGetExpenseReportsByIdRequest) (*ExpenseReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExpenseReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.GetExpenseReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpenseReportsCountRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpenseReportsCountRequest) Conditions(conditions string) ApiGetExpenseReportsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) ChildConditions(childConditions string) ApiGetExpenseReportsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseReportsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) OrderBy(orderBy string) ApiGetExpenseReportsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) Fields(fields string) ApiGetExpenseReportsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) Page(page int32) ApiGetExpenseReportsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) PageSize(pageSize int32) ApiGetExpenseReportsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) PageId(pageId int32) ApiGetExpenseReportsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpenseReportsCountRequest) ClientId(clientId string) ApiGetExpenseReportsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseReportsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetExpenseReportsCountExecute(r)
}

/*
GetExpenseReportsCount Get Count of ExpenseReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExpenseReportsCountRequest
*/
func (a *ExpenseReportsAPIService) GetExpenseReportsCount(ctx context.Context) ApiGetExpenseReportsCountRequest {
	return ApiGetExpenseReportsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ExpenseReportsAPIService) GetExpenseReportsCountExecute(r ApiGetExpenseReportsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.GetExpenseReportsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpenseReportsByIdApproveRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	id int32
	expenseReportTierUpdate *ExpenseReportTierUpdate
	clientId *string
}

// reportId
func (r ApiPostExpenseReportsByIdApproveRequest) ExpenseReportTierUpdate(expenseReportTierUpdate ExpenseReportTierUpdate) ApiPostExpenseReportsByIdApproveRequest {
	r.expenseReportTierUpdate = &expenseReportTierUpdate
	return r
}

// 
func (r ApiPostExpenseReportsByIdApproveRequest) ClientId(clientId string) ApiPostExpenseReportsByIdApproveRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostExpenseReportsByIdApproveRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostExpenseReportsByIdApproveExecute(r)
}

/*
PostExpenseReportsByIdApprove Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportId
 @return ApiPostExpenseReportsByIdApproveRequest
*/
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdApprove(ctx context.Context, id int32) ApiPostExpenseReportsByIdApproveRequest {
	return ApiPostExpenseReportsByIdApproveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdApproveExecute(r ApiPostExpenseReportsByIdApproveRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.PostExpenseReportsByIdApprove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/{id}/approve"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expenseReportTierUpdate == nil {
		return localVarReturnValue, nil, reportError("expenseReportTierUpdate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.expenseReportTierUpdate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpenseReportsByIdRejectRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostExpenseReportsByIdRejectRequest) ClientId(clientId string) ApiPostExpenseReportsByIdRejectRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostExpenseReportsByIdRejectRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostExpenseReportsByIdRejectExecute(r)
}

/*
PostExpenseReportsByIdReject Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportId
 @return ApiPostExpenseReportsByIdRejectRequest
*/
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdReject(ctx context.Context, id int32) ApiPostExpenseReportsByIdRejectRequest {
	return ApiPostExpenseReportsByIdRejectRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdRejectExecute(r ApiPostExpenseReportsByIdRejectRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.PostExpenseReportsByIdReject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/{id}/reject"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpenseReportsByIdReverseRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostExpenseReportsByIdReverseRequest) ClientId(clientId string) ApiPostExpenseReportsByIdReverseRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostExpenseReportsByIdReverseRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostExpenseReportsByIdReverseExecute(r)
}

/*
PostExpenseReportsByIdReverse Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportId
 @return ApiPostExpenseReportsByIdReverseRequest
*/
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdReverse(ctx context.Context, id int32) ApiPostExpenseReportsByIdReverseRequest {
	return ApiPostExpenseReportsByIdReverseRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdReverseExecute(r ApiPostExpenseReportsByIdReverseRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.PostExpenseReportsByIdReverse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/{id}/reverse"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpenseReportsByIdSubmitRequest struct {
	ctx context.Context
	ApiService *ExpenseReportsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostExpenseReportsByIdSubmitRequest) ClientId(clientId string) ApiPostExpenseReportsByIdSubmitRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostExpenseReportsByIdSubmitRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostExpenseReportsByIdSubmitExecute(r)
}

/*
PostExpenseReportsByIdSubmit Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportId
 @return ApiPostExpenseReportsByIdSubmitRequest
*/
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdSubmit(ctx context.Context, id int32) ApiPostExpenseReportsByIdSubmitRequest {
	return ApiPostExpenseReportsByIdSubmitRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ExpenseReportsAPIService) PostExpenseReportsByIdSubmitExecute(r ApiPostExpenseReportsByIdSubmitRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseReportsAPIService.PostExpenseReportsByIdSubmit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/reports/{id}/submit"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
