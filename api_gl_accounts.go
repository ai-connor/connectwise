/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GLAccountsAPIService GLAccountsAPI service
type GLAccountsAPIService service

type ApiDeleteFinanceGlAccountsByIdRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceGlAccountsByIdRequest) ClientId(clientId string) ApiDeleteFinanceGlAccountsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceGlAccountsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceGlAccountsByIdExecute(r)
}

/*
DeleteFinanceGlAccountsById Delete GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glAccountId
 @return ApiDeleteFinanceGlAccountsByIdRequest
*/
func (a *GLAccountsAPIService) DeleteFinanceGlAccountsById(ctx context.Context, id int32) ApiDeleteFinanceGlAccountsByIdRequest {
	return ApiDeleteFinanceGlAccountsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GLAccountsAPIService) DeleteFinanceGlAccountsByIdExecute(r ApiDeleteFinanceGlAccountsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.DeleteFinanceGlAccountsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceGlAccountsRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlAccountsRequest) ClientId(clientId string) ApiGetFinanceGlAccountsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) Conditions(conditions string) ApiGetFinanceGlAccountsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) ChildConditions(childConditions string) ApiGetFinanceGlAccountsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlAccountsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) OrderBy(orderBy string) ApiGetFinanceGlAccountsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) Fields(fields string) ApiGetFinanceGlAccountsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) Page(page int32) ApiGetFinanceGlAccountsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) PageSize(pageSize int32) ApiGetFinanceGlAccountsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlAccountsRequest) PageId(pageId int32) ApiGetFinanceGlAccountsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlAccountsRequest) Execute() ([]GLAccount, *http.Response, error) {
	return r.ApiService.GetFinanceGlAccountsExecute(r)
}

/*
GetFinanceGlAccounts Get List of GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceGlAccountsRequest
*/
func (a *GLAccountsAPIService) GetFinanceGlAccounts(ctx context.Context) ApiGetFinanceGlAccountsRequest {
	return ApiGetFinanceGlAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GLAccount
func (a *GLAccountsAPIService) GetFinanceGlAccountsExecute(r ApiGetFinanceGlAccountsRequest) ([]GLAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GLAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.GetFinanceGlAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceGlAccountsByIdRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) ClientId(clientId string) ApiGetFinanceGlAccountsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) Conditions(conditions string) ApiGetFinanceGlAccountsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceGlAccountsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlAccountsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) OrderBy(orderBy string) ApiGetFinanceGlAccountsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) Fields(fields string) ApiGetFinanceGlAccountsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) Page(page int32) ApiGetFinanceGlAccountsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) PageSize(pageSize int32) ApiGetFinanceGlAccountsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlAccountsByIdRequest) PageId(pageId int32) ApiGetFinanceGlAccountsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlAccountsByIdRequest) Execute() (*GLAccount, *http.Response, error) {
	return r.ApiService.GetFinanceGlAccountsByIdExecute(r)
}

/*
GetFinanceGlAccountsById Get GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glAccountId
 @return ApiGetFinanceGlAccountsByIdRequest
*/
func (a *GLAccountsAPIService) GetFinanceGlAccountsById(ctx context.Context, id int32) ApiGetFinanceGlAccountsByIdRequest {
	return ApiGetFinanceGlAccountsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLAccount
func (a *GLAccountsAPIService) GetFinanceGlAccountsByIdExecute(r ApiGetFinanceGlAccountsByIdRequest) (*GLAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.GetFinanceGlAccountsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceGlAccountsCountRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) ClientId(clientId string) ApiGetFinanceGlAccountsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) Conditions(conditions string) ApiGetFinanceGlAccountsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) ChildConditions(childConditions string) ApiGetFinanceGlAccountsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlAccountsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) OrderBy(orderBy string) ApiGetFinanceGlAccountsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) Fields(fields string) ApiGetFinanceGlAccountsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) Page(page int32) ApiGetFinanceGlAccountsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) PageSize(pageSize int32) ApiGetFinanceGlAccountsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlAccountsCountRequest) PageId(pageId int32) ApiGetFinanceGlAccountsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlAccountsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceGlAccountsCountExecute(r)
}

/*
GetFinanceGlAccountsCount Get Count of GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceGlAccountsCountRequest
*/
func (a *GLAccountsAPIService) GetFinanceGlAccountsCount(ctx context.Context) ApiGetFinanceGlAccountsCountRequest {
	return ApiGetFinanceGlAccountsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *GLAccountsAPIService) GetFinanceGlAccountsCountExecute(r ApiGetFinanceGlAccountsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.GetFinanceGlAccountsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceGlAccountsByIdRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceGlAccountsByIdRequest) ClientId(clientId string) ApiPatchFinanceGlAccountsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceGlAccountsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceGlAccountsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceGlAccountsByIdRequest) Execute() (*GLAccount, *http.Response, error) {
	return r.ApiService.PatchFinanceGlAccountsByIdExecute(r)
}

/*
PatchFinanceGlAccountsById Patch GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glAccountId
 @return ApiPatchFinanceGlAccountsByIdRequest
*/
func (a *GLAccountsAPIService) PatchFinanceGlAccountsById(ctx context.Context, id int32) ApiPatchFinanceGlAccountsByIdRequest {
	return ApiPatchFinanceGlAccountsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLAccount
func (a *GLAccountsAPIService) PatchFinanceGlAccountsByIdExecute(r ApiPatchFinanceGlAccountsByIdRequest) (*GLAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.PatchFinanceGlAccountsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceGlAccountsRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	clientId *string
	gLAccount *GLAccount
}

// 
func (r ApiPostFinanceGlAccountsRequest) ClientId(clientId string) ApiPostFinanceGlAccountsRequest {
	r.clientId = &clientId
	return r
}

// glAccount
func (r ApiPostFinanceGlAccountsRequest) GLAccount(gLAccount GLAccount) ApiPostFinanceGlAccountsRequest {
	r.gLAccount = &gLAccount
	return r
}

func (r ApiPostFinanceGlAccountsRequest) Execute() (*GLAccount, *http.Response, error) {
	return r.ApiService.PostFinanceGlAccountsExecute(r)
}

/*
PostFinanceGlAccounts Post GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceGlAccountsRequest
*/
func (a *GLAccountsAPIService) PostFinanceGlAccounts(ctx context.Context) ApiPostFinanceGlAccountsRequest {
	return ApiPostFinanceGlAccountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GLAccount
func (a *GLAccountsAPIService) PostFinanceGlAccountsExecute(r ApiPostFinanceGlAccountsRequest) (*GLAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.PostFinanceGlAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.gLAccount == nil {
		return localVarReturnValue, nil, reportError("gLAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.gLAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceGlAccountsByIdRequest struct {
	ctx context.Context
	ApiService *GLAccountsAPIService
	id int32
	clientId *string
	gLAccount *GLAccount
}

// 
func (r ApiPutFinanceGlAccountsByIdRequest) ClientId(clientId string) ApiPutFinanceGlAccountsByIdRequest {
	r.clientId = &clientId
	return r
}

// glAccount
func (r ApiPutFinanceGlAccountsByIdRequest) GLAccount(gLAccount GLAccount) ApiPutFinanceGlAccountsByIdRequest {
	r.gLAccount = &gLAccount
	return r
}

func (r ApiPutFinanceGlAccountsByIdRequest) Execute() (*GLAccount, *http.Response, error) {
	return r.ApiService.PutFinanceGlAccountsByIdExecute(r)
}

/*
PutFinanceGlAccountsById Put GLAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glAccountId
 @return ApiPutFinanceGlAccountsByIdRequest
*/
func (a *GLAccountsAPIService) PutFinanceGlAccountsById(ctx context.Context, id int32) ApiPutFinanceGlAccountsByIdRequest {
	return ApiPutFinanceGlAccountsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLAccount
func (a *GLAccountsAPIService) PutFinanceGlAccountsByIdExecute(r ApiPutFinanceGlAccountsByIdRequest) (*GLAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLAccountsAPIService.PutFinanceGlAccountsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glAccounts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.gLAccount == nil {
		return localVarReturnValue, nil, reportError("gLAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.gLAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
