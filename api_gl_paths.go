/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GLPathsAPIService GLPathsAPI service
type GLPathsAPIService service

type ApiDeleteFinanceGlpathsByIdRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceGlpathsByIdRequest) ClientId(clientId string) ApiDeleteFinanceGlpathsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceGlpathsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceGlpathsByIdExecute(r)
}

/*
DeleteFinanceGlpathsById Delete GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glpathId
 @return ApiDeleteFinanceGlpathsByIdRequest
*/
func (a *GLPathsAPIService) DeleteFinanceGlpathsById(ctx context.Context, id int32) ApiDeleteFinanceGlpathsByIdRequest {
	return ApiDeleteFinanceGlpathsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GLPathsAPIService) DeleteFinanceGlpathsByIdExecute(r ApiDeleteFinanceGlpathsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.DeleteFinanceGlpathsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceGlpathsRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlpathsRequest) ClientId(clientId string) ApiGetFinanceGlpathsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) Conditions(conditions string) ApiGetFinanceGlpathsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) ChildConditions(childConditions string) ApiGetFinanceGlpathsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlpathsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) OrderBy(orderBy string) ApiGetFinanceGlpathsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) Fields(fields string) ApiGetFinanceGlpathsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) Page(page int32) ApiGetFinanceGlpathsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) PageSize(pageSize int32) ApiGetFinanceGlpathsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlpathsRequest) PageId(pageId int32) ApiGetFinanceGlpathsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlpathsRequest) Execute() ([]GLPath, *http.Response, error) {
	return r.ApiService.GetFinanceGlpathsExecute(r)
}

/*
GetFinanceGlpaths Get List of GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceGlpathsRequest
*/
func (a *GLPathsAPIService) GetFinanceGlpaths(ctx context.Context) ApiGetFinanceGlpathsRequest {
	return ApiGetFinanceGlpathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GLPath
func (a *GLPathsAPIService) GetFinanceGlpathsExecute(r ApiGetFinanceGlpathsRequest) ([]GLPath, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GLPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.GetFinanceGlpaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceGlpathsByIdRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) ClientId(clientId string) ApiGetFinanceGlpathsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) Conditions(conditions string) ApiGetFinanceGlpathsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceGlpathsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlpathsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) OrderBy(orderBy string) ApiGetFinanceGlpathsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) Fields(fields string) ApiGetFinanceGlpathsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) Page(page int32) ApiGetFinanceGlpathsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) PageSize(pageSize int32) ApiGetFinanceGlpathsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlpathsByIdRequest) PageId(pageId int32) ApiGetFinanceGlpathsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlpathsByIdRequest) Execute() (*GLPath, *http.Response, error) {
	return r.ApiService.GetFinanceGlpathsByIdExecute(r)
}

/*
GetFinanceGlpathsById Get GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glpathId
 @return ApiGetFinanceGlpathsByIdRequest
*/
func (a *GLPathsAPIService) GetFinanceGlpathsById(ctx context.Context, id int32) ApiGetFinanceGlpathsByIdRequest {
	return ApiGetFinanceGlpathsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLPath
func (a *GLPathsAPIService) GetFinanceGlpathsByIdExecute(r ApiGetFinanceGlpathsByIdRequest) (*GLPath, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.GetFinanceGlpathsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceGlpathsCountRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetFinanceGlpathsCountRequest) ClientId(clientId string) ApiGetFinanceGlpathsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) Conditions(conditions string) ApiGetFinanceGlpathsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) ChildConditions(childConditions string) ApiGetFinanceGlpathsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceGlpathsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) OrderBy(orderBy string) ApiGetFinanceGlpathsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) Fields(fields string) ApiGetFinanceGlpathsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) Page(page int32) ApiGetFinanceGlpathsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) PageSize(pageSize int32) ApiGetFinanceGlpathsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceGlpathsCountRequest) PageId(pageId int32) ApiGetFinanceGlpathsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceGlpathsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceGlpathsCountExecute(r)
}

/*
GetFinanceGlpathsCount Get Count of GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceGlpathsCountRequest
*/
func (a *GLPathsAPIService) GetFinanceGlpathsCount(ctx context.Context) ApiGetFinanceGlpathsCountRequest {
	return ApiGetFinanceGlpathsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *GLPathsAPIService) GetFinanceGlpathsCountExecute(r ApiGetFinanceGlpathsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.GetFinanceGlpathsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceGlpathsByIdRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchFinanceGlpathsByIdRequest) ClientId(clientId string) ApiPatchFinanceGlpathsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceGlpathsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceGlpathsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceGlpathsByIdRequest) Execute() (*GLPath, *http.Response, error) {
	return r.ApiService.PatchFinanceGlpathsByIdExecute(r)
}

/*
PatchFinanceGlpathsById Patch GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glpathId
 @return ApiPatchFinanceGlpathsByIdRequest
*/
func (a *GLPathsAPIService) PatchFinanceGlpathsById(ctx context.Context, id int32) ApiPatchFinanceGlpathsByIdRequest {
	return ApiPatchFinanceGlpathsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLPath
func (a *GLPathsAPIService) PatchFinanceGlpathsByIdExecute(r ApiPatchFinanceGlpathsByIdRequest) (*GLPath, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.PatchFinanceGlpathsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceGlpathsRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	clientId *string
	gLPath *GLPath
}

// 
func (r ApiPostFinanceGlpathsRequest) ClientId(clientId string) ApiPostFinanceGlpathsRequest {
	r.clientId = &clientId
	return r
}

// gLPath
func (r ApiPostFinanceGlpathsRequest) GLPath(gLPath GLPath) ApiPostFinanceGlpathsRequest {
	r.gLPath = &gLPath
	return r
}

func (r ApiPostFinanceGlpathsRequest) Execute() (*GLPath, *http.Response, error) {
	return r.ApiService.PostFinanceGlpathsExecute(r)
}

/*
PostFinanceGlpaths Post GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceGlpathsRequest
*/
func (a *GLPathsAPIService) PostFinanceGlpaths(ctx context.Context) ApiPostFinanceGlpathsRequest {
	return ApiPostFinanceGlpathsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GLPath
func (a *GLPathsAPIService) PostFinanceGlpathsExecute(r ApiPostFinanceGlpathsRequest) (*GLPath, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.PostFinanceGlpaths")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.gLPath == nil {
		return localVarReturnValue, nil, reportError("gLPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.gLPath
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceGlpathsByIdRequest struct {
	ctx context.Context
	ApiService *GLPathsAPIService
	id int32
	clientId *string
	gLPath *GLPath
}

// 
func (r ApiPutFinanceGlpathsByIdRequest) ClientId(clientId string) ApiPutFinanceGlpathsByIdRequest {
	r.clientId = &clientId
	return r
}

// gLPath
func (r ApiPutFinanceGlpathsByIdRequest) GLPath(gLPath GLPath) ApiPutFinanceGlpathsByIdRequest {
	r.gLPath = &gLPath
	return r
}

func (r ApiPutFinanceGlpathsByIdRequest) Execute() (*GLPath, *http.Response, error) {
	return r.ApiService.PutFinanceGlpathsByIdExecute(r)
}

/*
PutFinanceGlpathsById Put GLPath

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id glpathId
 @return ApiPutFinanceGlpathsByIdRequest
*/
func (a *GLPathsAPIService) PutFinanceGlpathsById(ctx context.Context, id int32) ApiPutFinanceGlpathsByIdRequest {
	return ApiPutFinanceGlpathsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GLPath
func (a *GLPathsAPIService) PutFinanceGlpathsByIdExecute(r ApiPutFinanceGlpathsByIdRequest) (*GLPath, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GLPath
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GLPathsAPIService.PutFinanceGlpathsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/glpaths/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.gLPath == nil {
		return localVarReturnValue, nil, reportError("gLPath is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.gLPath
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
