/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GoogleEmailSetupsAPIService GoogleEmailSetupsAPI service
type GoogleEmailSetupsAPIService service

type ApiDeleteSystemGoogleemailsetupByIdRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemGoogleemailsetupByIdRequest) ClientId(clientId string) ApiDeleteSystemGoogleemailsetupByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemGoogleemailsetupByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemGoogleemailsetupByIdExecute(r)
}

/*
DeleteSystemGoogleemailsetupById Delete GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id GoogleEmailSetupId
 @return ApiDeleteSystemGoogleemailsetupByIdRequest
*/
func (a *GoogleEmailSetupsAPIService) DeleteSystemGoogleemailsetupById(ctx context.Context, id int32) ApiDeleteSystemGoogleemailsetupByIdRequest {
	return ApiDeleteSystemGoogleemailsetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *GoogleEmailSetupsAPIService) DeleteSystemGoogleemailsetupByIdExecute(r ApiDeleteSystemGoogleemailsetupByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.DeleteSystemGoogleemailsetupById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemGoogleemailsetupRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) Conditions(conditions string) ApiGetSystemGoogleemailsetupRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) ChildConditions(childConditions string) ApiGetSystemGoogleemailsetupRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemGoogleemailsetupRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) OrderBy(orderBy string) ApiGetSystemGoogleemailsetupRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) Fields(fields string) ApiGetSystemGoogleemailsetupRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) Page(page int32) ApiGetSystemGoogleemailsetupRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) PageSize(pageSize int32) ApiGetSystemGoogleemailsetupRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) PageId(pageId int32) ApiGetSystemGoogleemailsetupRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupRequest) ClientId(clientId string) ApiGetSystemGoogleemailsetupRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemGoogleemailsetupRequest) Execute() ([]GoogleEmailSetup, *http.Response, error) {
	return r.ApiService.GetSystemGoogleemailsetupExecute(r)
}

/*
GetSystemGoogleemailsetup Get List of GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemGoogleemailsetupRequest
*/
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetup(ctx context.Context) ApiGetSystemGoogleemailsetupRequest {
	return ApiGetSystemGoogleemailsetupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []GoogleEmailSetup
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetupExecute(r ApiGetSystemGoogleemailsetupRequest) ([]GoogleEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GoogleEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.GetSystemGoogleemailsetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemGoogleemailsetupByIdRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) Conditions(conditions string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) ChildConditions(childConditions string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) OrderBy(orderBy string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) Fields(fields string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) Page(page int32) ApiGetSystemGoogleemailsetupByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) PageSize(pageSize int32) ApiGetSystemGoogleemailsetupByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) PageId(pageId int32) ApiGetSystemGoogleemailsetupByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupByIdRequest) ClientId(clientId string) ApiGetSystemGoogleemailsetupByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemGoogleemailsetupByIdRequest) Execute() (*GoogleEmailSetup, *http.Response, error) {
	return r.ApiService.GetSystemGoogleemailsetupByIdExecute(r)
}

/*
GetSystemGoogleemailsetupById Get GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id GoogleEmailSetupId
 @return ApiGetSystemGoogleemailsetupByIdRequest
*/
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetupById(ctx context.Context, id int32) ApiGetSystemGoogleemailsetupByIdRequest {
	return ApiGetSystemGoogleemailsetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GoogleEmailSetup
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetupByIdExecute(r ApiGetSystemGoogleemailsetupByIdRequest) (*GoogleEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoogleEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.GetSystemGoogleemailsetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemGoogleemailsetupCountRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) Conditions(conditions string) ApiGetSystemGoogleemailsetupCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) ChildConditions(childConditions string) ApiGetSystemGoogleemailsetupCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemGoogleemailsetupCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) OrderBy(orderBy string) ApiGetSystemGoogleemailsetupCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) Fields(fields string) ApiGetSystemGoogleemailsetupCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) Page(page int32) ApiGetSystemGoogleemailsetupCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) PageSize(pageSize int32) ApiGetSystemGoogleemailsetupCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) PageId(pageId int32) ApiGetSystemGoogleemailsetupCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemGoogleemailsetupCountRequest) ClientId(clientId string) ApiGetSystemGoogleemailsetupCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemGoogleemailsetupCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemGoogleemailsetupCountExecute(r)
}

/*
GetSystemGoogleemailsetupCount Get Count of GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemGoogleemailsetupCountRequest
*/
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetupCount(ctx context.Context) ApiGetSystemGoogleemailsetupCountRequest {
	return ApiGetSystemGoogleemailsetupCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *GoogleEmailSetupsAPIService) GetSystemGoogleemailsetupCountExecute(r ApiGetSystemGoogleemailsetupCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.GetSystemGoogleemailsetupCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemGoogleemailsetupByIdRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemGoogleemailsetupByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemGoogleemailsetupByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemGoogleemailsetupByIdRequest) ClientId(clientId string) ApiPatchSystemGoogleemailsetupByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemGoogleemailsetupByIdRequest) Execute() (*GoogleEmailSetup, *http.Response, error) {
	return r.ApiService.PatchSystemGoogleemailsetupByIdExecute(r)
}

/*
PatchSystemGoogleemailsetupById Patch GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id GoogleEmailSetupId
 @return ApiPatchSystemGoogleemailsetupByIdRequest
*/
func (a *GoogleEmailSetupsAPIService) PatchSystemGoogleemailsetupById(ctx context.Context, id int32) ApiPatchSystemGoogleemailsetupByIdRequest {
	return ApiPatchSystemGoogleemailsetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GoogleEmailSetup
func (a *GoogleEmailSetupsAPIService) PatchSystemGoogleemailsetupByIdExecute(r ApiPatchSystemGoogleemailsetupByIdRequest) (*GoogleEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoogleEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.PatchSystemGoogleemailsetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemGoogleemailsetupRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	googleEmailSetup *GoogleEmailSetup
	clientId *string
}

// GoogleEmailSetup
func (r ApiPostSystemGoogleemailsetupRequest) GoogleEmailSetup(googleEmailSetup GoogleEmailSetup) ApiPostSystemGoogleemailsetupRequest {
	r.googleEmailSetup = &googleEmailSetup
	return r
}

// 
func (r ApiPostSystemGoogleemailsetupRequest) ClientId(clientId string) ApiPostSystemGoogleemailsetupRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemGoogleemailsetupRequest) Execute() (*GoogleEmailSetup, *http.Response, error) {
	return r.ApiService.PostSystemGoogleemailsetupExecute(r)
}

/*
PostSystemGoogleemailsetup Post GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemGoogleemailsetupRequest
*/
func (a *GoogleEmailSetupsAPIService) PostSystemGoogleemailsetup(ctx context.Context) ApiPostSystemGoogleemailsetupRequest {
	return ApiPostSystemGoogleemailsetupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GoogleEmailSetup
func (a *GoogleEmailSetupsAPIService) PostSystemGoogleemailsetupExecute(r ApiPostSystemGoogleemailsetupRequest) (*GoogleEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoogleEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.PostSystemGoogleemailsetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.googleEmailSetup == nil {
		return localVarReturnValue, nil, reportError("googleEmailSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.googleEmailSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemGoogleemailsetupByIdTestConnectionRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostSystemGoogleemailsetupByIdTestConnectionRequest) ClientId(clientId string) ApiPostSystemGoogleemailsetupByIdTestConnectionRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemGoogleemailsetupByIdTestConnectionRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemGoogleemailsetupByIdTestConnectionExecute(r)
}

/*
PostSystemGoogleemailsetupByIdTestConnection Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiPostSystemGoogleemailsetupByIdTestConnectionRequest
*/
func (a *GoogleEmailSetupsAPIService) PostSystemGoogleemailsetupByIdTestConnection(ctx context.Context, id int32) ApiPostSystemGoogleemailsetupByIdTestConnectionRequest {
	return ApiPostSystemGoogleemailsetupByIdTestConnectionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *GoogleEmailSetupsAPIService) PostSystemGoogleemailsetupByIdTestConnectionExecute(r ApiPostSystemGoogleemailsetupByIdTestConnectionRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.PostSystemGoogleemailsetupByIdTestConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/{id}/testConnection"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemGoogleemailsetupByIdRequest struct {
	ctx context.Context
	ApiService *GoogleEmailSetupsAPIService
	id int32
	googleEmailSetup *GoogleEmailSetup
	clientId *string
}

// companyTypeAssociation
func (r ApiPutSystemGoogleemailsetupByIdRequest) GoogleEmailSetup(googleEmailSetup GoogleEmailSetup) ApiPutSystemGoogleemailsetupByIdRequest {
	r.googleEmailSetup = &googleEmailSetup
	return r
}

// 
func (r ApiPutSystemGoogleemailsetupByIdRequest) ClientId(clientId string) ApiPutSystemGoogleemailsetupByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemGoogleemailsetupByIdRequest) Execute() (*GoogleEmailSetup, *http.Response, error) {
	return r.ApiService.PutSystemGoogleemailsetupByIdExecute(r)
}

/*
PutSystemGoogleemailsetupById Put GoogleEmailSetups

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id GoogleEmailSetupId
 @return ApiPutSystemGoogleemailsetupByIdRequest
*/
func (a *GoogleEmailSetupsAPIService) PutSystemGoogleemailsetupById(ctx context.Context, id int32) ApiPutSystemGoogleemailsetupByIdRequest {
	return ApiPutSystemGoogleemailsetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GoogleEmailSetup
func (a *GoogleEmailSetupsAPIService) PutSystemGoogleemailsetupByIdExecute(r ApiPutSystemGoogleemailsetupByIdRequest) (*GoogleEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoogleEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoogleEmailSetupsAPIService.PutSystemGoogleemailsetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/googleemailsetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.googleEmailSetup == nil {
		return localVarReturnValue, nil, reportError("googleEmailSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.googleEmailSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
