/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// HolidayListsAPIService HolidayListsAPI service
type HolidayListsAPIService service

type ApiDeleteScheduleHolidayListsByIdRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteScheduleHolidayListsByIdRequest) ClientId(clientId string) ApiDeleteScheduleHolidayListsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleHolidayListsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleHolidayListsByIdExecute(r)
}

/*
DeleteScheduleHolidayListsById Delete HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiDeleteScheduleHolidayListsByIdRequest
*/
func (a *HolidayListsAPIService) DeleteScheduleHolidayListsById(ctx context.Context, id int32) ApiDeleteScheduleHolidayListsByIdRequest {
	return ApiDeleteScheduleHolidayListsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *HolidayListsAPIService) DeleteScheduleHolidayListsByIdExecute(r ApiDeleteScheduleHolidayListsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.DeleteScheduleHolidayListsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleHolidayListsRequest) Conditions(conditions string) ApiGetScheduleHolidayListsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) Fields(fields string) ApiGetScheduleHolidayListsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) Page(page int32) ApiGetScheduleHolidayListsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) PageId(pageId int32) ApiGetScheduleHolidayListsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleHolidayListsRequest) ClientId(clientId string) ApiGetScheduleHolidayListsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleHolidayListsRequest) Execute() ([]HolidayList, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsExecute(r)
}

/*
GetScheduleHolidayLists Get List of HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleHolidayListsRequest
*/
func (a *HolidayListsAPIService) GetScheduleHolidayLists(ctx context.Context) ApiGetScheduleHolidayListsRequest {
	return ApiGetScheduleHolidayListsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []HolidayList
func (a *HolidayListsAPIService) GetScheduleHolidayListsExecute(r ApiGetScheduleHolidayListsRequest) ([]HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.GetScheduleHolidayLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByIdRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) Fields(fields string) ApiGetScheduleHolidayListsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) Page(page int32) ApiGetScheduleHolidayListsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleHolidayListsByIdRequest) Execute() (*HolidayList, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByIdExecute(r)
}

/*
GetScheduleHolidayListsById Get HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiGetScheduleHolidayListsByIdRequest
*/
func (a *HolidayListsAPIService) GetScheduleHolidayListsById(ctx context.Context, id int32) ApiGetScheduleHolidayListsByIdRequest {
	return ApiGetScheduleHolidayListsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HolidayList
func (a *HolidayListsAPIService) GetScheduleHolidayListsByIdExecute(r ApiGetScheduleHolidayListsByIdRequest) (*HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.GetScheduleHolidayListsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) Fields(fields string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) Page(page int32) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleHolidayListsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByIdUsagesExecute(r)
}

/*
GetScheduleHolidayListsByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiGetScheduleHolidayListsByIdUsagesRequest
*/
func (a *HolidayListsAPIService) GetScheduleHolidayListsByIdUsages(ctx context.Context, id int32) ApiGetScheduleHolidayListsByIdUsagesRequest {
	return ApiGetScheduleHolidayListsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *HolidayListsAPIService) GetScheduleHolidayListsByIdUsagesExecute(r ApiGetScheduleHolidayListsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.GetScheduleHolidayListsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) Fields(fields string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) Page(page int32) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleHolidayListsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByIdUsagesListExecute(r)
}

/*
GetScheduleHolidayListsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiGetScheduleHolidayListsByIdUsagesListRequest
*/
func (a *HolidayListsAPIService) GetScheduleHolidayListsByIdUsagesList(ctx context.Context, id int32) ApiGetScheduleHolidayListsByIdUsagesListRequest {
	return ApiGetScheduleHolidayListsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *HolidayListsAPIService) GetScheduleHolidayListsByIdUsagesListExecute(r ApiGetScheduleHolidayListsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.GetScheduleHolidayListsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsCountRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) Conditions(conditions string) ApiGetScheduleHolidayListsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) Fields(fields string) ApiGetScheduleHolidayListsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) Page(page int32) ApiGetScheduleHolidayListsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) PageId(pageId int32) ApiGetScheduleHolidayListsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleHolidayListsCountRequest) ClientId(clientId string) ApiGetScheduleHolidayListsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleHolidayListsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsCountExecute(r)
}

/*
GetScheduleHolidayListsCount Get Count of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleHolidayListsCountRequest
*/
func (a *HolidayListsAPIService) GetScheduleHolidayListsCount(ctx context.Context) ApiGetScheduleHolidayListsCountRequest {
	return ApiGetScheduleHolidayListsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *HolidayListsAPIService) GetScheduleHolidayListsCountExecute(r ApiGetScheduleHolidayListsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.GetScheduleHolidayListsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleHolidayListsByIdRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchScheduleHolidayListsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleHolidayListsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchScheduleHolidayListsByIdRequest) ClientId(clientId string) ApiPatchScheduleHolidayListsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchScheduleHolidayListsByIdRequest) Execute() (*HolidayList, *http.Response, error) {
	return r.ApiService.PatchScheduleHolidayListsByIdExecute(r)
}

/*
PatchScheduleHolidayListsById Patch HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiPatchScheduleHolidayListsByIdRequest
*/
func (a *HolidayListsAPIService) PatchScheduleHolidayListsById(ctx context.Context, id int32) ApiPatchScheduleHolidayListsByIdRequest {
	return ApiPatchScheduleHolidayListsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HolidayList
func (a *HolidayListsAPIService) PatchScheduleHolidayListsByIdExecute(r ApiPatchScheduleHolidayListsByIdRequest) (*HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.PatchScheduleHolidayListsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleHolidayListsRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	holidayList *HolidayList
	clientId *string
}

// holidayList
func (r ApiPostScheduleHolidayListsRequest) HolidayList(holidayList HolidayList) ApiPostScheduleHolidayListsRequest {
	r.holidayList = &holidayList
	return r
}

// 
func (r ApiPostScheduleHolidayListsRequest) ClientId(clientId string) ApiPostScheduleHolidayListsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleHolidayListsRequest) Execute() (*HolidayList, *http.Response, error) {
	return r.ApiService.PostScheduleHolidayListsExecute(r)
}

/*
PostScheduleHolidayLists Post HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostScheduleHolidayListsRequest
*/
func (a *HolidayListsAPIService) PostScheduleHolidayLists(ctx context.Context) ApiPostScheduleHolidayListsRequest {
	return ApiPostScheduleHolidayListsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HolidayList
func (a *HolidayListsAPIService) PostScheduleHolidayListsExecute(r ApiPostScheduleHolidayListsRequest) (*HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.PostScheduleHolidayLists")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.holidayList == nil {
		return localVarReturnValue, nil, reportError("holidayList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.holidayList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleHolidayListsCopyRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	holidayList *HolidayList
	clientId *string
}

// copy
func (r ApiPostScheduleHolidayListsCopyRequest) HolidayList(holidayList HolidayList) ApiPostScheduleHolidayListsCopyRequest {
	r.holidayList = &holidayList
	return r
}

// 
func (r ApiPostScheduleHolidayListsCopyRequest) ClientId(clientId string) ApiPostScheduleHolidayListsCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleHolidayListsCopyRequest) Execute() (*HolidayList, *http.Response, error) {
	return r.ApiService.PostScheduleHolidayListsCopyExecute(r)
}

/*
PostScheduleHolidayListsCopy Post HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostScheduleHolidayListsCopyRequest
*/
func (a *HolidayListsAPIService) PostScheduleHolidayListsCopy(ctx context.Context) ApiPostScheduleHolidayListsCopyRequest {
	return ApiPostScheduleHolidayListsCopyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return HolidayList
func (a *HolidayListsAPIService) PostScheduleHolidayListsCopyExecute(r ApiPostScheduleHolidayListsCopyRequest) (*HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.PostScheduleHolidayListsCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.holidayList == nil {
		return localVarReturnValue, nil, reportError("holidayList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.holidayList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleHolidayListsByIdRequest struct {
	ctx context.Context
	ApiService *HolidayListsAPIService
	id int32
	holidayList *HolidayList
	clientId *string
}

// holidayList
func (r ApiPutScheduleHolidayListsByIdRequest) HolidayList(holidayList HolidayList) ApiPutScheduleHolidayListsByIdRequest {
	r.holidayList = &holidayList
	return r
}

// 
func (r ApiPutScheduleHolidayListsByIdRequest) ClientId(clientId string) ApiPutScheduleHolidayListsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutScheduleHolidayListsByIdRequest) Execute() (*HolidayList, *http.Response, error) {
	return r.ApiService.PutScheduleHolidayListsByIdExecute(r)
}

/*
PutScheduleHolidayListsById Put HolidayList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayListId
 @return ApiPutScheduleHolidayListsByIdRequest
*/
func (a *HolidayListsAPIService) PutScheduleHolidayListsById(ctx context.Context, id int32) ApiPutScheduleHolidayListsByIdRequest {
	return ApiPutScheduleHolidayListsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HolidayList
func (a *HolidayListsAPIService) PutScheduleHolidayListsByIdExecute(r ApiPutScheduleHolidayListsByIdRequest) (*HolidayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HolidayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidayListsAPIService.PutScheduleHolidayListsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.holidayList == nil {
		return localVarReturnValue, nil, reportError("holidayList is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.holidayList
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
