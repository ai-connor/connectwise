/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// HolidaysAPIService HolidaysAPI service
type HolidaysAPIService service

type ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest) ClientId(clientId string) ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleHolidayListsByParentIdHolidaysByIdExecute(r)
}

/*
DeleteScheduleHolidayListsByParentIdHolidaysById Delete Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayId
 @param parentId holidayListId
 @return ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest
*/
func (a *HolidaysAPIService) DeleteScheduleHolidayListsByParentIdHolidaysById(ctx context.Context, id int32, parentId int32) ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest {
	return ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *HolidaysAPIService) DeleteScheduleHolidayListsByParentIdHolidaysByIdExecute(r ApiDeleteScheduleHolidayListsByParentIdHolidaysByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.DeleteScheduleHolidayListsByParentIdHolidaysById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByParentIdHolidaysRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) Fields(fields string) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) Page(page int32) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) Execute() ([]Holiday, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByParentIdHolidaysExecute(r)
}

/*
GetScheduleHolidayListsByParentIdHolidays Get List of Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId holidayListId
 @return ApiGetScheduleHolidayListsByParentIdHolidaysRequest
*/
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidays(ctx context.Context, parentId int32) ApiGetScheduleHolidayListsByParentIdHolidaysRequest {
	return ApiGetScheduleHolidayListsByParentIdHolidaysRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Holiday
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidaysExecute(r ApiGetScheduleHolidayListsByParentIdHolidaysRequest) ([]Holiday, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Holiday
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.GetScheduleHolidayListsByParentIdHolidays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) Fields(fields string) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) Page(page int32) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) Execute() (*Holiday, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByParentIdHolidaysByIdExecute(r)
}

/*
GetScheduleHolidayListsByParentIdHolidaysById Get Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayId
 @param parentId holidayListId
 @return ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest
*/
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidaysById(ctx context.Context, id int32, parentId int32) ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest {
	return ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Holiday
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidaysByIdExecute(r ApiGetScheduleHolidayListsByParentIdHolidaysByIdRequest) (*Holiday, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Holiday
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.GetScheduleHolidayListsByParentIdHolidaysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) ClientId(clientId string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) Conditions(conditions string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) ChildConditions(childConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) OrderBy(orderBy string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) Fields(fields string) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) Page(page int32) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) PageSize(pageSize int32) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) PageId(pageId int32) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleHolidayListsByParentIdHolidaysCountExecute(r)
}

/*
GetScheduleHolidayListsByParentIdHolidaysCount Get Count of Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId holidayListId
 @return ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest
*/
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidaysCount(ctx context.Context, parentId int32) ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest {
	return ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *HolidaysAPIService) GetScheduleHolidayListsByParentIdHolidaysCountExecute(r ApiGetScheduleHolidayListsByParentIdHolidaysCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.GetScheduleHolidayListsByParentIdHolidaysCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest) ClientId(clientId string) ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest) Execute() (*Holiday, *http.Response, error) {
	return r.ApiService.PatchScheduleHolidayListsByParentIdHolidaysByIdExecute(r)
}

/*
PatchScheduleHolidayListsByParentIdHolidaysById Patch Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayId
 @param parentId holidayListId
 @return ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest
*/
func (a *HolidaysAPIService) PatchScheduleHolidayListsByParentIdHolidaysById(ctx context.Context, id int32, parentId int32) ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest {
	return ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Holiday
func (a *HolidaysAPIService) PatchScheduleHolidayListsByParentIdHolidaysByIdExecute(r ApiPatchScheduleHolidayListsByParentIdHolidaysByIdRequest) (*Holiday, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Holiday
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.PatchScheduleHolidayListsByParentIdHolidaysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleHolidayListsByParentIdHolidaysRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	parentId int32
	clientId *string
	holiday *Holiday
}

// 
func (r ApiPostScheduleHolidayListsByParentIdHolidaysRequest) ClientId(clientId string) ApiPostScheduleHolidayListsByParentIdHolidaysRequest {
	r.clientId = &clientId
	return r
}

// holiday
func (r ApiPostScheduleHolidayListsByParentIdHolidaysRequest) Holiday(holiday Holiday) ApiPostScheduleHolidayListsByParentIdHolidaysRequest {
	r.holiday = &holiday
	return r
}

func (r ApiPostScheduleHolidayListsByParentIdHolidaysRequest) Execute() (*Holiday, *http.Response, error) {
	return r.ApiService.PostScheduleHolidayListsByParentIdHolidaysExecute(r)
}

/*
PostScheduleHolidayListsByParentIdHolidays Post Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId holidayListId
 @return ApiPostScheduleHolidayListsByParentIdHolidaysRequest
*/
func (a *HolidaysAPIService) PostScheduleHolidayListsByParentIdHolidays(ctx context.Context, parentId int32) ApiPostScheduleHolidayListsByParentIdHolidaysRequest {
	return ApiPostScheduleHolidayListsByParentIdHolidaysRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Holiday
func (a *HolidaysAPIService) PostScheduleHolidayListsByParentIdHolidaysExecute(r ApiPostScheduleHolidayListsByParentIdHolidaysRequest) (*Holiday, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Holiday
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.PostScheduleHolidayListsByParentIdHolidays")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.holiday == nil {
		return localVarReturnValue, nil, reportError("holiday is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.holiday
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest struct {
	ctx context.Context
	ApiService *HolidaysAPIService
	id int32
	parentId int32
	clientId *string
	holiday *Holiday
}

// 
func (r ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest) ClientId(clientId string) ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.clientId = &clientId
	return r
}

// holiday
func (r ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest) Holiday(holiday Holiday) ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest {
	r.holiday = &holiday
	return r
}

func (r ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest) Execute() (*Holiday, *http.Response, error) {
	return r.ApiService.PutScheduleHolidayListsByParentIdHolidaysByIdExecute(r)
}

/*
PutScheduleHolidayListsByParentIdHolidaysById Put Holiday

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id holidayId
 @param parentId holidayListId
 @return ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest
*/
func (a *HolidaysAPIService) PutScheduleHolidayListsByParentIdHolidaysById(ctx context.Context, id int32, parentId int32) ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest {
	return ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Holiday
func (a *HolidaysAPIService) PutScheduleHolidayListsByParentIdHolidaysByIdExecute(r ApiPutScheduleHolidayListsByParentIdHolidaysByIdRequest) (*Holiday, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Holiday
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HolidaysAPIService.PutScheduleHolidayListsByParentIdHolidaysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/holidayLists/{parentId}/holidays/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.holiday == nil {
		return localVarReturnValue, nil, reportError("holiday is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.holiday
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
