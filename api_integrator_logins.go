/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// IntegratorLoginsAPIService IntegratorLoginsAPI service
type IntegratorLoginsAPIService service

type ApiDeleteSystemIntegratorloginsByIdRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemIntegratorloginsByIdRequest) ClientId(clientId string) ApiDeleteSystemIntegratorloginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemIntegratorloginsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemIntegratorloginsByIdExecute(r)
}

/*
DeleteSystemIntegratorloginsById Delete IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id integratorloginId
 @return ApiDeleteSystemIntegratorloginsByIdRequest
*/
func (a *IntegratorLoginsAPIService) DeleteSystemIntegratorloginsById(ctx context.Context, id int32) ApiDeleteSystemIntegratorloginsByIdRequest {
	return ApiDeleteSystemIntegratorloginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *IntegratorLoginsAPIService) DeleteSystemIntegratorloginsByIdExecute(r ApiDeleteSystemIntegratorloginsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.DeleteSystemIntegratorloginsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemIntegratorloginsRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemIntegratorloginsRequest) Conditions(conditions string) ApiGetSystemIntegratorloginsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) ChildConditions(childConditions string) ApiGetSystemIntegratorloginsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemIntegratorloginsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) OrderBy(orderBy string) ApiGetSystemIntegratorloginsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) Fields(fields string) ApiGetSystemIntegratorloginsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) Page(page int32) ApiGetSystemIntegratorloginsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) PageSize(pageSize int32) ApiGetSystemIntegratorloginsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) PageId(pageId int32) ApiGetSystemIntegratorloginsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemIntegratorloginsRequest) ClientId(clientId string) ApiGetSystemIntegratorloginsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemIntegratorloginsRequest) Execute() ([]IntegratorLogin, *http.Response, error) {
	return r.ApiService.GetSystemIntegratorloginsExecute(r)
}

/*
GetSystemIntegratorlogins Get List of IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemIntegratorloginsRequest
*/
func (a *IntegratorLoginsAPIService) GetSystemIntegratorlogins(ctx context.Context) ApiGetSystemIntegratorloginsRequest {
	return ApiGetSystemIntegratorloginsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []IntegratorLogin
func (a *IntegratorLoginsAPIService) GetSystemIntegratorloginsExecute(r ApiGetSystemIntegratorloginsRequest) ([]IntegratorLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntegratorLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.GetSystemIntegratorlogins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemIntegratorloginsByIdRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) Conditions(conditions string) ApiGetSystemIntegratorloginsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) ChildConditions(childConditions string) ApiGetSystemIntegratorloginsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemIntegratorloginsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) OrderBy(orderBy string) ApiGetSystemIntegratorloginsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) Fields(fields string) ApiGetSystemIntegratorloginsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) Page(page int32) ApiGetSystemIntegratorloginsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) PageSize(pageSize int32) ApiGetSystemIntegratorloginsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) PageId(pageId int32) ApiGetSystemIntegratorloginsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemIntegratorloginsByIdRequest) ClientId(clientId string) ApiGetSystemIntegratorloginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemIntegratorloginsByIdRequest) Execute() (*IntegratorLogin, *http.Response, error) {
	return r.ApiService.GetSystemIntegratorloginsByIdExecute(r)
}

/*
GetSystemIntegratorloginsById Get IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id integratorloginId
 @return ApiGetSystemIntegratorloginsByIdRequest
*/
func (a *IntegratorLoginsAPIService) GetSystemIntegratorloginsById(ctx context.Context, id int32) ApiGetSystemIntegratorloginsByIdRequest {
	return ApiGetSystemIntegratorloginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntegratorLogin
func (a *IntegratorLoginsAPIService) GetSystemIntegratorloginsByIdExecute(r ApiGetSystemIntegratorloginsByIdRequest) (*IntegratorLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.GetSystemIntegratorloginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemIntegratorloginsCountRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) Conditions(conditions string) ApiGetSystemIntegratorloginsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) ChildConditions(childConditions string) ApiGetSystemIntegratorloginsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemIntegratorloginsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) OrderBy(orderBy string) ApiGetSystemIntegratorloginsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) Fields(fields string) ApiGetSystemIntegratorloginsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) Page(page int32) ApiGetSystemIntegratorloginsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) PageSize(pageSize int32) ApiGetSystemIntegratorloginsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) PageId(pageId int32) ApiGetSystemIntegratorloginsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemIntegratorloginsCountRequest) ClientId(clientId string) ApiGetSystemIntegratorloginsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemIntegratorloginsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemIntegratorloginsCountExecute(r)
}

/*
GetSystemIntegratorloginsCount Get Count of IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemIntegratorloginsCountRequest
*/
func (a *IntegratorLoginsAPIService) GetSystemIntegratorloginsCount(ctx context.Context) ApiGetSystemIntegratorloginsCountRequest {
	return ApiGetSystemIntegratorloginsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *IntegratorLoginsAPIService) GetSystemIntegratorloginsCountExecute(r ApiGetSystemIntegratorloginsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.GetSystemIntegratorloginsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemIntegratorloginsByIdRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemIntegratorloginsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemIntegratorloginsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemIntegratorloginsByIdRequest) ClientId(clientId string) ApiPatchSystemIntegratorloginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemIntegratorloginsByIdRequest) Execute() (*IntegratorLogin, *http.Response, error) {
	return r.ApiService.PatchSystemIntegratorloginsByIdExecute(r)
}

/*
PatchSystemIntegratorloginsById Patch IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id integratorloginId
 @return ApiPatchSystemIntegratorloginsByIdRequest
*/
func (a *IntegratorLoginsAPIService) PatchSystemIntegratorloginsById(ctx context.Context, id int32) ApiPatchSystemIntegratorloginsByIdRequest {
	return ApiPatchSystemIntegratorloginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntegratorLogin
func (a *IntegratorLoginsAPIService) PatchSystemIntegratorloginsByIdExecute(r ApiPatchSystemIntegratorloginsByIdRequest) (*IntegratorLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.PatchSystemIntegratorloginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemIntegratorloginsRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	integratorLogin *IntegratorLogin
	clientId *string
}

// integratorLogin
func (r ApiPostSystemIntegratorloginsRequest) IntegratorLogin(integratorLogin IntegratorLogin) ApiPostSystemIntegratorloginsRequest {
	r.integratorLogin = &integratorLogin
	return r
}

// 
func (r ApiPostSystemIntegratorloginsRequest) ClientId(clientId string) ApiPostSystemIntegratorloginsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemIntegratorloginsRequest) Execute() (*IntegratorLogin, *http.Response, error) {
	return r.ApiService.PostSystemIntegratorloginsExecute(r)
}

/*
PostSystemIntegratorlogins Post IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemIntegratorloginsRequest
*/
func (a *IntegratorLoginsAPIService) PostSystemIntegratorlogins(ctx context.Context) ApiPostSystemIntegratorloginsRequest {
	return ApiPostSystemIntegratorloginsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return IntegratorLogin
func (a *IntegratorLoginsAPIService) PostSystemIntegratorloginsExecute(r ApiPostSystemIntegratorloginsRequest) (*IntegratorLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.PostSystemIntegratorlogins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integratorLogin == nil {
		return localVarReturnValue, nil, reportError("integratorLogin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.integratorLogin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemIntegratorloginsByIdRequest struct {
	ctx context.Context
	ApiService *IntegratorLoginsAPIService
	id int32
	integratorLogin *IntegratorLogin
	clientId *string
}

// integratorLogin
func (r ApiPutSystemIntegratorloginsByIdRequest) IntegratorLogin(integratorLogin IntegratorLogin) ApiPutSystemIntegratorloginsByIdRequest {
	r.integratorLogin = &integratorLogin
	return r
}

// 
func (r ApiPutSystemIntegratorloginsByIdRequest) ClientId(clientId string) ApiPutSystemIntegratorloginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemIntegratorloginsByIdRequest) Execute() (*IntegratorLogin, *http.Response, error) {
	return r.ApiService.PutSystemIntegratorloginsByIdExecute(r)
}

/*
PutSystemIntegratorloginsById Put IntegratorLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id integratorloginId
 @return ApiPutSystemIntegratorloginsByIdRequest
*/
func (a *IntegratorLoginsAPIService) PutSystemIntegratorloginsById(ctx context.Context, id int32) ApiPutSystemIntegratorloginsByIdRequest {
	return ApiPutSystemIntegratorloginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return IntegratorLogin
func (a *IntegratorLoginsAPIService) PutSystemIntegratorloginsByIdExecute(r ApiPutSystemIntegratorloginsByIdRequest) (*IntegratorLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegratorLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegratorLoginsAPIService.PutSystemIntegratorloginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/integratorlogins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integratorLogin == nil {
		return localVarReturnValue, nil, reportError("integratorLogin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.integratorLogin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
