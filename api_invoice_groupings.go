/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InvoiceGroupingsAPIService InvoiceGroupingsAPI service
type InvoiceGroupingsAPIService service

type ApiDeleteProcurementInvoicegroupingByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementInvoicegroupingByIdRequest) ClientId(clientId string) ApiDeleteProcurementInvoicegroupingByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementInvoicegroupingByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementInvoicegroupingByIdExecute(r)
}

/*
DeleteProcurementInvoicegroupingById Delete InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiDeleteProcurementInvoicegroupingByIdRequest
*/
func (a *InvoiceGroupingsAPIService) DeleteProcurementInvoicegroupingById(ctx context.Context, id int32) ApiDeleteProcurementInvoicegroupingByIdRequest {
	return ApiDeleteProcurementInvoicegroupingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *InvoiceGroupingsAPIService) DeleteProcurementInvoicegroupingByIdExecute(r ApiDeleteProcurementInvoicegroupingByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.DeleteProcurementInvoicegroupingById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementInvoicegroupingRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) ClientId(clientId string) ApiGetProcurementInvoicegroupingRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) Conditions(conditions string) ApiGetProcurementInvoicegroupingRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) ChildConditions(childConditions string) ApiGetProcurementInvoicegroupingRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementInvoicegroupingRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) OrderBy(orderBy string) ApiGetProcurementInvoicegroupingRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) Fields(fields string) ApiGetProcurementInvoicegroupingRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) Page(page int32) ApiGetProcurementInvoicegroupingRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) PageSize(pageSize int32) ApiGetProcurementInvoicegroupingRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingRequest) PageId(pageId int32) ApiGetProcurementInvoicegroupingRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementInvoicegroupingRequest) Execute() ([]InvoiceGrouping, *http.Response, error) {
	return r.ApiService.GetProcurementInvoicegroupingExecute(r)
}

/*
GetProcurementInvoicegrouping Get List of InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementInvoicegroupingRequest
*/
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegrouping(ctx context.Context) ApiGetProcurementInvoicegroupingRequest {
	return ApiGetProcurementInvoicegroupingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InvoiceGrouping
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingExecute(r ApiGetProcurementInvoicegroupingRequest) ([]InvoiceGrouping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InvoiceGrouping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.GetProcurementInvoicegrouping")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementInvoicegroupingByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) ClientId(clientId string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) Conditions(conditions string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) ChildConditions(childConditions string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) OrderBy(orderBy string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) Fields(fields string) ApiGetProcurementInvoicegroupingByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) Page(page int32) ApiGetProcurementInvoicegroupingByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) PageSize(pageSize int32) ApiGetProcurementInvoicegroupingByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdRequest) PageId(pageId int32) ApiGetProcurementInvoicegroupingByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementInvoicegroupingByIdRequest) Execute() (*InvoiceGrouping, *http.Response, error) {
	return r.ApiService.GetProcurementInvoicegroupingByIdExecute(r)
}

/*
GetProcurementInvoicegroupingById Get InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiGetProcurementInvoicegroupingByIdRequest
*/
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingById(ctx context.Context, id int32) ApiGetProcurementInvoicegroupingByIdRequest {
	return ApiGetProcurementInvoicegroupingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceGrouping
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingByIdExecute(r ApiGetProcurementInvoicegroupingByIdRequest) (*InvoiceGrouping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceGrouping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.GetProcurementInvoicegroupingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementInvoicegroupingByIdUsagesRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) Fields(fields string) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) Page(page int32) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementInvoicegroupingByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementInvoicegroupingByIdUsagesExecute(r)
}

/*
GetProcurementInvoicegroupingByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiGetProcurementInvoicegroupingByIdUsagesRequest
*/
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingByIdUsages(ctx context.Context, id int32) ApiGetProcurementInvoicegroupingByIdUsagesRequest {
	return ApiGetProcurementInvoicegroupingByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingByIdUsagesExecute(r ApiGetProcurementInvoicegroupingByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.GetProcurementInvoicegroupingByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementInvoicegroupingByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) Fields(fields string) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) Page(page int32) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementInvoicegroupingByIdUsagesListExecute(r)
}

/*
GetProcurementInvoicegroupingByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiGetProcurementInvoicegroupingByIdUsagesListRequest
*/
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementInvoicegroupingByIdUsagesListRequest {
	return ApiGetProcurementInvoicegroupingByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingByIdUsagesListExecute(r ApiGetProcurementInvoicegroupingByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.GetProcurementInvoicegroupingByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementInvoicegroupingCountRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) ClientId(clientId string) ApiGetProcurementInvoicegroupingCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) Conditions(conditions string) ApiGetProcurementInvoicegroupingCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) ChildConditions(childConditions string) ApiGetProcurementInvoicegroupingCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementInvoicegroupingCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) OrderBy(orderBy string) ApiGetProcurementInvoicegroupingCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) Fields(fields string) ApiGetProcurementInvoicegroupingCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) Page(page int32) ApiGetProcurementInvoicegroupingCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) PageSize(pageSize int32) ApiGetProcurementInvoicegroupingCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementInvoicegroupingCountRequest) PageId(pageId int32) ApiGetProcurementInvoicegroupingCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementInvoicegroupingCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementInvoicegroupingCountExecute(r)
}

/*
GetProcurementInvoicegroupingCount Get Count of InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementInvoicegroupingCountRequest
*/
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingCount(ctx context.Context) ApiGetProcurementInvoicegroupingCountRequest {
	return ApiGetProcurementInvoicegroupingCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *InvoiceGroupingsAPIService) GetProcurementInvoicegroupingCountExecute(r ApiGetProcurementInvoicegroupingCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.GetProcurementInvoicegroupingCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementInvoicegroupingByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementInvoicegroupingByIdRequest) ClientId(clientId string) ApiPatchProcurementInvoicegroupingByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementInvoicegroupingByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementInvoicegroupingByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementInvoicegroupingByIdRequest) Execute() (*InvoiceGrouping, *http.Response, error) {
	return r.ApiService.PatchProcurementInvoicegroupingByIdExecute(r)
}

/*
PatchProcurementInvoicegroupingById Patch InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiPatchProcurementInvoicegroupingByIdRequest
*/
func (a *InvoiceGroupingsAPIService) PatchProcurementInvoicegroupingById(ctx context.Context, id int32) ApiPatchProcurementInvoicegroupingByIdRequest {
	return ApiPatchProcurementInvoicegroupingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceGrouping
func (a *InvoiceGroupingsAPIService) PatchProcurementInvoicegroupingByIdExecute(r ApiPatchProcurementInvoicegroupingByIdRequest) (*InvoiceGrouping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceGrouping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.PatchProcurementInvoicegroupingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementInvoicegroupingCountRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	clientId *string
	invoiceGrouping *InvoiceGrouping
}

// 
func (r ApiPostProcurementInvoicegroupingCountRequest) ClientId(clientId string) ApiPostProcurementInvoicegroupingCountRequest {
	r.clientId = &clientId
	return r
}

// invoiceGrouping
func (r ApiPostProcurementInvoicegroupingCountRequest) InvoiceGrouping(invoiceGrouping InvoiceGrouping) ApiPostProcurementInvoicegroupingCountRequest {
	r.invoiceGrouping = &invoiceGrouping
	return r
}

func (r ApiPostProcurementInvoicegroupingCountRequest) Execute() (*InvoiceGrouping, *http.Response, error) {
	return r.ApiService.PostProcurementInvoicegroupingCountExecute(r)
}

/*
PostProcurementInvoicegroupingCount Post InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementInvoicegroupingCountRequest
*/
func (a *InvoiceGroupingsAPIService) PostProcurementInvoicegroupingCount(ctx context.Context) ApiPostProcurementInvoicegroupingCountRequest {
	return ApiPostProcurementInvoicegroupingCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InvoiceGrouping
func (a *InvoiceGroupingsAPIService) PostProcurementInvoicegroupingCountExecute(r ApiPostProcurementInvoicegroupingCountRequest) (*InvoiceGrouping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceGrouping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.PostProcurementInvoicegroupingCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceGrouping == nil {
		return localVarReturnValue, nil, reportError("invoiceGrouping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceGrouping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementInvoicegroupingByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceGroupingsAPIService
	id int32
	clientId *string
	invoiceGrouping *InvoiceGrouping
}

// 
func (r ApiPutProcurementInvoicegroupingByIdRequest) ClientId(clientId string) ApiPutProcurementInvoicegroupingByIdRequest {
	r.clientId = &clientId
	return r
}

// invoiceGrouping
func (r ApiPutProcurementInvoicegroupingByIdRequest) InvoiceGrouping(invoiceGrouping InvoiceGrouping) ApiPutProcurementInvoicegroupingByIdRequest {
	r.invoiceGrouping = &invoiceGrouping
	return r
}

func (r ApiPutProcurementInvoicegroupingByIdRequest) Execute() (*InvoiceGrouping, *http.Response, error) {
	return r.ApiService.PutProcurementInvoicegroupingByIdExecute(r)
}

/*
PutProcurementInvoicegroupingById Put InvoiceGrouping

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceGroupingId
 @return ApiPutProcurementInvoicegroupingByIdRequest
*/
func (a *InvoiceGroupingsAPIService) PutProcurementInvoicegroupingById(ctx context.Context, id int32) ApiPutProcurementInvoicegroupingByIdRequest {
	return ApiPutProcurementInvoicegroupingByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceGrouping
func (a *InvoiceGroupingsAPIService) PutProcurementInvoicegroupingByIdExecute(r ApiPutProcurementInvoicegroupingByIdRequest) (*InvoiceGrouping, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceGrouping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceGroupingsAPIService.PutProcurementInvoicegroupingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/invoicegrouping/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceGrouping == nil {
		return localVarReturnValue, nil, reportError("invoiceGrouping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceGrouping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
