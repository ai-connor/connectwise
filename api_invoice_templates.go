/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InvoiceTemplatesAPIService InvoiceTemplatesAPI service
type InvoiceTemplatesAPIService service

type ApiDeleteFinanceInvoiceTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteFinanceInvoiceTemplatesByIdRequest) ClientId(clientId string) ApiDeleteFinanceInvoiceTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceInvoiceTemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceInvoiceTemplatesByIdExecute(r)
}

/*
DeleteFinanceInvoiceTemplatesById Delete Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiDeleteFinanceInvoiceTemplatesByIdRequest
*/
func (a *InvoiceTemplatesAPIService) DeleteFinanceInvoiceTemplatesById(ctx context.Context, id int32) ApiDeleteFinanceInvoiceTemplatesByIdRequest {
	return ApiDeleteFinanceInvoiceTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *InvoiceTemplatesAPIService) DeleteFinanceInvoiceTemplatesByIdExecute(r ApiDeleteFinanceInvoiceTemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.DeleteFinanceInvoiceTemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceTemplatesRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) Conditions(conditions string) ApiGetFinanceInvoiceTemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) Fields(fields string) ApiGetFinanceInvoiceTemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) Page(page int32) ApiGetFinanceInvoiceTemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) PageId(pageId int32) ApiGetFinanceInvoiceTemplatesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesRequest) ClientId(clientId string) ApiGetFinanceInvoiceTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceTemplatesRequest) Execute() ([]InvoiceTemplate, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceTemplatesExecute(r)
}

/*
GetFinanceInvoiceTemplates Get List of InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceInvoiceTemplatesRequest
*/
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplates(ctx context.Context) ApiGetFinanceInvoiceTemplatesRequest {
	return ApiGetFinanceInvoiceTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []InvoiceTemplate
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesExecute(r ApiGetFinanceInvoiceTemplatesRequest) ([]InvoiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []InvoiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.GetFinanceInvoiceTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) Conditions(conditions string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) Fields(fields string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) Page(page int32) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) PageId(pageId int32) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdRequest) ClientId(clientId string) ApiGetFinanceInvoiceTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceTemplatesByIdRequest) Execute() (*InvoiceTemplate, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceTemplatesByIdExecute(r)
}

/*
GetFinanceInvoiceTemplatesById Get InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiGetFinanceInvoiceTemplatesByIdRequest
*/
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesById(ctx context.Context, id int32) ApiGetFinanceInvoiceTemplatesByIdRequest {
	return ApiGetFinanceInvoiceTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceTemplate
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesByIdExecute(r ApiGetFinanceInvoiceTemplatesByIdRequest) (*InvoiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.GetFinanceInvoiceTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceTemplatesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) Fields(fields string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) Page(page int32) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceTemplatesByIdUsagesExecute(r)
}

/*
GetFinanceInvoiceTemplatesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiGetFinanceInvoiceTemplatesByIdUsagesRequest
*/
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesByIdUsages(ctx context.Context, id int32) ApiGetFinanceInvoiceTemplatesByIdUsagesRequest {
	return ApiGetFinanceInvoiceTemplatesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesByIdUsagesExecute(r ApiGetFinanceInvoiceTemplatesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.GetFinanceInvoiceTemplatesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) Fields(fields string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) Page(page int32) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceTemplatesByIdUsagesListExecute(r)
}

/*
GetFinanceInvoiceTemplatesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest
*/
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest {
	return ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesByIdUsagesListExecute(r ApiGetFinanceInvoiceTemplatesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.GetFinanceInvoiceTemplatesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceTemplatesCountRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) Conditions(conditions string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) Fields(fields string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) Page(page int32) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) PageId(pageId int32) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceInvoiceTemplatesCountRequest) ClientId(clientId string) ApiGetFinanceInvoiceTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceTemplatesCountExecute(r)
}

/*
GetFinanceInvoiceTemplatesCount Get Count of InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetFinanceInvoiceTemplatesCountRequest
*/
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesCount(ctx context.Context) ApiGetFinanceInvoiceTemplatesCountRequest {
	return ApiGetFinanceInvoiceTemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *InvoiceTemplatesAPIService) GetFinanceInvoiceTemplatesCountExecute(r ApiGetFinanceInvoiceTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.GetFinanceInvoiceTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceInvoiceTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceInvoiceTemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceInvoiceTemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceInvoiceTemplatesByIdRequest) ClientId(clientId string) ApiPatchFinanceInvoiceTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceInvoiceTemplatesByIdRequest) Execute() (*InvoiceTemplate, *http.Response, error) {
	return r.ApiService.PatchFinanceInvoiceTemplatesByIdExecute(r)
}

/*
PatchFinanceInvoiceTemplatesById Patch InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiPatchFinanceInvoiceTemplatesByIdRequest
*/
func (a *InvoiceTemplatesAPIService) PatchFinanceInvoiceTemplatesById(ctx context.Context, id int32) ApiPatchFinanceInvoiceTemplatesByIdRequest {
	return ApiPatchFinanceInvoiceTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceTemplate
func (a *InvoiceTemplatesAPIService) PatchFinanceInvoiceTemplatesByIdExecute(r ApiPatchFinanceInvoiceTemplatesByIdRequest) (*InvoiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.PatchFinanceInvoiceTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceInvoiceTemplatesRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	invoiceTemplate *InvoiceTemplate
	clientId *string
}

// invoiceTemplate
func (r ApiPostFinanceInvoiceTemplatesRequest) InvoiceTemplate(invoiceTemplate InvoiceTemplate) ApiPostFinanceInvoiceTemplatesRequest {
	r.invoiceTemplate = &invoiceTemplate
	return r
}

// 
func (r ApiPostFinanceInvoiceTemplatesRequest) ClientId(clientId string) ApiPostFinanceInvoiceTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceInvoiceTemplatesRequest) Execute() (*InvoiceTemplate, *http.Response, error) {
	return r.ApiService.PostFinanceInvoiceTemplatesExecute(r)
}

/*
PostFinanceInvoiceTemplates Post InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostFinanceInvoiceTemplatesRequest
*/
func (a *InvoiceTemplatesAPIService) PostFinanceInvoiceTemplates(ctx context.Context) ApiPostFinanceInvoiceTemplatesRequest {
	return ApiPostFinanceInvoiceTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InvoiceTemplate
func (a *InvoiceTemplatesAPIService) PostFinanceInvoiceTemplatesExecute(r ApiPostFinanceInvoiceTemplatesRequest) (*InvoiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.PostFinanceInvoiceTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invoiceTemplate == nil {
		return localVarReturnValue, nil, reportError("invoiceTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.invoiceTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceInvoiceTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *InvoiceTemplatesAPIService
	id int32
	invoiceTemplate *InvoiceTemplate
	clientId *string
}

// invoiceTemplate
func (r ApiPutFinanceInvoiceTemplatesByIdRequest) InvoiceTemplate(invoiceTemplate InvoiceTemplate) ApiPutFinanceInvoiceTemplatesByIdRequest {
	r.invoiceTemplate = &invoiceTemplate
	return r
}

// 
func (r ApiPutFinanceInvoiceTemplatesByIdRequest) ClientId(clientId string) ApiPutFinanceInvoiceTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceInvoiceTemplatesByIdRequest) Execute() (*InvoiceTemplate, *http.Response, error) {
	return r.ApiService.PutFinanceInvoiceTemplatesByIdExecute(r)
}

/*
PutFinanceInvoiceTemplatesById Put InvoiceTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id invoiceTemplateId
 @return ApiPutFinanceInvoiceTemplatesByIdRequest
*/
func (a *InvoiceTemplatesAPIService) PutFinanceInvoiceTemplatesById(ctx context.Context, id int32) ApiPutFinanceInvoiceTemplatesByIdRequest {
	return ApiPutFinanceInvoiceTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InvoiceTemplate
func (a *InvoiceTemplatesAPIService) PutFinanceInvoiceTemplatesByIdExecute(r ApiPutFinanceInvoiceTemplatesByIdRequest) (*InvoiceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InvoiceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceTemplatesAPIService.PutFinanceInvoiceTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invoiceTemplate == nil {
		return localVarReturnValue, nil, reportError("invoiceTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.invoiceTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
