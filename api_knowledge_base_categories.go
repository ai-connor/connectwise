/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KnowledgeBaseCategoriesAPIService KnowledgeBaseCategoriesAPI service
type KnowledgeBaseCategoriesAPIService service

type ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest) ClientId(clientId string) ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceKnowledgeBaseCategoriesByIdExecute(r)
}

/*
DeleteServiceKnowledgeBaseCategoriesById Delete KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseCategoryId
 @return ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) DeleteServiceKnowledgeBaseCategoriesById(ctx context.Context, id int32) ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest {
	return ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *KnowledgeBaseCategoriesAPIService) DeleteServiceKnowledgeBaseCategoriesByIdExecute(r ApiDeleteServiceKnowledgeBaseCategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.DeleteServiceKnowledgeBaseCategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseCategoriesRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) Fields(fields string) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) Page(page int32) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseCategoriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseCategoriesRequest) Execute() ([]KnowledgeBaseCategory, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseCategoriesExecute(r)
}

/*
GetServiceKnowledgeBaseCategories Get List of KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceKnowledgeBaseCategoriesRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategories(ctx context.Context) ApiGetServiceKnowledgeBaseCategoriesRequest {
	return ApiGetServiceKnowledgeBaseCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeBaseCategory
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategoriesExecute(r ApiGetServiceKnowledgeBaseCategoriesRequest) ([]KnowledgeBaseCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeBaseCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.GetServiceKnowledgeBaseCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) Fields(fields string) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) Page(page int32) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) Execute() (*KnowledgeBaseCategory, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseCategoriesByIdExecute(r)
}

/*
GetServiceKnowledgeBaseCategoriesById Get KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseCategoryId
 @return ApiGetServiceKnowledgeBaseCategoriesByIdRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategoriesById(ctx context.Context, id int32) ApiGetServiceKnowledgeBaseCategoriesByIdRequest {
	return ApiGetServiceKnowledgeBaseCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseCategory
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategoriesByIdExecute(r ApiGetServiceKnowledgeBaseCategoriesByIdRequest) (*KnowledgeBaseCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.GetServiceKnowledgeBaseCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseCategoriesCountRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) Fields(fields string) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) Page(page int32) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseCategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseCategoriesCountExecute(r)
}

/*
GetServiceKnowledgeBaseCategoriesCount Get Count of KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceKnowledgeBaseCategoriesCountRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategoriesCount(ctx context.Context) ApiGetServiceKnowledgeBaseCategoriesCountRequest {
	return ApiGetServiceKnowledgeBaseCategoriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *KnowledgeBaseCategoriesAPIService) GetServiceKnowledgeBaseCategoriesCountExecute(r ApiGetServiceKnowledgeBaseCategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.GetServiceKnowledgeBaseCategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceKnowledgeBaseCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceKnowledgeBaseCategoriesByIdRequest) ClientId(clientId string) ApiPatchServiceKnowledgeBaseCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceKnowledgeBaseCategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceKnowledgeBaseCategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceKnowledgeBaseCategoriesByIdRequest) Execute() (*KnowledgeBaseCategory, *http.Response, error) {
	return r.ApiService.PatchServiceKnowledgeBaseCategoriesByIdExecute(r)
}

/*
PatchServiceKnowledgeBaseCategoriesById Patch KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseCategoryId
 @return ApiPatchServiceKnowledgeBaseCategoriesByIdRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) PatchServiceKnowledgeBaseCategoriesById(ctx context.Context, id int32) ApiPatchServiceKnowledgeBaseCategoriesByIdRequest {
	return ApiPatchServiceKnowledgeBaseCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseCategory
func (a *KnowledgeBaseCategoriesAPIService) PatchServiceKnowledgeBaseCategoriesByIdExecute(r ApiPatchServiceKnowledgeBaseCategoriesByIdRequest) (*KnowledgeBaseCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.PatchServiceKnowledgeBaseCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceKnowledgeBaseCategoriesRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	clientId *string
	knowledgeBaseCategory *KnowledgeBaseCategory
}

// 
func (r ApiPostServiceKnowledgeBaseCategoriesRequest) ClientId(clientId string) ApiPostServiceKnowledgeBaseCategoriesRequest {
	r.clientId = &clientId
	return r
}

// knowledgeBaseCategory
func (r ApiPostServiceKnowledgeBaseCategoriesRequest) KnowledgeBaseCategory(knowledgeBaseCategory KnowledgeBaseCategory) ApiPostServiceKnowledgeBaseCategoriesRequest {
	r.knowledgeBaseCategory = &knowledgeBaseCategory
	return r
}

func (r ApiPostServiceKnowledgeBaseCategoriesRequest) Execute() (*KnowledgeBaseCategory, *http.Response, error) {
	return r.ApiService.PostServiceKnowledgeBaseCategoriesExecute(r)
}

/*
PostServiceKnowledgeBaseCategories Post KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceKnowledgeBaseCategoriesRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) PostServiceKnowledgeBaseCategories(ctx context.Context) ApiPostServiceKnowledgeBaseCategoriesRequest {
	return ApiPostServiceKnowledgeBaseCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeBaseCategory
func (a *KnowledgeBaseCategoriesAPIService) PostServiceKnowledgeBaseCategoriesExecute(r ApiPostServiceKnowledgeBaseCategoriesRequest) (*KnowledgeBaseCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.PostServiceKnowledgeBaseCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.knowledgeBaseCategory == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.knowledgeBaseCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceKnowledgeBaseCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseCategoriesAPIService
	id int32
	clientId *string
	knowledgeBaseCategory *KnowledgeBaseCategory
}

// 
func (r ApiPutServiceKnowledgeBaseCategoriesByIdRequest) ClientId(clientId string) ApiPutServiceKnowledgeBaseCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// knowledgeBaseCategory
func (r ApiPutServiceKnowledgeBaseCategoriesByIdRequest) KnowledgeBaseCategory(knowledgeBaseCategory KnowledgeBaseCategory) ApiPutServiceKnowledgeBaseCategoriesByIdRequest {
	r.knowledgeBaseCategory = &knowledgeBaseCategory
	return r
}

func (r ApiPutServiceKnowledgeBaseCategoriesByIdRequest) Execute() (*KnowledgeBaseCategory, *http.Response, error) {
	return r.ApiService.PutServiceKnowledgeBaseCategoriesByIdExecute(r)
}

/*
PutServiceKnowledgeBaseCategoriesById Put KnowledgeBaseCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseCategoryId
 @return ApiPutServiceKnowledgeBaseCategoriesByIdRequest
*/
func (a *KnowledgeBaseCategoriesAPIService) PutServiceKnowledgeBaseCategoriesById(ctx context.Context, id int32) ApiPutServiceKnowledgeBaseCategoriesByIdRequest {
	return ApiPutServiceKnowledgeBaseCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseCategory
func (a *KnowledgeBaseCategoriesAPIService) PutServiceKnowledgeBaseCategoriesByIdExecute(r ApiPutServiceKnowledgeBaseCategoriesByIdRequest) (*KnowledgeBaseCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseCategoriesAPIService.PutServiceKnowledgeBaseCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.knowledgeBaseCategory == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.knowledgeBaseCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
