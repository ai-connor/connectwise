/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KnowledgeBaseSettingsesAPIService KnowledgeBaseSettingsesAPI service
type KnowledgeBaseSettingsesAPIService service

type ApiGetServiceKnowledgebasesettingsRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSettingsesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) Conditions(conditions string) ApiGetServiceKnowledgebasesettingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgebasesettingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgebasesettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) OrderBy(orderBy string) ApiGetServiceKnowledgebasesettingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) Fields(fields string) ApiGetServiceKnowledgebasesettingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) Page(page int32) ApiGetServiceKnowledgebasesettingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) PageSize(pageSize int32) ApiGetServiceKnowledgebasesettingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) PageId(pageId int32) ApiGetServiceKnowledgebasesettingsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsRequest) ClientId(clientId string) ApiGetServiceKnowledgebasesettingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgebasesettingsRequest) Execute() (*KnowledgeBaseSettings, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgebasesettingsExecute(r)
}

/*
GetServiceKnowledgebasesettings Get KnowledgeBaseSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceKnowledgebasesettingsRequest
*/
func (a *KnowledgeBaseSettingsesAPIService) GetServiceKnowledgebasesettings(ctx context.Context) ApiGetServiceKnowledgebasesettingsRequest {
	return ApiGetServiceKnowledgebasesettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSettings
func (a *KnowledgeBaseSettingsesAPIService) GetServiceKnowledgebasesettingsExecute(r ApiGetServiceKnowledgebasesettingsRequest) (*KnowledgeBaseSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSettingsesAPIService.GetServiceKnowledgebasesettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgebasesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgebasesettingsByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSettingsesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) Conditions(conditions string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) OrderBy(orderBy string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) Fields(fields string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) Page(page int32) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) PageSize(pageSize int32) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) PageId(pageId int32) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgebasesettingsByIdRequest) ClientId(clientId string) ApiGetServiceKnowledgebasesettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgebasesettingsByIdRequest) Execute() (*KnowledgeBaseSettings, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgebasesettingsByIdExecute(r)
}

/*
GetServiceKnowledgebasesettingsById Get KnowledgeBaseSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgebasesettingId
 @return ApiGetServiceKnowledgebasesettingsByIdRequest
*/
func (a *KnowledgeBaseSettingsesAPIService) GetServiceKnowledgebasesettingsById(ctx context.Context, id int32) ApiGetServiceKnowledgebasesettingsByIdRequest {
	return ApiGetServiceKnowledgebasesettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSettings
func (a *KnowledgeBaseSettingsesAPIService) GetServiceKnowledgebasesettingsByIdExecute(r ApiGetServiceKnowledgebasesettingsByIdRequest) (*KnowledgeBaseSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSettingsesAPIService.GetServiceKnowledgebasesettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgebasesettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceKnowledgebasesettingsByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSettingsesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceKnowledgebasesettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceKnowledgebasesettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceKnowledgebasesettingsByIdRequest) ClientId(clientId string) ApiPatchServiceKnowledgebasesettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceKnowledgebasesettingsByIdRequest) Execute() (*KnowledgeBaseSettings, *http.Response, error) {
	return r.ApiService.PatchServiceKnowledgebasesettingsByIdExecute(r)
}

/*
PatchServiceKnowledgebasesettingsById Patch KnowledgeBaseSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgebasesettingId
 @return ApiPatchServiceKnowledgebasesettingsByIdRequest
*/
func (a *KnowledgeBaseSettingsesAPIService) PatchServiceKnowledgebasesettingsById(ctx context.Context, id int32) ApiPatchServiceKnowledgebasesettingsByIdRequest {
	return ApiPatchServiceKnowledgebasesettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSettings
func (a *KnowledgeBaseSettingsesAPIService) PatchServiceKnowledgebasesettingsByIdExecute(r ApiPatchServiceKnowledgebasesettingsByIdRequest) (*KnowledgeBaseSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSettingsesAPIService.PatchServiceKnowledgebasesettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgebasesettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceKnowledgebasesettingsRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSettingsesAPIService
	knowledgeBaseSettings *KnowledgeBaseSettings
	clientId *string
}

// knowledgeBaseSettings
func (r ApiPostServiceKnowledgebasesettingsRequest) KnowledgeBaseSettings(knowledgeBaseSettings KnowledgeBaseSettings) ApiPostServiceKnowledgebasesettingsRequest {
	r.knowledgeBaseSettings = &knowledgeBaseSettings
	return r
}

// 
func (r ApiPostServiceKnowledgebasesettingsRequest) ClientId(clientId string) ApiPostServiceKnowledgebasesettingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceKnowledgebasesettingsRequest) Execute() (*KnowledgeBaseSettings, *http.Response, error) {
	return r.ApiService.PostServiceKnowledgebasesettingsExecute(r)
}

/*
PostServiceKnowledgebasesettings Post KnowledgeBaseSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceKnowledgebasesettingsRequest
*/
func (a *KnowledgeBaseSettingsesAPIService) PostServiceKnowledgebasesettings(ctx context.Context) ApiPostServiceKnowledgebasesettingsRequest {
	return ApiPostServiceKnowledgebasesettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSettings
func (a *KnowledgeBaseSettingsesAPIService) PostServiceKnowledgebasesettingsExecute(r ApiPostServiceKnowledgebasesettingsRequest) (*KnowledgeBaseSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSettingsesAPIService.PostServiceKnowledgebasesettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgebasesettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseSettings == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.knowledgeBaseSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceKnowledgebasesettingsByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSettingsesAPIService
	id int32
	knowledgeBaseSettings *KnowledgeBaseSettings
	clientId *string
}

// knowledgeBaseSettings
func (r ApiPutServiceKnowledgebasesettingsByIdRequest) KnowledgeBaseSettings(knowledgeBaseSettings KnowledgeBaseSettings) ApiPutServiceKnowledgebasesettingsByIdRequest {
	r.knowledgeBaseSettings = &knowledgeBaseSettings
	return r
}

// 
func (r ApiPutServiceKnowledgebasesettingsByIdRequest) ClientId(clientId string) ApiPutServiceKnowledgebasesettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceKnowledgebasesettingsByIdRequest) Execute() (*KnowledgeBaseSettings, *http.Response, error) {
	return r.ApiService.PutServiceKnowledgebasesettingsByIdExecute(r)
}

/*
PutServiceKnowledgebasesettingsById Put KnowledgeBaseSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgebasesettingId
 @return ApiPutServiceKnowledgebasesettingsByIdRequest
*/
func (a *KnowledgeBaseSettingsesAPIService) PutServiceKnowledgebasesettingsById(ctx context.Context, id int32) ApiPutServiceKnowledgebasesettingsByIdRequest {
	return ApiPutServiceKnowledgebasesettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSettings
func (a *KnowledgeBaseSettingsesAPIService) PutServiceKnowledgebasesettingsByIdExecute(r ApiPutServiceKnowledgebasesettingsByIdRequest) (*KnowledgeBaseSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSettingsesAPIService.PutServiceKnowledgebasesettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgebasesettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseSettings == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseSettings is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.knowledgeBaseSettings
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
