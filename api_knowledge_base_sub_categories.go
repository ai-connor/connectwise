/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KnowledgeBaseSubCategoriesAPIService KnowledgeBaseSubCategoriesAPI service
type KnowledgeBaseSubCategoriesAPIService service

type ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest) ClientId(clientId string) ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceKnowledgeBaseSubCategoriesByIdExecute(r)
}

/*
DeleteServiceKnowledgeBaseSubCategoriesById Delete KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) DeleteServiceKnowledgeBaseSubCategoriesById(ctx context.Context, id int32) ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest {
	return ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *KnowledgeBaseSubCategoriesAPIService) DeleteServiceKnowledgeBaseSubCategoriesByIdExecute(r ApiDeleteServiceKnowledgeBaseSubCategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.DeleteServiceKnowledgeBaseSubCategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseSubCategoriesRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) Fields(fields string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) Page(page int32) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseSubCategoriesRequest) Execute() ([]KnowledgeBaseSubCategory, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseSubCategoriesExecute(r)
}

/*
GetServiceKnowledgeBaseSubCategories Get List of KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceKnowledgeBaseSubCategoriesRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategories(ctx context.Context) ApiGetServiceKnowledgeBaseSubCategoriesRequest {
	return ApiGetServiceKnowledgeBaseSubCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeBaseSubCategory
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesExecute(r ApiGetServiceKnowledgeBaseSubCategoriesRequest) ([]KnowledgeBaseSubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeBaseSubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.GetServiceKnowledgeBaseSubCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) Fields(fields string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) Page(page int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) Execute() (*KnowledgeBaseSubCategory, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseSubCategoriesByIdExecute(r)
}

/*
GetServiceKnowledgeBaseSubCategoriesById Get KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesById(ctx context.Context, id int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest {
	return ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSubCategory
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesByIdExecute(r ApiGetServiceKnowledgeBaseSubCategoriesByIdRequest) (*KnowledgeBaseSubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.GetServiceKnowledgeBaseSubCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) Fields(fields string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) Page(page int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseSubCategoriesByIdUsagesExecute(r)
}

/*
GetServiceKnowledgeBaseSubCategoriesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesByIdUsages(ctx context.Context, id int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest {
	return ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesByIdUsagesExecute(r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.GetServiceKnowledgeBaseSubCategoriesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) Fields(fields string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) Page(page int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseSubCategoriesByIdUsagesListExecute(r)
}

/*
GetServiceKnowledgeBaseSubCategoriesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesByIdUsagesList(ctx context.Context, id int32) ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest {
	return ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesByIdUsagesListExecute(r ApiGetServiceKnowledgeBaseSubCategoriesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.GetServiceKnowledgeBaseSubCategoriesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseSubCategoriesCountRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) Fields(fields string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) Page(page int32) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseSubCategoriesCountExecute(r)
}

/*
GetServiceKnowledgeBaseSubCategoriesCount Get Count of KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceKnowledgeBaseSubCategoriesCountRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesCount(ctx context.Context) ApiGetServiceKnowledgeBaseSubCategoriesCountRequest {
	return ApiGetServiceKnowledgeBaseSubCategoriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *KnowledgeBaseSubCategoriesAPIService) GetServiceKnowledgeBaseSubCategoriesCountExecute(r ApiGetServiceKnowledgeBaseSubCategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.GetServiceKnowledgeBaseSubCategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest) ClientId(clientId string) ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest) Execute() (*KnowledgeBaseSubCategory, *http.Response, error) {
	return r.ApiService.PatchServiceKnowledgeBaseSubCategoriesByIdExecute(r)
}

/*
PatchServiceKnowledgeBaseSubCategoriesById Patch KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) PatchServiceKnowledgeBaseSubCategoriesById(ctx context.Context, id int32) ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest {
	return ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSubCategory
func (a *KnowledgeBaseSubCategoriesAPIService) PatchServiceKnowledgeBaseSubCategoriesByIdExecute(r ApiPatchServiceKnowledgeBaseSubCategoriesByIdRequest) (*KnowledgeBaseSubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.PatchServiceKnowledgeBaseSubCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceKnowledgeBaseSubCategoriesRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	knowledgeBaseSubCategory *KnowledgeBaseSubCategory
	clientId *string
}

// knowledgeBaseSubCategory
func (r ApiPostServiceKnowledgeBaseSubCategoriesRequest) KnowledgeBaseSubCategory(knowledgeBaseSubCategory KnowledgeBaseSubCategory) ApiPostServiceKnowledgeBaseSubCategoriesRequest {
	r.knowledgeBaseSubCategory = &knowledgeBaseSubCategory
	return r
}

// 
func (r ApiPostServiceKnowledgeBaseSubCategoriesRequest) ClientId(clientId string) ApiPostServiceKnowledgeBaseSubCategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceKnowledgeBaseSubCategoriesRequest) Execute() (*KnowledgeBaseSubCategory, *http.Response, error) {
	return r.ApiService.PostServiceKnowledgeBaseSubCategoriesExecute(r)
}

/*
PostServiceKnowledgeBaseSubCategories Post KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceKnowledgeBaseSubCategoriesRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) PostServiceKnowledgeBaseSubCategories(ctx context.Context) ApiPostServiceKnowledgeBaseSubCategoriesRequest {
	return ApiPostServiceKnowledgeBaseSubCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSubCategory
func (a *KnowledgeBaseSubCategoriesAPIService) PostServiceKnowledgeBaseSubCategoriesExecute(r ApiPostServiceKnowledgeBaseSubCategoriesRequest) (*KnowledgeBaseSubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.PostServiceKnowledgeBaseSubCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseSubCategory == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseSubCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.knowledgeBaseSubCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *KnowledgeBaseSubCategoriesAPIService
	id int32
	knowledgeBaseSubCategory *KnowledgeBaseSubCategory
	clientId *string
}

// knowledgeBaseSubCategory
func (r ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest) KnowledgeBaseSubCategory(knowledgeBaseSubCategory KnowledgeBaseSubCategory) ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.knowledgeBaseSubCategory = &knowledgeBaseSubCategory
	return r
}

// 
func (r ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest) ClientId(clientId string) ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest) Execute() (*KnowledgeBaseSubCategory, *http.Response, error) {
	return r.ApiService.PutServiceKnowledgeBaseSubCategoriesByIdExecute(r)
}

/*
PutServiceKnowledgeBaseSubCategoriesById Put KnowledgeBaseSubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id knowledgeBaseSubCategoryId
 @return ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest
*/
func (a *KnowledgeBaseSubCategoriesAPIService) PutServiceKnowledgeBaseSubCategoriesById(ctx context.Context, id int32) ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest {
	return ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeBaseSubCategory
func (a *KnowledgeBaseSubCategoriesAPIService) PutServiceKnowledgeBaseSubCategoriesByIdExecute(r ApiPutServiceKnowledgeBaseSubCategoriesByIdRequest) (*KnowledgeBaseSubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeBaseSubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseSubCategoriesAPIService.PutServiceKnowledgeBaseSubCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseSubCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeBaseSubCategory == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseSubCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.knowledgeBaseSubCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
