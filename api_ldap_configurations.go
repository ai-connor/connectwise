/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LdapConfigurationsAPIService LdapConfigurationsAPI service
type LdapConfigurationsAPIService service

type ApiDeleteSystemLdapConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemLdapConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteSystemLdapConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemLdapConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemLdapConfigurationsByIdExecute(r)
}

/*
DeleteSystemLdapConfigurationsById Delete LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ldapConfigurationId
 @return ApiDeleteSystemLdapConfigurationsByIdRequest
*/
func (a *LdapConfigurationsAPIService) DeleteSystemLdapConfigurationsById(ctx context.Context, id int32) ApiDeleteSystemLdapConfigurationsByIdRequest {
	return ApiDeleteSystemLdapConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *LdapConfigurationsAPIService) DeleteSystemLdapConfigurationsByIdExecute(r ApiDeleteSystemLdapConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.DeleteSystemLdapConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemLdapConfigurationsRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) ClientId(clientId string) ApiGetSystemLdapConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) Conditions(conditions string) ApiGetSystemLdapConfigurationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) ChildConditions(childConditions string) ApiGetSystemLdapConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemLdapConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) OrderBy(orderBy string) ApiGetSystemLdapConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) Fields(fields string) ApiGetSystemLdapConfigurationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) Page(page int32) ApiGetSystemLdapConfigurationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) PageSize(pageSize int32) ApiGetSystemLdapConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsRequest) PageId(pageId int32) ApiGetSystemLdapConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemLdapConfigurationsRequest) Execute() ([]LdapConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemLdapConfigurationsExecute(r)
}

/*
GetSystemLdapConfigurations Get List of LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemLdapConfigurationsRequest
*/
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurations(ctx context.Context) ApiGetSystemLdapConfigurationsRequest {
	return ApiGetSystemLdapConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LdapConfiguration
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurationsExecute(r ApiGetSystemLdapConfigurationsRequest) ([]LdapConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LdapConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.GetSystemLdapConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemLdapConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) ClientId(clientId string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) Conditions(conditions string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) Fields(fields string) ApiGetSystemLdapConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) Page(page int32) ApiGetSystemLdapConfigurationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetSystemLdapConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsByIdRequest) PageId(pageId int32) ApiGetSystemLdapConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemLdapConfigurationsByIdRequest) Execute() (*LdapConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemLdapConfigurationsByIdExecute(r)
}

/*
GetSystemLdapConfigurationsById Get LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ldapConfigurationId
 @return ApiGetSystemLdapConfigurationsByIdRequest
*/
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurationsById(ctx context.Context, id int32) ApiGetSystemLdapConfigurationsByIdRequest {
	return ApiGetSystemLdapConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LdapConfiguration
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurationsByIdExecute(r ApiGetSystemLdapConfigurationsByIdRequest) (*LdapConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.GetSystemLdapConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemLdapConfigurationsCountRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) ClientId(clientId string) ApiGetSystemLdapConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) Conditions(conditions string) ApiGetSystemLdapConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetSystemLdapConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemLdapConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) OrderBy(orderBy string) ApiGetSystemLdapConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) Fields(fields string) ApiGetSystemLdapConfigurationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) Page(page int32) ApiGetSystemLdapConfigurationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) PageSize(pageSize int32) ApiGetSystemLdapConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemLdapConfigurationsCountRequest) PageId(pageId int32) ApiGetSystemLdapConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemLdapConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemLdapConfigurationsCountExecute(r)
}

/*
GetSystemLdapConfigurationsCount Get Count of LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemLdapConfigurationsCountRequest
*/
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurationsCount(ctx context.Context) ApiGetSystemLdapConfigurationsCountRequest {
	return ApiGetSystemLdapConfigurationsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *LdapConfigurationsAPIService) GetSystemLdapConfigurationsCountExecute(r ApiGetSystemLdapConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.GetSystemLdapConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemLdapConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemLdapConfigurationsByIdRequest) ClientId(clientId string) ApiPatchSystemLdapConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemLdapConfigurationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemLdapConfigurationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemLdapConfigurationsByIdRequest) Execute() (*LdapConfiguration, *http.Response, error) {
	return r.ApiService.PatchSystemLdapConfigurationsByIdExecute(r)
}

/*
PatchSystemLdapConfigurationsById Patch LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ldapConfigurationId
 @return ApiPatchSystemLdapConfigurationsByIdRequest
*/
func (a *LdapConfigurationsAPIService) PatchSystemLdapConfigurationsById(ctx context.Context, id int32) ApiPatchSystemLdapConfigurationsByIdRequest {
	return ApiPatchSystemLdapConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LdapConfiguration
func (a *LdapConfigurationsAPIService) PatchSystemLdapConfigurationsByIdExecute(r ApiPatchSystemLdapConfigurationsByIdRequest) (*LdapConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.PatchSystemLdapConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemLdapConfigurationsRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	clientId *string
	ldapConfiguration *LdapConfiguration
}

// 
func (r ApiPostSystemLdapConfigurationsRequest) ClientId(clientId string) ApiPostSystemLdapConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// ldapConfiguration
func (r ApiPostSystemLdapConfigurationsRequest) LdapConfiguration(ldapConfiguration LdapConfiguration) ApiPostSystemLdapConfigurationsRequest {
	r.ldapConfiguration = &ldapConfiguration
	return r
}

func (r ApiPostSystemLdapConfigurationsRequest) Execute() (*LdapConfiguration, *http.Response, error) {
	return r.ApiService.PostSystemLdapConfigurationsExecute(r)
}

/*
PostSystemLdapConfigurations Post LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemLdapConfigurationsRequest
*/
func (a *LdapConfigurationsAPIService) PostSystemLdapConfigurations(ctx context.Context) ApiPostSystemLdapConfigurationsRequest {
	return ApiPostSystemLdapConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return LdapConfiguration
func (a *LdapConfigurationsAPIService) PostSystemLdapConfigurationsExecute(r ApiPostSystemLdapConfigurationsRequest) (*LdapConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.PostSystemLdapConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ldapConfiguration == nil {
		return localVarReturnValue, nil, reportError("ldapConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ldapConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemLdapConfigurationsTestLinkRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	clientId *string
	ldapConfigurationTestLink *LdapConfigurationTestLink
}

// 
func (r ApiPostSystemLdapConfigurationsTestLinkRequest) ClientId(clientId string) ApiPostSystemLdapConfigurationsTestLinkRequest {
	r.clientId = &clientId
	return r
}

// server
func (r ApiPostSystemLdapConfigurationsTestLinkRequest) LdapConfigurationTestLink(ldapConfigurationTestLink LdapConfigurationTestLink) ApiPostSystemLdapConfigurationsTestLinkRequest {
	r.ldapConfigurationTestLink = &ldapConfigurationTestLink
	return r
}

func (r ApiPostSystemLdapConfigurationsTestLinkRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemLdapConfigurationsTestLinkExecute(r)
}

/*
PostSystemLdapConfigurationsTestLink Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemLdapConfigurationsTestLinkRequest
*/
func (a *LdapConfigurationsAPIService) PostSystemLdapConfigurationsTestLink(ctx context.Context) ApiPostSystemLdapConfigurationsTestLinkRequest {
	return ApiPostSystemLdapConfigurationsTestLinkRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *LdapConfigurationsAPIService) PostSystemLdapConfigurationsTestLinkExecute(r ApiPostSystemLdapConfigurationsTestLinkRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.PostSystemLdapConfigurationsTestLink")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/testLink"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ldapConfigurationTestLink == nil {
		return localVarReturnValue, nil, reportError("ldapConfigurationTestLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ldapConfigurationTestLink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemLdapConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *LdapConfigurationsAPIService
	id int32
	clientId *string
	ldapConfiguration *LdapConfiguration
}

// 
func (r ApiPutSystemLdapConfigurationsByIdRequest) ClientId(clientId string) ApiPutSystemLdapConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// ldapConfiguration
func (r ApiPutSystemLdapConfigurationsByIdRequest) LdapConfiguration(ldapConfiguration LdapConfiguration) ApiPutSystemLdapConfigurationsByIdRequest {
	r.ldapConfiguration = &ldapConfiguration
	return r
}

func (r ApiPutSystemLdapConfigurationsByIdRequest) Execute() (*LdapConfiguration, *http.Response, error) {
	return r.ApiService.PutSystemLdapConfigurationsByIdExecute(r)
}

/*
PutSystemLdapConfigurationsById Put LdapConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ldapConfigurationId
 @return ApiPutSystemLdapConfigurationsByIdRequest
*/
func (a *LdapConfigurationsAPIService) PutSystemLdapConfigurationsById(ctx context.Context, id int32) ApiPutSystemLdapConfigurationsByIdRequest {
	return ApiPutSystemLdapConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LdapConfiguration
func (a *LdapConfigurationsAPIService) PutSystemLdapConfigurationsByIdExecute(r ApiPutSystemLdapConfigurationsByIdRequest) (*LdapConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LdapConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LdapConfigurationsAPIService.PutSystemLdapConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ldapConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ldapConfiguration == nil {
		return localVarReturnValue, nil, reportError("ldapConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ldapConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
