/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// LinkInfosAPIService LinkInfosAPI service
type LinkInfosAPIService service

type ApiGetSystemInfoLinksRequest struct {
	ctx context.Context
	ApiService *LinkInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemInfoLinksRequest) ClientId(clientId string) ApiGetSystemInfoLinksRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) Conditions(conditions string) ApiGetSystemInfoLinksRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) ChildConditions(childConditions string) ApiGetSystemInfoLinksRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoLinksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) OrderBy(orderBy string) ApiGetSystemInfoLinksRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) Fields(fields string) ApiGetSystemInfoLinksRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) Page(page int32) ApiGetSystemInfoLinksRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) PageSize(pageSize int32) ApiGetSystemInfoLinksRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemInfoLinksRequest) PageId(pageId int32) ApiGetSystemInfoLinksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoLinksRequest) Execute() ([]LinkInfo, *http.Response, error) {
	return r.ApiService.GetSystemInfoLinksExecute(r)
}

/*
GetSystemInfoLinks Get List of LinkInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemInfoLinksRequest
*/
func (a *LinkInfosAPIService) GetSystemInfoLinks(ctx context.Context) ApiGetSystemInfoLinksRequest {
	return ApiGetSystemInfoLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []LinkInfo
func (a *LinkInfosAPIService) GetSystemInfoLinksExecute(r ApiGetSystemInfoLinksRequest) ([]LinkInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []LinkInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinkInfosAPIService.GetSystemInfoLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/links"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemInfoLinksByIdRequest struct {
	ctx context.Context
	ApiService *LinkInfosAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) ClientId(clientId string) ApiGetSystemInfoLinksByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) Conditions(conditions string) ApiGetSystemInfoLinksByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) ChildConditions(childConditions string) ApiGetSystemInfoLinksByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoLinksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) OrderBy(orderBy string) ApiGetSystemInfoLinksByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) Fields(fields string) ApiGetSystemInfoLinksByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) Page(page int32) ApiGetSystemInfoLinksByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) PageSize(pageSize int32) ApiGetSystemInfoLinksByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemInfoLinksByIdRequest) PageId(pageId int32) ApiGetSystemInfoLinksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoLinksByIdRequest) Execute() (*LinkInfo, *http.Response, error) {
	return r.ApiService.GetSystemInfoLinksByIdExecute(r)
}

/*
GetSystemInfoLinksById Get LinkInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linkId
 @return ApiGetSystemInfoLinksByIdRequest
*/
func (a *LinkInfosAPIService) GetSystemInfoLinksById(ctx context.Context, id int32) ApiGetSystemInfoLinksByIdRequest {
	return ApiGetSystemInfoLinksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LinkInfo
func (a *LinkInfosAPIService) GetSystemInfoLinksByIdExecute(r ApiGetSystemInfoLinksByIdRequest) (*LinkInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinkInfosAPIService.GetSystemInfoLinksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/links/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemInfoLinksCountRequest struct {
	ctx context.Context
	ApiService *LinkInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemInfoLinksCountRequest) ClientId(clientId string) ApiGetSystemInfoLinksCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) Conditions(conditions string) ApiGetSystemInfoLinksCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) ChildConditions(childConditions string) ApiGetSystemInfoLinksCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemInfoLinksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) OrderBy(orderBy string) ApiGetSystemInfoLinksCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) Fields(fields string) ApiGetSystemInfoLinksCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) Page(page int32) ApiGetSystemInfoLinksCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) PageSize(pageSize int32) ApiGetSystemInfoLinksCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemInfoLinksCountRequest) PageId(pageId int32) ApiGetSystemInfoLinksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemInfoLinksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemInfoLinksCountExecute(r)
}

/*
GetSystemInfoLinksCount Get Count of LinkInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemInfoLinksCountRequest
*/
func (a *LinkInfosAPIService) GetSystemInfoLinksCount(ctx context.Context) ApiGetSystemInfoLinksCountRequest {
	return ApiGetSystemInfoLinksCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *LinkInfosAPIService) GetSystemInfoLinksCountExecute(r ApiGetSystemInfoLinksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinkInfosAPIService.GetSystemInfoLinksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/links/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemInfoLinksByIdResolveurlRequest struct {
	ctx context.Context
	ApiService *LinkInfosAPIService
	id int32
	clientId *string
	linkResolveUrlInfo *LinkResolveUrlInfo
}

// 
func (r ApiPostSystemInfoLinksByIdResolveurlRequest) ClientId(clientId string) ApiPostSystemInfoLinksByIdResolveurlRequest {
	r.clientId = &clientId
	return r
}

// resolveInfo
func (r ApiPostSystemInfoLinksByIdResolveurlRequest) LinkResolveUrlInfo(linkResolveUrlInfo LinkResolveUrlInfo) ApiPostSystemInfoLinksByIdResolveurlRequest {
	r.linkResolveUrlInfo = &linkResolveUrlInfo
	return r
}

func (r ApiPostSystemInfoLinksByIdResolveurlRequest) Execute() (*LinkResolveUrlInfo, *http.Response, error) {
	return r.ApiService.PostSystemInfoLinksByIdResolveurlExecute(r)
}

/*
PostSystemInfoLinksByIdResolveurl Post LinkResolveUrlInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id linkId
 @return ApiPostSystemInfoLinksByIdResolveurlRequest
*/
func (a *LinkInfosAPIService) PostSystemInfoLinksByIdResolveurl(ctx context.Context, id int32) ApiPostSystemInfoLinksByIdResolveurlRequest {
	return ApiPostSystemInfoLinksByIdResolveurlRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return LinkResolveUrlInfo
func (a *LinkInfosAPIService) PostSystemInfoLinksByIdResolveurlExecute(r ApiPostSystemInfoLinksByIdResolveurlRequest) (*LinkResolveUrlInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LinkResolveUrlInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LinkInfosAPIService.PostSystemInfoLinksByIdResolveurl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/info/links/{id}/resolveurl"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.linkResolveUrlInfo == nil {
		return localVarReturnValue, nil, reportError("linkResolveUrlInfo is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.linkResolveUrlInfo
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
