/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// M365ContactSyncMonitoringsAPIService M365ContactSyncMonitoringsAPI service
type M365ContactSyncMonitoringsAPIService service

type ApiDeleteSystemContactsyncMonitoringTypeByIdRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemContactsyncMonitoringTypeByIdRequest) ClientId(clientId string) ApiDeleteSystemContactsyncMonitoringTypeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemContactsyncMonitoringTypeByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemContactsyncMonitoringTypeByIdExecute(r)
}

/*
DeleteSystemContactsyncMonitoringTypeById Delete Async

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id M365ContactSyncMonitoringId
 @return ApiDeleteSystemContactsyncMonitoringTypeByIdRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) DeleteSystemContactsyncMonitoringTypeById(ctx context.Context, id int32) ApiDeleteSystemContactsyncMonitoringTypeByIdRequest {
	return ApiDeleteSystemContactsyncMonitoringTypeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *M365ContactSyncMonitoringsAPIService) DeleteSystemContactsyncMonitoringTypeByIdExecute(r ApiDeleteSystemContactsyncMonitoringTypeByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.DeleteSystemContactsyncMonitoringTypeById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/type/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemContactsyncMonitoringRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) Conditions(conditions string) ApiGetSystemContactsyncMonitoringRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) ChildConditions(childConditions string) ApiGetSystemContactsyncMonitoringRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemContactsyncMonitoringRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) OrderBy(orderBy string) ApiGetSystemContactsyncMonitoringRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) Fields(fields string) ApiGetSystemContactsyncMonitoringRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) Page(page int32) ApiGetSystemContactsyncMonitoringRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) PageSize(pageSize int32) ApiGetSystemContactsyncMonitoringRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) PageId(pageId int32) ApiGetSystemContactsyncMonitoringRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringRequest) ClientId(clientId string) ApiGetSystemContactsyncMonitoringRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemContactsyncMonitoringRequest) Execute() ([]M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.GetSystemContactsyncMonitoringExecute(r)
}

/*
GetSystemContactsyncMonitoring Get List of M365ContactSyncMonitorings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemContactsyncMonitoringRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoring(ctx context.Context) ApiGetSystemContactsyncMonitoringRequest {
	return ApiGetSystemContactsyncMonitoringRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringExecute(r ApiGetSystemContactsyncMonitoringRequest) ([]M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.GetSystemContactsyncMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemContactsyncMonitoringByIdRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) Conditions(conditions string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) ChildConditions(childConditions string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) OrderBy(orderBy string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) Fields(fields string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) Page(page int32) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) PageSize(pageSize int32) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) PageId(pageId int32) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringByIdRequest) ClientId(clientId string) ApiGetSystemContactsyncMonitoringByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemContactsyncMonitoringByIdRequest) Execute() (*M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.GetSystemContactsyncMonitoringByIdExecute(r)
}

/*
GetSystemContactsyncMonitoringById Get M365ContactSyncMonitorings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id M365ContactSyncMonitoringId
 @return ApiGetSystemContactsyncMonitoringByIdRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringById(ctx context.Context, id int32) ApiGetSystemContactsyncMonitoringByIdRequest {
	return ApiGetSystemContactsyncMonitoringByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringByIdExecute(r ApiGetSystemContactsyncMonitoringByIdRequest) (*M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.GetSystemContactsyncMonitoringById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemContactsyncMonitoringCountRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) Conditions(conditions string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) ChildConditions(childConditions string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) OrderBy(orderBy string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) Fields(fields string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) Page(page int32) ApiGetSystemContactsyncMonitoringCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) PageSize(pageSize int32) ApiGetSystemContactsyncMonitoringCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) PageId(pageId int32) ApiGetSystemContactsyncMonitoringCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringCountRequest) ClientId(clientId string) ApiGetSystemContactsyncMonitoringCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemContactsyncMonitoringCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemContactsyncMonitoringCountExecute(r)
}

/*
GetSystemContactsyncMonitoringCount Get Count of M365ContactSyncMonitorings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemContactsyncMonitoringCountRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringCount(ctx context.Context) ApiGetSystemContactsyncMonitoringCountRequest {
	return ApiGetSystemContactsyncMonitoringCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringCountExecute(r ApiGetSystemContactsyncMonitoringCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.GetSystemContactsyncMonitoringCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemContactsyncMonitoringNotificationtypeRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) Conditions(conditions string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) ChildConditions(childConditions string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) OrderBy(orderBy string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) Fields(fields string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) Page(page int32) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) PageSize(pageSize int32) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) PageId(pageId int32) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) ClientId(clientId string) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) Execute() (*M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.GetSystemContactsyncMonitoringNotificationtypeExecute(r)
}

/*
GetSystemContactsyncMonitoringNotificationtype Get M365ContactSyncMonitoringNotification TypeId Async

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemContactsyncMonitoringNotificationtypeRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringNotificationtype(ctx context.Context) ApiGetSystemContactsyncMonitoringNotificationtypeRequest {
	return ApiGetSystemContactsyncMonitoringNotificationtypeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringNotificationtypeExecute(r ApiGetSystemContactsyncMonitoringNotificationtypeRequest) (*M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.GetSystemContactsyncMonitoringNotificationtype")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/notificationtype/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemContactsyncMonitoringTypeByIdRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) Conditions(conditions string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) ChildConditions(childConditions string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) OrderBy(orderBy string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) Fields(fields string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) Page(page int32) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) PageSize(pageSize int32) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) PageId(pageId int32) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) ClientId(clientId string) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemContactsyncMonitoringTypeByIdRequest) Execute() (*M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.GetSystemContactsyncMonitoringTypeByIdExecute(r)
}

/*
GetSystemContactsyncMonitoringTypeById Get M365ContactSyncMonitoring By TypeId Async

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id M365ContactSyncMonitoringId
 @return ApiGetSystemContactsyncMonitoringTypeByIdRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringTypeById(ctx context.Context, id int32) ApiGetSystemContactsyncMonitoringTypeByIdRequest {
	return ApiGetSystemContactsyncMonitoringTypeByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) GetSystemContactsyncMonitoringTypeByIdExecute(r ApiGetSystemContactsyncMonitoringTypeByIdRequest) (*M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.GetSystemContactsyncMonitoringTypeById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/type/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemContactsyncMonitoringRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	clientId *string
}

// 
func (r ApiPatchSystemContactsyncMonitoringRequest) ClientId(clientId string) ApiPatchSystemContactsyncMonitoringRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemContactsyncMonitoringRequest) Execute() (*M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.PatchSystemContactsyncMonitoringExecute(r)
}

/*
PatchSystemContactsyncMonitoring Update Async

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPatchSystemContactsyncMonitoringRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) PatchSystemContactsyncMonitoring(ctx context.Context) ApiPatchSystemContactsyncMonitoringRequest {
	return ApiPatchSystemContactsyncMonitoringRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) PatchSystemContactsyncMonitoringExecute(r ApiPatchSystemContactsyncMonitoringRequest) (*M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.PatchSystemContactsyncMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemContactsyncMonitoringRequest struct {
	ctx context.Context
	ApiService *M365ContactSyncMonitoringsAPIService
	clientId *string
}

// 
func (r ApiPostSystemContactsyncMonitoringRequest) ClientId(clientId string) ApiPostSystemContactsyncMonitoringRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemContactsyncMonitoringRequest) Execute() (*M365ContactSyncMonitoring, *http.Response, error) {
	return r.ApiService.PostSystemContactsyncMonitoringExecute(r)
}

/*
PostSystemContactsyncMonitoring Create Async

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemContactsyncMonitoringRequest
*/
func (a *M365ContactSyncMonitoringsAPIService) PostSystemContactsyncMonitoring(ctx context.Context) ApiPostSystemContactsyncMonitoringRequest {
	return ApiPostSystemContactsyncMonitoringRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return M365ContactSyncMonitoring
func (a *M365ContactSyncMonitoringsAPIService) PostSystemContactsyncMonitoringExecute(r ApiPostSystemContactsyncMonitoringRequest) (*M365ContactSyncMonitoring, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *M365ContactSyncMonitoring
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "M365ContactSyncMonitoringsAPIService.PostSystemContactsyncMonitoring")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/contactsync/monitoring/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
