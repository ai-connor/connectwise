/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagedDeviceAccountsAPIService ManagedDeviceAccountsAPI service
type ManagedDeviceAccountsAPIService service

type ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest struct {
	ctx context.Context
	ApiService *ManagedDeviceAccountsAPIService
	parentId int32
	clientId *string
	idCollection *IdCollection
}

// 
func (r ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	r.clientId = &clientId
	return r
}

// managedDeviceAccounts
func (r ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest) IdCollection(idCollection IdCollection) ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	r.idCollection = &idCollection
	return r
}

func (r ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdManagedDeviceAccountsBulkExecute(r)
}

/*
DeleteSystemMembersByParentIdManagedDeviceAccountsBulk Delete BulkResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest
*/
func (a *ManagedDeviceAccountsAPIService) DeleteSystemMembersByParentIdManagedDeviceAccountsBulk(ctx context.Context, parentId int32) ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	return ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BulkResult
func (a *ManagedDeviceAccountsAPIService) DeleteSystemMembersByParentIdManagedDeviceAccountsBulkExecute(r ApiDeleteSystemMembersByParentIdManagedDeviceAccountsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDeviceAccountsAPIService.DeleteSystemMembersByParentIdManagedDeviceAccountsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/managedDeviceAccounts/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.idCollection == nil {
		return localVarReturnValue, nil, reportError("idCollection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.idCollection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest struct {
	ctx context.Context
	ApiService *ManagedDeviceAccountsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) Fields(fields string) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) Page(page int32) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) Execute() ([]ManagedDeviceAccount, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdManagedDeviceAccountsExecute(r)
}

/*
GetSystemMembersByParentIdManagedDeviceAccounts Get List of ManagedDeviceAccount

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest
*/
func (a *ManagedDeviceAccountsAPIService) GetSystemMembersByParentIdManagedDeviceAccounts(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest {
	return ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ManagedDeviceAccount
func (a *ManagedDeviceAccountsAPIService) GetSystemMembersByParentIdManagedDeviceAccountsExecute(r ApiGetSystemMembersByParentIdManagedDeviceAccountsRequest) ([]ManagedDeviceAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagedDeviceAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDeviceAccountsAPIService.GetSystemMembersByParentIdManagedDeviceAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/managedDeviceAccounts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest struct {
	ctx context.Context
	ApiService *ManagedDeviceAccountsAPIService
	parentId int32
	clientId *string
	managedDeviceAccount *[]ManagedDeviceAccount
}

// 
func (r ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	r.clientId = &clientId
	return r
}

// List of ManagedDeviceAccount
func (r ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest) ManagedDeviceAccount(managedDeviceAccount []ManagedDeviceAccount) ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	r.managedDeviceAccount = &managedDeviceAccount
	return r
}

func (r ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdManagedDeviceAccountsBulkExecute(r)
}

/*
PutSystemMembersByParentIdManagedDeviceAccountsBulk Put BulkResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest
*/
func (a *ManagedDeviceAccountsAPIService) PutSystemMembersByParentIdManagedDeviceAccountsBulk(ctx context.Context, parentId int32) ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest {
	return ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return BulkResult
func (a *ManagedDeviceAccountsAPIService) PutSystemMembersByParentIdManagedDeviceAccountsBulkExecute(r ApiPutSystemMembersByParentIdManagedDeviceAccountsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDeviceAccountsAPIService.PutSystemMembersByParentIdManagedDeviceAccountsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/managedDeviceAccounts/bulk"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managedDeviceAccount == nil {
		return localVarReturnValue, nil, reportError("managedDeviceAccount is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managedDeviceAccount
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
