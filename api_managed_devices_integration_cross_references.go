/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagedDevicesIntegrationCrossReferencesAPIService ManagedDevicesIntegrationCrossReferencesAPI service
type ManagedDevicesIntegrationCrossReferencesAPIService service

type ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Execute() (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.DeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r)
}

/*
DeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById Delete ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id crossReferenceId
 @param parentId managedDevicesIntegrationId
 @return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.DeleteCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) Execute() ([]ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdCrossReferences Get List of ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferences(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) ([]ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Execute() (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById Get ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id crossReferenceId
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(ctx context.Context, id int32, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCount Get Count of ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCount(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.GetCompanyManagedDevicesIntegrationsByParentIdCrossReferencesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ClientId(clientId string) ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Execute() (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.PatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r)
}

/*
PatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById Patch ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id crossReferenceId
 @param parentId managedDevicesIntegrationId
 @return ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	return ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r ApiPatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.PatchCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	parentId int32
	managedDevicesIntegrationCrossReference *ManagedDevicesIntegrationCrossReference
	clientId *string
}

// crossReference
func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) ManagedDevicesIntegrationCrossReference(managedDevicesIntegrationCrossReference ManagedDevicesIntegrationCrossReference) ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.managedDevicesIntegrationCrossReference = &managedDevicesIntegrationCrossReference
	return r
}

// 
func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) ClientId(clientId string) ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) Execute() (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.PostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesExecute(r)
}

/*
PostCompanyManagedDevicesIntegrationsByParentIdCrossReferences Post ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PostCompanyManagedDevicesIntegrationsByParentIdCrossReferences(ctx context.Context, parentId int32) ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest {
	return ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesExecute(r ApiPostCompanyManagedDevicesIntegrationsByParentIdCrossReferencesRequest) (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.PostCompanyManagedDevicesIntegrationsByParentIdCrossReferences")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedDevicesIntegrationCrossReference == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationCrossReference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managedDevicesIntegrationCrossReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationCrossReferencesAPIService
	id int32
	parentId int32
	managedDevicesIntegrationCrossReference *ManagedDevicesIntegrationCrossReference
	clientId *string
}

// crossReference
func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ManagedDevicesIntegrationCrossReference(managedDevicesIntegrationCrossReference ManagedDevicesIntegrationCrossReference) ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.managedDevicesIntegrationCrossReference = &managedDevicesIntegrationCrossReference
	return r
}

// 
func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) ClientId(clientId string) ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) Execute() (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	return r.ApiService.PutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r)
}

/*
PutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById Put ManagedDevicesIntegrationCrossReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id crossReferenceId
 @param parentId managedDevicesIntegrationId
 @return ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest
*/
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById(ctx context.Context, id int32, parentId int32) ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest {
	return ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationCrossReference
func (a *ManagedDevicesIntegrationCrossReferencesAPIService) PutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdExecute(r ApiPutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesByIdRequest) (*ManagedDevicesIntegrationCrossReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationCrossReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationCrossReferencesAPIService.PutCompanyManagedDevicesIntegrationsByParentIdCrossReferencesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/crossReferences/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedDevicesIntegrationCrossReference == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationCrossReference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managedDevicesIntegrationCrossReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
