/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagedDevicesIntegrationLoginsAPIService ManagedDevicesIntegrationLoginsAPI service
type ManagedDevicesIntegrationLoginsAPIService service

type ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Execute() (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.DeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r)
}

/*
DeleteCompanyManagedDevicesIntegrationsByParentIdLoginsById Delete ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id loginId
 @param parentId managedDevicesIntegrationId
 @return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdLoginsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.DeleteCompanyManagedDevicesIntegrationsByParentIdLoginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) Execute() ([]ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdLoginsExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdLogins Get List of ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLogins(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLoginsExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) ([]ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdLogins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Execute() (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdLoginsById Get ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id loginId
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLoginsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdLoginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdLoginsCountExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdLoginsCount Get Count of ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLoginsCount(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagedDevicesIntegrationLoginsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdLoginsCountExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdLoginsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdLoginsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Execute() (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.PatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r)
}

/*
PatchCompanyManagedDevicesIntegrationsByParentIdLoginsById Patch ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id loginId
 @param parentId managedDevicesIntegrationId
 @return ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdLoginsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	return ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r ApiPatchCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.PatchCompanyManagedDevicesIntegrationsByParentIdLoginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	parentId int32
	managedDevicesIntegrationLogin *ManagedDevicesIntegrationLogin
	clientId *string
}

// login
func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) ManagedDevicesIntegrationLogin(managedDevicesIntegrationLogin ManagedDevicesIntegrationLogin) ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.managedDevicesIntegrationLogin = &managedDevicesIntegrationLogin
	return r
}

// 
func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) ClientId(clientId string) ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) Execute() (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.PostCompanyManagedDevicesIntegrationsByParentIdLoginsExecute(r)
}

/*
PostCompanyManagedDevicesIntegrationsByParentIdLogins Post ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managedDevicesIntegrationId
 @return ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) PostCompanyManagedDevicesIntegrationsByParentIdLogins(ctx context.Context, parentId int32) ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest {
	return ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) PostCompanyManagedDevicesIntegrationsByParentIdLoginsExecute(r ApiPostCompanyManagedDevicesIntegrationsByParentIdLoginsRequest) (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.PostCompanyManagedDevicesIntegrationsByParentIdLogins")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedDevicesIntegrationLogin == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationLogin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managedDevicesIntegrationLogin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationLoginsAPIService
	id int32
	parentId int32
	managedDevicesIntegrationLogin *ManagedDevicesIntegrationLogin
	clientId *string
}

// login
func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ManagedDevicesIntegrationLogin(managedDevicesIntegrationLogin ManagedDevicesIntegrationLogin) ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.managedDevicesIntegrationLogin = &managedDevicesIntegrationLogin
	return r
}

// 
func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) ClientId(clientId string) ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) Execute() (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	return r.ApiService.PutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r)
}

/*
PutCompanyManagedDevicesIntegrationsByParentIdLoginsById Put ManagedDevicesIntegrationLogin

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id loginId
 @param parentId managedDevicesIntegrationId
 @return ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest
*/
func (a *ManagedDevicesIntegrationLoginsAPIService) PutCompanyManagedDevicesIntegrationsByParentIdLoginsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest {
	return ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegrationLogin
func (a *ManagedDevicesIntegrationLoginsAPIService) PutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdExecute(r ApiPutCompanyManagedDevicesIntegrationsByParentIdLoginsByIdRequest) (*ManagedDevicesIntegrationLogin, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegrationLogin
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationLoginsAPIService.PutCompanyManagedDevicesIntegrationsByParentIdLoginsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/logins/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedDevicesIntegrationLogin == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationLogin is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managedDevicesIntegrationLogin
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
