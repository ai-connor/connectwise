/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagedDevicesIntegrationsAPIService ManagedDevicesIntegrationsAPI service
type ManagedDevicesIntegrationsAPIService service

type ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyManagedDevicesIntegrationsByIdExecute(r)
}

/*
DeleteCompanyManagedDevicesIntegrationsById Delete ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) DeleteCompanyManagedDevicesIntegrationsById(ctx context.Context, id int32) ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest {
	return ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ManagedDevicesIntegrationsAPIService) DeleteCompanyManagedDevicesIntegrationsByIdExecute(r ApiDeleteCompanyManagedDevicesIntegrationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.DeleteCompanyManagedDevicesIntegrationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsRequest) Execute() ([]ManagedDevicesIntegration, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsExecute(r)
}

/*
GetCompanyManagedDevicesIntegrations Get List of ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyManagedDevicesIntegrationsRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrations(ctx context.Context) ApiGetCompanyManagedDevicesIntegrationsRequest {
	return ApiGetCompanyManagedDevicesIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ManagedDevicesIntegration
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsExecute(r ApiGetCompanyManagedDevicesIntegrationsRequest) ([]ManagedDevicesIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagedDevicesIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.GetCompanyManagedDevicesIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) Execute() (*ManagedDevicesIntegration, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByIdExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsById Get ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByIdRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsById(ctx context.Context, id int32) ApiGetCompanyManagedDevicesIntegrationsByIdRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegration
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsByIdExecute(r ApiGetCompanyManagedDevicesIntegrationsByIdRequest) (*ManagedDevicesIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.GetCompanyManagedDevicesIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByIdUsagesExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsByIdUsages(ctx context.Context, id int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsByIdUsagesExecute(r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.GetCompanyManagedDevicesIntegrationsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByIdUsagesListExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsByIdUsagesListExecute(r ApiGetCompanyManagedDevicesIntegrationsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.GetCompanyManagedDevicesIntegrationsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsCountRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsCountExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsCount Get Count of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyManagedDevicesIntegrationsCountRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsCount(ctx context.Context) ApiGetCompanyManagedDevicesIntegrationsCountRequest {
	return ApiGetCompanyManagedDevicesIntegrationsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagedDevicesIntegrationsAPIService) GetCompanyManagedDevicesIntegrationsCountExecute(r ApiGetCompanyManagedDevicesIntegrationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.GetCompanyManagedDevicesIntegrationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagedDevicesIntegrationsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyManagedDevicesIntegrationsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagedDevicesIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyManagedDevicesIntegrationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagedDevicesIntegrationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyManagedDevicesIntegrationsByIdRequest) Execute() (*ManagedDevicesIntegration, *http.Response, error) {
	return r.ApiService.PatchCompanyManagedDevicesIntegrationsByIdExecute(r)
}

/*
PatchCompanyManagedDevicesIntegrationsById Patch ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiPatchCompanyManagedDevicesIntegrationsByIdRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) PatchCompanyManagedDevicesIntegrationsById(ctx context.Context, id int32) ApiPatchCompanyManagedDevicesIntegrationsByIdRequest {
	return ApiPatchCompanyManagedDevicesIntegrationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegration
func (a *ManagedDevicesIntegrationsAPIService) PatchCompanyManagedDevicesIntegrationsByIdExecute(r ApiPatchCompanyManagedDevicesIntegrationsByIdRequest) (*ManagedDevicesIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.PatchCompanyManagedDevicesIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagedDevicesIntegrationsRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	clientId *string
	managedDevicesIntegration *ManagedDevicesIntegration
}

// 
func (r ApiPostCompanyManagedDevicesIntegrationsRequest) ClientId(clientId string) ApiPostCompanyManagedDevicesIntegrationsRequest {
	r.clientId = &clientId
	return r
}

// managedDevicesIntegration
func (r ApiPostCompanyManagedDevicesIntegrationsRequest) ManagedDevicesIntegration(managedDevicesIntegration ManagedDevicesIntegration) ApiPostCompanyManagedDevicesIntegrationsRequest {
	r.managedDevicesIntegration = &managedDevicesIntegration
	return r
}

func (r ApiPostCompanyManagedDevicesIntegrationsRequest) Execute() (*ManagedDevicesIntegration, *http.Response, error) {
	return r.ApiService.PostCompanyManagedDevicesIntegrationsExecute(r)
}

/*
PostCompanyManagedDevicesIntegrations Post ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyManagedDevicesIntegrationsRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) PostCompanyManagedDevicesIntegrations(ctx context.Context) ApiPostCompanyManagedDevicesIntegrationsRequest {
	return ApiPostCompanyManagedDevicesIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegration
func (a *ManagedDevicesIntegrationsAPIService) PostCompanyManagedDevicesIntegrationsExecute(r ApiPostCompanyManagedDevicesIntegrationsRequest) (*ManagedDevicesIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.PostCompanyManagedDevicesIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managedDevicesIntegration == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managedDevicesIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagedDevicesIntegrationsByIdRequest struct {
	ctx context.Context
	ApiService *ManagedDevicesIntegrationsAPIService
	id int32
	clientId *string
	managedDevicesIntegration *ManagedDevicesIntegration
}

// 
func (r ApiPutCompanyManagedDevicesIntegrationsByIdRequest) ClientId(clientId string) ApiPutCompanyManagedDevicesIntegrationsByIdRequest {
	r.clientId = &clientId
	return r
}

// managedDevicesIntegration
func (r ApiPutCompanyManagedDevicesIntegrationsByIdRequest) ManagedDevicesIntegration(managedDevicesIntegration ManagedDevicesIntegration) ApiPutCompanyManagedDevicesIntegrationsByIdRequest {
	r.managedDevicesIntegration = &managedDevicesIntegration
	return r
}

func (r ApiPutCompanyManagedDevicesIntegrationsByIdRequest) Execute() (*ManagedDevicesIntegration, *http.Response, error) {
	return r.ApiService.PutCompanyManagedDevicesIntegrationsByIdExecute(r)
}

/*
PutCompanyManagedDevicesIntegrationsById Put ManagedDevicesIntegration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managedDevicesIntegrationId
 @return ApiPutCompanyManagedDevicesIntegrationsByIdRequest
*/
func (a *ManagedDevicesIntegrationsAPIService) PutCompanyManagedDevicesIntegrationsById(ctx context.Context, id int32) ApiPutCompanyManagedDevicesIntegrationsByIdRequest {
	return ApiPutCompanyManagedDevicesIntegrationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagedDevicesIntegration
func (a *ManagedDevicesIntegrationsAPIService) PutCompanyManagedDevicesIntegrationsByIdExecute(r ApiPutCompanyManagedDevicesIntegrationsByIdRequest) (*ManagedDevicesIntegration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagedDevicesIntegration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationsAPIService.PutCompanyManagedDevicesIntegrationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managedDevicesIntegration == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managedDevicesIntegration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
