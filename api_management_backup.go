/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagementBackupAPIService ManagementBackupAPI service
type ManagementBackupAPIService service

type ApiDeleteCompanyManagementBackupsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteCompanyManagementBackupsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagementBackupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagementBackupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyManagementBackupsByIdExecute(r)
}

/*
DeleteCompanyManagementBackupsById Delete ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementBackupId
 @return ApiDeleteCompanyManagementBackupsByIdRequest
*/
func (a *ManagementBackupAPIService) DeleteCompanyManagementBackupsById(ctx context.Context, id int32) ApiDeleteCompanyManagementBackupsByIdRequest {
	return ApiDeleteCompanyManagementBackupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ManagementBackupAPIService) DeleteCompanyManagementBackupsByIdExecute(r ApiDeleteCompanyManagementBackupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.DeleteCompanyManagementBackupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyManagementBackupsRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagementBackupsRequest) Conditions(conditions string) ApiGetCompanyManagementBackupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) ChildConditions(childConditions string) ApiGetCompanyManagementBackupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementBackupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) OrderBy(orderBy string) ApiGetCompanyManagementBackupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) Fields(fields string) ApiGetCompanyManagementBackupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) Page(page int32) ApiGetCompanyManagementBackupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) PageSize(pageSize int32) ApiGetCompanyManagementBackupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) PageId(pageId int32) ApiGetCompanyManagementBackupsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagementBackupsRequest) ClientId(clientId string) ApiGetCompanyManagementBackupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementBackupsRequest) Execute() ([]ManagementBackup, *http.Response, error) {
	return r.ApiService.GetCompanyManagementBackupsExecute(r)
}

/*
GetCompanyManagementBackups Get List of ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyManagementBackupsRequest
*/
func (a *ManagementBackupAPIService) GetCompanyManagementBackups(ctx context.Context) ApiGetCompanyManagementBackupsRequest {
	return ApiGetCompanyManagementBackupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ManagementBackup
func (a *ManagementBackupAPIService) GetCompanyManagementBackupsExecute(r ApiGetCompanyManagementBackupsRequest) ([]ManagementBackup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagementBackup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.GetCompanyManagementBackups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementBackupsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) Conditions(conditions string) ApiGetCompanyManagementBackupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagementBackupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementBackupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagementBackupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) Fields(fields string) ApiGetCompanyManagementBackupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) Page(page int32) ApiGetCompanyManagementBackupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagementBackupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) PageId(pageId int32) ApiGetCompanyManagementBackupsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagementBackupsByIdRequest) ClientId(clientId string) ApiGetCompanyManagementBackupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementBackupsByIdRequest) Execute() (*ManagementBackup, *http.Response, error) {
	return r.ApiService.GetCompanyManagementBackupsByIdExecute(r)
}

/*
GetCompanyManagementBackupsById Get ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementBackupId
 @return ApiGetCompanyManagementBackupsByIdRequest
*/
func (a *ManagementBackupAPIService) GetCompanyManagementBackupsById(ctx context.Context, id int32) ApiGetCompanyManagementBackupsByIdRequest {
	return ApiGetCompanyManagementBackupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementBackup
func (a *ManagementBackupAPIService) GetCompanyManagementBackupsByIdExecute(r ApiGetCompanyManagementBackupsByIdRequest) (*ManagementBackup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementBackup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.GetCompanyManagementBackupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementBackupsCountRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) Conditions(conditions string) ApiGetCompanyManagementBackupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagementBackupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementBackupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagementBackupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) Fields(fields string) ApiGetCompanyManagementBackupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) Page(page int32) ApiGetCompanyManagementBackupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagementBackupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) PageId(pageId int32) ApiGetCompanyManagementBackupsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyManagementBackupsCountRequest) ClientId(clientId string) ApiGetCompanyManagementBackupsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementBackupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagementBackupsCountExecute(r)
}

/*
GetCompanyManagementBackupsCount Get Count of ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyManagementBackupsCountRequest
*/
func (a *ManagementBackupAPIService) GetCompanyManagementBackupsCount(ctx context.Context) ApiGetCompanyManagementBackupsCountRequest {
	return ApiGetCompanyManagementBackupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagementBackupAPIService) GetCompanyManagementBackupsCountExecute(r ApiGetCompanyManagementBackupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.GetCompanyManagementBackupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagementBackupsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyManagementBackupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagementBackupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyManagementBackupsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagementBackupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyManagementBackupsByIdRequest) Execute() (*ManagementBackup, *http.Response, error) {
	return r.ApiService.PatchCompanyManagementBackupsByIdExecute(r)
}

/*
PatchCompanyManagementBackupsById Patch ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementBackupId
 @return ApiPatchCompanyManagementBackupsByIdRequest
*/
func (a *ManagementBackupAPIService) PatchCompanyManagementBackupsById(ctx context.Context, id int32) ApiPatchCompanyManagementBackupsByIdRequest {
	return ApiPatchCompanyManagementBackupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementBackup
func (a *ManagementBackupAPIService) PatchCompanyManagementBackupsByIdExecute(r ApiPatchCompanyManagementBackupsByIdRequest) (*ManagementBackup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementBackup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.PatchCompanyManagementBackupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagementBackupsRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	managementBackup *ManagementBackup
	clientId *string
}

// managementBackup
func (r ApiPostCompanyManagementBackupsRequest) ManagementBackup(managementBackup ManagementBackup) ApiPostCompanyManagementBackupsRequest {
	r.managementBackup = &managementBackup
	return r
}

// 
func (r ApiPostCompanyManagementBackupsRequest) ClientId(clientId string) ApiPostCompanyManagementBackupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyManagementBackupsRequest) Execute() (*ManagementBackup, *http.Response, error) {
	return r.ApiService.PostCompanyManagementBackupsExecute(r)
}

/*
PostCompanyManagementBackups Post ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostCompanyManagementBackupsRequest
*/
func (a *ManagementBackupAPIService) PostCompanyManagementBackups(ctx context.Context) ApiPostCompanyManagementBackupsRequest {
	return ApiPostCompanyManagementBackupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ManagementBackup
func (a *ManagementBackupAPIService) PostCompanyManagementBackupsExecute(r ApiPostCompanyManagementBackupsRequest) (*ManagementBackup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementBackup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.PostCompanyManagementBackups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managementBackup == nil {
		return localVarReturnValue, nil, reportError("managementBackup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managementBackup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagementBackupsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementBackupAPIService
	id int32
	managementBackup *ManagementBackup
	clientId *string
}

// managementBackup
func (r ApiPutCompanyManagementBackupsByIdRequest) ManagementBackup(managementBackup ManagementBackup) ApiPutCompanyManagementBackupsByIdRequest {
	r.managementBackup = &managementBackup
	return r
}

// 
func (r ApiPutCompanyManagementBackupsByIdRequest) ClientId(clientId string) ApiPutCompanyManagementBackupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyManagementBackupsByIdRequest) Execute() (*ManagementBackup, *http.Response, error) {
	return r.ApiService.PutCompanyManagementBackupsByIdExecute(r)
}

/*
PutCompanyManagementBackupsById Put ManagementBackup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementBackupId
 @return ApiPutCompanyManagementBackupsByIdRequest
*/
func (a *ManagementBackupAPIService) PutCompanyManagementBackupsById(ctx context.Context, id int32) ApiPutCompanyManagementBackupsByIdRequest {
	return ApiPutCompanyManagementBackupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementBackup
func (a *ManagementBackupAPIService) PutCompanyManagementBackupsByIdExecute(r ApiPutCompanyManagementBackupsByIdRequest) (*ManagementBackup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementBackup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementBackupAPIService.PutCompanyManagementBackupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementBackups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managementBackup == nil {
		return localVarReturnValue, nil, reportError("managementBackup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managementBackup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
