/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagementItSolutionAgreementInterfaceParametersAPIService ManagementItSolutionAgreementInterfaceParametersAPI service
type ManagementItSolutionAgreementInterfaceParametersAPIService service

type ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Execute() (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.DeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r)
}

/*
DeleteCompanyManagementItSolutionsByParentIdManagementProductsById Delete ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementProductId
 @param parentId managementItSolutionId
 @return ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) DeleteCompanyManagementItSolutionsByParentIdManagementProductsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	return ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) DeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r ApiDeleteCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.DeleteCompanyManagementItSolutionsByParentIdManagementProductsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) Execute() ([]ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByParentIdManagementProductsExecute(r)
}

/*
GetCompanyManagementItSolutionsByParentIdManagementProducts Get List of ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managementItSolutionId
 @return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProducts(ctx context.Context, parentId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProductsExecute(r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsRequest) ([]ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.GetCompanyManagementItSolutionsByParentIdManagementProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Execute() (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r)
}

/*
GetCompanyManagementItSolutionsByParentIdManagementProductsById Get ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementProductId
 @param parentId managementItSolutionId
 @return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProductsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.GetCompanyManagementItSolutionsByParentIdManagementProductsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByParentIdManagementProductsCountExecute(r)
}

/*
GetCompanyManagementItSolutionsByParentIdManagementProductsCount Get Count of ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managementItSolutionId
 @return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProductsCount(ctx context.Context, parentId int32) ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest {
	return ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) GetCompanyManagementItSolutionsByParentIdManagementProductsCountExecute(r ApiGetCompanyManagementItSolutionsByParentIdManagementProductsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.GetCompanyManagementItSolutionsByParentIdManagementProductsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Execute() (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.PatchCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r)
}

/*
PatchCompanyManagementItSolutionsByParentIdManagementProductsById Patch ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementProductId
 @param parentId managementItSolutionId
 @return ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PatchCompanyManagementItSolutionsByParentIdManagementProductsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	return ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PatchCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r ApiPatchCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.PatchCompanyManagementItSolutionsByParentIdManagementProductsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	parentId int32
	clientId *string
	managementItSolutionAgreementInterfaceParameter *ManagementItSolutionAgreementInterfaceParameter
}

// 
func (r ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest) ClientId(clientId string) ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.clientId = &clientId
	return r
}

// managementProduct
func (r ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest) ManagementItSolutionAgreementInterfaceParameter(managementItSolutionAgreementInterfaceParameter ManagementItSolutionAgreementInterfaceParameter) ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	r.managementItSolutionAgreementInterfaceParameter = &managementItSolutionAgreementInterfaceParameter
	return r
}

func (r ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest) Execute() (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.PostCompanyManagementItSolutionsByParentIdManagementProductsExecute(r)
}

/*
PostCompanyManagementItSolutionsByParentIdManagementProducts Post ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId managementItSolutionId
 @return ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PostCompanyManagementItSolutionsByParentIdManagementProducts(ctx context.Context, parentId int32) ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest {
	return ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PostCompanyManagementItSolutionsByParentIdManagementProductsExecute(r ApiPostCompanyManagementItSolutionsByParentIdManagementProductsRequest) (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.PostCompanyManagementItSolutionsByParentIdManagementProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementItSolutionAgreementInterfaceParameter == nil {
		return localVarReturnValue, nil, reportError("managementItSolutionAgreementInterfaceParameter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementItSolutionAgreementInterfaceParameter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest struct {
	ctx context.Context
	ApiService *ManagementItSolutionAgreementInterfaceParametersAPIService
	id int32
	parentId int32
	clientId *string
	managementItSolutionAgreementInterfaceParameter *ManagementItSolutionAgreementInterfaceParameter
}

// 
func (r ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ClientId(clientId string) ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.clientId = &clientId
	return r
}

// managementProduct
func (r ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) ManagementItSolutionAgreementInterfaceParameter(managementItSolutionAgreementInterfaceParameter ManagementItSolutionAgreementInterfaceParameter) ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	r.managementItSolutionAgreementInterfaceParameter = &managementItSolutionAgreementInterfaceParameter
	return r
}

func (r ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) Execute() (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	return r.ApiService.PutCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r)
}

/*
PutCompanyManagementItSolutionsByParentIdManagementProductsById Put ManagementItSolutionAgreementInterfaceParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementProductId
 @param parentId managementItSolutionId
 @return ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest
*/
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PutCompanyManagementItSolutionsByParentIdManagementProductsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest {
	return ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementItSolutionAgreementInterfaceParameter
func (a *ManagementItSolutionAgreementInterfaceParametersAPIService) PutCompanyManagementItSolutionsByParentIdManagementProductsByIdExecute(r ApiPutCompanyManagementItSolutionsByParentIdManagementProductsByIdRequest) (*ManagementItSolutionAgreementInterfaceParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementItSolutionAgreementInterfaceParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionAgreementInterfaceParametersAPIService.PutCompanyManagementItSolutionsByParentIdManagementProductsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{parentId}/managementProducts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementItSolutionAgreementInterfaceParameter == nil {
		return localVarReturnValue, nil, reportError("managementItSolutionAgreementInterfaceParameter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementItSolutionAgreementInterfaceParameter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
