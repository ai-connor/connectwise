/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagementNetworksSecurityAPIService ManagementNetworksSecurityAPI service
type ManagementNetworksSecurityAPIService service

type ApiDeleteSystemManagementNetworkSecuritiesByIdRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemManagementNetworkSecuritiesByIdRequest) ClientId(clientId string) ApiDeleteSystemManagementNetworkSecuritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemManagementNetworkSecuritiesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemManagementNetworkSecuritiesByIdExecute(r)
}

/*
DeleteSystemManagementNetworkSecuritiesById Delete ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementNetworkSecurityId
 @return ApiDeleteSystemManagementNetworkSecuritiesByIdRequest
*/
func (a *ManagementNetworksSecurityAPIService) DeleteSystemManagementNetworkSecuritiesById(ctx context.Context, id int32) ApiDeleteSystemManagementNetworkSecuritiesByIdRequest {
	return ApiDeleteSystemManagementNetworkSecuritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ManagementNetworksSecurityAPIService) DeleteSystemManagementNetworkSecuritiesByIdExecute(r ApiDeleteSystemManagementNetworkSecuritiesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.DeleteSystemManagementNetworkSecuritiesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemManagementNetworkSecuritiesRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) Conditions(conditions string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) ChildConditions(childConditions string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) OrderBy(orderBy string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) Fields(fields string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) Page(page int32) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) PageSize(pageSize int32) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) PageId(pageId int32) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesRequest) ClientId(clientId string) ApiGetSystemManagementNetworkSecuritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemManagementNetworkSecuritiesRequest) Execute() ([]ManagementNetworkSecurity, *http.Response, error) {
	return r.ApiService.GetSystemManagementNetworkSecuritiesExecute(r)
}

/*
GetSystemManagementNetworkSecurities Get List of ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemManagementNetworkSecuritiesRequest
*/
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecurities(ctx context.Context) ApiGetSystemManagementNetworkSecuritiesRequest {
	return ApiGetSystemManagementNetworkSecuritiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ManagementNetworkSecurity
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesExecute(r ApiGetSystemManagementNetworkSecuritiesRequest) ([]ManagementNetworkSecurity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagementNetworkSecurity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.GetSystemManagementNetworkSecurities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemManagementNetworkSecuritiesByIdRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) Conditions(conditions string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) ChildConditions(childConditions string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) OrderBy(orderBy string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) Fields(fields string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) Page(page int32) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) PageSize(pageSize int32) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) PageId(pageId int32) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) ClientId(clientId string) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemManagementNetworkSecuritiesByIdRequest) Execute() (*ManagementNetworkSecurity, *http.Response, error) {
	return r.ApiService.GetSystemManagementNetworkSecuritiesByIdExecute(r)
}

/*
GetSystemManagementNetworkSecuritiesById Get ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementNetworkSecurityId
 @return ApiGetSystemManagementNetworkSecuritiesByIdRequest
*/
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesById(ctx context.Context, id int32) ApiGetSystemManagementNetworkSecuritiesByIdRequest {
	return ApiGetSystemManagementNetworkSecuritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementNetworkSecurity
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesByIdExecute(r ApiGetSystemManagementNetworkSecuritiesByIdRequest) (*ManagementNetworkSecurity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementNetworkSecurity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.GetSystemManagementNetworkSecuritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) Conditions(conditions string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) ChildConditions(childConditions string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) OrderBy(orderBy string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) Fields(fields string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) Page(page int32) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) PageSize(pageSize int32) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) PageId(pageId int32) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) ClientId(clientId string) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.GetSystemManagementNetworkSecuritiesByIdTestCredentialsExecute(r)
}

/*
GetSystemManagementNetworkSecuritiesByIdTestCredentials Get SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementNetworkSecurityId
 @return ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest
*/
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesByIdTestCredentials(ctx context.Context, id int32) ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest {
	return ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesByIdTestCredentialsExecute(r ApiGetSystemManagementNetworkSecuritiesByIdTestCredentialsRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.GetSystemManagementNetworkSecuritiesByIdTestCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/{id}/testCredentials"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemManagementNetworkSecuritiesCountRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) Conditions(conditions string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) ChildConditions(childConditions string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) OrderBy(orderBy string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) Fields(fields string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) Page(page int32) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) PageSize(pageSize int32) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) PageId(pageId int32) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) ClientId(clientId string) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemManagementNetworkSecuritiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemManagementNetworkSecuritiesCountExecute(r)
}

/*
GetSystemManagementNetworkSecuritiesCount Get Count of ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemManagementNetworkSecuritiesCountRequest
*/
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesCount(ctx context.Context) ApiGetSystemManagementNetworkSecuritiesCountRequest {
	return ApiGetSystemManagementNetworkSecuritiesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ManagementNetworksSecurityAPIService) GetSystemManagementNetworkSecuritiesCountExecute(r ApiGetSystemManagementNetworkSecuritiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.GetSystemManagementNetworkSecuritiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemManagementNetworkSecuritiesByIdRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemManagementNetworkSecuritiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemManagementNetworkSecuritiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemManagementNetworkSecuritiesByIdRequest) ClientId(clientId string) ApiPatchSystemManagementNetworkSecuritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemManagementNetworkSecuritiesByIdRequest) Execute() (*ManagementNetworkSecurity, *http.Response, error) {
	return r.ApiService.PatchSystemManagementNetworkSecuritiesByIdExecute(r)
}

/*
PatchSystemManagementNetworkSecuritiesById Patch ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementNetworkSecurityId
 @return ApiPatchSystemManagementNetworkSecuritiesByIdRequest
*/
func (a *ManagementNetworksSecurityAPIService) PatchSystemManagementNetworkSecuritiesById(ctx context.Context, id int32) ApiPatchSystemManagementNetworkSecuritiesByIdRequest {
	return ApiPatchSystemManagementNetworkSecuritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementNetworkSecurity
func (a *ManagementNetworksSecurityAPIService) PatchSystemManagementNetworkSecuritiesByIdExecute(r ApiPatchSystemManagementNetworkSecuritiesByIdRequest) (*ManagementNetworkSecurity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementNetworkSecurity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.PatchSystemManagementNetworkSecuritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemManagementNetworkSecuritiesRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	managementNetworkSecurity *ManagementNetworkSecurity
	clientId *string
}

// managementNetworkSecurity
func (r ApiPostSystemManagementNetworkSecuritiesRequest) ManagementNetworkSecurity(managementNetworkSecurity ManagementNetworkSecurity) ApiPostSystemManagementNetworkSecuritiesRequest {
	r.managementNetworkSecurity = &managementNetworkSecurity
	return r
}

// 
func (r ApiPostSystemManagementNetworkSecuritiesRequest) ClientId(clientId string) ApiPostSystemManagementNetworkSecuritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemManagementNetworkSecuritiesRequest) Execute() (*ManagementNetworkSecurity, *http.Response, error) {
	return r.ApiService.PostSystemManagementNetworkSecuritiesExecute(r)
}

/*
PostSystemManagementNetworkSecurities Post ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemManagementNetworkSecuritiesRequest
*/
func (a *ManagementNetworksSecurityAPIService) PostSystemManagementNetworkSecurities(ctx context.Context) ApiPostSystemManagementNetworkSecuritiesRequest {
	return ApiPostSystemManagementNetworkSecuritiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ManagementNetworkSecurity
func (a *ManagementNetworksSecurityAPIService) PostSystemManagementNetworkSecuritiesExecute(r ApiPostSystemManagementNetworkSecuritiesRequest) (*ManagementNetworkSecurity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementNetworkSecurity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.PostSystemManagementNetworkSecurities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managementNetworkSecurity == nil {
		return localVarReturnValue, nil, reportError("managementNetworkSecurity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managementNetworkSecurity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemManagementNetworkSecuritiesByIdRequest struct {
	ctx context.Context
	ApiService *ManagementNetworksSecurityAPIService
	id int32
	managementNetworkSecurity *ManagementNetworkSecurity
	clientId *string
}

// managementNetworkSecurity
func (r ApiPutSystemManagementNetworkSecuritiesByIdRequest) ManagementNetworkSecurity(managementNetworkSecurity ManagementNetworkSecurity) ApiPutSystemManagementNetworkSecuritiesByIdRequest {
	r.managementNetworkSecurity = &managementNetworkSecurity
	return r
}

// 
func (r ApiPutSystemManagementNetworkSecuritiesByIdRequest) ClientId(clientId string) ApiPutSystemManagementNetworkSecuritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemManagementNetworkSecuritiesByIdRequest) Execute() (*ManagementNetworkSecurity, *http.Response, error) {
	return r.ApiService.PutSystemManagementNetworkSecuritiesByIdExecute(r)
}

/*
PutSystemManagementNetworkSecuritiesById Put ManagementNetworkSecurity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementNetworkSecurityId
 @return ApiPutSystemManagementNetworkSecuritiesByIdRequest
*/
func (a *ManagementNetworksSecurityAPIService) PutSystemManagementNetworkSecuritiesById(ctx context.Context, id int32) ApiPutSystemManagementNetworkSecuritiesByIdRequest {
	return ApiPutSystemManagementNetworkSecuritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ManagementNetworkSecurity
func (a *ManagementNetworksSecurityAPIService) PutSystemManagementNetworkSecuritiesByIdExecute(r ApiPutSystemManagementNetworkSecuritiesByIdRequest) (*ManagementNetworkSecurity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementNetworkSecurity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementNetworksSecurityAPIService.PutSystemManagementNetworkSecuritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/managementNetworkSecurities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managementNetworkSecurity == nil {
		return localVarReturnValue, nil, reportError("managementNetworkSecurity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.managementNetworkSecurity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
