/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManagementReportSetupsAPIService ManagementReportSetupsAPI service
type ManagementReportSetupsAPIService service

type ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest struct {
	ctx context.Context
	ApiService *ManagementReportSetupsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) Execute() ([]ManagementReportSetup, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementReportSetupExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementReportSetup Get List of ManagementReportSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest
*/
func (a *ManagementReportSetupsAPIService) GetCompanyCompaniesByParentIdManagementReportSetup(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest {
	return ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ManagementReportSetup
func (a *ManagementReportSetupsAPIService) GetCompanyCompaniesByParentIdManagementReportSetupExecute(r ApiGetCompanyCompaniesByParentIdManagementReportSetupRequest) ([]ManagementReportSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ManagementReportSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportSetupsAPIService.GetCompanyCompaniesByParentIdManagementReportSetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportSetup"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest struct {
	ctx context.Context
	ApiService *ManagementReportSetupsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest) Execute() (*ManagementReportSetup, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdManagementReportSetupByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdManagementReportSetupById Patch ManagementReportSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementReportSetupId
 @param parentId companyId
 @return ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest
*/
func (a *ManagementReportSetupsAPIService) PatchCompanyCompaniesByParentIdManagementReportSetupById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementReportSetup
func (a *ManagementReportSetupsAPIService) PatchCompanyCompaniesByParentIdManagementReportSetupByIdExecute(r ApiPatchCompanyCompaniesByParentIdManagementReportSetupByIdRequest) (*ManagementReportSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementReportSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportSetupsAPIService.PatchCompanyCompaniesByParentIdManagementReportSetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest struct {
	ctx context.Context
	ApiService *ManagementReportSetupsAPIService
	parentId int32
	clientId *string
	managementReportSetup *ManagementReportSetup
}

// 
func (r ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.clientId = &clientId
	return r
}

// managementReportSetup
func (r ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest) ManagementReportSetup(managementReportSetup ManagementReportSetup) ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest {
	r.managementReportSetup = &managementReportSetup
	return r
}

func (r ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest) Execute() (*ManagementReportSetup, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdManagementReportSetupExecute(r)
}

/*
PostCompanyCompaniesByParentIdManagementReportSetup Post ManagementReportSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId companyId
 @return ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest
*/
func (a *ManagementReportSetupsAPIService) PostCompanyCompaniesByParentIdManagementReportSetup(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest {
	return ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementReportSetup
func (a *ManagementReportSetupsAPIService) PostCompanyCompaniesByParentIdManagementReportSetupExecute(r ApiPostCompanyCompaniesByParentIdManagementReportSetupRequest) (*ManagementReportSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementReportSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportSetupsAPIService.PostCompanyCompaniesByParentIdManagementReportSetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportSetup"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportSetup == nil {
		return localVarReturnValue, nil, reportError("managementReportSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest struct {
	ctx context.Context
	ApiService *ManagementReportSetupsAPIService
	id int32
	parentId int32
	clientId *string
	managementReportSetup *ManagementReportSetup
}

// 
func (r ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	r.clientId = &clientId
	return r
}

// managementReportSetup
func (r ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest) ManagementReportSetup(managementReportSetup ManagementReportSetup) ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	r.managementReportSetup = &managementReportSetup
	return r
}

func (r ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest) Execute() (*ManagementReportSetup, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdManagementReportSetupByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdManagementReportSetupById Put ManagementReportSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id managementReportSetupId
 @param parentId companyId
 @return ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest
*/
func (a *ManagementReportSetupsAPIService) PutCompanyCompaniesByParentIdManagementReportSetupById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest {
	return ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ManagementReportSetup
func (a *ManagementReportSetupsAPIService) PutCompanyCompaniesByParentIdManagementReportSetupByIdExecute(r ApiPutCompanyCompaniesByParentIdManagementReportSetupByIdRequest) (*ManagementReportSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ManagementReportSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportSetupsAPIService.PutCompanyCompaniesByParentIdManagementReportSetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportSetup == nil {
		return localVarReturnValue, nil, reportError("managementReportSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
