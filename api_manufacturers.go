/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ManufacturersAPIService ManufacturersAPI service
type ManufacturersAPIService service

type ApiDeleteProcurementManufacturersByIdRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementManufacturersByIdRequest) ClientId(clientId string) ApiDeleteProcurementManufacturersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementManufacturersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementManufacturersByIdExecute(r)
}

/*
DeleteProcurementManufacturersById Delete Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id manufacturerId
 @return ApiDeleteProcurementManufacturersByIdRequest
*/
func (a *ManufacturersAPIService) DeleteProcurementManufacturersById(ctx context.Context, id int32) ApiDeleteProcurementManufacturersByIdRequest {
	return ApiDeleteProcurementManufacturersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ManufacturersAPIService) DeleteProcurementManufacturersByIdExecute(r ApiDeleteProcurementManufacturersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.DeleteProcurementManufacturersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementManufacturersRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementManufacturersRequest) Conditions(conditions string) ApiGetProcurementManufacturersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) ChildConditions(childConditions string) ApiGetProcurementManufacturersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementManufacturersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) OrderBy(orderBy string) ApiGetProcurementManufacturersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) Fields(fields string) ApiGetProcurementManufacturersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) Page(page int32) ApiGetProcurementManufacturersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) PageSize(pageSize int32) ApiGetProcurementManufacturersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) PageId(pageId int32) ApiGetProcurementManufacturersRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementManufacturersRequest) ClientId(clientId string) ApiGetProcurementManufacturersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementManufacturersRequest) Execute() ([]Manufacturer, *http.Response, error) {
	return r.ApiService.GetProcurementManufacturersExecute(r)
}

/*
GetProcurementManufacturers Get List of Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementManufacturersRequest
*/
func (a *ManufacturersAPIService) GetProcurementManufacturers(ctx context.Context) ApiGetProcurementManufacturersRequest {
	return ApiGetProcurementManufacturersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Manufacturer
func (a *ManufacturersAPIService) GetProcurementManufacturersExecute(r ApiGetProcurementManufacturersRequest) ([]Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.GetProcurementManufacturers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementManufacturersByIdRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) Conditions(conditions string) ApiGetProcurementManufacturersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) ChildConditions(childConditions string) ApiGetProcurementManufacturersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementManufacturersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) OrderBy(orderBy string) ApiGetProcurementManufacturersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) Fields(fields string) ApiGetProcurementManufacturersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) Page(page int32) ApiGetProcurementManufacturersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) PageSize(pageSize int32) ApiGetProcurementManufacturersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) PageId(pageId int32) ApiGetProcurementManufacturersByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementManufacturersByIdRequest) ClientId(clientId string) ApiGetProcurementManufacturersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementManufacturersByIdRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.GetProcurementManufacturersByIdExecute(r)
}

/*
GetProcurementManufacturersById Get Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id manufacturerId
 @return ApiGetProcurementManufacturersByIdRequest
*/
func (a *ManufacturersAPIService) GetProcurementManufacturersById(ctx context.Context, id int32) ApiGetProcurementManufacturersByIdRequest {
	return ApiGetProcurementManufacturersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *ManufacturersAPIService) GetProcurementManufacturersByIdExecute(r ApiGetProcurementManufacturersByIdRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.GetProcurementManufacturersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementManufacturersCountRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementManufacturersCountRequest) Conditions(conditions string) ApiGetProcurementManufacturersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) ChildConditions(childConditions string) ApiGetProcurementManufacturersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementManufacturersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) OrderBy(orderBy string) ApiGetProcurementManufacturersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) Fields(fields string) ApiGetProcurementManufacturersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) Page(page int32) ApiGetProcurementManufacturersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) PageSize(pageSize int32) ApiGetProcurementManufacturersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) PageId(pageId int32) ApiGetProcurementManufacturersCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementManufacturersCountRequest) ClientId(clientId string) ApiGetProcurementManufacturersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementManufacturersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementManufacturersCountExecute(r)
}

/*
GetProcurementManufacturersCount Get Count of Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementManufacturersCountRequest
*/
func (a *ManufacturersAPIService) GetProcurementManufacturersCount(ctx context.Context) ApiGetProcurementManufacturersCountRequest {
	return ApiGetProcurementManufacturersCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ManufacturersAPIService) GetProcurementManufacturersCountExecute(r ApiGetProcurementManufacturersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.GetProcurementManufacturersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementManufacturersByIdRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementManufacturersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementManufacturersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementManufacturersByIdRequest) ClientId(clientId string) ApiPatchProcurementManufacturersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementManufacturersByIdRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.PatchProcurementManufacturersByIdExecute(r)
}

/*
PatchProcurementManufacturersById Patch Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id manufacturerId
 @return ApiPatchProcurementManufacturersByIdRequest
*/
func (a *ManufacturersAPIService) PatchProcurementManufacturersById(ctx context.Context, id int32) ApiPatchProcurementManufacturersByIdRequest {
	return ApiPatchProcurementManufacturersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *ManufacturersAPIService) PatchProcurementManufacturersByIdExecute(r ApiPatchProcurementManufacturersByIdRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.PatchProcurementManufacturersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementManufacturersRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	manufacturer *Manufacturer
	clientId *string
}

// manufacturer
func (r ApiPostProcurementManufacturersRequest) Manufacturer(manufacturer Manufacturer) ApiPostProcurementManufacturersRequest {
	r.manufacturer = &manufacturer
	return r
}

// 
func (r ApiPostProcurementManufacturersRequest) ClientId(clientId string) ApiPostProcurementManufacturersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementManufacturersRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.PostProcurementManufacturersExecute(r)
}

/*
PostProcurementManufacturers Post Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementManufacturersRequest
*/
func (a *ManufacturersAPIService) PostProcurementManufacturers(ctx context.Context) ApiPostProcurementManufacturersRequest {
	return ApiPostProcurementManufacturersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *ManufacturersAPIService) PostProcurementManufacturersExecute(r ApiPostProcurementManufacturersRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.PostProcurementManufacturers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturer == nil {
		return localVarReturnValue, nil, reportError("manufacturer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.manufacturer
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementManufacturersByIdRequest struct {
	ctx context.Context
	ApiService *ManufacturersAPIService
	id int32
	manufacturer *Manufacturer
	clientId *string
}

// manufacturer
func (r ApiPutProcurementManufacturersByIdRequest) Manufacturer(manufacturer Manufacturer) ApiPutProcurementManufacturersByIdRequest {
	r.manufacturer = &manufacturer
	return r
}

// 
func (r ApiPutProcurementManufacturersByIdRequest) ClientId(clientId string) ApiPutProcurementManufacturersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementManufacturersByIdRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.PutProcurementManufacturersByIdExecute(r)
}

/*
PutProcurementManufacturersById Put Manufacturer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id manufacturerId
 @return ApiPutProcurementManufacturersByIdRequest
*/
func (a *ManufacturersAPIService) PutProcurementManufacturersById(ctx context.Context, id int32) ApiPutProcurementManufacturersByIdRequest {
	return ApiPutProcurementManufacturersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *ManufacturersAPIService) PutProcurementManufacturersByIdExecute(r ApiPutProcurementManufacturersByIdRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManufacturersAPIService.PutProcurementManufacturersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/manufacturers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturer == nil {
		return localVarReturnValue, nil, reportError("manufacturer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.manufacturer
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
