/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MarketingContactsAPIService MarketingContactsAPI service
type MarketingContactsAPIService service

type ApiDeleteMarketingGroupsByParentIdContactsByIdRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteMarketingGroupsByParentIdContactsByIdRequest) ClientId(clientId string) ApiDeleteMarketingGroupsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingGroupsByParentIdContactsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingGroupsByParentIdContactsByIdExecute(r)
}

/*
DeleteMarketingGroupsByParentIdContactsById Delete MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactId
 @param parentId groupId
 @return ApiDeleteMarketingGroupsByParentIdContactsByIdRequest
*/
func (a *MarketingContactsAPIService) DeleteMarketingGroupsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingGroupsByParentIdContactsByIdRequest {
	return ApiDeleteMarketingGroupsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MarketingContactsAPIService) DeleteMarketingGroupsByParentIdContactsByIdExecute(r ApiDeleteMarketingGroupsByParentIdContactsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.DeleteMarketingGroupsByParentIdContactsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdContactsRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) Page(page int32) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdContactsRequest) Execute() ([]MarketingContact, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdContactsExecute(r)
}

/*
GetMarketingGroupsByParentIdContacts Get List of MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId groupId
 @return ApiGetMarketingGroupsByParentIdContactsRequest
*/
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContacts(ctx context.Context, parentId int32) ApiGetMarketingGroupsByParentIdContactsRequest {
	return ApiGetMarketingGroupsByParentIdContactsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MarketingContact
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContactsExecute(r ApiGetMarketingGroupsByParentIdContactsRequest) ([]MarketingContact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MarketingContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.GetMarketingGroupsByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdContactsByIdRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) Page(page int32) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdContactsByIdRequest) Execute() (*MarketingContact, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdContactsByIdExecute(r)
}

/*
GetMarketingGroupsByParentIdContactsById Get MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactId
 @param parentId groupId
 @return ApiGetMarketingGroupsByParentIdContactsByIdRequest
*/
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiGetMarketingGroupsByParentIdContactsByIdRequest {
	return ApiGetMarketingGroupsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MarketingContact
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContactsByIdExecute(r ApiGetMarketingGroupsByParentIdContactsByIdRequest) (*MarketingContact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.GetMarketingGroupsByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdContactsCountRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) Page(page int32) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdContactsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdContactsCountExecute(r)
}

/*
GetMarketingGroupsByParentIdContactsCount Get Count of MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId groupId
 @return ApiGetMarketingGroupsByParentIdContactsCountRequest
*/
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContactsCount(ctx context.Context, parentId int32) ApiGetMarketingGroupsByParentIdContactsCountRequest {
	return ApiGetMarketingGroupsByParentIdContactsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MarketingContactsAPIService) GetMarketingGroupsByParentIdContactsCountExecute(r ApiGetMarketingGroupsByParentIdContactsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.GetMarketingGroupsByParentIdContactsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingGroupsByParentIdContactsByIdRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchMarketingGroupsByParentIdContactsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingGroupsByParentIdContactsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchMarketingGroupsByParentIdContactsByIdRequest) ClientId(clientId string) ApiPatchMarketingGroupsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchMarketingGroupsByParentIdContactsByIdRequest) Execute() (*MarketingContact, *http.Response, error) {
	return r.ApiService.PatchMarketingGroupsByParentIdContactsByIdExecute(r)
}

/*
PatchMarketingGroupsByParentIdContactsById Patch MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactId
 @param parentId groupId
 @return ApiPatchMarketingGroupsByParentIdContactsByIdRequest
*/
func (a *MarketingContactsAPIService) PatchMarketingGroupsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingGroupsByParentIdContactsByIdRequest {
	return ApiPatchMarketingGroupsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MarketingContact
func (a *MarketingContactsAPIService) PatchMarketingGroupsByParentIdContactsByIdExecute(r ApiPatchMarketingGroupsByParentIdContactsByIdRequest) (*MarketingContact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.PatchMarketingGroupsByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingGroupsByParentIdContactsRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	parentId int32
	marketingContact *MarketingContact
	clientId *string
}

// marketingContact
func (r ApiPostMarketingGroupsByParentIdContactsRequest) MarketingContact(marketingContact MarketingContact) ApiPostMarketingGroupsByParentIdContactsRequest {
	r.marketingContact = &marketingContact
	return r
}

// 
func (r ApiPostMarketingGroupsByParentIdContactsRequest) ClientId(clientId string) ApiPostMarketingGroupsByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostMarketingGroupsByParentIdContactsRequest) Execute() (*MarketingContact, *http.Response, error) {
	return r.ApiService.PostMarketingGroupsByParentIdContactsExecute(r)
}

/*
PostMarketingGroupsByParentIdContacts Post MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId groupId
 @return ApiPostMarketingGroupsByParentIdContactsRequest
*/
func (a *MarketingContactsAPIService) PostMarketingGroupsByParentIdContacts(ctx context.Context, parentId int32) ApiPostMarketingGroupsByParentIdContactsRequest {
	return ApiPostMarketingGroupsByParentIdContactsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MarketingContact
func (a *MarketingContactsAPIService) PostMarketingGroupsByParentIdContactsExecute(r ApiPostMarketingGroupsByParentIdContactsRequest) (*MarketingContact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.PostMarketingGroupsByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingContact == nil {
		return localVarReturnValue, nil, reportError("marketingContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.marketingContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingGroupsByParentIdContactsByIdRequest struct {
	ctx context.Context
	ApiService *MarketingContactsAPIService
	id int32
	parentId int32
	marketingContact *MarketingContact
	clientId *string
}

// marketingContact
func (r ApiPutMarketingGroupsByParentIdContactsByIdRequest) MarketingContact(marketingContact MarketingContact) ApiPutMarketingGroupsByParentIdContactsByIdRequest {
	r.marketingContact = &marketingContact
	return r
}

// 
func (r ApiPutMarketingGroupsByParentIdContactsByIdRequest) ClientId(clientId string) ApiPutMarketingGroupsByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutMarketingGroupsByParentIdContactsByIdRequest) Execute() (*MarketingContact, *http.Response, error) {
	return r.ApiService.PutMarketingGroupsByParentIdContactsByIdExecute(r)
}

/*
PutMarketingGroupsByParentIdContactsById Put MarketingContact

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id contactId
 @param parentId groupId
 @return ApiPutMarketingGroupsByParentIdContactsByIdRequest
*/
func (a *MarketingContactsAPIService) PutMarketingGroupsByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiPutMarketingGroupsByParentIdContactsByIdRequest {
	return ApiPutMarketingGroupsByParentIdContactsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MarketingContact
func (a *MarketingContactsAPIService) PutMarketingGroupsByParentIdContactsByIdExecute(r ApiPutMarketingGroupsByParentIdContactsByIdRequest) (*MarketingContact, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MarketingContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingContactsAPIService.PutMarketingGroupsByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.marketingContact == nil {
		return localVarReturnValue, nil, reportError("marketingContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.marketingContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
