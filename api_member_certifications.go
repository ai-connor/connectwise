/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MemberCertificationsAPIService MemberCertificationsAPI service
type MemberCertificationsAPIService service

type ApiDeleteSystemMembersByParentIdCertificationsByIdRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemMembersByParentIdCertificationsByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdCertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdCertificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdCertificationsByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdCertificationsById Delete MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id certificationId
 @param parentId memberId
 @return ApiDeleteSystemMembersByParentIdCertificationsByIdRequest
*/
func (a *MemberCertificationsAPIService) DeleteSystemMembersByParentIdCertificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdCertificationsByIdRequest {
	return ApiDeleteSystemMembersByParentIdCertificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MemberCertificationsAPIService) DeleteSystemMembersByParentIdCertificationsByIdExecute(r ApiDeleteSystemMembersByParentIdCertificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.DeleteSystemMembersByParentIdCertificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdCertificationsRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) Fields(fields string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) Page(page int32) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdCertificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdCertificationsRequest) Execute() ([]MemberCertification, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdCertificationsExecute(r)
}

/*
GetSystemMembersByParentIdCertifications Get List of MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdCertificationsRequest
*/
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertifications(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdCertificationsRequest {
	return ApiGetSystemMembersByParentIdCertificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MemberCertification
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertificationsExecute(r ApiGetSystemMembersByParentIdCertificationsRequest) ([]MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.GetSystemMembersByParentIdCertifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdCertificationsByIdRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdCertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdCertificationsByIdExecute(r)
}

/*
GetSystemMembersByParentIdCertificationsById Get MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id certificationId
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdCertificationsByIdRequest
*/
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertificationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdCertificationsByIdRequest {
	return ApiGetSystemMembersByParentIdCertificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberCertification
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertificationsByIdExecute(r ApiGetSystemMembersByParentIdCertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.GetSystemMembersByParentIdCertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdCertificationsCountRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) Page(page int32) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdCertificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdCertificationsCountExecute(r)
}

/*
GetSystemMembersByParentIdCertificationsCount Get Count of MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdCertificationsCountRequest
*/
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertificationsCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdCertificationsCountRequest {
	return ApiGetSystemMembersByParentIdCertificationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MemberCertificationsAPIService) GetSystemMembersByParentIdCertificationsCountExecute(r ApiGetSystemMembersByParentIdCertificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.GetSystemMembersByParentIdCertificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdCertificationsByIdRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdCertificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdCertificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemMembersByParentIdCertificationsByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdCertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemMembersByParentIdCertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdCertificationsByIdExecute(r)
}

/*
PatchSystemMembersByParentIdCertificationsById Patch MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id certificationId
 @param parentId memberId
 @return ApiPatchSystemMembersByParentIdCertificationsByIdRequest
*/
func (a *MemberCertificationsAPIService) PatchSystemMembersByParentIdCertificationsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdCertificationsByIdRequest {
	return ApiPatchSystemMembersByParentIdCertificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberCertification
func (a *MemberCertificationsAPIService) PatchSystemMembersByParentIdCertificationsByIdExecute(r ApiPatchSystemMembersByParentIdCertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.PatchSystemMembersByParentIdCertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdCertificationsRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	parentId int32
	memberCertification *MemberCertification
	clientId *string
}

// memberCertification
func (r ApiPostSystemMembersByParentIdCertificationsRequest) MemberCertification(memberCertification MemberCertification) ApiPostSystemMembersByParentIdCertificationsRequest {
	r.memberCertification = &memberCertification
	return r
}

// 
func (r ApiPostSystemMembersByParentIdCertificationsRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdCertificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMembersByParentIdCertificationsRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdCertificationsExecute(r)
}

/*
PostSystemMembersByParentIdCertifications Post MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPostSystemMembersByParentIdCertificationsRequest
*/
func (a *MemberCertificationsAPIService) PostSystemMembersByParentIdCertifications(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdCertificationsRequest {
	return ApiPostSystemMembersByParentIdCertificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberCertification
func (a *MemberCertificationsAPIService) PostSystemMembersByParentIdCertificationsExecute(r ApiPostSystemMembersByParentIdCertificationsRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.PostSystemMembersByParentIdCertifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberCertification == nil {
		return localVarReturnValue, nil, reportError("memberCertification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.memberCertification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdCertificationsByIdRequest struct {
	ctx context.Context
	ApiService *MemberCertificationsAPIService
	id int32
	parentId int32
	memberCertification *MemberCertification
	clientId *string
}

// memberCertification
func (r ApiPutSystemMembersByParentIdCertificationsByIdRequest) MemberCertification(memberCertification MemberCertification) ApiPutSystemMembersByParentIdCertificationsByIdRequest {
	r.memberCertification = &memberCertification
	return r
}

// 
func (r ApiPutSystemMembersByParentIdCertificationsByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdCertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemMembersByParentIdCertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdCertificationsByIdExecute(r)
}

/*
PutSystemMembersByParentIdCertificationsById Put MemberCertification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id certificationId
 @param parentId memberId
 @return ApiPutSystemMembersByParentIdCertificationsByIdRequest
*/
func (a *MemberCertificationsAPIService) PutSystemMembersByParentIdCertificationsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdCertificationsByIdRequest {
	return ApiPutSystemMembersByParentIdCertificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberCertification
func (a *MemberCertificationsAPIService) PutSystemMembersByParentIdCertificationsByIdExecute(r ApiPutSystemMembersByParentIdCertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberCertificationsAPIService.PutSystemMembersByParentIdCertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/certifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberCertification == nil {
		return localVarReturnValue, nil, reportError("memberCertification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.memberCertification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
