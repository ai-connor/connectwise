/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MemberNotificationSettingsAPIService MemberNotificationSettingsAPI service
type MemberNotificationSettingsAPIService service

type ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdNotificationSettingsByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdNotificationSettingsById Delete MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationSettingId
 @param parentId memberId
 @return ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest
*/
func (a *MemberNotificationSettingsAPIService) DeleteSystemMembersByParentIdNotificationSettingsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest {
	return ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MemberNotificationSettingsAPIService) DeleteSystemMembersByParentIdNotificationSettingsByIdExecute(r ApiDeleteSystemMembersByParentIdNotificationSettingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.DeleteSystemMembersByParentIdNotificationSettingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdNotificationSettingsRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) Fields(fields string) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) Page(page int32) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdNotificationSettingsRequest) Execute() ([]MemberNotificationSetting, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdNotificationSettingsExecute(r)
}

/*
GetSystemMembersByParentIdNotificationSettings Get List of MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdNotificationSettingsRequest
*/
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettings(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdNotificationSettingsRequest {
	return ApiGetSystemMembersByParentIdNotificationSettingsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MemberNotificationSetting
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettingsExecute(r ApiGetSystemMembersByParentIdNotificationSettingsRequest) ([]MemberNotificationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MemberNotificationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.GetSystemMembersByParentIdNotificationSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) Execute() (*MemberNotificationSetting, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdNotificationSettingsByIdExecute(r)
}

/*
GetSystemMembersByParentIdNotificationSettingsById Get MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationSettingId
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest
*/
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettingsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest {
	return ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberNotificationSetting
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettingsByIdExecute(r ApiGetSystemMembersByParentIdNotificationSettingsByIdRequest) (*MemberNotificationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberNotificationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.GetSystemMembersByParentIdNotificationSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdNotificationSettingsCountRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) Page(page int32) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdNotificationSettingsCountExecute(r)
}

/*
GetSystemMembersByParentIdNotificationSettingsCount Get Count of MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdNotificationSettingsCountRequest
*/
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettingsCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdNotificationSettingsCountRequest {
	return ApiGetSystemMembersByParentIdNotificationSettingsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MemberNotificationSettingsAPIService) GetSystemMembersByParentIdNotificationSettingsCountExecute(r ApiGetSystemMembersByParentIdNotificationSettingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.GetSystemMembersByParentIdNotificationSettingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest) Execute() (*MemberNotificationSetting, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdNotificationSettingsByIdExecute(r)
}

/*
PatchSystemMembersByParentIdNotificationSettingsById Patch MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationSettingId
 @param parentId memberId
 @return ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest
*/
func (a *MemberNotificationSettingsAPIService) PatchSystemMembersByParentIdNotificationSettingsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest {
	return ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberNotificationSetting
func (a *MemberNotificationSettingsAPIService) PatchSystemMembersByParentIdNotificationSettingsByIdExecute(r ApiPatchSystemMembersByParentIdNotificationSettingsByIdRequest) (*MemberNotificationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberNotificationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.PatchSystemMembersByParentIdNotificationSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdNotificationSettingsRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	parentId int32
	clientId *string
	memberNotificationSetting *MemberNotificationSetting
}

// 
func (r ApiPostSystemMembersByParentIdNotificationSettingsRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdNotificationSettingsRequest {
	r.clientId = &clientId
	return r
}

// memberNotificationSetting
func (r ApiPostSystemMembersByParentIdNotificationSettingsRequest) MemberNotificationSetting(memberNotificationSetting MemberNotificationSetting) ApiPostSystemMembersByParentIdNotificationSettingsRequest {
	r.memberNotificationSetting = &memberNotificationSetting
	return r
}

func (r ApiPostSystemMembersByParentIdNotificationSettingsRequest) Execute() (*MemberNotificationSetting, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdNotificationSettingsExecute(r)
}

/*
PostSystemMembersByParentIdNotificationSettings Post MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPostSystemMembersByParentIdNotificationSettingsRequest
*/
func (a *MemberNotificationSettingsAPIService) PostSystemMembersByParentIdNotificationSettings(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdNotificationSettingsRequest {
	return ApiPostSystemMembersByParentIdNotificationSettingsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberNotificationSetting
func (a *MemberNotificationSettingsAPIService) PostSystemMembersByParentIdNotificationSettingsExecute(r ApiPostSystemMembersByParentIdNotificationSettingsRequest) (*MemberNotificationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberNotificationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.PostSystemMembersByParentIdNotificationSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberNotificationSetting == nil {
		return localVarReturnValue, nil, reportError("memberNotificationSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberNotificationSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest struct {
	ctx context.Context
	ApiService *MemberNotificationSettingsAPIService
	id int32
	parentId int32
	clientId *string
	memberNotificationSetting *MemberNotificationSetting
}

// 
func (r ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberNotificationSetting
func (r ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest) MemberNotificationSetting(memberNotificationSetting MemberNotificationSetting) ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest {
	r.memberNotificationSetting = &memberNotificationSetting
	return r
}

func (r ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest) Execute() (*MemberNotificationSetting, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdNotificationSettingsByIdExecute(r)
}

/*
PutSystemMembersByParentIdNotificationSettingsById Put MemberNotificationSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationSettingId
 @param parentId memberId
 @return ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest
*/
func (a *MemberNotificationSettingsAPIService) PutSystemMembersByParentIdNotificationSettingsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest {
	return ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberNotificationSetting
func (a *MemberNotificationSettingsAPIService) PutSystemMembersByParentIdNotificationSettingsByIdExecute(r ApiPutSystemMembersByParentIdNotificationSettingsByIdRequest) (*MemberNotificationSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberNotificationSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberNotificationSettingsAPIService.PutSystemMembersByParentIdNotificationSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/notificationSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberNotificationSetting == nil {
		return localVarReturnValue, nil, reportError("memberNotificationSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberNotificationSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
