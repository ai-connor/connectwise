/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MemberPersonasAPIService MemberPersonasAPI service
type MemberPersonasAPIService service

type ApiDeleteSystemMembersByParentIdPersonasByIdRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemMembersByParentIdPersonasByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdPersonasByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdPersonasByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdPersonasByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdPersonasById Delete MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id personaId
 @param parentId memberId
 @return ApiDeleteSystemMembersByParentIdPersonasByIdRequest
*/
func (a *MemberPersonasAPIService) DeleteSystemMembersByParentIdPersonasById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdPersonasByIdRequest {
	return ApiDeleteSystemMembersByParentIdPersonasByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MemberPersonasAPIService) DeleteSystemMembersByParentIdPersonasByIdExecute(r ApiDeleteSystemMembersByParentIdPersonasByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.DeleteSystemMembersByParentIdPersonasById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdPersonasRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) Fields(fields string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) Page(page int32) ApiGetSystemMembersByParentIdPersonasRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdPersonasRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdPersonasRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdPersonasRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdPersonasRequest) Execute() ([]MemberPersona, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdPersonasExecute(r)
}

/*
GetSystemMembersByParentIdPersonas Get List of MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdPersonasRequest
*/
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonas(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdPersonasRequest {
	return ApiGetSystemMembersByParentIdPersonasRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MemberPersona
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonasExecute(r ApiGetSystemMembersByParentIdPersonasRequest) ([]MemberPersona, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MemberPersona
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.GetSystemMembersByParentIdPersonas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdPersonasByIdRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdPersonasByIdRequest) Execute() (*MemberPersona, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdPersonasByIdExecute(r)
}

/*
GetSystemMembersByParentIdPersonasById Get MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id personaId
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdPersonasByIdRequest
*/
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonasById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdPersonasByIdRequest {
	return ApiGetSystemMembersByParentIdPersonasByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberPersona
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonasByIdExecute(r ApiGetSystemMembersByParentIdPersonasByIdRequest) (*MemberPersona, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPersona
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.GetSystemMembersByParentIdPersonasById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdPersonasCountRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) Page(page int32) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdPersonasCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdPersonasCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdPersonasCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdPersonasCountExecute(r)
}

/*
GetSystemMembersByParentIdPersonasCount Get Count of MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdPersonasCountRequest
*/
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonasCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdPersonasCountRequest {
	return ApiGetSystemMembersByParentIdPersonasCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MemberPersonasAPIService) GetSystemMembersByParentIdPersonasCountExecute(r ApiGetSystemMembersByParentIdPersonasCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.GetSystemMembersByParentIdPersonasCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdPersonasByIdRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdPersonasByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdPersonasByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemMembersByParentIdPersonasByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdPersonasByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemMembersByParentIdPersonasByIdRequest) Execute() (*MemberPersona, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdPersonasByIdExecute(r)
}

/*
PatchSystemMembersByParentIdPersonasById Patch MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id personaId
 @param parentId memberId
 @return ApiPatchSystemMembersByParentIdPersonasByIdRequest
*/
func (a *MemberPersonasAPIService) PatchSystemMembersByParentIdPersonasById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdPersonasByIdRequest {
	return ApiPatchSystemMembersByParentIdPersonasByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberPersona
func (a *MemberPersonasAPIService) PatchSystemMembersByParentIdPersonasByIdExecute(r ApiPatchSystemMembersByParentIdPersonasByIdRequest) (*MemberPersona, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPersona
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.PatchSystemMembersByParentIdPersonasById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdPersonasRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	parentId int32
	memberPersona *MemberPersona
	clientId *string
}

// memberPersona
func (r ApiPostSystemMembersByParentIdPersonasRequest) MemberPersona(memberPersona MemberPersona) ApiPostSystemMembersByParentIdPersonasRequest {
	r.memberPersona = &memberPersona
	return r
}

// 
func (r ApiPostSystemMembersByParentIdPersonasRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdPersonasRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMembersByParentIdPersonasRequest) Execute() (*MemberPersona, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdPersonasExecute(r)
}

/*
PostSystemMembersByParentIdPersonas Post MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPostSystemMembersByParentIdPersonasRequest
*/
func (a *MemberPersonasAPIService) PostSystemMembersByParentIdPersonas(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdPersonasRequest {
	return ApiPostSystemMembersByParentIdPersonasRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberPersona
func (a *MemberPersonasAPIService) PostSystemMembersByParentIdPersonasExecute(r ApiPostSystemMembersByParentIdPersonasRequest) (*MemberPersona, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPersona
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.PostSystemMembersByParentIdPersonas")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberPersona == nil {
		return localVarReturnValue, nil, reportError("memberPersona is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.memberPersona
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdPersonasByIdRequest struct {
	ctx context.Context
	ApiService *MemberPersonasAPIService
	id int32
	parentId int32
	memberPersona *MemberPersona
	clientId *string
}

// memberPersona
func (r ApiPutSystemMembersByParentIdPersonasByIdRequest) MemberPersona(memberPersona MemberPersona) ApiPutSystemMembersByParentIdPersonasByIdRequest {
	r.memberPersona = &memberPersona
	return r
}

// 
func (r ApiPutSystemMembersByParentIdPersonasByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdPersonasByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemMembersByParentIdPersonasByIdRequest) Execute() (*MemberPersona, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdPersonasByIdExecute(r)
}

/*
PutSystemMembersByParentIdPersonasById Put MemberPersona

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id personaId
 @param parentId memberId
 @return ApiPutSystemMembersByParentIdPersonasByIdRequest
*/
func (a *MemberPersonasAPIService) PutSystemMembersByParentIdPersonasById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdPersonasByIdRequest {
	return ApiPutSystemMembersByParentIdPersonasByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberPersona
func (a *MemberPersonasAPIService) PutSystemMembersByParentIdPersonasByIdExecute(r ApiPutSystemMembersByParentIdPersonasByIdRequest) (*MemberPersona, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberPersona
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberPersonasAPIService.PutSystemMembersByParentIdPersonasById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/personas/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberPersona == nil {
		return localVarReturnValue, nil, reportError("memberPersona is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.memberPersona
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
