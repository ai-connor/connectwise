/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MemberSkillsAPIService MemberSkillsAPI service
type MemberSkillsAPIService service

type ApiDeleteSystemMembersByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemMembersByParentIdSkillsByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdSkillsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdSkillsByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdSkillsById Delete MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiDeleteSystemMembersByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) DeleteSystemMembersByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdSkillsByIdRequest {
	return ApiDeleteSystemMembersByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MemberSkillsAPIService) DeleteSystemMembersByParentIdSkillsByIdExecute(r ApiDeleteSystemMembersByParentIdSkillsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.DeleteSystemMembersByParentIdSkillsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest) ClientId(clientId string) ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMyAccountByParentIdSkillsByIdExecute(r)
}

/*
DeleteSystemMyAccountByParentIdSkillsById Delete MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) DeleteSystemMyAccountByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest {
	return ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MemberSkillsAPIService) DeleteSystemMyAccountByParentIdSkillsByIdExecute(r ApiDeleteSystemMyAccountByParentIdSkillsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.DeleteSystemMyAccountByParentIdSkillsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdSkillsRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) Fields(fields string) ApiGetSystemMembersByParentIdSkillsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) Page(page int32) ApiGetSystemMembersByParentIdSkillsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdSkillsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdSkillsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdSkillsRequest) Execute() ([]MemberSkill, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdSkillsExecute(r)
}

/*
GetSystemMembersByParentIdSkills Get List of MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdSkillsRequest
*/
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkills(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdSkillsRequest {
	return ApiGetSystemMembersByParentIdSkillsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MemberSkill
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkillsExecute(r ApiGetSystemMembersByParentIdSkillsRequest) ([]MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMembersByParentIdSkills")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdSkillsByIdExecute(r)
}

/*
GetSystemMembersByParentIdSkillsById Get MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdSkillsByIdRequest {
	return ApiGetSystemMembersByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkillsByIdExecute(r ApiGetSystemMembersByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMembersByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdSkillsCountRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) Page(page int32) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMembersByParentIdSkillsCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdSkillsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdSkillsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdSkillsCountExecute(r)
}

/*
GetSystemMembersByParentIdSkillsCount Get Count of MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMembersByParentIdSkillsCountRequest
*/
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkillsCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdSkillsCountRequest {
	return ApiGetSystemMembersByParentIdSkillsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MemberSkillsAPIService) GetSystemMembersByParentIdSkillsCountExecute(r ApiGetSystemMembersByParentIdSkillsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMembersByParentIdSkillsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdSkillsRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) Page(page int32) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdSkillsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdSkillsRequest) Execute() ([]MemberSkill, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdSkillsExecute(r)
}

/*
GetSystemMyAccountByParentIdSkills Get List of MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMyAccountByParentIdSkillsRequest
*/
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkills(ctx context.Context, parentId int32) ApiGetSystemMyAccountByParentIdSkillsRequest {
	return ApiGetSystemMyAccountByParentIdSkillsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MemberSkill
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkillsExecute(r ApiGetSystemMyAccountByParentIdSkillsRequest) ([]MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMyAccountByParentIdSkills")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) Page(page int32) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdSkillsByIdExecute(r)
}

/*
GetSystemMyAccountByParentIdSkillsById Get MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiGetSystemMyAccountByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMyAccountByParentIdSkillsByIdRequest {
	return ApiGetSystemMyAccountByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkillsByIdExecute(r ApiGetSystemMyAccountByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMyAccountByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdSkillsCountRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) Page(page int32) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdSkillsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdSkillsCountExecute(r)
}

/*
GetSystemMyAccountByParentIdSkillsCount Get Count of MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiGetSystemMyAccountByParentIdSkillsCountRequest
*/
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkillsCount(ctx context.Context, parentId int32) ApiGetSystemMyAccountByParentIdSkillsCountRequest {
	return ApiGetSystemMyAccountByParentIdSkillsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MemberSkillsAPIService) GetSystemMyAccountByParentIdSkillsCountExecute(r ApiGetSystemMyAccountByParentIdSkillsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.GetSystemMyAccountByParentIdSkillsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemMembersByParentIdSkillsByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdSkillsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdSkillsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdSkillsByIdExecute(r)
}

/*
PatchSystemMembersByParentIdSkillsById Patch MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiPatchSystemMembersByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) PatchSystemMembersByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdSkillsByIdRequest {
	return ApiPatchSystemMembersByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PatchSystemMembersByParentIdSkillsByIdExecute(r ApiPatchSystemMembersByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PatchSystemMembersByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMyAccountByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemMyAccountByParentIdSkillsByIdRequest) ClientId(clientId string) ApiPatchSystemMyAccountByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMyAccountByParentIdSkillsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMyAccountByParentIdSkillsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMyAccountByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PatchSystemMyAccountByParentIdSkillsByIdExecute(r)
}

/*
PatchSystemMyAccountByParentIdSkillsById Patch MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiPatchSystemMyAccountByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) PatchSystemMyAccountByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMyAccountByParentIdSkillsByIdRequest {
	return ApiPatchSystemMyAccountByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PatchSystemMyAccountByParentIdSkillsByIdExecute(r ApiPatchSystemMyAccountByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PatchSystemMyAccountByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdSkillsRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	memberSkill *MemberSkill
}

// 
func (r ApiPostSystemMembersByParentIdSkillsRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdSkillsRequest {
	r.clientId = &clientId
	return r
}

// memberSkill
func (r ApiPostSystemMembersByParentIdSkillsRequest) MemberSkill(memberSkill MemberSkill) ApiPostSystemMembersByParentIdSkillsRequest {
	r.memberSkill = &memberSkill
	return r
}

func (r ApiPostSystemMembersByParentIdSkillsRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdSkillsExecute(r)
}

/*
PostSystemMembersByParentIdSkills Post MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPostSystemMembersByParentIdSkillsRequest
*/
func (a *MemberSkillsAPIService) PostSystemMembersByParentIdSkills(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdSkillsRequest {
	return ApiPostSystemMembersByParentIdSkillsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PostSystemMembersByParentIdSkillsExecute(r ApiPostSystemMembersByParentIdSkillsRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PostSystemMembersByParentIdSkills")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberSkill == nil {
		return localVarReturnValue, nil, reportError("memberSkill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberSkill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMyAccountByParentIdSkillsRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	parentId int32
	clientId *string
	memberSkill *MemberSkill
}

// 
func (r ApiPostSystemMyAccountByParentIdSkillsRequest) ClientId(clientId string) ApiPostSystemMyAccountByParentIdSkillsRequest {
	r.clientId = &clientId
	return r
}

// memberSkill
func (r ApiPostSystemMyAccountByParentIdSkillsRequest) MemberSkill(memberSkill MemberSkill) ApiPostSystemMyAccountByParentIdSkillsRequest {
	r.memberSkill = &memberSkill
	return r
}

func (r ApiPostSystemMyAccountByParentIdSkillsRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PostSystemMyAccountByParentIdSkillsExecute(r)
}

/*
PostSystemMyAccountByParentIdSkills Post MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId memberId
 @return ApiPostSystemMyAccountByParentIdSkillsRequest
*/
func (a *MemberSkillsAPIService) PostSystemMyAccountByParentIdSkills(ctx context.Context, parentId int32) ApiPostSystemMyAccountByParentIdSkillsRequest {
	return ApiPostSystemMyAccountByParentIdSkillsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PostSystemMyAccountByParentIdSkillsExecute(r ApiPostSystemMyAccountByParentIdSkillsRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PostSystemMyAccountByParentIdSkills")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberSkill == nil {
		return localVarReturnValue, nil, reportError("memberSkill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberSkill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	memberSkill *MemberSkill
}

// 
func (r ApiPutSystemMembersByParentIdSkillsByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberSkill
func (r ApiPutSystemMembersByParentIdSkillsByIdRequest) MemberSkill(memberSkill MemberSkill) ApiPutSystemMembersByParentIdSkillsByIdRequest {
	r.memberSkill = &memberSkill
	return r
}

func (r ApiPutSystemMembersByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdSkillsByIdExecute(r)
}

/*
PutSystemMembersByParentIdSkillsById Put MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiPutSystemMembersByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) PutSystemMembersByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdSkillsByIdRequest {
	return ApiPutSystemMembersByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PutSystemMembersByParentIdSkillsByIdExecute(r ApiPutSystemMembersByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PutSystemMembersByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberSkill == nil {
		return localVarReturnValue, nil, reportError("memberSkill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberSkill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMyAccountByParentIdSkillsByIdRequest struct {
	ctx context.Context
	ApiService *MemberSkillsAPIService
	id int32
	parentId int32
	clientId *string
	memberSkill *MemberSkill
}

// 
func (r ApiPutSystemMyAccountByParentIdSkillsByIdRequest) ClientId(clientId string) ApiPutSystemMyAccountByParentIdSkillsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberSkill
func (r ApiPutSystemMyAccountByParentIdSkillsByIdRequest) MemberSkill(memberSkill MemberSkill) ApiPutSystemMyAccountByParentIdSkillsByIdRequest {
	r.memberSkill = &memberSkill
	return r
}

func (r ApiPutSystemMyAccountByParentIdSkillsByIdRequest) Execute() (*MemberSkill, *http.Response, error) {
	return r.ApiService.PutSystemMyAccountByParentIdSkillsByIdExecute(r)
}

/*
PutSystemMyAccountByParentIdSkillsById Put MemberSkill

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id skillId
 @param parentId memberId
 @return ApiPutSystemMyAccountByParentIdSkillsByIdRequest
*/
func (a *MemberSkillsAPIService) PutSystemMyAccountByParentIdSkillsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMyAccountByParentIdSkillsByIdRequest {
	return ApiPutSystemMyAccountByParentIdSkillsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MemberSkill
func (a *MemberSkillsAPIService) PutSystemMyAccountByParentIdSkillsByIdExecute(r ApiPutSystemMyAccountByParentIdSkillsByIdRequest) (*MemberSkill, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberSkill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberSkillsAPIService.PutSystemMyAccountByParentIdSkillsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/skills/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberSkill == nil {
		return localVarReturnValue, nil, reportError("memberSkill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberSkill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
