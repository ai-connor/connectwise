/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MinimumStockByWarehousesAPIService MinimumStockByWarehousesAPI service
type MinimumStockByWarehousesAPIService service

type ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) ClientId(clientId string) ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r)
}

/*
DeleteProcurementCatalogByParentIdMinimumStockByWarehouseById Delete MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id minimumStockByWarehouseId
 @param parentId catalogId
 @return ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest
*/
func (a *MinimumStockByWarehousesAPIService) DeleteProcurementCatalogByParentIdMinimumStockByWarehouseById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	return ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *MinimumStockByWarehousesAPIService) DeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r ApiDeleteProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.DeleteProcurementCatalogByParentIdMinimumStockByWarehouseById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) ClientId(clientId string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) Conditions(conditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) ChildConditions(childConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) OrderBy(orderBy string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) Fields(fields string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) Page(page int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) PageSize(pageSize int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) PageId(pageId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) Execute() ([]MinimumStockByWarehouse, *http.Response, error) {
	return r.ApiService.GetProcurementCatalogByParentIdMinimumStockByWarehouseExecute(r)
}

/*
GetProcurementCatalogByParentIdMinimumStockByWarehouse Get List of MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId catalogId
 @return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest
*/
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouse(ctx context.Context, parentId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []MinimumStockByWarehouse
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouseExecute(r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseRequest) ([]MinimumStockByWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MinimumStockByWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.GetProcurementCatalogByParentIdMinimumStockByWarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) ClientId(clientId string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Conditions(conditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) ChildConditions(childConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) OrderBy(orderBy string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Fields(fields string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Page(page int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) PageSize(pageSize int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) PageId(pageId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Execute() (*MinimumStockByWarehouse, *http.Response, error) {
	return r.ApiService.GetProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r)
}

/*
GetProcurementCatalogByParentIdMinimumStockByWarehouseById Get MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id minimumStockByWarehouseId
 @param parentId catalogId
 @return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest
*/
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouseById(ctx context.Context, id int32, parentId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MinimumStockByWarehouse
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) (*MinimumStockByWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MinimumStockByWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.GetProcurementCatalogByParentIdMinimumStockByWarehouseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) ClientId(clientId string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) Conditions(conditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) ChildConditions(childConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) OrderBy(orderBy string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) Fields(fields string) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) Page(page int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) PageSize(pageSize int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) PageId(pageId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementCatalogByParentIdMinimumStockByWarehouseCountExecute(r)
}

/*
GetProcurementCatalogByParentIdMinimumStockByWarehouseCount Get Count of MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId catalogId
 @return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest
*/
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouseCount(ctx context.Context, parentId int32) ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest {
	return ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *MinimumStockByWarehousesAPIService) GetProcurementCatalogByParentIdMinimumStockByWarehouseCountExecute(r ApiGetProcurementCatalogByParentIdMinimumStockByWarehouseCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.GetProcurementCatalogByParentIdMinimumStockByWarehouseCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) ClientId(clientId string) ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Execute() (*MinimumStockByWarehouse, *http.Response, error) {
	return r.ApiService.PatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r)
}

/*
PatchProcurementCatalogByParentIdMinimumStockByWarehouseById Patch MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id minimumStockByWarehouseId
 @param parentId catalogId
 @return ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest
*/
func (a *MinimumStockByWarehousesAPIService) PatchProcurementCatalogByParentIdMinimumStockByWarehouseById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	return ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MinimumStockByWarehouse
func (a *MinimumStockByWarehousesAPIService) PatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r ApiPatchProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) (*MinimumStockByWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MinimumStockByWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.PatchProcurementCatalogByParentIdMinimumStockByWarehouseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	parentId int32
	clientId *string
	minimumStockByWarehouse *MinimumStockByWarehouse
}

// 
func (r ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest) ClientId(clientId string) ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.clientId = &clientId
	return r
}

// minimumStockByWarehouse
func (r ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest) MinimumStockByWarehouse(minimumStockByWarehouse MinimumStockByWarehouse) ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	r.minimumStockByWarehouse = &minimumStockByWarehouse
	return r
}

func (r ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest) Execute() (*MinimumStockByWarehouse, *http.Response, error) {
	return r.ApiService.PostProcurementCatalogByParentIdMinimumStockByWarehouseExecute(r)
}

/*
PostProcurementCatalogByParentIdMinimumStockByWarehouse Post MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId catalogId
 @return ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest
*/
func (a *MinimumStockByWarehousesAPIService) PostProcurementCatalogByParentIdMinimumStockByWarehouse(ctx context.Context, parentId int32) ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest {
	return ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MinimumStockByWarehouse
func (a *MinimumStockByWarehousesAPIService) PostProcurementCatalogByParentIdMinimumStockByWarehouseExecute(r ApiPostProcurementCatalogByParentIdMinimumStockByWarehouseRequest) (*MinimumStockByWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MinimumStockByWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.PostProcurementCatalogByParentIdMinimumStockByWarehouse")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.minimumStockByWarehouse == nil {
		return localVarReturnValue, nil, reportError("minimumStockByWarehouse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.minimumStockByWarehouse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest struct {
	ctx context.Context
	ApiService *MinimumStockByWarehousesAPIService
	id int32
	parentId int32
	clientId *string
	minimumStockByWarehouse *MinimumStockByWarehouse
}

// 
func (r ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) ClientId(clientId string) ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.clientId = &clientId
	return r
}

// minimumStockByWarehouse
func (r ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) MinimumStockByWarehouse(minimumStockByWarehouse MinimumStockByWarehouse) ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	r.minimumStockByWarehouse = &minimumStockByWarehouse
	return r
}

func (r ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) Execute() (*MinimumStockByWarehouse, *http.Response, error) {
	return r.ApiService.PutProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r)
}

/*
PutProcurementCatalogByParentIdMinimumStockByWarehouseById Put MinimumStockByWarehouse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id minimumStockByWarehouseId
 @param parentId catalogId
 @return ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest
*/
func (a *MinimumStockByWarehousesAPIService) PutProcurementCatalogByParentIdMinimumStockByWarehouseById(ctx context.Context, id int32, parentId int32) ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest {
	return ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return MinimumStockByWarehouse
func (a *MinimumStockByWarehousesAPIService) PutProcurementCatalogByParentIdMinimumStockByWarehouseByIdExecute(r ApiPutProcurementCatalogByParentIdMinimumStockByWarehouseByIdRequest) (*MinimumStockByWarehouse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MinimumStockByWarehouse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MinimumStockByWarehousesAPIService.PutProcurementCatalogByParentIdMinimumStockByWarehouseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/catalog/{parentId}/minimumStockByWarehouse/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.minimumStockByWarehouse == nil {
		return localVarReturnValue, nil, reportError("minimumStockByWarehouse is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.minimumStockByWarehouse
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
