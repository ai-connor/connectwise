/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// Office365EmailApplicationInfosAPIService Office365EmailApplicationInfosAPI service
type Office365EmailApplicationInfosAPIService service

type ApiGetSystemOffice365ApplicationByIdInfoRequest struct {
	ctx context.Context
	ApiService *Office365EmailApplicationInfosAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) Conditions(conditions string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) ChildConditions(childConditions string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) OrderBy(orderBy string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) Fields(fields string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) Page(page int32) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) PageSize(pageSize int32) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) PageId(pageId int32) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) ClientId(clientId string) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365ApplicationByIdInfoRequest) Execute() (*Office365EmailApplicationInfo, *http.Response, error) {
	return r.ApiService.GetSystemOffice365ApplicationByIdInfoExecute(r)
}

/*
GetSystemOffice365ApplicationByIdInfo Get Office365EmailApplicationInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Office365EmailApplicationInfoId
 @return ApiGetSystemOffice365ApplicationByIdInfoRequest
*/
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationByIdInfo(ctx context.Context, id int32) ApiGetSystemOffice365ApplicationByIdInfoRequest {
	return ApiGetSystemOffice365ApplicationByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Office365EmailApplicationInfo
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationByIdInfoExecute(r ApiGetSystemOffice365ApplicationByIdInfoRequest) (*Office365EmailApplicationInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Office365EmailApplicationInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailApplicationInfosAPIService.GetSystemOffice365ApplicationByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/application/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOffice365ApplicationInfoRequest struct {
	ctx context.Context
	ApiService *Office365EmailApplicationInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) Conditions(conditions string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) ChildConditions(childConditions string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) OrderBy(orderBy string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) Fields(fields string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) Page(page int32) ApiGetSystemOffice365ApplicationInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) PageSize(pageSize int32) ApiGetSystemOffice365ApplicationInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) PageId(pageId int32) ApiGetSystemOffice365ApplicationInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoRequest) ClientId(clientId string) ApiGetSystemOffice365ApplicationInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365ApplicationInfoRequest) Execute() ([]Office365EmailApplicationInfo, *http.Response, error) {
	return r.ApiService.GetSystemOffice365ApplicationInfoExecute(r)
}

/*
GetSystemOffice365ApplicationInfo Get List of Office365EmailApplicationInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemOffice365ApplicationInfoRequest
*/
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationInfo(ctx context.Context) ApiGetSystemOffice365ApplicationInfoRequest {
	return ApiGetSystemOffice365ApplicationInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Office365EmailApplicationInfo
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationInfoExecute(r ApiGetSystemOffice365ApplicationInfoRequest) ([]Office365EmailApplicationInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Office365EmailApplicationInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailApplicationInfosAPIService.GetSystemOffice365ApplicationInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/application/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOffice365ApplicationInfoCountRequest struct {
	ctx context.Context
	ApiService *Office365EmailApplicationInfosAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) Conditions(conditions string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) ChildConditions(childConditions string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) OrderBy(orderBy string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) Fields(fields string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) Page(page int32) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) PageSize(pageSize int32) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) PageId(pageId int32) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365ApplicationInfoCountRequest) ClientId(clientId string) ApiGetSystemOffice365ApplicationInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365ApplicationInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemOffice365ApplicationInfoCountExecute(r)
}

/*
GetSystemOffice365ApplicationInfoCount Get Count of Office365EmailApplicationInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemOffice365ApplicationInfoCountRequest
*/
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationInfoCount(ctx context.Context) ApiGetSystemOffice365ApplicationInfoCountRequest {
	return ApiGetSystemOffice365ApplicationInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *Office365EmailApplicationInfosAPIService) GetSystemOffice365ApplicationInfoCountExecute(r ApiGetSystemOffice365ApplicationInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailApplicationInfosAPIService.GetSystemOffice365ApplicationInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/application/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
