/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// Office365EmailSetupsAPIService Office365EmailSetupsAPI service
type Office365EmailSetupsAPIService service

type ApiDeleteSystemOffice365EmailSetupsByIdRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemOffice365EmailSetupsByIdRequest) ClientId(clientId string) ApiDeleteSystemOffice365EmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemOffice365EmailSetupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemOffice365EmailSetupsByIdExecute(r)
}

/*
DeleteSystemOffice365EmailSetupsById Delete Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiDeleteSystemOffice365EmailSetupsByIdRequest
*/
func (a *Office365EmailSetupsAPIService) DeleteSystemOffice365EmailSetupsById(ctx context.Context, id int32) ApiDeleteSystemOffice365EmailSetupsByIdRequest {
	return ApiDeleteSystemOffice365EmailSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *Office365EmailSetupsAPIService) DeleteSystemOffice365EmailSetupsByIdExecute(r ApiDeleteSystemOffice365EmailSetupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.DeleteSystemOffice365EmailSetupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemOffice365EmailSetupsRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) Conditions(conditions string) ApiGetSystemOffice365EmailSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) ChildConditions(childConditions string) ApiGetSystemOffice365EmailSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365EmailSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) OrderBy(orderBy string) ApiGetSystemOffice365EmailSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) Fields(fields string) ApiGetSystemOffice365EmailSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) Page(page int32) ApiGetSystemOffice365EmailSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) PageSize(pageSize int32) ApiGetSystemOffice365EmailSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) PageId(pageId int32) ApiGetSystemOffice365EmailSetupsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsRequest) ClientId(clientId string) ApiGetSystemOffice365EmailSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365EmailSetupsRequest) Execute() ([]Office365EmailSetup, *http.Response, error) {
	return r.ApiService.GetSystemOffice365EmailSetupsExecute(r)
}

/*
GetSystemOffice365EmailSetups Get List of Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemOffice365EmailSetupsRequest
*/
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetups(ctx context.Context) ApiGetSystemOffice365EmailSetupsRequest {
	return ApiGetSystemOffice365EmailSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Office365EmailSetup
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsExecute(r ApiGetSystemOffice365EmailSetupsRequest) ([]Office365EmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Office365EmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.GetSystemOffice365EmailSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOffice365EmailSetupsByIdRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) Conditions(conditions string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) ChildConditions(childConditions string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) OrderBy(orderBy string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) Fields(fields string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) Page(page int32) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) PageSize(pageSize int32) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) PageId(pageId int32) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdRequest) ClientId(clientId string) ApiGetSystemOffice365EmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365EmailSetupsByIdRequest) Execute() (*Office365EmailSetup, *http.Response, error) {
	return r.ApiService.GetSystemOffice365EmailSetupsByIdExecute(r)
}

/*
GetSystemOffice365EmailSetupsById Get Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiGetSystemOffice365EmailSetupsByIdRequest
*/
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsById(ctx context.Context, id int32) ApiGetSystemOffice365EmailSetupsByIdRequest {
	return ApiGetSystemOffice365EmailSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Office365EmailSetup
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsByIdExecute(r ApiGetSystemOffice365EmailSetupsByIdRequest) (*Office365EmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Office365EmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.GetSystemOffice365EmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) Conditions(conditions string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) ChildConditions(childConditions string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) OrderBy(orderBy string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) Fields(fields string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) Page(page int32) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) PageSize(pageSize int32) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) PageId(pageId int32) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) ClientId(clientId string) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) Execute() ([]UserEmail, *http.Response, error) {
	return r.ApiService.GetSystemOffice365EmailSetupsByIdGetEmailsExecute(r)
}

/*
GetSystemOffice365EmailSetupsByIdGetEmails Get List of UserEmails from inbound ticket service

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest
*/
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsByIdGetEmails(ctx context.Context, id int32) ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest {
	return ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []UserEmail
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsByIdGetEmailsExecute(r ApiGetSystemOffice365EmailSetupsByIdGetEmailsRequest) ([]UserEmail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserEmail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.GetSystemOffice365EmailSetupsByIdGetEmails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}/getEmails/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOffice365EmailSetupsCountRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) Conditions(conditions string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) ChildConditions(childConditions string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) OrderBy(orderBy string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) Fields(fields string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) Page(page int32) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) PageSize(pageSize int32) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) PageId(pageId int32) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemOffice365EmailSetupsCountRequest) ClientId(clientId string) ApiGetSystemOffice365EmailSetupsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOffice365EmailSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemOffice365EmailSetupsCountExecute(r)
}

/*
GetSystemOffice365EmailSetupsCount Get Count of Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemOffice365EmailSetupsCountRequest
*/
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsCount(ctx context.Context) ApiGetSystemOffice365EmailSetupsCountRequest {
	return ApiGetSystemOffice365EmailSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *Office365EmailSetupsAPIService) GetSystemOffice365EmailSetupsCountExecute(r ApiGetSystemOffice365EmailSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.GetSystemOffice365EmailSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemOffice365EmailSetupsByIdRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemOffice365EmailSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemOffice365EmailSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemOffice365EmailSetupsByIdRequest) ClientId(clientId string) ApiPatchSystemOffice365EmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemOffice365EmailSetupsByIdRequest) Execute() (*Office365EmailSetup, *http.Response, error) {
	return r.ApiService.PatchSystemOffice365EmailSetupsByIdExecute(r)
}

/*
PatchSystemOffice365EmailSetupsById Patch Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiPatchSystemOffice365EmailSetupsByIdRequest
*/
func (a *Office365EmailSetupsAPIService) PatchSystemOffice365EmailSetupsById(ctx context.Context, id int32) ApiPatchSystemOffice365EmailSetupsByIdRequest {
	return ApiPatchSystemOffice365EmailSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Office365EmailSetup
func (a *Office365EmailSetupsAPIService) PatchSystemOffice365EmailSetupsByIdExecute(r ApiPatchSystemOffice365EmailSetupsByIdRequest) (*Office365EmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Office365EmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.PatchSystemOffice365EmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemOffice365EmailSetupsRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	office365EmailSetup *Office365EmailSetup
	clientId *string
}

// entity
func (r ApiPostSystemOffice365EmailSetupsRequest) Office365EmailSetup(office365EmailSetup Office365EmailSetup) ApiPostSystemOffice365EmailSetupsRequest {
	r.office365EmailSetup = &office365EmailSetup
	return r
}

// 
func (r ApiPostSystemOffice365EmailSetupsRequest) ClientId(clientId string) ApiPostSystemOffice365EmailSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemOffice365EmailSetupsRequest) Execute() (*Office365EmailSetup, *http.Response, error) {
	return r.ApiService.PostSystemOffice365EmailSetupsExecute(r)
}

/*
PostSystemOffice365EmailSetups Post Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemOffice365EmailSetupsRequest
*/
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetups(ctx context.Context) ApiPostSystemOffice365EmailSetupsRequest {
	return ApiPostSystemOffice365EmailSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Office365EmailSetup
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetupsExecute(r ApiPostSystemOffice365EmailSetupsRequest) (*Office365EmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Office365EmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.PostSystemOffice365EmailSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.office365EmailSetup == nil {
		return localVarReturnValue, nil, reportError("office365EmailSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.office365EmailSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest) ClientId(clientId string) ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemOffice365EmailSetupsByIdAuthorizeExecute(r)
}

/*
PostSystemOffice365EmailSetupsByIdAuthorize Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest
*/
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetupsByIdAuthorize(ctx context.Context, id int32) ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest {
	return ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetupsByIdAuthorizeExecute(r ApiPostSystemOffice365EmailSetupsByIdAuthorizeRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.PostSystemOffice365EmailSetupsByIdAuthorize")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}/authorize"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest) ClientId(clientId string) ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemOffice365EmailSetupsByIdTestConnectionExecute(r)
}

/*
PostSystemOffice365EmailSetupsByIdTestConnection Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest
*/
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetupsByIdTestConnection(ctx context.Context, id int32) ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest {
	return ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *Office365EmailSetupsAPIService) PostSystemOffice365EmailSetupsByIdTestConnectionExecute(r ApiPostSystemOffice365EmailSetupsByIdTestConnectionRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.PostSystemOffice365EmailSetupsByIdTestConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}/testConnection"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemOffice365EmailSetupsByIdRequest struct {
	ctx context.Context
	ApiService *Office365EmailSetupsAPIService
	id int32
	office365EmailSetup *Office365EmailSetup
	clientId *string
}

// entity
func (r ApiPutSystemOffice365EmailSetupsByIdRequest) Office365EmailSetup(office365EmailSetup Office365EmailSetup) ApiPutSystemOffice365EmailSetupsByIdRequest {
	r.office365EmailSetup = &office365EmailSetup
	return r
}

// 
func (r ApiPutSystemOffice365EmailSetupsByIdRequest) ClientId(clientId string) ApiPutSystemOffice365EmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemOffice365EmailSetupsByIdRequest) Execute() (*Office365EmailSetup, *http.Response, error) {
	return r.ApiService.PutSystemOffice365EmailSetupsByIdExecute(r)
}

/*
PutSystemOffice365EmailSetupsById Put Office365EmailSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailSetupId
 @return ApiPutSystemOffice365EmailSetupsByIdRequest
*/
func (a *Office365EmailSetupsAPIService) PutSystemOffice365EmailSetupsById(ctx context.Context, id int32) ApiPutSystemOffice365EmailSetupsByIdRequest {
	return ApiPutSystemOffice365EmailSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Office365EmailSetup
func (a *Office365EmailSetupsAPIService) PutSystemOffice365EmailSetupsByIdExecute(r ApiPutSystemOffice365EmailSetupsByIdRequest) (*Office365EmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Office365EmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "Office365EmailSetupsAPIService.PutSystemOffice365EmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/office365/emailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.office365EmailSetup == nil {
		return localVarReturnValue, nil, reportError("office365EmailSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.office365EmailSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
