/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityForecastItemsAPIService OpportunityForecastItemsAPI service
type OpportunityForecastItemsAPIService service

type ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityForecastItemsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesByParentIdForecastByIdExecute(r)
}

/*
DeleteSalesOpportunitiesByParentIdForecastById Delete ForecastItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id forecastId
 @param parentId opportunityId
 @return ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest
*/
func (a *OpportunityForecastItemsAPIService) DeleteSalesOpportunitiesByParentIdForecastById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest {
	return ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *OpportunityForecastItemsAPIService) DeleteSalesOpportunitiesByParentIdForecastByIdExecute(r ApiDeleteSalesOpportunitiesByParentIdForecastByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityForecastItemsAPIService.DeleteSalesOpportunitiesByParentIdForecastById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/forecast/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdForecastByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityForecastItemsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) Execute() (*ForecastItem, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdForecastByIdExecute(r)
}

/*
GetSalesOpportunitiesByParentIdForecastById Get ForecastItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id forecastId
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdForecastByIdRequest
*/
func (a *OpportunityForecastItemsAPIService) GetSalesOpportunitiesByParentIdForecastById(ctx context.Context, id int32, parentId int32) ApiGetSalesOpportunitiesByParentIdForecastByIdRequest {
	return ApiGetSalesOpportunitiesByParentIdForecastByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ForecastItem
func (a *OpportunityForecastItemsAPIService) GetSalesOpportunitiesByParentIdForecastByIdExecute(r ApiGetSalesOpportunitiesByParentIdForecastByIdRequest) (*ForecastItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForecastItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityForecastItemsAPIService.GetSalesOpportunitiesByParentIdForecastById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/forecast/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityForecastItemsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest) Execute() (*ForecastItem, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesByParentIdForecastByIdExecute(r)
}

/*
PatchSalesOpportunitiesByParentIdForecastById Patch ForecastItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id forecastId
 @param parentId opportunityId
 @return ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest
*/
func (a *OpportunityForecastItemsAPIService) PatchSalesOpportunitiesByParentIdForecastById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest {
	return ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ForecastItem
func (a *OpportunityForecastItemsAPIService) PatchSalesOpportunitiesByParentIdForecastByIdExecute(r ApiPatchSalesOpportunitiesByParentIdForecastByIdRequest) (*ForecastItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForecastItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityForecastItemsAPIService.PatchSalesOpportunitiesByParentIdForecastById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/forecast/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByParentIdForecastByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityForecastItemsAPIService
	id int32
	parentId int32
	clientId *string
	forecastItem *ForecastItem
}

// 
func (r ApiPostSalesOpportunitiesByParentIdForecastByIdRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByParentIdForecastByIdRequest {
	r.clientId = &clientId
	return r
}

// forecast
func (r ApiPostSalesOpportunitiesByParentIdForecastByIdRequest) ForecastItem(forecastItem ForecastItem) ApiPostSalesOpportunitiesByParentIdForecastByIdRequest {
	r.forecastItem = &forecastItem
	return r
}

func (r ApiPostSalesOpportunitiesByParentIdForecastByIdRequest) Execute() (*ForecastItem, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByParentIdForecastByIdExecute(r)
}

/*
PostSalesOpportunitiesByParentIdForecastById Post ForecastItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id forecastId
 @param parentId opportunityId
 @return ApiPostSalesOpportunitiesByParentIdForecastByIdRequest
*/
func (a *OpportunityForecastItemsAPIService) PostSalesOpportunitiesByParentIdForecastById(ctx context.Context, id int32, parentId int32) ApiPostSalesOpportunitiesByParentIdForecastByIdRequest {
	return ApiPostSalesOpportunitiesByParentIdForecastByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ForecastItem
func (a *OpportunityForecastItemsAPIService) PostSalesOpportunitiesByParentIdForecastByIdExecute(r ApiPostSalesOpportunitiesByParentIdForecastByIdRequest) (*ForecastItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForecastItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityForecastItemsAPIService.PostSalesOpportunitiesByParentIdForecastById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/forecast/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.forecastItem == nil {
		return localVarReturnValue, nil, reportError("forecastItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.forecastItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesByParentIdForecastByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityForecastItemsAPIService
	id int32
	parentId int32
	clientId *string
	forecastItem *ForecastItem
}

// 
func (r ApiPutSalesOpportunitiesByParentIdForecastByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesByParentIdForecastByIdRequest {
	r.clientId = &clientId
	return r
}

// forecast
func (r ApiPutSalesOpportunitiesByParentIdForecastByIdRequest) ForecastItem(forecastItem ForecastItem) ApiPutSalesOpportunitiesByParentIdForecastByIdRequest {
	r.forecastItem = &forecastItem
	return r
}

func (r ApiPutSalesOpportunitiesByParentIdForecastByIdRequest) Execute() (*ForecastItem, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesByParentIdForecastByIdExecute(r)
}

/*
PutSalesOpportunitiesByParentIdForecastById Put ForecastItem

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id forecastId
 @param parentId opportunityId
 @return ApiPutSalesOpportunitiesByParentIdForecastByIdRequest
*/
func (a *OpportunityForecastItemsAPIService) PutSalesOpportunitiesByParentIdForecastById(ctx context.Context, id int32, parentId int32) ApiPutSalesOpportunitiesByParentIdForecastByIdRequest {
	return ApiPutSalesOpportunitiesByParentIdForecastByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ForecastItem
func (a *OpportunityForecastItemsAPIService) PutSalesOpportunitiesByParentIdForecastByIdExecute(r ApiPutSalesOpportunitiesByParentIdForecastByIdRequest) (*ForecastItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ForecastItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityForecastItemsAPIService.PutSalesOpportunitiesByParentIdForecastById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/forecast/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.forecastItem == nil {
		return localVarReturnValue, nil, reportError("forecastItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.forecastItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
