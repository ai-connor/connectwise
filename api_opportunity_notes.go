/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityNotesAPIService OpportunityNotesAPI service
type OpportunityNotesAPIService service

type ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesByParentIdNotesByIdExecute(r)
}

/*
DeleteSalesOpportunitiesByParentIdNotesById Delete OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId opportunityId
 @return ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest
*/
func (a *OpportunityNotesAPIService) DeleteSalesOpportunitiesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest {
	return ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *OpportunityNotesAPIService) DeleteSalesOpportunitiesByParentIdNotesByIdExecute(r ApiDeleteSalesOpportunitiesByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.DeleteSalesOpportunitiesByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdNotesRequest) Execute() ([]OpportunityNote, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdNotesExecute(r)
}

/*
GetSalesOpportunitiesByParentIdNotes Get List of OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdNotesRequest
*/
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotes(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdNotesRequest {
	return ApiGetSalesOpportunitiesByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []OpportunityNote
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotesExecute(r ApiGetSalesOpportunitiesByParentIdNotesRequest) ([]OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.GetSalesOpportunitiesByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) Execute() (*OpportunityNote, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdNotesByIdExecute(r)
}

/*
GetSalesOpportunitiesByParentIdNotesById Get OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdNotesByIdRequest
*/
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetSalesOpportunitiesByParentIdNotesByIdRequest {
	return ApiGetSalesOpportunitiesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OpportunityNote
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotesByIdExecute(r ApiGetSalesOpportunitiesByParentIdNotesByIdRequest) (*OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.GetSalesOpportunitiesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) Execute() ([]OpportunityNote, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdNotesCountExecute(r)
}

/*
GetSalesOpportunitiesByParentIdNotesCount Get List of OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdNotesCountRequest
*/
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdNotesCountRequest {
	return ApiGetSalesOpportunitiesByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []OpportunityNote
func (a *OpportunityNotesAPIService) GetSalesOpportunitiesByParentIdNotesCountExecute(r ApiGetSalesOpportunitiesByParentIdNotesCountRequest) ([]OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.GetSalesOpportunitiesByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest) Execute() (*OpportunityNote, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesByParentIdNotesByIdExecute(r)
}

/*
PatchSalesOpportunitiesByParentIdNotesById Patch OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId opportunityId
 @return ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest
*/
func (a *OpportunityNotesAPIService) PatchSalesOpportunitiesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest {
	return ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OpportunityNote
func (a *OpportunityNotesAPIService) PatchSalesOpportunitiesByParentIdNotesByIdExecute(r ApiPatchSalesOpportunitiesByParentIdNotesByIdRequest) (*OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.PatchSalesOpportunitiesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	parentId int32
	opportunityNote *OpportunityNote
	clientId *string
}

// note
func (r ApiPostSalesOpportunitiesByParentIdNotesRequest) OpportunityNote(opportunityNote OpportunityNote) ApiPostSalesOpportunitiesByParentIdNotesRequest {
	r.opportunityNote = &opportunityNote
	return r
}

// 
func (r ApiPostSalesOpportunitiesByParentIdNotesRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSalesOpportunitiesByParentIdNotesRequest) Execute() (*OpportunityNote, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByParentIdNotesExecute(r)
}

/*
PostSalesOpportunitiesByParentIdNotes Post OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiPostSalesOpportunitiesByParentIdNotesRequest
*/
func (a *OpportunityNotesAPIService) PostSalesOpportunitiesByParentIdNotes(ctx context.Context, parentId int32) ApiPostSalesOpportunitiesByParentIdNotesRequest {
	return ApiPostSalesOpportunitiesByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OpportunityNote
func (a *OpportunityNotesAPIService) PostSalesOpportunitiesByParentIdNotesExecute(r ApiPostSalesOpportunitiesByParentIdNotesRequest) (*OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.PostSalesOpportunitiesByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.opportunityNote == nil {
		return localVarReturnValue, nil, reportError("opportunityNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.opportunityNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityNotesAPIService
	id int32
	parentId int32
	opportunityNote *OpportunityNote
	clientId *string
}

// note
func (r ApiPutSalesOpportunitiesByParentIdNotesByIdRequest) OpportunityNote(opportunityNote OpportunityNote) ApiPutSalesOpportunitiesByParentIdNotesByIdRequest {
	r.opportunityNote = &opportunityNote
	return r
}

// 
func (r ApiPutSalesOpportunitiesByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSalesOpportunitiesByParentIdNotesByIdRequest) Execute() (*OpportunityNote, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesByParentIdNotesByIdExecute(r)
}

/*
PutSalesOpportunitiesByParentIdNotesById Put OpportunityNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId opportunityId
 @return ApiPutSalesOpportunitiesByParentIdNotesByIdRequest
*/
func (a *OpportunityNotesAPIService) PutSalesOpportunitiesByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutSalesOpportunitiesByParentIdNotesByIdRequest {
	return ApiPutSalesOpportunitiesByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OpportunityNote
func (a *OpportunityNotesAPIService) PutSalesOpportunitiesByParentIdNotesByIdExecute(r ApiPutSalesOpportunitiesByParentIdNotesByIdRequest) (*OpportunityNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityNotesAPIService.PutSalesOpportunitiesByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.opportunityNote == nil {
		return localVarReturnValue, nil, reportError("opportunityNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.opportunityNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
