/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityRatingsAPIService OpportunityRatingsAPI service
type OpportunityRatingsAPIService service

type ApiDeleteSalesOpportunitiesRatingsByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesOpportunitiesRatingsByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesRatingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesRatingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesRatingsByIdExecute(r)
}

/*
DeleteSalesOpportunitiesRatingsById Delete OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ratingId
 @return ApiDeleteSalesOpportunitiesRatingsByIdRequest
*/
func (a *OpportunityRatingsAPIService) DeleteSalesOpportunitiesRatingsById(ctx context.Context, id int32) ApiDeleteSalesOpportunitiesRatingsByIdRequest {
	return ApiDeleteSalesOpportunitiesRatingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *OpportunityRatingsAPIService) DeleteSalesOpportunitiesRatingsByIdExecute(r ApiDeleteSalesOpportunitiesRatingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.DeleteSalesOpportunitiesRatingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsRequest) Execute() ([]OpportunityRating, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsExecute(r)
}

/*
GetSalesOpportunitiesRatings Get List of OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesRatingsRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatings(ctx context.Context) ApiGetSalesOpportunitiesRatingsRequest {
	return ApiGetSalesOpportunitiesRatingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpportunityRating
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsExecute(r ApiGetSalesOpportunitiesRatingsRequest) ([]OpportunityRating, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityRating
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsByIdRequest) Execute() (*OpportunityRating, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsByIdExecute(r)
}

/*
GetSalesOpportunitiesRatingsById Get OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ratingId
 @return ApiGetSalesOpportunitiesRatingsByIdRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsById(ctx context.Context, id int32) ApiGetSalesOpportunitiesRatingsByIdRequest {
	return ApiGetSalesOpportunitiesRatingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityRating
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsByIdExecute(r ApiGetSalesOpportunitiesRatingsByIdRequest) (*OpportunityRating, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityRating
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsByIdInfoRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) Execute() (*OpportunityRatingInfo, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsByIdInfoExecute(r)
}

/*
GetSalesOpportunitiesRatingsByIdInfo Get OpportunityRatingInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ratingId
 @return ApiGetSalesOpportunitiesRatingsByIdInfoRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsByIdInfo(ctx context.Context, id int32) ApiGetSalesOpportunitiesRatingsByIdInfoRequest {
	return ApiGetSalesOpportunitiesRatingsByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityRatingInfo
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsByIdInfoExecute(r ApiGetSalesOpportunitiesRatingsByIdInfoRequest) (*OpportunityRatingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityRatingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatingsByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsCountRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsCountExecute(r)
}

/*
GetSalesOpportunitiesRatingsCount Get Count of OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesRatingsCountRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsCount(ctx context.Context) ApiGetSalesOpportunitiesRatingsCountRequest {
	return ApiGetSalesOpportunitiesRatingsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsCountExecute(r ApiGetSalesOpportunitiesRatingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsInfoRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsInfoRequest) Execute() ([]OpportunityRatingInfo, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsInfoExecute(r)
}

/*
GetSalesOpportunitiesRatingsInfo Get List of OpportunityRatingInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesRatingsInfoRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsInfo(ctx context.Context) ApiGetSalesOpportunitiesRatingsInfoRequest {
	return ApiGetSalesOpportunitiesRatingsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpportunityRatingInfo
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsInfoExecute(r ApiGetSalesOpportunitiesRatingsInfoRequest) ([]OpportunityRatingInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityRatingInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatingsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRatingsInfoCountRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) Fields(fields string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) Page(page int32) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRatingsInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesRatingsInfoCountExecute(r)
}

/*
GetSalesOpportunitiesRatingsInfoCount Get Count of OpportunityRatingInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesRatingsInfoCountRequest
*/
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsInfoCount(ctx context.Context) ApiGetSalesOpportunitiesRatingsInfoCountRequest {
	return ApiGetSalesOpportunitiesRatingsInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OpportunityRatingsAPIService) GetSalesOpportunitiesRatingsInfoCountExecute(r ApiGetSalesOpportunitiesRatingsInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.GetSalesOpportunitiesRatingsInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesRatingsByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesRatingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesRatingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSalesOpportunitiesRatingsByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesRatingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSalesOpportunitiesRatingsByIdRequest) Execute() (*OpportunityRating, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesRatingsByIdExecute(r)
}

/*
PatchSalesOpportunitiesRatingsById Patch OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ratingId
 @return ApiPatchSalesOpportunitiesRatingsByIdRequest
*/
func (a *OpportunityRatingsAPIService) PatchSalesOpportunitiesRatingsById(ctx context.Context, id int32) ApiPatchSalesOpportunitiesRatingsByIdRequest {
	return ApiPatchSalesOpportunitiesRatingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityRating
func (a *OpportunityRatingsAPIService) PatchSalesOpportunitiesRatingsByIdExecute(r ApiPatchSalesOpportunitiesRatingsByIdRequest) (*OpportunityRating, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityRating
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.PatchSalesOpportunitiesRatingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesRatingsRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	opportunityRating *OpportunityRating
	clientId *string
}

// opportunityRating
func (r ApiPostSalesOpportunitiesRatingsRequest) OpportunityRating(opportunityRating OpportunityRating) ApiPostSalesOpportunitiesRatingsRequest {
	r.opportunityRating = &opportunityRating
	return r
}

// 
func (r ApiPostSalesOpportunitiesRatingsRequest) ClientId(clientId string) ApiPostSalesOpportunitiesRatingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSalesOpportunitiesRatingsRequest) Execute() (*OpportunityRating, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesRatingsExecute(r)
}

/*
PostSalesOpportunitiesRatings Post OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesOpportunitiesRatingsRequest
*/
func (a *OpportunityRatingsAPIService) PostSalesOpportunitiesRatings(ctx context.Context) ApiPostSalesOpportunitiesRatingsRequest {
	return ApiPostSalesOpportunitiesRatingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpportunityRating
func (a *OpportunityRatingsAPIService) PostSalesOpportunitiesRatingsExecute(r ApiPostSalesOpportunitiesRatingsRequest) (*OpportunityRating, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityRating
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.PostSalesOpportunitiesRatings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.opportunityRating == nil {
		return localVarReturnValue, nil, reportError("opportunityRating is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.opportunityRating
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesRatingsByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityRatingsAPIService
	id int32
	opportunityRating *OpportunityRating
	clientId *string
}

// opportunityRating
func (r ApiPutSalesOpportunitiesRatingsByIdRequest) OpportunityRating(opportunityRating OpportunityRating) ApiPutSalesOpportunitiesRatingsByIdRequest {
	r.opportunityRating = &opportunityRating
	return r
}

// 
func (r ApiPutSalesOpportunitiesRatingsByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesRatingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSalesOpportunitiesRatingsByIdRequest) Execute() (*OpportunityRating, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesRatingsByIdExecute(r)
}

/*
PutSalesOpportunitiesRatingsById Put OpportunityRating

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ratingId
 @return ApiPutSalesOpportunitiesRatingsByIdRequest
*/
func (a *OpportunityRatingsAPIService) PutSalesOpportunitiesRatingsById(ctx context.Context, id int32) ApiPutSalesOpportunitiesRatingsByIdRequest {
	return ApiPutSalesOpportunitiesRatingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityRating
func (a *OpportunityRatingsAPIService) PutSalesOpportunitiesRatingsByIdExecute(r ApiPutSalesOpportunitiesRatingsByIdRequest) (*OpportunityRating, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityRating
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityRatingsAPIService.PutSalesOpportunitiesRatingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/ratings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.opportunityRating == nil {
		return localVarReturnValue, nil, reportError("opportunityRating is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.opportunityRating
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
