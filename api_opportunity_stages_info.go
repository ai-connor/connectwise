/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityStagesInfoAPIService OpportunityStagesInfoAPI service
type OpportunityStagesInfoAPIService service

type ApiGetSalesStagesByIdInfoRequest struct {
	ctx context.Context
	ApiService *OpportunityStagesInfoAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) Conditions(conditions string) ApiGetSalesStagesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) ChildConditions(childConditions string) ApiGetSalesStagesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesStagesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) OrderBy(orderBy string) ApiGetSalesStagesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) Fields(fields string) ApiGetSalesStagesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) Page(page int32) ApiGetSalesStagesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) PageSize(pageSize int32) ApiGetSalesStagesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) PageId(pageId int32) ApiGetSalesStagesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesStagesByIdInfoRequest) ClientId(clientId string) ApiGetSalesStagesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesStagesByIdInfoRequest) Execute() (*OpportunityStageInfo, *http.Response, error) {
	return r.ApiService.GetSalesStagesByIdInfoExecute(r)
}

/*
GetSalesStagesByIdInfo Get StageInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id stageId
 @return ApiGetSalesStagesByIdInfoRequest
*/
func (a *OpportunityStagesInfoAPIService) GetSalesStagesByIdInfo(ctx context.Context, id int32) ApiGetSalesStagesByIdInfoRequest {
	return ApiGetSalesStagesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityStageInfo
func (a *OpportunityStagesInfoAPIService) GetSalesStagesByIdInfoExecute(r ApiGetSalesStagesByIdInfoRequest) (*OpportunityStageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityStageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStagesInfoAPIService.GetSalesStagesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/stages/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesStagesInfoRequest struct {
	ctx context.Context
	ApiService *OpportunityStagesInfoAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesStagesInfoRequest) Conditions(conditions string) ApiGetSalesStagesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) ChildConditions(childConditions string) ApiGetSalesStagesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesStagesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) OrderBy(orderBy string) ApiGetSalesStagesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) Fields(fields string) ApiGetSalesStagesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) Page(page int32) ApiGetSalesStagesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) PageSize(pageSize int32) ApiGetSalesStagesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) PageId(pageId int32) ApiGetSalesStagesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesStagesInfoRequest) ClientId(clientId string) ApiGetSalesStagesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesStagesInfoRequest) Execute() ([]OpportunityStageInfo, *http.Response, error) {
	return r.ApiService.GetSalesStagesInfoExecute(r)
}

/*
GetSalesStagesInfo Get List of StageInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesStagesInfoRequest
*/
func (a *OpportunityStagesInfoAPIService) GetSalesStagesInfo(ctx context.Context) ApiGetSalesStagesInfoRequest {
	return ApiGetSalesStagesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpportunityStageInfo
func (a *OpportunityStagesInfoAPIService) GetSalesStagesInfoExecute(r ApiGetSalesStagesInfoRequest) ([]OpportunityStageInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityStageInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStagesInfoAPIService.GetSalesStagesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/stages/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesStagesInfoCountRequest struct {
	ctx context.Context
	ApiService *OpportunityStagesInfoAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesStagesInfoCountRequest) Conditions(conditions string) ApiGetSalesStagesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) ChildConditions(childConditions string) ApiGetSalesStagesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesStagesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) OrderBy(orderBy string) ApiGetSalesStagesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) Fields(fields string) ApiGetSalesStagesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) Page(page int32) ApiGetSalesStagesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) PageSize(pageSize int32) ApiGetSalesStagesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) PageId(pageId int32) ApiGetSalesStagesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesStagesInfoCountRequest) ClientId(clientId string) ApiGetSalesStagesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesStagesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesStagesInfoCountExecute(r)
}

/*
GetSalesStagesInfoCount Get Count of StageInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesStagesInfoCountRequest
*/
func (a *OpportunityStagesInfoAPIService) GetSalesStagesInfoCount(ctx context.Context) ApiGetSalesStagesInfoCountRequest {
	return ApiGetSalesStagesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OpportunityStagesInfoAPIService) GetSalesStagesInfoCountExecute(r ApiGetSalesStagesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStagesInfoAPIService.GetSalesStagesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/stages/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
