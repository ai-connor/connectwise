/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityTeamsAPIService OpportunityTeamsAPI service
type OpportunityTeamsAPIService service

type ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesByParentIdTeamByIdExecute(r)
}

/*
DeleteSalesOpportunitiesByParentIdTeamById Delete Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamId
 @param parentId opportunityId
 @return ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest
*/
func (a *OpportunityTeamsAPIService) DeleteSalesOpportunitiesByParentIdTeamById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest {
	return ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *OpportunityTeamsAPIService) DeleteSalesOpportunitiesByParentIdTeamByIdExecute(r ApiDeleteSalesOpportunitiesByParentIdTeamByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.DeleteSalesOpportunitiesByParentIdTeamById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdTeamRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdTeamRequest) Execute() ([]Team, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdTeamExecute(r)
}

/*
GetSalesOpportunitiesByParentIdTeam Get List of Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdTeamRequest
*/
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeam(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdTeamRequest {
	return ApiGetSalesOpportunitiesByParentIdTeamRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []Team
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeamExecute(r ApiGetSalesOpportunitiesByParentIdTeamRequest) ([]Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.GetSalesOpportunitiesByParentIdTeam")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdTeamByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdTeamByIdExecute(r)
}

/*
GetSalesOpportunitiesByParentIdTeamById Get Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamId
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdTeamByIdRequest
*/
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeamById(ctx context.Context, id int32, parentId int32) ApiGetSalesOpportunitiesByParentIdTeamByIdRequest {
	return ApiGetSalesOpportunitiesByParentIdTeamByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Team
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeamByIdExecute(r ApiGetSalesOpportunitiesByParentIdTeamByIdRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.GetSalesOpportunitiesByParentIdTeamById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdTeamCountRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdTeamCountExecute(r)
}

/*
GetSalesOpportunitiesByParentIdTeamCount Get Count of Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiGetSalesOpportunitiesByParentIdTeamCountRequest
*/
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeamCount(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdTeamCountRequest {
	return ApiGetSalesOpportunitiesByParentIdTeamCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *OpportunityTeamsAPIService) GetSalesOpportunitiesByParentIdTeamCountExecute(r ApiGetSalesOpportunitiesByParentIdTeamCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.GetSalesOpportunitiesByParentIdTeamCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesByParentIdTeamByIdExecute(r)
}

/*
PatchSalesOpportunitiesByParentIdTeamById Patch Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamId
 @param parentId opportunityId
 @return ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest
*/
func (a *OpportunityTeamsAPIService) PatchSalesOpportunitiesByParentIdTeamById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest {
	return ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Team
func (a *OpportunityTeamsAPIService) PatchSalesOpportunitiesByParentIdTeamByIdExecute(r ApiPatchSalesOpportunitiesByParentIdTeamByIdRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.PatchSalesOpportunitiesByParentIdTeamById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByParentIdTeamRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	parentId int32
	clientId *string
	team *Team
}

// 
func (r ApiPostSalesOpportunitiesByParentIdTeamRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByParentIdTeamRequest {
	r.clientId = &clientId
	return r
}

// team
func (r ApiPostSalesOpportunitiesByParentIdTeamRequest) Team(team Team) ApiPostSalesOpportunitiesByParentIdTeamRequest {
	r.team = &team
	return r
}

func (r ApiPostSalesOpportunitiesByParentIdTeamRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByParentIdTeamExecute(r)
}

/*
PostSalesOpportunitiesByParentIdTeam Post Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId opportunityId
 @return ApiPostSalesOpportunitiesByParentIdTeamRequest
*/
func (a *OpportunityTeamsAPIService) PostSalesOpportunitiesByParentIdTeam(ctx context.Context, parentId int32) ApiPostSalesOpportunitiesByParentIdTeamRequest {
	return ApiPostSalesOpportunitiesByParentIdTeamRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Team
func (a *OpportunityTeamsAPIService) PostSalesOpportunitiesByParentIdTeamExecute(r ApiPostSalesOpportunitiesByParentIdTeamRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.PostSalesOpportunitiesByParentIdTeam")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.team == nil {
		return localVarReturnValue, nil, reportError("team is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.team
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesByParentIdTeamByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTeamsAPIService
	id int32
	parentId int32
	clientId *string
	team *Team
}

// 
func (r ApiPutSalesOpportunitiesByParentIdTeamByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesByParentIdTeamByIdRequest {
	r.clientId = &clientId
	return r
}

// team
func (r ApiPutSalesOpportunitiesByParentIdTeamByIdRequest) Team(team Team) ApiPutSalesOpportunitiesByParentIdTeamByIdRequest {
	r.team = &team
	return r
}

func (r ApiPutSalesOpportunitiesByParentIdTeamByIdRequest) Execute() (*Team, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesByParentIdTeamByIdExecute(r)
}

/*
PutSalesOpportunitiesByParentIdTeamById Put Team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamId
 @param parentId opportunityId
 @return ApiPutSalesOpportunitiesByParentIdTeamByIdRequest
*/
func (a *OpportunityTeamsAPIService) PutSalesOpportunitiesByParentIdTeamById(ctx context.Context, id int32, parentId int32) ApiPutSalesOpportunitiesByParentIdTeamByIdRequest {
	return ApiPutSalesOpportunitiesByParentIdTeamByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Team
func (a *OpportunityTeamsAPIService) PutSalesOpportunitiesByParentIdTeamByIdExecute(r ApiPutSalesOpportunitiesByParentIdTeamByIdRequest) (*Team, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Team
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTeamsAPIService.PutSalesOpportunitiesByParentIdTeamById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/team/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.team == nil {
		return localVarReturnValue, nil, reportError("team is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.team
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
