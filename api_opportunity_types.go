/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OpportunityTypesAPIService OpportunityTypesAPI service
type OpportunityTypesAPIService service

type ApiDeleteSalesOpportunitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesOpportunitiesTypesByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesTypesByIdExecute(r)
}

/*
DeleteSalesOpportunitiesTypesById Delete OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteSalesOpportunitiesTypesByIdRequest
*/
func (a *OpportunityTypesAPIService) DeleteSalesOpportunitiesTypesById(ctx context.Context, id int32) ApiDeleteSalesOpportunitiesTypesByIdRequest {
	return ApiDeleteSalesOpportunitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *OpportunityTypesAPIService) DeleteSalesOpportunitiesTypesByIdExecute(r ApiDeleteSalesOpportunitiesTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.DeleteSalesOpportunitiesTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesTypesRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesTypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) Fields(fields string) ApiGetSalesOpportunitiesTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) Page(page int32) ApiGetSalesOpportunitiesTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesTypesRequest) Execute() ([]OpportunityType, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesTypesExecute(r)
}

/*
GetSalesOpportunitiesTypes Get List of OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesTypesRequest
*/
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypes(ctx context.Context) ApiGetSalesOpportunitiesTypesRequest {
	return ApiGetSalesOpportunitiesTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OpportunityType
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesExecute(r ApiGetSalesOpportunitiesTypesRequest) ([]OpportunityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OpportunityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.GetSalesOpportunitiesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) Page(page int32) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesTypesByIdRequest) Execute() (*OpportunityType, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesTypesByIdExecute(r)
}

/*
GetSalesOpportunitiesTypesById Get OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesOpportunitiesTypesByIdRequest
*/
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesById(ctx context.Context, id int32) ApiGetSalesOpportunitiesTypesByIdRequest {
	return ApiGetSalesOpportunitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityType
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesByIdExecute(r ApiGetSalesOpportunitiesTypesByIdRequest) (*OpportunityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.GetSalesOpportunitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) Fields(fields string) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) Page(page int32) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesTypesByIdUsagesExecute(r)
}

/*
GetSalesOpportunitiesTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesOpportunitiesTypesByIdUsagesRequest
*/
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesByIdUsages(ctx context.Context, id int32) ApiGetSalesOpportunitiesTypesByIdUsagesRequest {
	return ApiGetSalesOpportunitiesTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesByIdUsagesExecute(r ApiGetSalesOpportunitiesTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.GetSalesOpportunitiesTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) Fields(fields string) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) Page(page int32) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesTypesByIdUsagesListExecute(r)
}

/*
GetSalesOpportunitiesTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetSalesOpportunitiesTypesByIdUsagesListRequest
*/
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesByIdUsagesList(ctx context.Context, id int32) ApiGetSalesOpportunitiesTypesByIdUsagesListRequest {
	return ApiGetSalesOpportunitiesTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesByIdUsagesListExecute(r ApiGetSalesOpportunitiesTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.GetSalesOpportunitiesTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesTypesCountRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) Fields(fields string) ApiGetSalesOpportunitiesTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) Page(page int32) ApiGetSalesOpportunitiesTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOpportunitiesTypesCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesTypesCountExecute(r)
}

/*
GetSalesOpportunitiesTypesCount Get Count of OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOpportunitiesTypesCountRequest
*/
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesCount(ctx context.Context) ApiGetSalesOpportunitiesTypesCountRequest {
	return ApiGetSalesOpportunitiesTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OpportunityTypesAPIService) GetSalesOpportunitiesTypesCountExecute(r ApiGetSalesOpportunitiesTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.GetSalesOpportunitiesTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesOpportunitiesTypesByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesTypesByIdRequest) Execute() (*OpportunityType, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesTypesByIdExecute(r)
}

/*
PatchSalesOpportunitiesTypesById Patch OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchSalesOpportunitiesTypesByIdRequest
*/
func (a *OpportunityTypesAPIService) PatchSalesOpportunitiesTypesById(ctx context.Context, id int32) ApiPatchSalesOpportunitiesTypesByIdRequest {
	return ApiPatchSalesOpportunitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityType
func (a *OpportunityTypesAPIService) PatchSalesOpportunitiesTypesByIdExecute(r ApiPatchSalesOpportunitiesTypesByIdRequest) (*OpportunityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.PatchSalesOpportunitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesTypesRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	clientId *string
	opportunityType *OpportunityType
}

// 
func (r ApiPostSalesOpportunitiesTypesRequest) ClientId(clientId string) ApiPostSalesOpportunitiesTypesRequest {
	r.clientId = &clientId
	return r
}

// opportunityType
func (r ApiPostSalesOpportunitiesTypesRequest) OpportunityType(opportunityType OpportunityType) ApiPostSalesOpportunitiesTypesRequest {
	r.opportunityType = &opportunityType
	return r
}

func (r ApiPostSalesOpportunitiesTypesRequest) Execute() (*OpportunityType, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesTypesExecute(r)
}

/*
PostSalesOpportunitiesTypes Post OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesOpportunitiesTypesRequest
*/
func (a *OpportunityTypesAPIService) PostSalesOpportunitiesTypes(ctx context.Context) ApiPostSalesOpportunitiesTypesRequest {
	return ApiPostSalesOpportunitiesTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return OpportunityType
func (a *OpportunityTypesAPIService) PostSalesOpportunitiesTypesExecute(r ApiPostSalesOpportunitiesTypesRequest) (*OpportunityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.PostSalesOpportunitiesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityType == nil {
		return localVarReturnValue, nil, reportError("opportunityType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesTypesByIdRequest struct {
	ctx context.Context
	ApiService *OpportunityTypesAPIService
	id int32
	clientId *string
	opportunityType *OpportunityType
}

// 
func (r ApiPutSalesOpportunitiesTypesByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// opportunityType
func (r ApiPutSalesOpportunitiesTypesByIdRequest) OpportunityType(opportunityType OpportunityType) ApiPutSalesOpportunitiesTypesByIdRequest {
	r.opportunityType = &opportunityType
	return r
}

func (r ApiPutSalesOpportunitiesTypesByIdRequest) Execute() (*OpportunityType, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesTypesByIdExecute(r)
}

/*
PutSalesOpportunitiesTypesById Put OpportunityType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutSalesOpportunitiesTypesByIdRequest
*/
func (a *OpportunityTypesAPIService) PutSalesOpportunitiesTypesById(ctx context.Context, id int32) ApiPutSalesOpportunitiesTypesByIdRequest {
	return ApiPutSalesOpportunitiesTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OpportunityType
func (a *OpportunityTypesAPIService) PutSalesOpportunitiesTypesByIdExecute(r ApiPutSalesOpportunitiesTypesByIdRequest) (*OpportunityType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpportunityType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityTypesAPIService.PutSalesOpportunitiesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityType == nil {
		return localVarReturnValue, nil, reportError("opportunityType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
