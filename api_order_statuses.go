/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OrderStatusesAPIService OrderStatusesAPI service
type OrderStatusesAPIService service

type ApiDeleteSalesOrdersStatusesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesOrdersStatusesByIdRequest) ClientId(clientId string) ApiDeleteSalesOrdersStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOrdersStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOrdersStatusesByIdExecute(r)
}

/*
DeleteSalesOrdersStatusesById Delete OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiDeleteSalesOrdersStatusesByIdRequest
*/
func (a *OrderStatusesAPIService) DeleteSalesOrdersStatusesById(ctx context.Context, id int32) ApiDeleteSalesOrdersStatusesByIdRequest {
	return ApiDeleteSalesOrdersStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *OrderStatusesAPIService) DeleteSalesOrdersStatusesByIdExecute(r ApiDeleteSalesOrdersStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.DeleteSalesOrdersStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOrdersStatusesRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) Fields(fields string) ApiGetSalesOrdersStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) Page(page int32) ApiGetSalesOrdersStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesRequest) Execute() ([]OrderStatus, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesExecute(r)
}

/*
GetSalesOrdersStatuses Get List of OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOrdersStatusesRequest
*/
func (a *OrderStatusesAPIService) GetSalesOrdersStatuses(ctx context.Context) ApiGetSalesOrdersStatusesRequest {
	return ApiGetSalesOrdersStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OrderStatus
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesExecute(r ApiGetSalesOrdersStatusesRequest) ([]OrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.GetSalesOrdersStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) Fields(fields string) ApiGetSalesOrdersStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) Page(page int32) ApiGetSalesOrdersStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByIdRequest) Execute() (*OrderStatus, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByIdExecute(r)
}

/*
GetSalesOrdersStatusesById Get OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiGetSalesOrdersStatusesByIdRequest
*/
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesById(ctx context.Context, id int32) ApiGetSalesOrdersStatusesByIdRequest {
	return ApiGetSalesOrdersStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrderStatus
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesByIdExecute(r ApiGetSalesOrdersStatusesByIdRequest) (*OrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.GetSalesOrdersStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) Fields(fields string) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) Page(page int32) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByIdUsagesExecute(r)
}

/*
GetSalesOrdersStatusesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiGetSalesOrdersStatusesByIdUsagesRequest
*/
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesByIdUsages(ctx context.Context, id int32) ApiGetSalesOrdersStatusesByIdUsagesRequest {
	return ApiGetSalesOrdersStatusesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesByIdUsagesExecute(r ApiGetSalesOrdersStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.GetSalesOrdersStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) Fields(fields string) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) Page(page int32) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByIdUsagesListExecute(r)
}

/*
GetSalesOrdersStatusesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiGetSalesOrdersStatusesByIdUsagesListRequest
*/
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetSalesOrdersStatusesByIdUsagesListRequest {
	return ApiGetSalesOrdersStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesByIdUsagesListExecute(r ApiGetSalesOrdersStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.GetSalesOrdersStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesCountRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) Fields(fields string) ApiGetSalesOrdersStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) Page(page int32) ApiGetSalesOrdersStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesCountRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesCountExecute(r)
}

/*
GetSalesOrdersStatusesCount Get Count of OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesOrdersStatusesCountRequest
*/
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesCount(ctx context.Context) ApiGetSalesOrdersStatusesCountRequest {
	return ApiGetSalesOrdersStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OrderStatusesAPIService) GetSalesOrdersStatusesCountExecute(r ApiGetSalesOrdersStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.GetSalesOrdersStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOrdersStatusesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSalesOrdersStatusesByIdRequest) ClientId(clientId string) ApiPatchSalesOrdersStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOrdersStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOrdersStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOrdersStatusesByIdRequest) Execute() (*OrderStatus, *http.Response, error) {
	return r.ApiService.PatchSalesOrdersStatusesByIdExecute(r)
}

/*
PatchSalesOrdersStatusesById Patch OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPatchSalesOrdersStatusesByIdRequest
*/
func (a *OrderStatusesAPIService) PatchSalesOrdersStatusesById(ctx context.Context, id int32) ApiPatchSalesOrdersStatusesByIdRequest {
	return ApiPatchSalesOrdersStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrderStatus
func (a *OrderStatusesAPIService) PatchSalesOrdersStatusesByIdExecute(r ApiPatchSalesOrdersStatusesByIdRequest) (*OrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.PatchSalesOrdersStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOrdersStatusesRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	clientId *string
	orderStatus *OrderStatus
}

// 
func (r ApiPostSalesOrdersStatusesRequest) ClientId(clientId string) ApiPostSalesOrdersStatusesRequest {
	r.clientId = &clientId
	return r
}

// status
func (r ApiPostSalesOrdersStatusesRequest) OrderStatus(orderStatus OrderStatus) ApiPostSalesOrdersStatusesRequest {
	r.orderStatus = &orderStatus
	return r
}

func (r ApiPostSalesOrdersStatusesRequest) Execute() ([]OrderStatus, *http.Response, error) {
	return r.ApiService.PostSalesOrdersStatusesExecute(r)
}

/*
PostSalesOrdersStatuses Post List of OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesOrdersStatusesRequest
*/
func (a *OrderStatusesAPIService) PostSalesOrdersStatuses(ctx context.Context) ApiPostSalesOrdersStatusesRequest {
	return ApiPostSalesOrdersStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OrderStatus
func (a *OrderStatusesAPIService) PostSalesOrdersStatusesExecute(r ApiPostSalesOrdersStatusesRequest) ([]OrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.PostSalesOrdersStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.orderStatus == nil {
		return localVarReturnValue, nil, reportError("orderStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.orderStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOrdersStatusesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesAPIService
	id int32
	clientId *string
	orderStatus *OrderStatus
}

// 
func (r ApiPutSalesOrdersStatusesByIdRequest) ClientId(clientId string) ApiPutSalesOrdersStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// status
func (r ApiPutSalesOrdersStatusesByIdRequest) OrderStatus(orderStatus OrderStatus) ApiPutSalesOrdersStatusesByIdRequest {
	r.orderStatus = &orderStatus
	return r
}

func (r ApiPutSalesOrdersStatusesByIdRequest) Execute() (*OrderStatus, *http.Response, error) {
	return r.ApiService.PutSalesOrdersStatusesByIdExecute(r)
}

/*
PutSalesOrdersStatusesById Put OrderStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPutSalesOrdersStatusesByIdRequest
*/
func (a *OrderStatusesAPIService) PutSalesOrdersStatusesById(ctx context.Context, id int32) ApiPutSalesOrdersStatusesByIdRequest {
	return ApiPutSalesOrdersStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OrderStatus
func (a *OrderStatusesAPIService) PutSalesOrdersStatusesByIdExecute(r ApiPutSalesOrdersStatusesByIdRequest) (*OrderStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesAPIService.PutSalesOrdersStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.orderStatus == nil {
		return localVarReturnValue, nil, reportError("orderStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.orderStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
