/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OrderStatusesEmailTemplateAPIService OrderStatusesEmailTemplateAPI service
type OrderStatusesEmailTemplateAPIService service

type ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
DeleteSalesOrdersStatusesByParentIdEmailtemplatesById Delete OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId statusId
 @return ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) DeleteSalesOrdersStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *OrderStatusesEmailTemplateAPIService) DeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r ApiDeleteSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.DeleteSalesOrdersStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) Execute() ([]OrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdEmailtemplatesExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdEmailtemplates Get List of OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplates(ctx context.Context, parentId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []OrderStatusEmailTemplate
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplatesExecute(r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesRequest) ([]OrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.GetSalesOrdersStatusesByParentIdEmailtemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*OrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdEmailtemplatesById Get OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId statusId
 @return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OrderStatusEmailTemplate
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) (*OrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.GetSalesOrdersStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdEmailtemplatesCountExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdEmailtemplatesCount Get Count of OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplatesCount(ctx context.Context, parentId int32) ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest {
	return ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *OrderStatusesEmailTemplateAPIService) GetSalesOrdersStatusesByParentIdEmailtemplatesCountExecute(r ApiGetSalesOrdersStatusesByParentIdEmailtemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.GetSalesOrdersStatusesByParentIdEmailtemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*OrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PatchSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PatchSalesOrdersStatusesByParentIdEmailtemplatesById Patch OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId statusId
 @return ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) PatchSalesOrdersStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OrderStatusEmailTemplate
func (a *OrderStatusesEmailTemplateAPIService) PatchSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r ApiPatchSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) (*OrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.PatchSalesOrdersStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	parentId int32
	orderStatusEmailTemplate *OrderStatusEmailTemplate
	clientId *string
}

// orderStatusEmailTemplate
func (r ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest) OrderStatusEmailTemplate(orderStatusEmailTemplate OrderStatusEmailTemplate) ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.orderStatusEmailTemplate = &orderStatusEmailTemplate
	return r
}

// 
func (r ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest) ClientId(clientId string) ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest) Execute() (*OrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PostSalesOrdersStatusesByParentIdEmailtemplatesExecute(r)
}

/*
PostSalesOrdersStatusesByParentIdEmailtemplates Post OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId statusId
 @return ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) PostSalesOrdersStatusesByParentIdEmailtemplates(ctx context.Context, parentId int32) ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest {
	return ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OrderStatusEmailTemplate
func (a *OrderStatusesEmailTemplateAPIService) PostSalesOrdersStatusesByParentIdEmailtemplatesExecute(r ApiPostSalesOrdersStatusesByParentIdEmailtemplatesRequest) (*OrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.PostSalesOrdersStatusesByParentIdEmailtemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("orderStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.orderStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *OrderStatusesEmailTemplateAPIService
	id int32
	parentId int32
	orderStatusEmailTemplate *OrderStatusEmailTemplate
	clientId *string
}

// orderStatusEmailTemplate
func (r ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) OrderStatusEmailTemplate(orderStatusEmailTemplate OrderStatusEmailTemplate) ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.orderStatusEmailTemplate = &orderStatusEmailTemplate
	return r
}

// 
func (r ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*OrderStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PutSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PutSalesOrdersStatusesByParentIdEmailtemplatesById Put OrderStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId statusId
 @return ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *OrderStatusesEmailTemplateAPIService) PutSalesOrdersStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return OrderStatusEmailTemplate
func (a *OrderStatusesEmailTemplateAPIService) PutSalesOrdersStatusesByParentIdEmailtemplatesByIdExecute(r ApiPutSalesOrdersStatusesByParentIdEmailtemplatesByIdRequest) (*OrderStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OrderStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusesEmailTemplateAPIService.PutSalesOrdersStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.orderStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("orderStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.orderStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
