/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// OwnershipTypeInfosAPIService OwnershipTypeInfosAPI service
type OwnershipTypeInfosAPIService service

type ApiGetCompanyOwnershipTypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *OwnershipTypeInfosAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) Fields(fields string) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) Page(page int32) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyOwnershipTypesByIdInfoRequest) Execute() (*OwnershipTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesByIdInfoExecute(r)
}

/*
GetCompanyOwnershipTypesByIdInfo Get OwnershipTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id OwnershipTypeInfoId
 @return ApiGetCompanyOwnershipTypesByIdInfoRequest
*/
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesByIdInfo(ctx context.Context, id int32) ApiGetCompanyOwnershipTypesByIdInfoRequest {
	return ApiGetCompanyOwnershipTypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return OwnershipTypeInfo
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesByIdInfoExecute(r ApiGetCompanyOwnershipTypesByIdInfoRequest) (*OwnershipTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OwnershipTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OwnershipTypeInfosAPIService.GetCompanyOwnershipTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyOwnershipTypesInfoRequest struct {
	ctx context.Context
	ApiService *OwnershipTypeInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) Fields(fields string) ApiGetCompanyOwnershipTypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) Page(page int32) ApiGetCompanyOwnershipTypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyOwnershipTypesInfoRequest) Execute() ([]OwnershipTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesInfoExecute(r)
}

/*
GetCompanyOwnershipTypesInfo Get List of OwnershipTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyOwnershipTypesInfoRequest
*/
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesInfo(ctx context.Context) ApiGetCompanyOwnershipTypesInfoRequest {
	return ApiGetCompanyOwnershipTypesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []OwnershipTypeInfo
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesInfoExecute(r ApiGetCompanyOwnershipTypesInfoRequest) ([]OwnershipTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []OwnershipTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OwnershipTypeInfosAPIService.GetCompanyOwnershipTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyOwnershipTypesInfoCountRequest struct {
	ctx context.Context
	ApiService *OwnershipTypeInfosAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) ClientId(clientId string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) Conditions(conditions string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) OrderBy(orderBy string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) Fields(fields string) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) Page(page int32) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) PageSize(pageSize int32) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyOwnershipTypesInfoCountRequest) PageId(pageId int32) ApiGetCompanyOwnershipTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyOwnershipTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyOwnershipTypesInfoCountExecute(r)
}

/*
GetCompanyOwnershipTypesInfoCount Get Count of OwnershipTypeInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyOwnershipTypesInfoCountRequest
*/
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesInfoCount(ctx context.Context) ApiGetCompanyOwnershipTypesInfoCountRequest {
	return ApiGetCompanyOwnershipTypesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *OwnershipTypeInfosAPIService) GetCompanyOwnershipTypesInfoCountExecute(r ApiGetCompanyOwnershipTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OwnershipTypeInfosAPIService.GetCompanyOwnershipTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/ownershipTypes/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
