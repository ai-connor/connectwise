/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PaymentTypesAPIService PaymentTypesAPI service
type PaymentTypesAPIService service

type ApiDeleteExpensePaymentTypesByIdRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteExpensePaymentTypesByIdRequest) ClientId(clientId string) ApiDeleteExpensePaymentTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteExpensePaymentTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExpensePaymentTypesByIdExecute(r)
}

/*
DeleteExpensePaymentTypesById Delete PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id paymentTypeId
 @return ApiDeleteExpensePaymentTypesByIdRequest
*/
func (a *PaymentTypesAPIService) DeleteExpensePaymentTypesById(ctx context.Context, id int32) ApiDeleteExpensePaymentTypesByIdRequest {
	return ApiDeleteExpensePaymentTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PaymentTypesAPIService) DeleteExpensePaymentTypesByIdExecute(r ApiDeleteExpensePaymentTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.DeleteExpensePaymentTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetExpensePaymentTypesRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpensePaymentTypesRequest) Conditions(conditions string) ApiGetExpensePaymentTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) ChildConditions(childConditions string) ApiGetExpensePaymentTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpensePaymentTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) OrderBy(orderBy string) ApiGetExpensePaymentTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) Fields(fields string) ApiGetExpensePaymentTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) Page(page int32) ApiGetExpensePaymentTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) PageSize(pageSize int32) ApiGetExpensePaymentTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) PageId(pageId int32) ApiGetExpensePaymentTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpensePaymentTypesRequest) ClientId(clientId string) ApiGetExpensePaymentTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpensePaymentTypesRequest) Execute() ([]PaymentType, *http.Response, error) {
	return r.ApiService.GetExpensePaymentTypesExecute(r)
}

/*
GetExpensePaymentTypes Get List of PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExpensePaymentTypesRequest
*/
func (a *PaymentTypesAPIService) GetExpensePaymentTypes(ctx context.Context) ApiGetExpensePaymentTypesRequest {
	return ApiGetExpensePaymentTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PaymentType
func (a *PaymentTypesAPIService) GetExpensePaymentTypesExecute(r ApiGetExpensePaymentTypesRequest) ([]PaymentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PaymentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.GetExpensePaymentTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpensePaymentTypesByIdRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) Conditions(conditions string) ApiGetExpensePaymentTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) ChildConditions(childConditions string) ApiGetExpensePaymentTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpensePaymentTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) OrderBy(orderBy string) ApiGetExpensePaymentTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) Fields(fields string) ApiGetExpensePaymentTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) Page(page int32) ApiGetExpensePaymentTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) PageSize(pageSize int32) ApiGetExpensePaymentTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) PageId(pageId int32) ApiGetExpensePaymentTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpensePaymentTypesByIdRequest) ClientId(clientId string) ApiGetExpensePaymentTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpensePaymentTypesByIdRequest) Execute() (*PaymentType, *http.Response, error) {
	return r.ApiService.GetExpensePaymentTypesByIdExecute(r)
}

/*
GetExpensePaymentTypesById Get PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id paymentTypeId
 @return ApiGetExpensePaymentTypesByIdRequest
*/
func (a *PaymentTypesAPIService) GetExpensePaymentTypesById(ctx context.Context, id int32) ApiGetExpensePaymentTypesByIdRequest {
	return ApiGetExpensePaymentTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaymentType
func (a *PaymentTypesAPIService) GetExpensePaymentTypesByIdExecute(r ApiGetExpensePaymentTypesByIdRequest) (*PaymentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.GetExpensePaymentTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpensePaymentTypesCountRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) Conditions(conditions string) ApiGetExpensePaymentTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) ChildConditions(childConditions string) ApiGetExpensePaymentTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpensePaymentTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) OrderBy(orderBy string) ApiGetExpensePaymentTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) Fields(fields string) ApiGetExpensePaymentTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) Page(page int32) ApiGetExpensePaymentTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) PageSize(pageSize int32) ApiGetExpensePaymentTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) PageId(pageId int32) ApiGetExpensePaymentTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetExpensePaymentTypesCountRequest) ClientId(clientId string) ApiGetExpensePaymentTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpensePaymentTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetExpensePaymentTypesCountExecute(r)
}

/*
GetExpensePaymentTypesCount Get Count of PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetExpensePaymentTypesCountRequest
*/
func (a *PaymentTypesAPIService) GetExpensePaymentTypesCount(ctx context.Context) ApiGetExpensePaymentTypesCountRequest {
	return ApiGetExpensePaymentTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PaymentTypesAPIService) GetExpensePaymentTypesCountExecute(r ApiGetExpensePaymentTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.GetExpensePaymentTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchExpensePaymentTypesByIdRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchExpensePaymentTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchExpensePaymentTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchExpensePaymentTypesByIdRequest) ClientId(clientId string) ApiPatchExpensePaymentTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchExpensePaymentTypesByIdRequest) Execute() (*PaymentType, *http.Response, error) {
	return r.ApiService.PatchExpensePaymentTypesByIdExecute(r)
}

/*
PatchExpensePaymentTypesById Patch PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id paymentTypeId
 @return ApiPatchExpensePaymentTypesByIdRequest
*/
func (a *PaymentTypesAPIService) PatchExpensePaymentTypesById(ctx context.Context, id int32) ApiPatchExpensePaymentTypesByIdRequest {
	return ApiPatchExpensePaymentTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaymentType
func (a *PaymentTypesAPIService) PatchExpensePaymentTypesByIdExecute(r ApiPatchExpensePaymentTypesByIdRequest) (*PaymentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.PatchExpensePaymentTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpensePaymentTypesRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	paymentType *PaymentType
	clientId *string
}

// paymentType
func (r ApiPostExpensePaymentTypesRequest) PaymentType(paymentType PaymentType) ApiPostExpensePaymentTypesRequest {
	r.paymentType = &paymentType
	return r
}

// 
func (r ApiPostExpensePaymentTypesRequest) ClientId(clientId string) ApiPostExpensePaymentTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostExpensePaymentTypesRequest) Execute() (*PaymentType, *http.Response, error) {
	return r.ApiService.PostExpensePaymentTypesExecute(r)
}

/*
PostExpensePaymentTypes Post PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostExpensePaymentTypesRequest
*/
func (a *PaymentTypesAPIService) PostExpensePaymentTypes(ctx context.Context) ApiPostExpensePaymentTypesRequest {
	return ApiPostExpensePaymentTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentType
func (a *PaymentTypesAPIService) PostExpensePaymentTypesExecute(r ApiPostExpensePaymentTypesRequest) (*PaymentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.PostExpensePaymentTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentType == nil {
		return localVarReturnValue, nil, reportError("paymentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.paymentType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutExpensePaymentTypesByIdRequest struct {
	ctx context.Context
	ApiService *PaymentTypesAPIService
	id int32
	paymentType *PaymentType
	clientId *string
}

// paymentType
func (r ApiPutExpensePaymentTypesByIdRequest) PaymentType(paymentType PaymentType) ApiPutExpensePaymentTypesByIdRequest {
	r.paymentType = &paymentType
	return r
}

// 
func (r ApiPutExpensePaymentTypesByIdRequest) ClientId(clientId string) ApiPutExpensePaymentTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutExpensePaymentTypesByIdRequest) Execute() (*PaymentType, *http.Response, error) {
	return r.ApiService.PutExpensePaymentTypesByIdExecute(r)
}

/*
PutExpensePaymentTypesById Put PaymentType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id paymentTypeId
 @return ApiPutExpensePaymentTypesByIdRequest
*/
func (a *PaymentTypesAPIService) PutExpensePaymentTypesById(ctx context.Context, id int32) ApiPutExpensePaymentTypesByIdRequest {
	return ApiPutExpensePaymentTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaymentType
func (a *PaymentTypesAPIService) PutExpensePaymentTypesByIdExecute(r ApiPutExpensePaymentTypesByIdRequest) (*PaymentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PaymentTypesAPIService.PutExpensePaymentTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/paymentTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentType == nil {
		return localVarReturnValue, nil, reportError("paymentType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.paymentType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
