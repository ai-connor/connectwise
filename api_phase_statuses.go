/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PhaseStatusesAPIService PhaseStatusesAPI service
type PhaseStatusesAPIService service

type ApiDeleteProjectPhaseStatusesByIdRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProjectPhaseStatusesByIdRequest) ClientId(clientId string) ApiDeleteProjectPhaseStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectPhaseStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectPhaseStatusesByIdExecute(r)
}

/*
DeleteProjectPhaseStatusesById Delete PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiDeleteProjectPhaseStatusesByIdRequest
*/
func (a *PhaseStatusesAPIService) DeleteProjectPhaseStatusesById(ctx context.Context, id int32) ApiDeleteProjectPhaseStatusesByIdRequest {
	return ApiDeleteProjectPhaseStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PhaseStatusesAPIService) DeleteProjectPhaseStatusesByIdExecute(r ApiDeleteProjectPhaseStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.DeleteProjectPhaseStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectPhaseStatusesRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectPhaseStatusesRequest) ClientId(clientId string) ApiGetProjectPhaseStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) Conditions(conditions string) ApiGetProjectPhaseStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) ChildConditions(childConditions string) ApiGetProjectPhaseStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectPhaseStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) OrderBy(orderBy string) ApiGetProjectPhaseStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) Fields(fields string) ApiGetProjectPhaseStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) Page(page int32) ApiGetProjectPhaseStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) PageSize(pageSize int32) ApiGetProjectPhaseStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectPhaseStatusesRequest) PageId(pageId int32) ApiGetProjectPhaseStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectPhaseStatusesRequest) Execute() ([]PhaseStatus, *http.Response, error) {
	return r.ApiService.GetProjectPhaseStatusesExecute(r)
}

/*
GetProjectPhaseStatuses Get List of PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectPhaseStatusesRequest
*/
func (a *PhaseStatusesAPIService) GetProjectPhaseStatuses(ctx context.Context) ApiGetProjectPhaseStatusesRequest {
	return ApiGetProjectPhaseStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PhaseStatus
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesExecute(r ApiGetProjectPhaseStatusesRequest) ([]PhaseStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PhaseStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.GetProjectPhaseStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectPhaseStatusesByIdRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) ClientId(clientId string) ApiGetProjectPhaseStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) Conditions(conditions string) ApiGetProjectPhaseStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) ChildConditions(childConditions string) ApiGetProjectPhaseStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectPhaseStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) OrderBy(orderBy string) ApiGetProjectPhaseStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) Fields(fields string) ApiGetProjectPhaseStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) Page(page int32) ApiGetProjectPhaseStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) PageSize(pageSize int32) ApiGetProjectPhaseStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdRequest) PageId(pageId int32) ApiGetProjectPhaseStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectPhaseStatusesByIdRequest) Execute() (*PhaseStatus, *http.Response, error) {
	return r.ApiService.GetProjectPhaseStatusesByIdExecute(r)
}

/*
GetProjectPhaseStatusesById Get PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiGetProjectPhaseStatusesByIdRequest
*/
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesById(ctx context.Context, id int32) ApiGetProjectPhaseStatusesByIdRequest {
	return ApiGetProjectPhaseStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhaseStatus
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesByIdExecute(r ApiGetProjectPhaseStatusesByIdRequest) (*PhaseStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhaseStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.GetProjectPhaseStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectPhaseStatusesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) Fields(fields string) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) Page(page int32) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectPhaseStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProjectPhaseStatusesByIdUsagesExecute(r)
}

/*
GetProjectPhaseStatusesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiGetProjectPhaseStatusesByIdUsagesRequest
*/
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesByIdUsages(ctx context.Context, id int32) ApiGetProjectPhaseStatusesByIdUsagesRequest {
	return ApiGetProjectPhaseStatusesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesByIdUsagesExecute(r ApiGetProjectPhaseStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.GetProjectPhaseStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectPhaseStatusesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) Fields(fields string) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) Page(page int32) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectPhaseStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProjectPhaseStatusesByIdUsagesListExecute(r)
}

/*
GetProjectPhaseStatusesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiGetProjectPhaseStatusesByIdUsagesListRequest
*/
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetProjectPhaseStatusesByIdUsagesListRequest {
	return ApiGetProjectPhaseStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesByIdUsagesListExecute(r ApiGetProjectPhaseStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.GetProjectPhaseStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectPhaseStatusesCountRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) ClientId(clientId string) ApiGetProjectPhaseStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) Conditions(conditions string) ApiGetProjectPhaseStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) ChildConditions(childConditions string) ApiGetProjectPhaseStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectPhaseStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) OrderBy(orderBy string) ApiGetProjectPhaseStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) Fields(fields string) ApiGetProjectPhaseStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) Page(page int32) ApiGetProjectPhaseStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) PageSize(pageSize int32) ApiGetProjectPhaseStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectPhaseStatusesCountRequest) PageId(pageId int32) ApiGetProjectPhaseStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectPhaseStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectPhaseStatusesCountExecute(r)
}

/*
GetProjectPhaseStatusesCount Get Count of PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectPhaseStatusesCountRequest
*/
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesCount(ctx context.Context) ApiGetProjectPhaseStatusesCountRequest {
	return ApiGetProjectPhaseStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PhaseStatusesAPIService) GetProjectPhaseStatusesCountExecute(r ApiGetProjectPhaseStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.GetProjectPhaseStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectPhaseStatusesByIdRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProjectPhaseStatusesByIdRequest) ClientId(clientId string) ApiPatchProjectPhaseStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectPhaseStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectPhaseStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectPhaseStatusesByIdRequest) Execute() (*PhaseStatus, *http.Response, error) {
	return r.ApiService.PatchProjectPhaseStatusesByIdExecute(r)
}

/*
PatchProjectPhaseStatusesById Patch PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiPatchProjectPhaseStatusesByIdRequest
*/
func (a *PhaseStatusesAPIService) PatchProjectPhaseStatusesById(ctx context.Context, id int32) ApiPatchProjectPhaseStatusesByIdRequest {
	return ApiPatchProjectPhaseStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhaseStatus
func (a *PhaseStatusesAPIService) PatchProjectPhaseStatusesByIdExecute(r ApiPatchProjectPhaseStatusesByIdRequest) (*PhaseStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhaseStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.PatchProjectPhaseStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectPhaseStatusesRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	clientId *string
	phaseStatus *PhaseStatus
}

// 
func (r ApiPostProjectPhaseStatusesRequest) ClientId(clientId string) ApiPostProjectPhaseStatusesRequest {
	r.clientId = &clientId
	return r
}

// phaseStatus
func (r ApiPostProjectPhaseStatusesRequest) PhaseStatus(phaseStatus PhaseStatus) ApiPostProjectPhaseStatusesRequest {
	r.phaseStatus = &phaseStatus
	return r
}

func (r ApiPostProjectPhaseStatusesRequest) Execute() (*PhaseStatus, *http.Response, error) {
	return r.ApiService.PostProjectPhaseStatusesExecute(r)
}

/*
PostProjectPhaseStatuses Post PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProjectPhaseStatusesRequest
*/
func (a *PhaseStatusesAPIService) PostProjectPhaseStatuses(ctx context.Context) ApiPostProjectPhaseStatusesRequest {
	return ApiPostProjectPhaseStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PhaseStatus
func (a *PhaseStatusesAPIService) PostProjectPhaseStatusesExecute(r ApiPostProjectPhaseStatusesRequest) (*PhaseStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhaseStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.PostProjectPhaseStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.phaseStatus == nil {
		return localVarReturnValue, nil, reportError("phaseStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.phaseStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectPhaseStatusesByIdRequest struct {
	ctx context.Context
	ApiService *PhaseStatusesAPIService
	id int32
	clientId *string
	phaseStatus *PhaseStatus
}

// 
func (r ApiPutProjectPhaseStatusesByIdRequest) ClientId(clientId string) ApiPutProjectPhaseStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// phaseStatus
func (r ApiPutProjectPhaseStatusesByIdRequest) PhaseStatus(phaseStatus PhaseStatus) ApiPutProjectPhaseStatusesByIdRequest {
	r.phaseStatus = &phaseStatus
	return r
}

func (r ApiPutProjectPhaseStatusesByIdRequest) Execute() (*PhaseStatus, *http.Response, error) {
	return r.ApiService.PutProjectPhaseStatusesByIdExecute(r)
}

/*
PutProjectPhaseStatusesById Put PhaseStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phaseStatusId
 @return ApiPutProjectPhaseStatusesByIdRequest
*/
func (a *PhaseStatusesAPIService) PutProjectPhaseStatusesById(ctx context.Context, id int32) ApiPutProjectPhaseStatusesByIdRequest {
	return ApiPutProjectPhaseStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PhaseStatus
func (a *PhaseStatusesAPIService) PutProjectPhaseStatusesByIdExecute(r ApiPutProjectPhaseStatusesByIdRequest) (*PhaseStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PhaseStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PhaseStatusesAPIService.PutProjectPhaseStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/phaseStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.phaseStatus == nil {
		return localVarReturnValue, nil, reportError("phaseStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.phaseStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
