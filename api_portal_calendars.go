/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PortalCalendarsAPIService PortalCalendarsAPI service
type PortalCalendarsAPIService service

type ApiGetSchedulePortalcalendarsRequest struct {
	ctx context.Context
	ApiService *PortalCalendarsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) Conditions(conditions string) ApiGetSchedulePortalcalendarsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) ChildConditions(childConditions string) ApiGetSchedulePortalcalendarsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSchedulePortalcalendarsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) OrderBy(orderBy string) ApiGetSchedulePortalcalendarsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) Fields(fields string) ApiGetSchedulePortalcalendarsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) Page(page int32) ApiGetSchedulePortalcalendarsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) PageSize(pageSize int32) ApiGetSchedulePortalcalendarsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) PageId(pageId int32) ApiGetSchedulePortalcalendarsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsRequest) ClientId(clientId string) ApiGetSchedulePortalcalendarsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSchedulePortalcalendarsRequest) Execute() ([]PortalCalendar, *http.Response, error) {
	return r.ApiService.GetSchedulePortalcalendarsExecute(r)
}

/*
GetSchedulePortalcalendars Get List of PortalCalendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSchedulePortalcalendarsRequest
*/
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendars(ctx context.Context) ApiGetSchedulePortalcalendarsRequest {
	return ApiGetSchedulePortalcalendarsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PortalCalendar
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendarsExecute(r ApiGetSchedulePortalcalendarsRequest) ([]PortalCalendar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PortalCalendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalCalendarsAPIService.GetSchedulePortalcalendars")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/portalcalendars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSchedulePortalcalendarsByIdRequest struct {
	ctx context.Context
	ApiService *PortalCalendarsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) Conditions(conditions string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) ChildConditions(childConditions string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) OrderBy(orderBy string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) Fields(fields string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) Page(page int32) ApiGetSchedulePortalcalendarsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) PageSize(pageSize int32) ApiGetSchedulePortalcalendarsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) PageId(pageId int32) ApiGetSchedulePortalcalendarsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsByIdRequest) ClientId(clientId string) ApiGetSchedulePortalcalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSchedulePortalcalendarsByIdRequest) Execute() (*PortalCalendar, *http.Response, error) {
	return r.ApiService.GetSchedulePortalcalendarsByIdExecute(r)
}

/*
GetSchedulePortalcalendarsById Get PortalCalendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalcalendarId
 @return ApiGetSchedulePortalcalendarsByIdRequest
*/
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendarsById(ctx context.Context, id int32) ApiGetSchedulePortalcalendarsByIdRequest {
	return ApiGetSchedulePortalcalendarsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalCalendar
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendarsByIdExecute(r ApiGetSchedulePortalcalendarsByIdRequest) (*PortalCalendar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalCalendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalCalendarsAPIService.GetSchedulePortalcalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/portalcalendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSchedulePortalcalendarsCountRequest struct {
	ctx context.Context
	ApiService *PortalCalendarsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) Conditions(conditions string) ApiGetSchedulePortalcalendarsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) ChildConditions(childConditions string) ApiGetSchedulePortalcalendarsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSchedulePortalcalendarsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) OrderBy(orderBy string) ApiGetSchedulePortalcalendarsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) Fields(fields string) ApiGetSchedulePortalcalendarsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) Page(page int32) ApiGetSchedulePortalcalendarsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) PageSize(pageSize int32) ApiGetSchedulePortalcalendarsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) PageId(pageId int32) ApiGetSchedulePortalcalendarsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSchedulePortalcalendarsCountRequest) ClientId(clientId string) ApiGetSchedulePortalcalendarsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSchedulePortalcalendarsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSchedulePortalcalendarsCountExecute(r)
}

/*
GetSchedulePortalcalendarsCount Get Count of PortalCalendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSchedulePortalcalendarsCountRequest
*/
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendarsCount(ctx context.Context) ApiGetSchedulePortalcalendarsCountRequest {
	return ApiGetSchedulePortalcalendarsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PortalCalendarsAPIService) GetSchedulePortalcalendarsCountExecute(r ApiGetSchedulePortalcalendarsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalCalendarsAPIService.GetSchedulePortalcalendarsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/portalcalendars/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSchedulePortalcalendarsByIdRequest struct {
	ctx context.Context
	ApiService *PortalCalendarsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSchedulePortalcalendarsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSchedulePortalcalendarsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSchedulePortalcalendarsByIdRequest) ClientId(clientId string) ApiPatchSchedulePortalcalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSchedulePortalcalendarsByIdRequest) Execute() (*PortalCalendar, *http.Response, error) {
	return r.ApiService.PatchSchedulePortalcalendarsByIdExecute(r)
}

/*
PatchSchedulePortalcalendarsById Patch PortalCalendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalcalendarId
 @return ApiPatchSchedulePortalcalendarsByIdRequest
*/
func (a *PortalCalendarsAPIService) PatchSchedulePortalcalendarsById(ctx context.Context, id int32) ApiPatchSchedulePortalcalendarsByIdRequest {
	return ApiPatchSchedulePortalcalendarsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalCalendar
func (a *PortalCalendarsAPIService) PatchSchedulePortalcalendarsByIdExecute(r ApiPatchSchedulePortalcalendarsByIdRequest) (*PortalCalendar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalCalendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalCalendarsAPIService.PatchSchedulePortalcalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/portalcalendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSchedulePortalcalendarsByIdRequest struct {
	ctx context.Context
	ApiService *PortalCalendarsAPIService
	id int32
	portalCalendar *PortalCalendar
	clientId *string
}

// portalCalendar
func (r ApiPutSchedulePortalcalendarsByIdRequest) PortalCalendar(portalCalendar PortalCalendar) ApiPutSchedulePortalcalendarsByIdRequest {
	r.portalCalendar = &portalCalendar
	return r
}

// 
func (r ApiPutSchedulePortalcalendarsByIdRequest) ClientId(clientId string) ApiPutSchedulePortalcalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSchedulePortalcalendarsByIdRequest) Execute() (*PortalCalendar, *http.Response, error) {
	return r.ApiService.PutSchedulePortalcalendarsByIdExecute(r)
}

/*
PutSchedulePortalcalendarsById Put PortalCalendar

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalcalendarId
 @return ApiPutSchedulePortalcalendarsByIdRequest
*/
func (a *PortalCalendarsAPIService) PutSchedulePortalcalendarsById(ctx context.Context, id int32) ApiPutSchedulePortalcalendarsByIdRequest {
	return ApiPutSchedulePortalcalendarsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalCalendar
func (a *PortalCalendarsAPIService) PutSchedulePortalcalendarsByIdExecute(r ApiPutSchedulePortalcalendarsByIdRequest) (*PortalCalendar, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalCalendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalCalendarsAPIService.PutSchedulePortalcalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/portalcalendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalCalendar == nil {
		return localVarReturnValue, nil, reportError("portalCalendar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.portalCalendar
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
