/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PortalConfigurationProjectSetupsAPIService PortalConfigurationProjectSetupsAPI service
type PortalConfigurationProjectSetupsAPIService service

type ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest struct {
	ctx context.Context
	ApiService *PortalConfigurationProjectSetupsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) Execute() ([]PortalConfigurationProjectSetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdProjectSetupsExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdProjectSetups Get List of PortalConfigurationProjectSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId portalConfigurationId
 @return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest
*/
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetups(ctx context.Context, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []PortalConfigurationProjectSetup
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetupsExecute(r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsRequest) ([]PortalConfigurationProjectSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PortalConfigurationProjectSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationProjectSetupsAPIService.GetCompanyPortalConfigurationsByParentIdProjectSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/projectSetups"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest struct {
	ctx context.Context
	ApiService *PortalConfigurationProjectSetupsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Execute() (*PortalConfigurationProjectSetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdProjectSetupsById Get PortalConfigurationProjectSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id projectSetupId
 @param parentId portalConfigurationId
 @return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest
*/
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetupsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PortalConfigurationProjectSetup
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) (*PortalConfigurationProjectSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalConfigurationProjectSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationProjectSetupsAPIService.GetCompanyPortalConfigurationsByParentIdProjectSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/projectSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest struct {
	ctx context.Context
	ApiService *PortalConfigurationProjectSetupsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdProjectSetupsCountExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdProjectSetupsCount Get Count of PortalConfigurationProjectSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId portalConfigurationId
 @return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest
*/
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetupsCount(ctx context.Context, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *PortalConfigurationProjectSetupsAPIService) GetCompanyPortalConfigurationsByParentIdProjectSetupsCountExecute(r ApiGetCompanyPortalConfigurationsByParentIdProjectSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationProjectSetupsAPIService.GetCompanyPortalConfigurationsByParentIdProjectSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/projectSetups/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest struct {
	ctx context.Context
	ApiService *PortalConfigurationProjectSetupsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Execute() (*PortalConfigurationProjectSetup, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r)
}

/*
PatchCompanyPortalConfigurationsByParentIdProjectSetupsById Patch PortalConfigurationProjectSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id projectSetupId
 @param parentId portalConfigurationId
 @return ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest
*/
func (a *PortalConfigurationProjectSetupsAPIService) PatchCompanyPortalConfigurationsByParentIdProjectSetupsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	return ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PortalConfigurationProjectSetup
func (a *PortalConfigurationProjectSetupsAPIService) PatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r ApiPatchCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) (*PortalConfigurationProjectSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalConfigurationProjectSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationProjectSetupsAPIService.PatchCompanyPortalConfigurationsByParentIdProjectSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/projectSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest struct {
	ctx context.Context
	ApiService *PortalConfigurationProjectSetupsAPIService
	id int32
	parentId int32
	clientId *string
	portalConfigurationProjectSetup *PortalConfigurationProjectSetup
}

// 
func (r ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// portalConfigurationProjectSetup
func (r ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) PortalConfigurationProjectSetup(portalConfigurationProjectSetup PortalConfigurationProjectSetup) ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	r.portalConfigurationProjectSetup = &portalConfigurationProjectSetup
	return r
}

func (r ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) Execute() (*PortalConfigurationProjectSetup, *http.Response, error) {
	return r.ApiService.PutCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r)
}

/*
PutCompanyPortalConfigurationsByParentIdProjectSetupsById Put PortalConfigurationProjectSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id projectSetupId
 @param parentId portalConfigurationId
 @return ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest
*/
func (a *PortalConfigurationProjectSetupsAPIService) PutCompanyPortalConfigurationsByParentIdProjectSetupsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest {
	return ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PortalConfigurationProjectSetup
func (a *PortalConfigurationProjectSetupsAPIService) PutCompanyPortalConfigurationsByParentIdProjectSetupsByIdExecute(r ApiPutCompanyPortalConfigurationsByParentIdProjectSetupsByIdRequest) (*PortalConfigurationProjectSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalConfigurationProjectSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationProjectSetupsAPIService.PutCompanyPortalConfigurationsByParentIdProjectSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/projectSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfigurationProjectSetup == nil {
		return localVarReturnValue, nil, reportError("portalConfigurationProjectSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfigurationProjectSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
