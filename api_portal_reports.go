/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PortalReportsAPIService PortalReportsAPI service
type PortalReportsAPIService service

type ApiDeleteSystemPortalReportsByIdRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemPortalReportsByIdRequest) ClientId(clientId string) ApiDeleteSystemPortalReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemPortalReportsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemPortalReportsByIdExecute(r)
}

/*
DeleteSystemPortalReportsById Delete PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalReportId
 @return ApiDeleteSystemPortalReportsByIdRequest
*/
func (a *PortalReportsAPIService) DeleteSystemPortalReportsById(ctx context.Context, id int32) ApiDeleteSystemPortalReportsByIdRequest {
	return ApiDeleteSystemPortalReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PortalReportsAPIService) DeleteSystemPortalReportsByIdExecute(r ApiDeleteSystemPortalReportsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.DeleteSystemPortalReportsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemPortalReportsRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemPortalReportsRequest) Conditions(conditions string) ApiGetSystemPortalReportsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) ChildConditions(childConditions string) ApiGetSystemPortalReportsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemPortalReportsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) OrderBy(orderBy string) ApiGetSystemPortalReportsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) Fields(fields string) ApiGetSystemPortalReportsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) Page(page int32) ApiGetSystemPortalReportsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) PageSize(pageSize int32) ApiGetSystemPortalReportsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) PageId(pageId int32) ApiGetSystemPortalReportsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemPortalReportsRequest) ClientId(clientId string) ApiGetSystemPortalReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemPortalReportsRequest) Execute() ([]PortalReport, *http.Response, error) {
	return r.ApiService.GetSystemPortalReportsExecute(r)
}

/*
GetSystemPortalReports Get List of PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemPortalReportsRequest
*/
func (a *PortalReportsAPIService) GetSystemPortalReports(ctx context.Context) ApiGetSystemPortalReportsRequest {
	return ApiGetSystemPortalReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PortalReport
func (a *PortalReportsAPIService) GetSystemPortalReportsExecute(r ApiGetSystemPortalReportsRequest) ([]PortalReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PortalReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.GetSystemPortalReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemPortalReportsByIdRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) Conditions(conditions string) ApiGetSystemPortalReportsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) ChildConditions(childConditions string) ApiGetSystemPortalReportsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemPortalReportsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) OrderBy(orderBy string) ApiGetSystemPortalReportsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) Fields(fields string) ApiGetSystemPortalReportsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) Page(page int32) ApiGetSystemPortalReportsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) PageSize(pageSize int32) ApiGetSystemPortalReportsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) PageId(pageId int32) ApiGetSystemPortalReportsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemPortalReportsByIdRequest) ClientId(clientId string) ApiGetSystemPortalReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemPortalReportsByIdRequest) Execute() (*PortalReport, *http.Response, error) {
	return r.ApiService.GetSystemPortalReportsByIdExecute(r)
}

/*
GetSystemPortalReportsById Get PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalReportId
 @return ApiGetSystemPortalReportsByIdRequest
*/
func (a *PortalReportsAPIService) GetSystemPortalReportsById(ctx context.Context, id int32) ApiGetSystemPortalReportsByIdRequest {
	return ApiGetSystemPortalReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalReport
func (a *PortalReportsAPIService) GetSystemPortalReportsByIdExecute(r ApiGetSystemPortalReportsByIdRequest) (*PortalReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.GetSystemPortalReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemPortalReportsCountRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemPortalReportsCountRequest) Conditions(conditions string) ApiGetSystemPortalReportsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) ChildConditions(childConditions string) ApiGetSystemPortalReportsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemPortalReportsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) OrderBy(orderBy string) ApiGetSystemPortalReportsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) Fields(fields string) ApiGetSystemPortalReportsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) Page(page int32) ApiGetSystemPortalReportsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) PageSize(pageSize int32) ApiGetSystemPortalReportsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) PageId(pageId int32) ApiGetSystemPortalReportsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemPortalReportsCountRequest) ClientId(clientId string) ApiGetSystemPortalReportsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemPortalReportsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemPortalReportsCountExecute(r)
}

/*
GetSystemPortalReportsCount Get Count of PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemPortalReportsCountRequest
*/
func (a *PortalReportsAPIService) GetSystemPortalReportsCount(ctx context.Context) ApiGetSystemPortalReportsCountRequest {
	return ApiGetSystemPortalReportsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PortalReportsAPIService) GetSystemPortalReportsCountExecute(r ApiGetSystemPortalReportsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.GetSystemPortalReportsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemPortalReportsByIdRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemPortalReportsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemPortalReportsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemPortalReportsByIdRequest) ClientId(clientId string) ApiPatchSystemPortalReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemPortalReportsByIdRequest) Execute() (*PortalReport, *http.Response, error) {
	return r.ApiService.PatchSystemPortalReportsByIdExecute(r)
}

/*
PatchSystemPortalReportsById Patch PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalReportId
 @return ApiPatchSystemPortalReportsByIdRequest
*/
func (a *PortalReportsAPIService) PatchSystemPortalReportsById(ctx context.Context, id int32) ApiPatchSystemPortalReportsByIdRequest {
	return ApiPatchSystemPortalReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalReport
func (a *PortalReportsAPIService) PatchSystemPortalReportsByIdExecute(r ApiPatchSystemPortalReportsByIdRequest) (*PortalReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.PatchSystemPortalReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemPortalReportsRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	portalReport *PortalReport
	clientId *string
}

// portalReport
func (r ApiPostSystemPortalReportsRequest) PortalReport(portalReport PortalReport) ApiPostSystemPortalReportsRequest {
	r.portalReport = &portalReport
	return r
}

// 
func (r ApiPostSystemPortalReportsRequest) ClientId(clientId string) ApiPostSystemPortalReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemPortalReportsRequest) Execute() (*PortalReport, *http.Response, error) {
	return r.ApiService.PostSystemPortalReportsExecute(r)
}

/*
PostSystemPortalReports Post PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemPortalReportsRequest
*/
func (a *PortalReportsAPIService) PostSystemPortalReports(ctx context.Context) ApiPostSystemPortalReportsRequest {
	return ApiPostSystemPortalReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PortalReport
func (a *PortalReportsAPIService) PostSystemPortalReportsExecute(r ApiPostSystemPortalReportsRequest) (*PortalReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.PostSystemPortalReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalReport == nil {
		return localVarReturnValue, nil, reportError("portalReport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.portalReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemPortalReportsByIdRequest struct {
	ctx context.Context
	ApiService *PortalReportsAPIService
	id int32
	portalReport *PortalReport
	clientId *string
}

// portalReport
func (r ApiPutSystemPortalReportsByIdRequest) PortalReport(portalReport PortalReport) ApiPutSystemPortalReportsByIdRequest {
	r.portalReport = &portalReport
	return r
}

// 
func (r ApiPutSystemPortalReportsByIdRequest) ClientId(clientId string) ApiPutSystemPortalReportsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemPortalReportsByIdRequest) Execute() (*PortalReport, *http.Response, error) {
	return r.ApiService.PutSystemPortalReportsByIdExecute(r)
}

/*
PutSystemPortalReportsById Put PortalReport

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalReportId
 @return ApiPutSystemPortalReportsByIdRequest
*/
func (a *PortalReportsAPIService) PutSystemPortalReportsById(ctx context.Context, id int32) ApiPutSystemPortalReportsByIdRequest {
	return ApiPutSystemPortalReportsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalReport
func (a *PortalReportsAPIService) PutSystemPortalReportsByIdExecute(r ApiPutSystemPortalReportsByIdRequest) (*PortalReport, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalReportsAPIService.PutSystemPortalReportsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/portalReports/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalReport == nil {
		return localVarReturnValue, nil, reportError("portalReport is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.portalReport
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
