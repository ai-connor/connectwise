/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PortalSecurityLevelsAPIService PortalSecurityLevelsAPI service
type PortalSecurityLevelsAPIService service

type ApiGetCompanyPortalSecurityLevelsRequest struct {
	ctx context.Context
	ApiService *PortalSecurityLevelsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) Conditions(conditions string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) Fields(fields string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) Page(page int32) ApiGetCompanyPortalSecurityLevelsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecurityLevelsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) PageId(pageId int32) ApiGetCompanyPortalSecurityLevelsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsRequest) ClientId(clientId string) ApiGetCompanyPortalSecurityLevelsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalSecurityLevelsRequest) Execute() ([]PortalSecurityLevel, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecurityLevelsExecute(r)
}

/*
GetCompanyPortalSecurityLevels Get List of PortalSecurityLevel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyPortalSecurityLevelsRequest
*/
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevels(ctx context.Context) ApiGetCompanyPortalSecurityLevelsRequest {
	return ApiGetCompanyPortalSecurityLevelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PortalSecurityLevel
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevelsExecute(r ApiGetCompanyPortalSecurityLevelsRequest) ([]PortalSecurityLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PortalSecurityLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecurityLevelsAPIService.GetCompanyPortalSecurityLevels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecurityLevels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalSecurityLevelsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecurityLevelsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) Fields(fields string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) Page(page int32) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalSecurityLevelsByIdRequest) Execute() (*PortalSecurityLevel, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecurityLevelsByIdExecute(r)
}

/*
GetCompanyPortalSecurityLevelsById Get PortalSecurityLevel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecurityLevelId
 @return ApiGetCompanyPortalSecurityLevelsByIdRequest
*/
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevelsById(ctx context.Context, id int32) ApiGetCompanyPortalSecurityLevelsByIdRequest {
	return ApiGetCompanyPortalSecurityLevelsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecurityLevel
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevelsByIdExecute(r ApiGetCompanyPortalSecurityLevelsByIdRequest) (*PortalSecurityLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecurityLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecurityLevelsAPIService.GetCompanyPortalSecurityLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecurityLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalSecurityLevelsCountRequest struct {
	ctx context.Context
	ApiService *PortalSecurityLevelsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) Conditions(conditions string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) Fields(fields string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) Page(page int32) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) PageId(pageId int32) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyPortalSecurityLevelsCountRequest) ClientId(clientId string) ApiGetCompanyPortalSecurityLevelsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalSecurityLevelsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecurityLevelsCountExecute(r)
}

/*
GetCompanyPortalSecurityLevelsCount Get Count of PortalSecurityLevel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyPortalSecurityLevelsCountRequest
*/
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevelsCount(ctx context.Context) ApiGetCompanyPortalSecurityLevelsCountRequest {
	return ApiGetCompanyPortalSecurityLevelsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PortalSecurityLevelsAPIService) GetCompanyPortalSecurityLevelsCountExecute(r ApiGetCompanyPortalSecurityLevelsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecurityLevelsAPIService.GetCompanyPortalSecurityLevelsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecurityLevels/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalSecurityLevelsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecurityLevelsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchCompanyPortalSecurityLevelsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalSecurityLevelsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchCompanyPortalSecurityLevelsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalSecurityLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyPortalSecurityLevelsByIdRequest) Execute() (*PortalSecurityLevel, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalSecurityLevelsByIdExecute(r)
}

/*
PatchCompanyPortalSecurityLevelsById Patch PortalSecurityLevel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecurityLevelId
 @return ApiPatchCompanyPortalSecurityLevelsByIdRequest
*/
func (a *PortalSecurityLevelsAPIService) PatchCompanyPortalSecurityLevelsById(ctx context.Context, id int32) ApiPatchCompanyPortalSecurityLevelsByIdRequest {
	return ApiPatchCompanyPortalSecurityLevelsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecurityLevel
func (a *PortalSecurityLevelsAPIService) PatchCompanyPortalSecurityLevelsByIdExecute(r ApiPatchCompanyPortalSecurityLevelsByIdRequest) (*PortalSecurityLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecurityLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecurityLevelsAPIService.PatchCompanyPortalSecurityLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecurityLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalSecurityLevelsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecurityLevelsAPIService
	id int32
	portalSecurityLevel *PortalSecurityLevel
	clientId *string
}

// _portalSecurityLevel
func (r ApiPutCompanyPortalSecurityLevelsByIdRequest) PortalSecurityLevel(portalSecurityLevel PortalSecurityLevel) ApiPutCompanyPortalSecurityLevelsByIdRequest {
	r.portalSecurityLevel = &portalSecurityLevel
	return r
}

// 
func (r ApiPutCompanyPortalSecurityLevelsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalSecurityLevelsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyPortalSecurityLevelsByIdRequest) Execute() (*PortalSecurityLevel, *http.Response, error) {
	return r.ApiService.PutCompanyPortalSecurityLevelsByIdExecute(r)
}

/*
PutCompanyPortalSecurityLevelsById Put PortalSecurityLevel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecurityLevelId
 @return ApiPutCompanyPortalSecurityLevelsByIdRequest
*/
func (a *PortalSecurityLevelsAPIService) PutCompanyPortalSecurityLevelsById(ctx context.Context, id int32) ApiPutCompanyPortalSecurityLevelsByIdRequest {
	return ApiPutCompanyPortalSecurityLevelsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecurityLevel
func (a *PortalSecurityLevelsAPIService) PutCompanyPortalSecurityLevelsByIdExecute(r ApiPutCompanyPortalSecurityLevelsByIdRequest) (*PortalSecurityLevel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecurityLevel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecurityLevelsAPIService.PutCompanyPortalSecurityLevelsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecurityLevels/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.portalSecurityLevel == nil {
		return localVarReturnValue, nil, reportError("portalSecurityLevel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.portalSecurityLevel
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
