/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PortalSecuritySettingsAPIService PortalSecuritySettingsAPI service
type PortalSecuritySettingsAPIService service

type ApiGetCompanyPortalSecuritySettingsRequest struct {
	ctx context.Context
	ApiService *PortalSecuritySettingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) ClientId(clientId string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) Conditions(conditions string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) Fields(fields string) ApiGetCompanyPortalSecuritySettingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) Page(page int32) ApiGetCompanyPortalSecuritySettingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecuritySettingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsRequest) PageId(pageId int32) ApiGetCompanyPortalSecuritySettingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalSecuritySettingsRequest) Execute() ([]PortalSecuritySetting, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecuritySettingsExecute(r)
}

/*
GetCompanyPortalSecuritySettings Get List of PortalSecuritySetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyPortalSecuritySettingsRequest
*/
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettings(ctx context.Context) ApiGetCompanyPortalSecuritySettingsRequest {
	return ApiGetCompanyPortalSecuritySettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PortalSecuritySetting
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettingsExecute(r ApiGetCompanyPortalSecuritySettingsRequest) ([]PortalSecuritySetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PortalSecuritySetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecuritySettingsAPIService.GetCompanyPortalSecuritySettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecuritySettings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalSecuritySettingsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecuritySettingsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) Fields(fields string) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) Page(page int32) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalSecuritySettingsByIdRequest) Execute() (*PortalSecuritySetting, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecuritySettingsByIdExecute(r)
}

/*
GetCompanyPortalSecuritySettingsById Get PortalSecuritySetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecuritySettingId
 @return ApiGetCompanyPortalSecuritySettingsByIdRequest
*/
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettingsById(ctx context.Context, id int32) ApiGetCompanyPortalSecuritySettingsByIdRequest {
	return ApiGetCompanyPortalSecuritySettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecuritySetting
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettingsByIdExecute(r ApiGetCompanyPortalSecuritySettingsByIdRequest) (*PortalSecuritySetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecuritySetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecuritySettingsAPIService.GetCompanyPortalSecuritySettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecuritySettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalSecuritySettingsCountRequest struct {
	ctx context.Context
	ApiService *PortalSecuritySettingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) ClientId(clientId string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) Conditions(conditions string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) ChildConditions(childConditions string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) OrderBy(orderBy string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) Fields(fields string) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) Page(page int32) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) PageSize(pageSize int32) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyPortalSecuritySettingsCountRequest) PageId(pageId int32) ApiGetCompanyPortalSecuritySettingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalSecuritySettingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyPortalSecuritySettingsCountExecute(r)
}

/*
GetCompanyPortalSecuritySettingsCount Get Count of PortalSecuritySetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCompanyPortalSecuritySettingsCountRequest
*/
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettingsCount(ctx context.Context) ApiGetCompanyPortalSecuritySettingsCountRequest {
	return ApiGetCompanyPortalSecuritySettingsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PortalSecuritySettingsAPIService) GetCompanyPortalSecuritySettingsCountExecute(r ApiGetCompanyPortalSecuritySettingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecuritySettingsAPIService.GetCompanyPortalSecuritySettingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecuritySettings/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalSecuritySettingsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecuritySettingsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchCompanyPortalSecuritySettingsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalSecuritySettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalSecuritySettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalSecuritySettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalSecuritySettingsByIdRequest) Execute() (*PortalSecuritySetting, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalSecuritySettingsByIdExecute(r)
}

/*
PatchCompanyPortalSecuritySettingsById Patch PortalSecuritySetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecuritySettingId
 @return ApiPatchCompanyPortalSecuritySettingsByIdRequest
*/
func (a *PortalSecuritySettingsAPIService) PatchCompanyPortalSecuritySettingsById(ctx context.Context, id int32) ApiPatchCompanyPortalSecuritySettingsByIdRequest {
	return ApiPatchCompanyPortalSecuritySettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecuritySetting
func (a *PortalSecuritySettingsAPIService) PatchCompanyPortalSecuritySettingsByIdExecute(r ApiPatchCompanyPortalSecuritySettingsByIdRequest) (*PortalSecuritySetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecuritySetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecuritySettingsAPIService.PatchCompanyPortalSecuritySettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecuritySettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalSecuritySettingsByIdRequest struct {
	ctx context.Context
	ApiService *PortalSecuritySettingsAPIService
	id int32
	clientId *string
	portalSecuritySetting *PortalSecuritySetting
}

// 
func (r ApiPutCompanyPortalSecuritySettingsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalSecuritySettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// portalSecurity
func (r ApiPutCompanyPortalSecuritySettingsByIdRequest) PortalSecuritySetting(portalSecuritySetting PortalSecuritySetting) ApiPutCompanyPortalSecuritySettingsByIdRequest {
	r.portalSecuritySetting = &portalSecuritySetting
	return r
}

func (r ApiPutCompanyPortalSecuritySettingsByIdRequest) Execute() (*PortalSecuritySetting, *http.Response, error) {
	return r.ApiService.PutCompanyPortalSecuritySettingsByIdExecute(r)
}

/*
PutCompanyPortalSecuritySettingsById Put PortalSecuritySetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id portalSecuritySettingId
 @return ApiPutCompanyPortalSecuritySettingsByIdRequest
*/
func (a *PortalSecuritySettingsAPIService) PutCompanyPortalSecuritySettingsById(ctx context.Context, id int32) ApiPutCompanyPortalSecuritySettingsByIdRequest {
	return ApiPutCompanyPortalSecuritySettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PortalSecuritySetting
func (a *PortalSecuritySettingsAPIService) PutCompanyPortalSecuritySettingsByIdExecute(r ApiPutCompanyPortalSecuritySettingsByIdRequest) (*PortalSecuritySetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PortalSecuritySetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalSecuritySettingsAPIService.PutCompanyPortalSecuritySettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalSecuritySettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalSecuritySetting == nil {
		return localVarReturnValue, nil, reportError("portalSecuritySetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalSecuritySetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
