/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PricingBreaksAPIService PricingBreaksAPI service
type PricingBreaksAPIService service

type ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) ClientId(clientId string) ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r)
}

/*
DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById Delete PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id breakId
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest
*/
func (a *PricingBreaksAPIService) DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	return ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *PricingBreaksAPIService) DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r ApiDeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.DeleteProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) Fields(fields string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) Page(page int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) Execute() ([]PricingBreak, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksExecute(r)
}

/*
GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks Get List of PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest
*/
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(ctx context.Context, parentId int32, grandparentId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []PricingBreak
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksExecute(r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) ([]PricingBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PricingBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Fields(fields string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Page(page int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Execute() (*PricingBreak, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r)
}

/*
GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById Get PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id breakId
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest
*/
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return PricingBreak
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) (*PricingBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) Fields(fields string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) Page(page int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountExecute(r)
}

/*
GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount Get Count of PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest
*/
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest {
	return ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *PricingBreaksAPIService) GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountExecute(r ApiGetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.GetProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) ClientId(clientId string) ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Execute() (*PricingBreak, *http.Response, error) {
	return r.ApiService.PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r)
}

/*
PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById Patch PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id breakId
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest
*/
func (a *PricingBreaksAPIService) PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	return ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return PricingBreak
func (a *PricingBreaksAPIService) PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r ApiPatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) (*PricingBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.PatchProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	parentId int32
	grandparentId int32
	pricingBreak *PricingBreak
	clientId *string
}

// pricingBreak
func (r ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) PricingBreak(pricingBreak PricingBreak) ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.pricingBreak = &pricingBreak
	return r
}

// 
func (r ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) ClientId(clientId string) ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) Execute() (*PricingBreak, *http.Response, error) {
	return r.ApiService.PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksExecute(r)
}

/*
PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks Post PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest
*/
func (a *PricingBreaksAPIService) PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks(ctx context.Context, parentId int32, grandparentId int32) ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest {
	return ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return PricingBreak
func (a *PricingBreaksAPIService) PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksExecute(r ApiPostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksRequest) (*PricingBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.PostProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pricingBreak == nil {
		return localVarReturnValue, nil, reportError("pricingBreak is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.pricingBreak
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest struct {
	ctx context.Context
	ApiService *PricingBreaksAPIService
	id int32
	parentId int32
	grandparentId int32
	pricingBreak *PricingBreak
	clientId *string
}

// pricingBreak
func (r ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) PricingBreak(pricingBreak PricingBreak) ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.pricingBreak = &pricingBreak
	return r
}

// 
func (r ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) ClientId(clientId string) ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) Execute() (*PricingBreak, *http.Response, error) {
	return r.ApiService.PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r)
}

/*
PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById Put PricingBreak

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id breakId
 @param parentId detailId
 @param grandparentId pricingscheduleId
 @return ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest
*/
func (a *PricingBreaksAPIService) PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest {
	return ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return PricingBreak
func (a *PricingBreaksAPIService) PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdExecute(r ApiPutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksByIdRequest) (*PricingBreak, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingBreak
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingBreaksAPIService.PutProcurementPricingschedulesByGrandparentIdDetailsByParentIdBreaksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{grandparentId}/details/{parentId}/breaks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.pricingBreak == nil {
		return localVarReturnValue, nil, reportError("pricingBreak is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.pricingBreak
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
