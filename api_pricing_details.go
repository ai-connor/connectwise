/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PricingDetailsAPIService PricingDetailsAPI service
type PricingDetailsAPIService service

type ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest) ClientId(clientId string) ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPricingschedulesByParentIdDetailsByIdExecute(r)
}

/*
DeleteProcurementPricingschedulesByParentIdDetailsById Delete PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId pricingscheduleId
 @return ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest
*/
func (a *PricingDetailsAPIService) DeleteProcurementPricingschedulesByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest {
	return ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *PricingDetailsAPIService) DeleteProcurementPricingschedulesByParentIdDetailsByIdExecute(r ApiDeleteProcurementPricingschedulesByParentIdDetailsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.DeleteProcurementPricingschedulesByParentIdDetailsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) Fields(fields string) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) Page(page int32) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) Execute() ([]PricingDetail, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByParentIdDetailsExecute(r)
}

/*
GetProcurementPricingschedulesByParentIdDetails Get List of PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByParentIdDetailsRequest
*/
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetails(ctx context.Context, parentId int32) ApiGetProcurementPricingschedulesByParentIdDetailsRequest {
	return ApiGetProcurementPricingschedulesByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []PricingDetail
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetailsExecute(r ApiGetProcurementPricingschedulesByParentIdDetailsRequest) ([]PricingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PricingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.GetProcurementPricingschedulesByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) Fields(fields string) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) Page(page int32) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) Execute() (*PricingDetail, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByParentIdDetailsByIdExecute(r)
}

/*
GetProcurementPricingschedulesByParentIdDetailsById Get PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest
*/
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest {
	return ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PricingDetail
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetailsByIdExecute(r ApiGetProcurementPricingschedulesByParentIdDetailsByIdRequest) (*PricingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.GetProcurementPricingschedulesByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) Fields(fields string) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) Page(page int32) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByParentIdDetailsCountExecute(r)
}

/*
GetProcurementPricingschedulesByParentIdDetailsCount Get Count of PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId pricingscheduleId
 @return ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest
*/
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetailsCount(ctx context.Context, parentId int32) ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest {
	return ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *PricingDetailsAPIService) GetProcurementPricingschedulesByParentIdDetailsCountExecute(r ApiGetProcurementPricingschedulesByParentIdDetailsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.GetProcurementPricingschedulesByParentIdDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest) Execute() (*PricingDetail, *http.Response, error) {
	return r.ApiService.PatchProcurementPricingschedulesByParentIdDetailsByIdExecute(r)
}

/*
PatchProcurementPricingschedulesByParentIdDetailsById Patch PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId pricingscheduleId
 @return ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest
*/
func (a *PricingDetailsAPIService) PatchProcurementPricingschedulesByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest {
	return ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PricingDetail
func (a *PricingDetailsAPIService) PatchProcurementPricingschedulesByParentIdDetailsByIdExecute(r ApiPatchProcurementPricingschedulesByParentIdDetailsByIdRequest) (*PricingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.PatchProcurementPricingschedulesByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPricingschedulesByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	parentId int32
	clientId *string
	pricingDetail *PricingDetail
}

// 
func (r ApiPostProcurementPricingschedulesByParentIdDetailsRequest) ClientId(clientId string) ApiPostProcurementPricingschedulesByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// pricingDetail
func (r ApiPostProcurementPricingschedulesByParentIdDetailsRequest) PricingDetail(pricingDetail PricingDetail) ApiPostProcurementPricingschedulesByParentIdDetailsRequest {
	r.pricingDetail = &pricingDetail
	return r
}

func (r ApiPostProcurementPricingschedulesByParentIdDetailsRequest) Execute() (*PricingDetail, *http.Response, error) {
	return r.ApiService.PostProcurementPricingschedulesByParentIdDetailsExecute(r)
}

/*
PostProcurementPricingschedulesByParentIdDetails Post PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId pricingscheduleId
 @return ApiPostProcurementPricingschedulesByParentIdDetailsRequest
*/
func (a *PricingDetailsAPIService) PostProcurementPricingschedulesByParentIdDetails(ctx context.Context, parentId int32) ApiPostProcurementPricingschedulesByParentIdDetailsRequest {
	return ApiPostProcurementPricingschedulesByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PricingDetail
func (a *PricingDetailsAPIService) PostProcurementPricingschedulesByParentIdDetailsExecute(r ApiPostProcurementPricingschedulesByParentIdDetailsRequest) (*PricingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.PostProcurementPricingschedulesByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.pricingDetail == nil {
		return localVarReturnValue, nil, reportError("pricingDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.pricingDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *PricingDetailsAPIService
	id int32
	parentId int32
	clientId *string
	pricingDetail *PricingDetail
}

// 
func (r ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// pricingDetail
func (r ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest) PricingDetail(pricingDetail PricingDetail) ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest {
	r.pricingDetail = &pricingDetail
	return r
}

func (r ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest) Execute() (*PricingDetail, *http.Response, error) {
	return r.ApiService.PutProcurementPricingschedulesByParentIdDetailsByIdExecute(r)
}

/*
PutProcurementPricingschedulesByParentIdDetailsById Put PricingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId pricingscheduleId
 @return ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest
*/
func (a *PricingDetailsAPIService) PutProcurementPricingschedulesByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest {
	return ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PricingDetail
func (a *PricingDetailsAPIService) PutProcurementPricingschedulesByParentIdDetailsByIdExecute(r ApiPutProcurementPricingschedulesByParentIdDetailsByIdRequest) (*PricingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingDetailsAPIService.PutProcurementPricingschedulesByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.pricingDetail == nil {
		return localVarReturnValue, nil, reportError("pricingDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.pricingDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
