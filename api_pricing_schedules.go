/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PricingSchedulesAPIService PricingSchedulesAPI service
type PricingSchedulesAPIService service

type ApiDeleteProcurementPricingschedulesByIdRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementPricingschedulesByIdRequest) ClientId(clientId string) ApiDeleteProcurementPricingschedulesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPricingschedulesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPricingschedulesByIdExecute(r)
}

/*
DeleteProcurementPricingschedulesById Delete PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pricingscheduleId
 @return ApiDeleteProcurementPricingschedulesByIdRequest
*/
func (a *PricingSchedulesAPIService) DeleteProcurementPricingschedulesById(ctx context.Context, id int32) ApiDeleteProcurementPricingschedulesByIdRequest {
	return ApiDeleteProcurementPricingschedulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PricingSchedulesAPIService) DeleteProcurementPricingschedulesByIdExecute(r ApiDeleteProcurementPricingschedulesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.DeleteProcurementPricingschedulesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) Fields(fields string) ApiGetProcurementPricingschedulesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) Page(page int32) ApiGetProcurementPricingschedulesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesRequest) Execute() ([]PricingSchedule, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesExecute(r)
}

/*
GetProcurementPricingschedules Get List of PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementPricingschedulesRequest
*/
func (a *PricingSchedulesAPIService) GetProcurementPricingschedules(ctx context.Context) ApiGetProcurementPricingschedulesRequest {
	return ApiGetProcurementPricingschedulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PricingSchedule
func (a *PricingSchedulesAPIService) GetProcurementPricingschedulesExecute(r ApiGetProcurementPricingschedulesRequest) ([]PricingSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PricingSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.GetProcurementPricingschedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesByIdRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) Fields(fields string) ApiGetProcurementPricingschedulesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) Page(page int32) ApiGetProcurementPricingschedulesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesByIdRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesByIdRequest) Execute() (*PricingSchedule, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesByIdExecute(r)
}

/*
GetProcurementPricingschedulesById Get PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pricingscheduleId
 @return ApiGetProcurementPricingschedulesByIdRequest
*/
func (a *PricingSchedulesAPIService) GetProcurementPricingschedulesById(ctx context.Context, id int32) ApiGetProcurementPricingschedulesByIdRequest {
	return ApiGetProcurementPricingschedulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PricingSchedule
func (a *PricingSchedulesAPIService) GetProcurementPricingschedulesByIdExecute(r ApiGetProcurementPricingschedulesByIdRequest) (*PricingSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.GetProcurementPricingschedulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPricingschedulesCountRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) ClientId(clientId string) ApiGetProcurementPricingschedulesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) Conditions(conditions string) ApiGetProcurementPricingschedulesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) ChildConditions(childConditions string) ApiGetProcurementPricingschedulesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPricingschedulesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) OrderBy(orderBy string) ApiGetProcurementPricingschedulesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) Fields(fields string) ApiGetProcurementPricingschedulesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) Page(page int32) ApiGetProcurementPricingschedulesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) PageSize(pageSize int32) ApiGetProcurementPricingschedulesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPricingschedulesCountRequest) PageId(pageId int32) ApiGetProcurementPricingschedulesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPricingschedulesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPricingschedulesCountExecute(r)
}

/*
GetProcurementPricingschedulesCount Get Count of PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementPricingschedulesCountRequest
*/
func (a *PricingSchedulesAPIService) GetProcurementPricingschedulesCount(ctx context.Context) ApiGetProcurementPricingschedulesCountRequest {
	return ApiGetProcurementPricingschedulesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PricingSchedulesAPIService) GetProcurementPricingschedulesCountExecute(r ApiGetProcurementPricingschedulesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.GetProcurementPricingschedulesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPricingschedulesByIdRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementPricingschedulesByIdRequest) ClientId(clientId string) ApiPatchProcurementPricingschedulesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPricingschedulesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPricingschedulesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPricingschedulesByIdRequest) Execute() (*PricingSchedule, *http.Response, error) {
	return r.ApiService.PatchProcurementPricingschedulesByIdExecute(r)
}

/*
PatchProcurementPricingschedulesById Patch PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pricingscheduleId
 @return ApiPatchProcurementPricingschedulesByIdRequest
*/
func (a *PricingSchedulesAPIService) PatchProcurementPricingschedulesById(ctx context.Context, id int32) ApiPatchProcurementPricingschedulesByIdRequest {
	return ApiPatchProcurementPricingschedulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PricingSchedule
func (a *PricingSchedulesAPIService) PatchProcurementPricingschedulesByIdExecute(r ApiPatchProcurementPricingschedulesByIdRequest) (*PricingSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.PatchProcurementPricingschedulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPricingschedulesRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	clientId *string
	pricingSchedule *PricingSchedule
}

// 
func (r ApiPostProcurementPricingschedulesRequest) ClientId(clientId string) ApiPostProcurementPricingschedulesRequest {
	r.clientId = &clientId
	return r
}

// pricingSchedule
func (r ApiPostProcurementPricingschedulesRequest) PricingSchedule(pricingSchedule PricingSchedule) ApiPostProcurementPricingschedulesRequest {
	r.pricingSchedule = &pricingSchedule
	return r
}

func (r ApiPostProcurementPricingschedulesRequest) Execute() (*PricingSchedule, *http.Response, error) {
	return r.ApiService.PostProcurementPricingschedulesExecute(r)
}

/*
PostProcurementPricingschedules Post PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementPricingschedulesRequest
*/
func (a *PricingSchedulesAPIService) PostProcurementPricingschedules(ctx context.Context) ApiPostProcurementPricingschedulesRequest {
	return ApiPostProcurementPricingschedulesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PricingSchedule
func (a *PricingSchedulesAPIService) PostProcurementPricingschedulesExecute(r ApiPostProcurementPricingschedulesRequest) (*PricingSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.PostProcurementPricingschedules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.pricingSchedule == nil {
		return localVarReturnValue, nil, reportError("pricingSchedule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.pricingSchedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPricingschedulesByIdRequest struct {
	ctx context.Context
	ApiService *PricingSchedulesAPIService
	id int32
	clientId *string
	pricingSchedule *PricingSchedule
}

// 
func (r ApiPutProcurementPricingschedulesByIdRequest) ClientId(clientId string) ApiPutProcurementPricingschedulesByIdRequest {
	r.clientId = &clientId
	return r
}

// pricingSchedule
func (r ApiPutProcurementPricingschedulesByIdRequest) PricingSchedule(pricingSchedule PricingSchedule) ApiPutProcurementPricingschedulesByIdRequest {
	r.pricingSchedule = &pricingSchedule
	return r
}

func (r ApiPutProcurementPricingschedulesByIdRequest) Execute() (*PricingSchedule, *http.Response, error) {
	return r.ApiService.PutProcurementPricingschedulesByIdExecute(r)
}

/*
PutProcurementPricingschedulesById Put PricingSchedule

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pricingscheduleId
 @return ApiPutProcurementPricingschedulesByIdRequest
*/
func (a *PricingSchedulesAPIService) PutProcurementPricingschedulesById(ctx context.Context, id int32) ApiPutProcurementPricingschedulesByIdRequest {
	return ApiPutProcurementPricingschedulesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PricingSchedule
func (a *PricingSchedulesAPIService) PutProcurementPricingschedulesByIdExecute(r ApiPutProcurementPricingschedulesByIdRequest) (*PricingSchedule, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PricingSchedule
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PricingSchedulesAPIService.PutProcurementPricingschedulesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/pricingschedules/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.pricingSchedule == nil {
		return localVarReturnValue, nil, reportError("pricingSchedule is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.pricingSchedule
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
