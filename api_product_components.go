/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProductComponentsAPIService ProductComponentsAPI service
type ProductComponentsAPIService service

type ApiDeleteProcurementProductsByParentIdComponentsByIdRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementProductsByParentIdComponentsByIdRequest) ClientId(clientId string) ApiDeleteProcurementProductsByParentIdComponentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementProductsByParentIdComponentsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementProductsByParentIdComponentsByIdExecute(r)
}

/*
DeleteProcurementProductsByParentIdComponentsById Delete ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id componentId
 @param parentId productId
 @return ApiDeleteProcurementProductsByParentIdComponentsByIdRequest
*/
func (a *ProductComponentsAPIService) DeleteProcurementProductsByParentIdComponentsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementProductsByParentIdComponentsByIdRequest {
	return ApiDeleteProcurementProductsByParentIdComponentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProductComponentsAPIService) DeleteProcurementProductsByParentIdComponentsByIdExecute(r ApiDeleteProcurementProductsByParentIdComponentsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.DeleteProcurementProductsByParentIdComponentsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdComponentsRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) Fields(fields string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) Page(page int32) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdComponentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdComponentsRequest) Execute() ([]ProductComponent, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdComponentsExecute(r)
}

/*
GetProcurementProductsByParentIdComponents Get List of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdComponentsRequest
*/
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponents(ctx context.Context, parentId int32) ApiGetProcurementProductsByParentIdComponentsRequest {
	return ApiGetProcurementProductsByParentIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductComponent
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponentsExecute(r ApiGetProcurementProductsByParentIdComponentsRequest) ([]ProductComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.GetProcurementProductsByParentIdComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdComponentsByIdRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) Fields(fields string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) Page(page int32) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdComponentsByIdRequest) Execute() ([]ProductComponent, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdComponentsByIdExecute(r)
}

/*
GetProcurementProductsByParentIdComponentsById Get List of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id componentId
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdComponentsByIdRequest
*/
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponentsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementProductsByParentIdComponentsByIdRequest {
	return ApiGetProcurementProductsByParentIdComponentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductComponent
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponentsByIdExecute(r ApiGetProcurementProductsByParentIdComponentsByIdRequest) ([]ProductComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.GetProcurementProductsByParentIdComponentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdComponentsCountRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) Fields(fields string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) Page(page int32) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdComponentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdComponentsCountExecute(r)
}

/*
GetProcurementProductsByParentIdComponentsCount Get Count of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdComponentsCountRequest
*/
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponentsCount(ctx context.Context, parentId int32) ApiGetProcurementProductsByParentIdComponentsCountRequest {
	return ApiGetProcurementProductsByParentIdComponentsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProductComponentsAPIService) GetProcurementProductsByParentIdComponentsCountExecute(r ApiGetProcurementProductsByParentIdComponentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.GetProcurementProductsByParentIdComponentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementProductsByParentIdComponentsByIdRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementProductsByParentIdComponentsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementProductsByParentIdComponentsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementProductsByParentIdComponentsByIdRequest) ClientId(clientId string) ApiPatchProcurementProductsByParentIdComponentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementProductsByParentIdComponentsByIdRequest) Execute() ([]ProductComponent, *http.Response, error) {
	return r.ApiService.PatchProcurementProductsByParentIdComponentsByIdExecute(r)
}

/*
PatchProcurementProductsByParentIdComponentsById Patch List of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id componentId
 @param parentId productId
 @return ApiPatchProcurementProductsByParentIdComponentsByIdRequest
*/
func (a *ProductComponentsAPIService) PatchProcurementProductsByParentIdComponentsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementProductsByParentIdComponentsByIdRequest {
	return ApiPatchProcurementProductsByParentIdComponentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductComponent
func (a *ProductComponentsAPIService) PatchProcurementProductsByParentIdComponentsByIdExecute(r ApiPatchProcurementProductsByParentIdComponentsByIdRequest) ([]ProductComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.PatchProcurementProductsByParentIdComponentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementProductsByParentIdComponentsRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	parentId int32
	productComponent *ProductComponent
	clientId *string
}

// productComponent
func (r ApiPostProcurementProductsByParentIdComponentsRequest) ProductComponent(productComponent ProductComponent) ApiPostProcurementProductsByParentIdComponentsRequest {
	r.productComponent = &productComponent
	return r
}

// 
func (r ApiPostProcurementProductsByParentIdComponentsRequest) ClientId(clientId string) ApiPostProcurementProductsByParentIdComponentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementProductsByParentIdComponentsRequest) Execute() ([]ProductComponent, *http.Response, error) {
	return r.ApiService.PostProcurementProductsByParentIdComponentsExecute(r)
}

/*
PostProcurementProductsByParentIdComponents Post List of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiPostProcurementProductsByParentIdComponentsRequest
*/
func (a *ProductComponentsAPIService) PostProcurementProductsByParentIdComponents(ctx context.Context, parentId int32) ApiPostProcurementProductsByParentIdComponentsRequest {
	return ApiPostProcurementProductsByParentIdComponentsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductComponent
func (a *ProductComponentsAPIService) PostProcurementProductsByParentIdComponentsExecute(r ApiPostProcurementProductsByParentIdComponentsRequest) ([]ProductComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.PostProcurementProductsByParentIdComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productComponent == nil {
		return localVarReturnValue, nil, reportError("productComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productComponent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementProductsByParentIdComponentsByIdRequest struct {
	ctx context.Context
	ApiService *ProductComponentsAPIService
	id int32
	parentId int32
	productComponent *ProductComponent
	clientId *string
}

// productComponent
func (r ApiPutProcurementProductsByParentIdComponentsByIdRequest) ProductComponent(productComponent ProductComponent) ApiPutProcurementProductsByParentIdComponentsByIdRequest {
	r.productComponent = &productComponent
	return r
}

// 
func (r ApiPutProcurementProductsByParentIdComponentsByIdRequest) ClientId(clientId string) ApiPutProcurementProductsByParentIdComponentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementProductsByParentIdComponentsByIdRequest) Execute() ([]ProductComponent, *http.Response, error) {
	return r.ApiService.PutProcurementProductsByParentIdComponentsByIdExecute(r)
}

/*
PutProcurementProductsByParentIdComponentsById Put List of ProductComponent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id componentId
 @param parentId productId
 @return ApiPutProcurementProductsByParentIdComponentsByIdRequest
*/
func (a *ProductComponentsAPIService) PutProcurementProductsByParentIdComponentsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementProductsByParentIdComponentsByIdRequest {
	return ApiPutProcurementProductsByParentIdComponentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductComponent
func (a *ProductComponentsAPIService) PutProcurementProductsByParentIdComponentsByIdExecute(r ApiPutProcurementProductsByParentIdComponentsByIdRequest) ([]ProductComponent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductComponentsAPIService.PutProcurementProductsByParentIdComponentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/components/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productComponent == nil {
		return localVarReturnValue, nil, reportError("productComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productComponent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
