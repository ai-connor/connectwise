/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProductPickingShippingDetailsAPIService ProductPickingShippingDetailsAPI service
type ProductPickingShippingDetailsAPIService service

type ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ClientId(clientId string) ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r)
}

/*
DeleteProcurementProductsByParentIdPickingShippingDetailsById Delete ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pickingShippingDetailId
 @param parentId productId
 @return ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest
*/
func (a *ProductPickingShippingDetailsAPIService) DeleteProcurementProductsByParentIdPickingShippingDetailsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	return ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProductPickingShippingDetailsAPIService) DeleteProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r ApiDeleteProcurementProductsByParentIdPickingShippingDetailsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.DeleteProcurementProductsByParentIdPickingShippingDetailsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) Fields(fields string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) Page(page int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) Execute() ([]ProductPickingShippingDetail, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdPickingShippingDetailsExecute(r)
}

/*
GetProcurementProductsByParentIdPickingShippingDetails Get List of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest
*/
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetails(ctx context.Context, parentId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest {
	return ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductPickingShippingDetail
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetailsExecute(r ApiGetProcurementProductsByParentIdPickingShippingDetailsRequest) ([]ProductPickingShippingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductPickingShippingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.GetProcurementProductsByParentIdPickingShippingDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Fields(fields string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Page(page int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Execute() ([]ProductPickingShippingDetail, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r)
}

/*
GetProcurementProductsByParentIdPickingShippingDetailsById Get List of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pickingShippingDetailId
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest
*/
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetailsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	return ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductPickingShippingDetail
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r ApiGetProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ([]ProductPickingShippingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductPickingShippingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.GetProcurementProductsByParentIdPickingShippingDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) Conditions(conditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) ChildConditions(childConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) OrderBy(orderBy string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) Fields(fields string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) Page(page int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) PageSize(pageSize int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) PageId(pageId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) ClientId(clientId string) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementProductsByParentIdPickingShippingDetailsCountExecute(r)
}

/*
GetProcurementProductsByParentIdPickingShippingDetailsCount Get Count of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest
*/
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetailsCount(ctx context.Context, parentId int32) ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest {
	return ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProductPickingShippingDetailsAPIService) GetProcurementProductsByParentIdPickingShippingDetailsCountExecute(r ApiGetProcurementProductsByParentIdPickingShippingDetailsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.GetProcurementProductsByParentIdPickingShippingDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ClientId(clientId string) ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Execute() ([]ProductPickingShippingDetail, *http.Response, error) {
	return r.ApiService.PatchProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r)
}

/*
PatchProcurementProductsByParentIdPickingShippingDetailsById Patch List of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pickingShippingDetailId
 @param parentId productId
 @return ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest
*/
func (a *ProductPickingShippingDetailsAPIService) PatchProcurementProductsByParentIdPickingShippingDetailsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	return ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductPickingShippingDetail
func (a *ProductPickingShippingDetailsAPIService) PatchProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r ApiPatchProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ([]ProductPickingShippingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductPickingShippingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.PatchProcurementProductsByParentIdPickingShippingDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	parentId int32
	productPickingShippingDetail *ProductPickingShippingDetail
	clientId *string
}

// productPickingShippingDetails
func (r ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest) ProductPickingShippingDetail(productPickingShippingDetail ProductPickingShippingDetail) ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.productPickingShippingDetail = &productPickingShippingDetail
	return r
}

// 
func (r ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest) ClientId(clientId string) ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest) Execute() ([]ProductPickingShippingDetail, *http.Response, error) {
	return r.ApiService.PostProcurementProductsByParentIdPickingShippingDetailsExecute(r)
}

/*
PostProcurementProductsByParentIdPickingShippingDetails Post List of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId productId
 @return ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest
*/
func (a *ProductPickingShippingDetailsAPIService) PostProcurementProductsByParentIdPickingShippingDetails(ctx context.Context, parentId int32) ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest {
	return ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductPickingShippingDetail
func (a *ProductPickingShippingDetailsAPIService) PostProcurementProductsByParentIdPickingShippingDetailsExecute(r ApiPostProcurementProductsByParentIdPickingShippingDetailsRequest) ([]ProductPickingShippingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductPickingShippingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.PostProcurementProductsByParentIdPickingShippingDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productPickingShippingDetail == nil {
		return localVarReturnValue, nil, reportError("productPickingShippingDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productPickingShippingDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ProductPickingShippingDetailsAPIService
	id int32
	parentId int32
	productPickingShippingDetail *ProductPickingShippingDetail
	clientId *string
}

// productPickingShippingDetails
func (r ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ProductPickingShippingDetail(productPickingShippingDetail ProductPickingShippingDetail) ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.productPickingShippingDetail = &productPickingShippingDetail
	return r
}

// 
func (r ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ClientId(clientId string) ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest) Execute() ([]ProductPickingShippingDetail, *http.Response, error) {
	return r.ApiService.PutProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r)
}

/*
PutProcurementProductsByParentIdPickingShippingDetailsById Put List of ProductPickingShippingDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id pickingShippingDetailId
 @param parentId productId
 @return ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest
*/
func (a *ProductPickingShippingDetailsAPIService) PutProcurementProductsByParentIdPickingShippingDetailsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest {
	return ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductPickingShippingDetail
func (a *ProductPickingShippingDetailsAPIService) PutProcurementProductsByParentIdPickingShippingDetailsByIdExecute(r ApiPutProcurementProductsByParentIdPickingShippingDetailsByIdRequest) ([]ProductPickingShippingDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductPickingShippingDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductPickingShippingDetailsAPIService.PutProcurementProductsByParentIdPickingShippingDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/products/{parentId}/pickingShippingDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productPickingShippingDetail == nil {
		return localVarReturnValue, nil, reportError("productPickingShippingDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productPickingShippingDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
