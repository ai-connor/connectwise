/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProductTypesAPIService ProductTypesAPI service
type ProductTypesAPIService service

type ApiDeleteProcurementTypesByIdRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementTypesByIdRequest) ClientId(clientId string) ApiDeleteProcurementTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementTypesByIdExecute(r)
}

/*
DeleteProcurementTypesById Delete ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiDeleteProcurementTypesByIdRequest
*/
func (a *ProductTypesAPIService) DeleteProcurementTypesById(ctx context.Context, id int32) ApiDeleteProcurementTypesByIdRequest {
	return ApiDeleteProcurementTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProductTypesAPIService) DeleteProcurementTypesByIdExecute(r ApiDeleteProcurementTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.DeleteProcurementTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementTypesRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesRequest) Conditions(conditions string) ApiGetProcurementTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesRequest) ChildConditions(childConditions string) ApiGetProcurementTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesRequest) OrderBy(orderBy string) ApiGetProcurementTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesRequest) Fields(fields string) ApiGetProcurementTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesRequest) Page(page int32) ApiGetProcurementTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesRequest) PageSize(pageSize int32) ApiGetProcurementTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesRequest) PageId(pageId int32) ApiGetProcurementTypesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesRequest) ClientId(clientId string) ApiGetProcurementTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesRequest) Execute() ([]ProductType, *http.Response, error) {
	return r.ApiService.GetProcurementTypesExecute(r)
}

/*
GetProcurementTypes Get List of ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementTypesRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypes(ctx context.Context) ApiGetProcurementTypesRequest {
	return ApiGetProcurementTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProductType
func (a *ProductTypesAPIService) GetProcurementTypesExecute(r ApiGetProcurementTypesRequest) ([]ProductType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesByIdRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesByIdRequest) Conditions(conditions string) ApiGetProcurementTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) OrderBy(orderBy string) ApiGetProcurementTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) Fields(fields string) ApiGetProcurementTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) Page(page int32) ApiGetProcurementTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) PageSize(pageSize int32) ApiGetProcurementTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) PageId(pageId int32) ApiGetProcurementTypesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesByIdRequest) ClientId(clientId string) ApiGetProcurementTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesByIdRequest) Execute() (*ProductType, *http.Response, error) {
	return r.ApiService.GetProcurementTypesByIdExecute(r)
}

/*
GetProcurementTypesById Get ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementTypesByIdRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesById(ctx context.Context, id int32) ApiGetProcurementTypesByIdRequest {
	return ApiGetProcurementTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductType
func (a *ProductTypesAPIService) GetProcurementTypesByIdExecute(r ApiGetProcurementTypesByIdRequest) (*ProductType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) Conditions(conditions string) ApiGetProcurementTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetProcurementTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetProcurementTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) Fields(fields string) ApiGetProcurementTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) Page(page int32) ApiGetProcurementTypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetProcurementTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) PageId(pageId int32) ApiGetProcurementTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesByIdInfoRequest) ClientId(clientId string) ApiGetProcurementTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesByIdInfoRequest) Execute() (*ProductTypeInfo, *http.Response, error) {
	return r.ApiService.GetProcurementTypesByIdInfoExecute(r)
}

/*
GetProcurementTypesByIdInfo Get ProductTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementTypesByIdInfoRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesByIdInfo(ctx context.Context, id int32) ApiGetProcurementTypesByIdInfoRequest {
	return ApiGetProcurementTypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductTypeInfo
func (a *ProductTypesAPIService) GetProcurementTypesByIdInfoExecute(r ApiGetProcurementTypesByIdInfoRequest) (*ProductTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) Fields(fields string) ApiGetProcurementTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) Page(page int32) ApiGetProcurementTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementTypesByIdUsagesExecute(r)
}

/*
GetProcurementTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementTypesByIdUsagesRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesByIdUsages(ctx context.Context, id int32) ApiGetProcurementTypesByIdUsagesRequest {
	return ApiGetProcurementTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ProductTypesAPIService) GetProcurementTypesByIdUsagesExecute(r ApiGetProcurementTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) Fields(fields string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) Page(page int32) ApiGetProcurementTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementTypesByIdUsagesListExecute(r)
}

/*
GetProcurementTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetProcurementTypesByIdUsagesListRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementTypesByIdUsagesListRequest {
	return ApiGetProcurementTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ProductTypesAPIService) GetProcurementTypesByIdUsagesListExecute(r ApiGetProcurementTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesCountRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesCountRequest) Conditions(conditions string) ApiGetProcurementTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) ChildConditions(childConditions string) ApiGetProcurementTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) OrderBy(orderBy string) ApiGetProcurementTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) Fields(fields string) ApiGetProcurementTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) Page(page int32) ApiGetProcurementTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) PageSize(pageSize int32) ApiGetProcurementTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) PageId(pageId int32) ApiGetProcurementTypesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesCountRequest) ClientId(clientId string) ApiGetProcurementTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementTypesCountExecute(r)
}

/*
GetProcurementTypesCount Get Count of ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementTypesCountRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesCount(ctx context.Context) ApiGetProcurementTypesCountRequest {
	return ApiGetProcurementTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ProductTypesAPIService) GetProcurementTypesCountExecute(r ApiGetProcurementTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesInfoRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesInfoRequest) Conditions(conditions string) ApiGetProcurementTypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) ChildConditions(childConditions string) ApiGetProcurementTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) OrderBy(orderBy string) ApiGetProcurementTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) Fields(fields string) ApiGetProcurementTypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) Page(page int32) ApiGetProcurementTypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) PageSize(pageSize int32) ApiGetProcurementTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) PageId(pageId int32) ApiGetProcurementTypesInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesInfoRequest) ClientId(clientId string) ApiGetProcurementTypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesInfoRequest) Execute() ([]ProductTypeInfo, *http.Response, error) {
	return r.ApiService.GetProcurementTypesInfoExecute(r)
}

/*
GetProcurementTypesInfo Get List of ProductTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementTypesInfoRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesInfo(ctx context.Context) ApiGetProcurementTypesInfoRequest {
	return ApiGetProcurementTypesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProductTypeInfo
func (a *ProductTypesAPIService) GetProcurementTypesInfoExecute(r ApiGetProcurementTypesInfoRequest) ([]ProductTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementTypesInfoCountRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) Conditions(conditions string) ApiGetProcurementTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetProcurementTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) OrderBy(orderBy string) ApiGetProcurementTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) Fields(fields string) ApiGetProcurementTypesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) Page(page int32) ApiGetProcurementTypesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) PageSize(pageSize int32) ApiGetProcurementTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) PageId(pageId int32) ApiGetProcurementTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementTypesInfoCountRequest) ClientId(clientId string) ApiGetProcurementTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementTypesInfoCountExecute(r)
}

/*
GetProcurementTypesInfoCount Get Count of ProductTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementTypesInfoCountRequest
*/
func (a *ProductTypesAPIService) GetProcurementTypesInfoCount(ctx context.Context) ApiGetProcurementTypesInfoCountRequest {
	return ApiGetProcurementTypesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ProductTypesAPIService) GetProcurementTypesInfoCountExecute(r ApiGetProcurementTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.GetProcurementTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementTypesByIdRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementTypesByIdRequest) ClientId(clientId string) ApiPatchProcurementTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementTypesByIdRequest) Execute() (*ProductType, *http.Response, error) {
	return r.ApiService.PatchProcurementTypesByIdExecute(r)
}

/*
PatchProcurementTypesById Patch ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPatchProcurementTypesByIdRequest
*/
func (a *ProductTypesAPIService) PatchProcurementTypesById(ctx context.Context, id int32) ApiPatchProcurementTypesByIdRequest {
	return ApiPatchProcurementTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductType
func (a *ProductTypesAPIService) PatchProcurementTypesByIdExecute(r ApiPatchProcurementTypesByIdRequest) (*ProductType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.PatchProcurementTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementTypesRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	productType *ProductType
	clientId *string
}

// productTypes
func (r ApiPostProcurementTypesRequest) ProductType(productType ProductType) ApiPostProcurementTypesRequest {
	r.productType = &productType
	return r
}

// 
func (r ApiPostProcurementTypesRequest) ClientId(clientId string) ApiPostProcurementTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementTypesRequest) Execute() (*ProductType, *http.Response, error) {
	return r.ApiService.PostProcurementTypesExecute(r)
}

/*
PostProcurementTypes Post ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementTypesRequest
*/
func (a *ProductTypesAPIService) PostProcurementTypes(ctx context.Context) ApiPostProcurementTypesRequest {
	return ApiPostProcurementTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProductType
func (a *ProductTypesAPIService) PostProcurementTypesExecute(r ApiPostProcurementTypesRequest) (*ProductType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.PostProcurementTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productType == nil {
		return localVarReturnValue, nil, reportError("productType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementTypesByIdRequest struct {
	ctx context.Context
	ApiService *ProductTypesAPIService
	id int32
	productType *ProductType
	clientId *string
}

// productTypes
func (r ApiPutProcurementTypesByIdRequest) ProductType(productType ProductType) ApiPutProcurementTypesByIdRequest {
	r.productType = &productType
	return r
}

// 
func (r ApiPutProcurementTypesByIdRequest) ClientId(clientId string) ApiPutProcurementTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementTypesByIdRequest) Execute() (*ProductType, *http.Response, error) {
	return r.ApiService.PutProcurementTypesByIdExecute(r)
}

/*
PutProcurementTypesById Put ProductType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiPutProcurementTypesByIdRequest
*/
func (a *ProductTypesAPIService) PutProcurementTypesById(ctx context.Context, id int32) ApiPutProcurementTypesByIdRequest {
	return ApiPutProcurementTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductType
func (a *ProductTypesAPIService) PutProcurementTypesByIdExecute(r ApiPutProcurementTypesByIdRequest) (*ProductType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypesAPIService.PutProcurementTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productType == nil {
		return localVarReturnValue, nil, reportError("productType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.productType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
