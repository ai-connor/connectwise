/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectBillingRatesAPIService ProjectBillingRatesAPI service
type ProjectBillingRatesAPIService service

type ApiDeleteProjectByParentIdBillingRatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectByParentIdBillingRatesByIdRequest) ClientId(clientId string) ApiDeleteProjectByParentIdBillingRatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectByParentIdBillingRatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectByParentIdBillingRatesByIdExecute(r)
}

/*
DeleteProjectByParentIdBillingRatesById Delete ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingRate
 @param parentId projectId
 @return ApiDeleteProjectByParentIdBillingRatesByIdRequest
*/
func (a *ProjectBillingRatesAPIService) DeleteProjectByParentIdBillingRatesById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectByParentIdBillingRatesByIdRequest {
	return ApiDeleteProjectByParentIdBillingRatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectBillingRatesAPIService) DeleteProjectByParentIdBillingRatesByIdExecute(r ApiDeleteProjectByParentIdBillingRatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.DeleteProjectByParentIdBillingRatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectByParentIdBillingRatesRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) Conditions(conditions string) ApiGetProjectByParentIdBillingRatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) ChildConditions(childConditions string) ApiGetProjectByParentIdBillingRatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectByParentIdBillingRatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) OrderBy(orderBy string) ApiGetProjectByParentIdBillingRatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) Fields(fields string) ApiGetProjectByParentIdBillingRatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) Page(page int32) ApiGetProjectByParentIdBillingRatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) PageSize(pageSize int32) ApiGetProjectByParentIdBillingRatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) PageId(pageId int32) ApiGetProjectByParentIdBillingRatesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesRequest) ClientId(clientId string) ApiGetProjectByParentIdBillingRatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectByParentIdBillingRatesRequest) Execute() ([]ProjectBillingRate, *http.Response, error) {
	return r.ApiService.GetProjectByParentIdBillingRatesExecute(r)
}

/*
GetProjectByParentIdBillingRates Get List of ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectByParentIdBillingRatesRequest
*/
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRates(ctx context.Context, parentId int32) ApiGetProjectByParentIdBillingRatesRequest {
	return ApiGetProjectByParentIdBillingRatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectBillingRate
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRatesExecute(r ApiGetProjectByParentIdBillingRatesRequest) ([]ProjectBillingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectBillingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.GetProjectByParentIdBillingRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectByParentIdBillingRatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) Conditions(conditions string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) ChildConditions(childConditions string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) OrderBy(orderBy string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) Fields(fields string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) Page(page int32) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) PageSize(pageSize int32) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) PageId(pageId int32) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesByIdRequest) ClientId(clientId string) ApiGetProjectByParentIdBillingRatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectByParentIdBillingRatesByIdRequest) Execute() (*ProjectBillingRate, *http.Response, error) {
	return r.ApiService.GetProjectByParentIdBillingRatesByIdExecute(r)
}

/*
GetProjectByParentIdBillingRatesById Get ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingRateId
 @param parentId projectId
 @return ApiGetProjectByParentIdBillingRatesByIdRequest
*/
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRatesById(ctx context.Context, id int32, parentId int32) ApiGetProjectByParentIdBillingRatesByIdRequest {
	return ApiGetProjectByParentIdBillingRatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBillingRate
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRatesByIdExecute(r ApiGetProjectByParentIdBillingRatesByIdRequest) (*ProjectBillingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBillingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.GetProjectByParentIdBillingRatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectByParentIdBillingRatesCountRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) Conditions(conditions string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) ChildConditions(childConditions string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) OrderBy(orderBy string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) Fields(fields string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) Page(page int32) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) PageSize(pageSize int32) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) PageId(pageId int32) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectByParentIdBillingRatesCountRequest) ClientId(clientId string) ApiGetProjectByParentIdBillingRatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectByParentIdBillingRatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectByParentIdBillingRatesCountExecute(r)
}

/*
GetProjectByParentIdBillingRatesCount Get Count of ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectByParentIdBillingRatesCountRequest
*/
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRatesCount(ctx context.Context, parentId int32) ApiGetProjectByParentIdBillingRatesCountRequest {
	return ApiGetProjectByParentIdBillingRatesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectBillingRatesAPIService) GetProjectByParentIdBillingRatesCountExecute(r ApiGetProjectByParentIdBillingRatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.GetProjectByParentIdBillingRatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest) ClientId(clientId string) ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest) Execute() (*ProjectBillingRate, *http.Response, error) {
	return r.ApiService.PatchProjectBillingRatesByParentIdBillingRatesByIdExecute(r)
}

/*
PatchProjectBillingRatesByParentIdBillingRatesById Patch ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingRateId
 @param parentId projectId
 @return ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest
*/
func (a *ProjectBillingRatesAPIService) PatchProjectBillingRatesByParentIdBillingRatesById(ctx context.Context, id int32, parentId int32) ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest {
	return ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBillingRate
func (a *ProjectBillingRatesAPIService) PatchProjectBillingRatesByParentIdBillingRatesByIdExecute(r ApiPatchProjectBillingRatesByParentIdBillingRatesByIdRequest) (*ProjectBillingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBillingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.PatchProjectBillingRatesByParentIdBillingRatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/billingRates/{parentId}/billingRates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectByParentIdBillingRatesRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	parentId int32
	projectBillingRate *ProjectBillingRate
	clientId *string
}

// billingRate
func (r ApiPostProjectByParentIdBillingRatesRequest) ProjectBillingRate(projectBillingRate ProjectBillingRate) ApiPostProjectByParentIdBillingRatesRequest {
	r.projectBillingRate = &projectBillingRate
	return r
}

// 
func (r ApiPostProjectByParentIdBillingRatesRequest) ClientId(clientId string) ApiPostProjectByParentIdBillingRatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectByParentIdBillingRatesRequest) Execute() (*ProjectBillingRate, *http.Response, error) {
	return r.ApiService.PostProjectByParentIdBillingRatesExecute(r)
}

/*
PostProjectByParentIdBillingRates Post ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiPostProjectByParentIdBillingRatesRequest
*/
func (a *ProjectBillingRatesAPIService) PostProjectByParentIdBillingRates(ctx context.Context, parentId int32) ApiPostProjectByParentIdBillingRatesRequest {
	return ApiPostProjectByParentIdBillingRatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBillingRate
func (a *ProjectBillingRatesAPIService) PostProjectByParentIdBillingRatesExecute(r ApiPostProjectByParentIdBillingRatesRequest) (*ProjectBillingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBillingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.PostProjectByParentIdBillingRates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBillingRate == nil {
		return localVarReturnValue, nil, reportError("projectBillingRate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBillingRate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectByParentIdBillingRatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBillingRatesAPIService
	id int32
	parentId int32
	projectBillingRate *ProjectBillingRate
	clientId *string
}

// billingRate
func (r ApiPutProjectByParentIdBillingRatesByIdRequest) ProjectBillingRate(projectBillingRate ProjectBillingRate) ApiPutProjectByParentIdBillingRatesByIdRequest {
	r.projectBillingRate = &projectBillingRate
	return r
}

// 
func (r ApiPutProjectByParentIdBillingRatesByIdRequest) ClientId(clientId string) ApiPutProjectByParentIdBillingRatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectByParentIdBillingRatesByIdRequest) Execute() (*ProjectBillingRate, *http.Response, error) {
	return r.ApiService.PutProjectByParentIdBillingRatesByIdExecute(r)
}

/*
PutProjectByParentIdBillingRatesById Put ProjectBillingRate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id billingRateId
 @param parentId projectId
 @return ApiPutProjectByParentIdBillingRatesByIdRequest
*/
func (a *ProjectBillingRatesAPIService) PutProjectByParentIdBillingRatesById(ctx context.Context, id int32, parentId int32) ApiPutProjectByParentIdBillingRatesByIdRequest {
	return ApiPutProjectByParentIdBillingRatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBillingRate
func (a *ProjectBillingRatesAPIService) PutProjectByParentIdBillingRatesByIdExecute(r ApiPutProjectByParentIdBillingRatesByIdRequest) (*ProjectBillingRate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBillingRate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBillingRatesAPIService.PutProjectByParentIdBillingRatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{parentId}/billingRates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBillingRate == nil {
		return localVarReturnValue, nil, reportError("projectBillingRate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBillingRate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
