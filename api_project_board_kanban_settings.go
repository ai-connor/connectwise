/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectBoardKanbanSettingsAPIService ProjectBoardKanbanSettingsAPI service
type ProjectBoardKanbanSettingsAPIService service

type ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest) ClientId(clientId string) ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectBoardsByParentIdKanbanSettingsByIdExecute(r)
}

/*
DeleteProjectBoardsByParentIdKanbanSettingsById Delete ProjectBoardKanbanSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id KanbanId
 @param parentId boardId
 @return ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) DeleteProjectBoardsByParentIdKanbanSettingsById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest {
	return ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectBoardKanbanSettingsAPIService) DeleteProjectBoardsByParentIdKanbanSettingsByIdExecute(r ApiDeleteProjectBoardsByParentIdKanbanSettingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.DeleteProjectBoardsByParentIdKanbanSettingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdKanbanSettingsRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) Fields(fields string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) Page(page int32) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) Execute() ([]ProjectBoardKanbanSetting, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdKanbanSettingsExecute(r)
}

/*
GetProjectBoardsByParentIdKanbanSettings Get List of ProjectBoardKanbanSettings

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiGetProjectBoardsByParentIdKanbanSettingsRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) GetProjectBoardsByParentIdKanbanSettings(ctx context.Context, parentId int32) ApiGetProjectBoardsByParentIdKanbanSettingsRequest {
	return ApiGetProjectBoardsByParentIdKanbanSettingsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectBoardKanbanSetting
func (a *ProjectBoardKanbanSettingsAPIService) GetProjectBoardsByParentIdKanbanSettingsExecute(r ApiGetProjectBoardsByParentIdKanbanSettingsRequest) ([]ProjectBoardKanbanSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectBoardKanbanSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.GetProjectBoardsByParentIdKanbanSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) Fields(fields string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) Page(page int32) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) Execute() (*ProjectBoardKanbanSetting, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdKanbanSettingsByIdExecute(r)
}

/*
GetProjectBoardsByParentIdKanbanSettingsById Get ProjectBoardKanbanSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id KanbanId
 @param parentId boardId
 @return ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) GetProjectBoardsByParentIdKanbanSettingsById(ctx context.Context, id int32, parentId int32) ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest {
	return ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBoardKanbanSetting
func (a *ProjectBoardKanbanSettingsAPIService) GetProjectBoardsByParentIdKanbanSettingsByIdExecute(r ApiGetProjectBoardsByParentIdKanbanSettingsByIdRequest) (*ProjectBoardKanbanSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardKanbanSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.GetProjectBoardsByParentIdKanbanSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest) ClientId(clientId string) ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest) Execute() (*ProjectBoardKanbanSetting, *http.Response, error) {
	return r.ApiService.PatchProjectBoardsByParentIdKanbanSettingsByIdExecute(r)
}

/*
PatchProjectBoardsByParentIdKanbanSettingsById Patch ProjectBoardKanbanSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id KanbanId
 @param parentId boardId
 @return ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) PatchProjectBoardsByParentIdKanbanSettingsById(ctx context.Context, id int32, parentId int32) ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest {
	return ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBoardKanbanSetting
func (a *ProjectBoardKanbanSettingsAPIService) PatchProjectBoardsByParentIdKanbanSettingsByIdExecute(r ApiPatchProjectBoardsByParentIdKanbanSettingsByIdRequest) (*ProjectBoardKanbanSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardKanbanSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.PatchProjectBoardsByParentIdKanbanSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectBoardsByParentIdKanbanSettingsRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	parentId int32
	projectBoardKanbanSetting *ProjectBoardKanbanSetting
	clientId *string
}

// kanbanSettings
func (r ApiPostProjectBoardsByParentIdKanbanSettingsRequest) ProjectBoardKanbanSetting(projectBoardKanbanSetting ProjectBoardKanbanSetting) ApiPostProjectBoardsByParentIdKanbanSettingsRequest {
	r.projectBoardKanbanSetting = &projectBoardKanbanSetting
	return r
}

// 
func (r ApiPostProjectBoardsByParentIdKanbanSettingsRequest) ClientId(clientId string) ApiPostProjectBoardsByParentIdKanbanSettingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectBoardsByParentIdKanbanSettingsRequest) Execute() (*ProjectBoardKanbanSetting, *http.Response, error) {
	return r.ApiService.PostProjectBoardsByParentIdKanbanSettingsExecute(r)
}

/*
PostProjectBoardsByParentIdKanbanSettings Post ProjectBoardKanbanSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId boardId
 @return ApiPostProjectBoardsByParentIdKanbanSettingsRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) PostProjectBoardsByParentIdKanbanSettings(ctx context.Context, parentId int32) ApiPostProjectBoardsByParentIdKanbanSettingsRequest {
	return ApiPostProjectBoardsByParentIdKanbanSettingsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBoardKanbanSetting
func (a *ProjectBoardKanbanSettingsAPIService) PostProjectBoardsByParentIdKanbanSettingsExecute(r ApiPostProjectBoardsByParentIdKanbanSettingsRequest) (*ProjectBoardKanbanSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardKanbanSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.PostProjectBoardsByParentIdKanbanSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBoardKanbanSetting == nil {
		return localVarReturnValue, nil, reportError("projectBoardKanbanSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBoardKanbanSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardKanbanSettingsAPIService
	id int32
	parentId int32
	projectBoardKanbanSetting *ProjectBoardKanbanSetting
	clientId *string
}

// Kanban
func (r ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest) ProjectBoardKanbanSetting(projectBoardKanbanSetting ProjectBoardKanbanSetting) ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.projectBoardKanbanSetting = &projectBoardKanbanSetting
	return r
}

// 
func (r ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest) ClientId(clientId string) ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest) Execute() (*ProjectBoardKanbanSetting, *http.Response, error) {
	return r.ApiService.PutProjectBoardsByParentIdKanbanSettingsByIdExecute(r)
}

/*
PutProjectBoardsByParentIdKanbanSettingsById Put ProjectBoardKanbanSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id KanbanId
 @param parentId boardId
 @return ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest
*/
func (a *ProjectBoardKanbanSettingsAPIService) PutProjectBoardsByParentIdKanbanSettingsById(ctx context.Context, id int32, parentId int32) ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest {
	return ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBoardKanbanSetting
func (a *ProjectBoardKanbanSettingsAPIService) PutProjectBoardsByParentIdKanbanSettingsByIdExecute(r ApiPutProjectBoardsByParentIdKanbanSettingsByIdRequest) (*ProjectBoardKanbanSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardKanbanSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardKanbanSettingsAPIService.PutProjectBoardsByParentIdKanbanSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/kanbanSettings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBoardKanbanSetting == nil {
		return localVarReturnValue, nil, reportError("projectBoardKanbanSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBoardKanbanSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
