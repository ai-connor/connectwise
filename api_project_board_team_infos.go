/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectBoardTeamInfosAPIService ProjectBoardTeamInfosAPI service
type ProjectBoardTeamInfosAPIService service

type ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamInfosAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) Execute() (*ProjectBoardTeamInfo, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsByIdInfoExecute(r)
}

/*
GetProjectBoardsByParentIdTeamsByIdInfo Get ProjectBoardTeamInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectBoardTeamInfoId
 @param parentId parentId
 @return ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest
*/
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsByIdInfo(ctx context.Context, id int32, parentId int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest {
	return ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectBoardTeamInfo
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsByIdInfoExecute(r ApiGetProjectBoardsByParentIdTeamsByIdInfoRequest) (*ProjectBoardTeamInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardTeamInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamInfosAPIService.GetProjectBoardsByParentIdTeamsByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamInfosAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsByIdInfoCountExecute(r)
}

/*
GetProjectBoardsByParentIdTeamsByIdInfoCount Get Count of ProjectBoardTeamInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectBoardTeamInfoId
 @param parentId parentId
 @return ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest
*/
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsByIdInfoCount(ctx context.Context, id int32, parentId int32) ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest {
	return ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsByIdInfoCountExecute(r ApiGetProjectBoardsByParentIdTeamsByIdInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamInfosAPIService.GetProjectBoardsByParentIdTeamsByIdInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/{id}/info/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByParentIdTeamsInfoRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamInfosAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) Conditions(conditions string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) OrderBy(orderBy string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) Fields(fields string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) Page(page int32) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) PageSize(pageSize int32) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) PageId(pageId int32) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) ClientId(clientId string) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByParentIdTeamsInfoRequest) Execute() ([]ProjectBoardTeamInfo, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByParentIdTeamsInfoExecute(r)
}

/*
GetProjectBoardsByParentIdTeamsInfo Get List of ProjectBoardTeamInfos

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId parentId
 @return ApiGetProjectBoardsByParentIdTeamsInfoRequest
*/
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsInfo(ctx context.Context, parentId int32) ApiGetProjectBoardsByParentIdTeamsInfoRequest {
	return ApiGetProjectBoardsByParentIdTeamsInfoRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectBoardTeamInfo
func (a *ProjectBoardTeamInfosAPIService) GetProjectBoardsByParentIdTeamsInfoExecute(r ApiGetProjectBoardsByParentIdTeamsInfoRequest) ([]ProjectBoardTeamInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectBoardTeamInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamInfosAPIService.GetProjectBoardsByParentIdTeamsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{parentId}/teams/info"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
