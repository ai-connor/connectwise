/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectBoardTeamMembersAPIService ProjectBoardTeamMembersAPI service
type ProjectBoardTeamMembersAPIService service

type ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r)
}

/*
DeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersById Delete ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id memberId
 @param parentId teamId
 @param grandparentId boardId
 @return ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest
*/
func (a *ProjectBoardTeamMembersAPIService) DeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	return ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *ProjectBoardTeamMembersAPIService) DeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r ApiDeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.DeleteProjectBoardsByGrandparentIdTeamsByParentIdMembersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) Conditions(conditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) OrderBy(orderBy string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) Fields(fields string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) Page(page int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) PageSize(pageSize int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) PageId(pageId int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) ClientId(clientId string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) Execute() ([]ProjectBoardTeamMember, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByGrandparentIdTeamsByParentIdMembersExecute(r)
}

/*
GetProjectBoardsByGrandparentIdTeamsByParentIdMembers Get List of ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId teamId
 @param grandparentId boardId
 @return ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest
*/
func (a *ProjectBoardTeamMembersAPIService) GetProjectBoardsByGrandparentIdTeamsByParentIdMembers(ctx context.Context, parentId int32, grandparentId int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	return ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []ProjectBoardTeamMember
func (a *ProjectBoardTeamMembersAPIService) GetProjectBoardsByGrandparentIdTeamsByParentIdMembersExecute(r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) ([]ProjectBoardTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectBoardTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.GetProjectBoardsByGrandparentIdTeamsByParentIdMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Conditions(conditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ChildConditions(childConditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) OrderBy(orderBy string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Fields(fields string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Page(page int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) PageSize(pageSize int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) PageId(pageId int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Execute() (*ProjectBoardTeamMember, *http.Response, error) {
	return r.ApiService.GetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r)
}

/*
GetProjectBoardsByGrandparentIdTeamsByParentIdMembersById Get ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id memberId
 @param parentId teamId
 @param grandparentId boardId
 @return ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest
*/
func (a *ProjectBoardTeamMembersAPIService) GetProjectBoardsByGrandparentIdTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	return ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ProjectBoardTeamMember
func (a *ProjectBoardTeamMembersAPIService) GetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r ApiGetProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) (*ProjectBoardTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.GetProjectBoardsByGrandparentIdTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Execute() (*ProjectBoardTeamMember, *http.Response, error) {
	return r.ApiService.PatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r)
}

/*
PatchProjectBoardsByGrandparentIdTeamsByParentIdMembersById Patch ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id memberId
 @param parentId teamId
 @param grandparentId boardId
 @return ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest
*/
func (a *ProjectBoardTeamMembersAPIService) PatchProjectBoardsByGrandparentIdTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	return ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ProjectBoardTeamMember
func (a *ProjectBoardTeamMembersAPIService) PatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r ApiPatchProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) (*ProjectBoardTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.PatchProjectBoardsByGrandparentIdTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	parentId int32
	grandparentId int32
	projectBoardTeamMember *ProjectBoardTeamMember
	clientId *string
}

// teamMember
func (r ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) ProjectBoardTeamMember(projectBoardTeamMember ProjectBoardTeamMember) ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.projectBoardTeamMember = &projectBoardTeamMember
	return r
}

// 
func (r ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) ClientId(clientId string) ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) Execute() (*ProjectBoardTeamMember, *http.Response, error) {
	return r.ApiService.PostProjectBoardsByGrandparentIdTeamsByParentIdMembersExecute(r)
}

/*
PostProjectBoardsByGrandparentIdTeamsByParentIdMembers Post ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId teamId
 @param grandparentId boardId
 @return ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest
*/
func (a *ProjectBoardTeamMembersAPIService) PostProjectBoardsByGrandparentIdTeamsByParentIdMembers(ctx context.Context, parentId int32, grandparentId int32) ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest {
	return ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ProjectBoardTeamMember
func (a *ProjectBoardTeamMembersAPIService) PostProjectBoardsByGrandparentIdTeamsByParentIdMembersExecute(r ApiPostProjectBoardsByGrandparentIdTeamsByParentIdMembersRequest) (*ProjectBoardTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.PostProjectBoardsByGrandparentIdTeamsByParentIdMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBoardTeamMember == nil {
		return localVarReturnValue, nil, reportError("projectBoardTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBoardTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectBoardTeamMembersAPIService
	id int32
	parentId int32
	grandparentId int32
	projectBoardTeamMember *ProjectBoardTeamMember
	clientId *string
}

// teamMember
func (r ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ProjectBoardTeamMember(projectBoardTeamMember ProjectBoardTeamMember) ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.projectBoardTeamMember = &projectBoardTeamMember
	return r
}

// 
func (r ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) ClientId(clientId string) ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) Execute() (*ProjectBoardTeamMember, *http.Response, error) {
	return r.ApiService.PutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r)
}

/*
PutProjectBoardsByGrandparentIdTeamsByParentIdMembersById Put ProjectBoardTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id memberId
 @param parentId teamId
 @param grandparentId boardId
 @return ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest
*/
func (a *ProjectBoardTeamMembersAPIService) PutProjectBoardsByGrandparentIdTeamsByParentIdMembersById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest {
	return ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return ProjectBoardTeamMember
func (a *ProjectBoardTeamMembersAPIService) PutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdExecute(r ApiPutProjectBoardsByGrandparentIdTeamsByParentIdMembersByIdRequest) (*ProjectBoardTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectBoardTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectBoardTeamMembersAPIService.PutProjectBoardsByGrandparentIdTeamsByParentIdMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/boards/{grandparentId}/teams/{parentId}/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectBoardTeamMember == nil {
		return localVarReturnValue, nil, reportError("projectBoardTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectBoardTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
