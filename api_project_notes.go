/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectNotesAPIService ProjectNotesAPI service
type ProjectNotesAPIService service

type ApiDeleteProjectProjectsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectProjectsByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectsByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectsByParentIdNotesByIdExecute(r)
}

/*
DeleteProjectProjectsByParentIdNotesById Delete ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId projectId
 @return ApiDeleteProjectProjectsByParentIdNotesByIdRequest
*/
func (a *ProjectNotesAPIService) DeleteProjectProjectsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectsByParentIdNotesByIdRequest {
	return ApiDeleteProjectProjectsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectNotesAPIService) DeleteProjectProjectsByParentIdNotesByIdExecute(r ApiDeleteProjectProjectsByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.DeleteProjectProjectsByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) Fields(fields string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) Page(page int32) ApiGetProjectProjectsByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdNotesRequest) Execute() ([]ProjectNote, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdNotesExecute(r)
}

/*
GetProjectProjectsByParentIdNotes Get List of ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdNotesRequest
*/
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotes(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdNotesRequest {
	return ApiGetProjectProjectsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectNote
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotesExecute(r ApiGetProjectProjectsByParentIdNotesRequest) ([]ProjectNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.GetProjectProjectsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) Fields(fields string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) Page(page int32) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdNotesByIdRequest) Execute() (*ProjectNote, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdNotesByIdExecute(r)
}

/*
GetProjectProjectsByParentIdNotesById Get ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdNotesByIdRequest
*/
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectsByParentIdNotesByIdRequest {
	return ApiGetProjectProjectsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectNote
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotesByIdExecute(r ApiGetProjectProjectsByParentIdNotesByIdRequest) (*ProjectNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.GetProjectProjectsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) Fields(fields string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) Page(page int32) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdNotesCountRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdNotesCountExecute(r)
}

/*
GetProjectProjectsByParentIdNotesCount Get Count of ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdNotesCountRequest
*/
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdNotesCountRequest {
	return ApiGetProjectProjectsByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectNotesAPIService) GetProjectProjectsByParentIdNotesCountExecute(r ApiGetProjectProjectsByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.GetProjectProjectsByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectProjectsByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectsByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectProjectsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchProjectProjectsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectProjectsByParentIdNotesByIdRequest) Execute() (*ProjectNote, *http.Response, error) {
	return r.ApiService.PatchProjectProjectsByParentIdNotesByIdExecute(r)
}

/*
PatchProjectProjectsByParentIdNotesById Patch ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId projectId
 @return ApiPatchProjectProjectsByParentIdNotesByIdRequest
*/
func (a *ProjectNotesAPIService) PatchProjectProjectsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchProjectProjectsByParentIdNotesByIdRequest {
	return ApiPatchProjectProjectsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectNote
func (a *ProjectNotesAPIService) PatchProjectProjectsByParentIdNotesByIdExecute(r ApiPatchProjectProjectsByParentIdNotesByIdRequest) (*ProjectNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.PatchProjectProjectsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	parentId int32
	projectNote *ProjectNote
	clientId *string
}

// note
func (r ApiPostProjectProjectsByParentIdNotesRequest) ProjectNote(projectNote ProjectNote) ApiPostProjectProjectsByParentIdNotesRequest {
	r.projectNote = &projectNote
	return r
}

// 
func (r ApiPostProjectProjectsByParentIdNotesRequest) ClientId(clientId string) ApiPostProjectProjectsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectProjectsByParentIdNotesRequest) Execute() (*ProjectNote, *http.Response, error) {
	return r.ApiService.PostProjectProjectsByParentIdNotesExecute(r)
}

/*
PostProjectProjectsByParentIdNotes Post ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiPostProjectProjectsByParentIdNotesRequest
*/
func (a *ProjectNotesAPIService) PostProjectProjectsByParentIdNotes(ctx context.Context, parentId int32) ApiPostProjectProjectsByParentIdNotesRequest {
	return ApiPostProjectProjectsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectNote
func (a *ProjectNotesAPIService) PostProjectProjectsByParentIdNotesExecute(r ApiPostProjectProjectsByParentIdNotesRequest) (*ProjectNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.PostProjectProjectsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectNote == nil {
		return localVarReturnValue, nil, reportError("projectNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectNotesAPIService
	id int32
	parentId int32
	projectNote *ProjectNote
	clientId *string
}

// note
func (r ApiPutProjectProjectsByParentIdNotesByIdRequest) ProjectNote(projectNote ProjectNote) ApiPutProjectProjectsByParentIdNotesByIdRequest {
	r.projectNote = &projectNote
	return r
}

// 
func (r ApiPutProjectProjectsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutProjectProjectsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectProjectsByParentIdNotesByIdRequest) Execute() (*ProjectNote, *http.Response, error) {
	return r.ApiService.PutProjectProjectsByParentIdNotesByIdExecute(r)
}

/*
PutProjectProjectsByParentIdNotesById Put ProjectNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId projectId
 @return ApiPutProjectProjectsByParentIdNotesByIdRequest
*/
func (a *ProjectNotesAPIService) PutProjectProjectsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutProjectProjectsByParentIdNotesByIdRequest {
	return ApiPutProjectProjectsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectNote
func (a *ProjectNotesAPIService) PutProjectProjectsByParentIdNotesByIdExecute(r ApiPutProjectProjectsByParentIdNotesByIdRequest) (*ProjectNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectNotesAPIService.PutProjectProjectsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectNote == nil {
		return localVarReturnValue, nil, reportError("projectNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
