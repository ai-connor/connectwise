/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectPhasesAPIService ProjectPhasesAPI service
type ProjectPhasesAPIService service

type ApiDeleteProjectProjectsByParentIdPhasesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectProjectsByParentIdPhasesByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectsByParentIdPhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectsByParentIdPhasesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectsByParentIdPhasesByIdExecute(r)
}

/*
DeleteProjectProjectsByParentIdPhasesById Delete ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phasId
 @param parentId projectId
 @return ApiDeleteProjectProjectsByParentIdPhasesByIdRequest
*/
func (a *ProjectPhasesAPIService) DeleteProjectProjectsByParentIdPhasesById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectsByParentIdPhasesByIdRequest {
	return ApiDeleteProjectProjectsByParentIdPhasesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectPhasesAPIService) DeleteProjectProjectsByParentIdPhasesByIdExecute(r ApiDeleteProjectProjectsByParentIdPhasesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.DeleteProjectProjectsByParentIdPhasesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdPhasesRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) Fields(fields string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) Page(page int32) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdPhasesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdPhasesRequest) Execute() ([]ProjectPhase, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdPhasesExecute(r)
}

/*
GetProjectProjectsByParentIdPhases Get List of ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdPhasesRequest
*/
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhases(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdPhasesRequest {
	return ApiGetProjectProjectsByParentIdPhasesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectPhase
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhasesExecute(r ApiGetProjectProjectsByParentIdPhasesRequest) ([]ProjectPhase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectPhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.GetProjectProjectsByParentIdPhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdPhasesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) Fields(fields string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) Page(page int32) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdPhasesByIdRequest) Execute() (*ProjectPhase, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdPhasesByIdExecute(r)
}

/*
GetProjectProjectsByParentIdPhasesById Get ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phasId
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdPhasesByIdRequest
*/
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhasesById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectsByParentIdPhasesByIdRequest {
	return ApiGetProjectProjectsByParentIdPhasesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectPhase
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhasesByIdExecute(r ApiGetProjectProjectsByParentIdPhasesByIdRequest) (*ProjectPhase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectPhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.GetProjectProjectsByParentIdPhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdPhasesCountRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) Fields(fields string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) Page(page int32) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdPhasesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdPhasesCountExecute(r)
}

/*
GetProjectProjectsByParentIdPhasesCount Get Count of ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdPhasesCountRequest
*/
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhasesCount(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdPhasesCountRequest {
	return ApiGetProjectProjectsByParentIdPhasesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectPhasesAPIService) GetProjectProjectsByParentIdPhasesCountExecute(r ApiGetProjectProjectsByParentIdPhasesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.GetProjectProjectsByParentIdPhasesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectsByParentIdPhasesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectProjectsByParentIdPhasesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectsByParentIdPhasesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectProjectsByParentIdPhasesByIdRequest) ClientId(clientId string) ApiPatchProjectProjectsByParentIdPhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectProjectsByParentIdPhasesByIdRequest) Execute() (*ProjectPhase, *http.Response, error) {
	return r.ApiService.PatchProjectProjectsByParentIdPhasesByIdExecute(r)
}

/*
PatchProjectProjectsByParentIdPhasesById Patch ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phasId
 @param parentId projectId
 @return ApiPatchProjectProjectsByParentIdPhasesByIdRequest
*/
func (a *ProjectPhasesAPIService) PatchProjectProjectsByParentIdPhasesById(ctx context.Context, id int32, parentId int32) ApiPatchProjectProjectsByParentIdPhasesByIdRequest {
	return ApiPatchProjectProjectsByParentIdPhasesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectPhase
func (a *ProjectPhasesAPIService) PatchProjectProjectsByParentIdPhasesByIdExecute(r ApiPatchProjectProjectsByParentIdPhasesByIdRequest) (*ProjectPhase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectPhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.PatchProjectProjectsByParentIdPhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectsByParentIdPhasesRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	parentId int32
	projectPhase *ProjectPhase
	clientId *string
}

// projectPhase
func (r ApiPostProjectProjectsByParentIdPhasesRequest) ProjectPhase(projectPhase ProjectPhase) ApiPostProjectProjectsByParentIdPhasesRequest {
	r.projectPhase = &projectPhase
	return r
}

// 
func (r ApiPostProjectProjectsByParentIdPhasesRequest) ClientId(clientId string) ApiPostProjectProjectsByParentIdPhasesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectProjectsByParentIdPhasesRequest) Execute() (*ProjectPhase, *http.Response, error) {
	return r.ApiService.PostProjectProjectsByParentIdPhasesExecute(r)
}

/*
PostProjectProjectsByParentIdPhases Post ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiPostProjectProjectsByParentIdPhasesRequest
*/
func (a *ProjectPhasesAPIService) PostProjectProjectsByParentIdPhases(ctx context.Context, parentId int32) ApiPostProjectProjectsByParentIdPhasesRequest {
	return ApiPostProjectProjectsByParentIdPhasesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectPhase
func (a *ProjectPhasesAPIService) PostProjectProjectsByParentIdPhasesExecute(r ApiPostProjectProjectsByParentIdPhasesRequest) (*ProjectPhase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectPhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.PostProjectProjectsByParentIdPhases")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectPhase == nil {
		return localVarReturnValue, nil, reportError("projectPhase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectPhase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectsByParentIdPhasesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectPhasesAPIService
	id int32
	parentId int32
	projectPhase *ProjectPhase
	clientId *string
}

// projectPhase
func (r ApiPutProjectProjectsByParentIdPhasesByIdRequest) ProjectPhase(projectPhase ProjectPhase) ApiPutProjectProjectsByParentIdPhasesByIdRequest {
	r.projectPhase = &projectPhase
	return r
}

// 
func (r ApiPutProjectProjectsByParentIdPhasesByIdRequest) ClientId(clientId string) ApiPutProjectProjectsByParentIdPhasesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectProjectsByParentIdPhasesByIdRequest) Execute() (*ProjectPhase, *http.Response, error) {
	return r.ApiService.PutProjectProjectsByParentIdPhasesByIdExecute(r)
}

/*
PutProjectProjectsByParentIdPhasesById Put ProjectPhase

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id phasId
 @param parentId projectId
 @return ApiPutProjectProjectsByParentIdPhasesByIdRequest
*/
func (a *ProjectPhasesAPIService) PutProjectProjectsByParentIdPhasesById(ctx context.Context, id int32, parentId int32) ApiPutProjectProjectsByParentIdPhasesByIdRequest {
	return ApiPutProjectProjectsByParentIdPhasesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectPhase
func (a *ProjectPhasesAPIService) PutProjectProjectsByParentIdPhasesByIdExecute(r ApiPutProjectProjectsByParentIdPhasesByIdRequest) (*ProjectPhase, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectPhase
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectPhasesAPIService.PutProjectProjectsByParentIdPhasesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/phases/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectPhase == nil {
		return localVarReturnValue, nil, reportError("projectPhase is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectPhase
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
