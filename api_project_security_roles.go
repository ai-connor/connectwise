/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectSecurityRolesAPIService ProjectSecurityRolesAPI service
type ProjectSecurityRolesAPIService service

type ApiDeleteProjectSecurityRolesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProjectSecurityRolesByIdRequest) ClientId(clientId string) ApiDeleteProjectSecurityRolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectSecurityRolesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectSecurityRolesByIdExecute(r)
}

/*
DeleteProjectSecurityRolesById Delete ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityRoleId
 @return ApiDeleteProjectSecurityRolesByIdRequest
*/
func (a *ProjectSecurityRolesAPIService) DeleteProjectSecurityRolesById(ctx context.Context, id int32) ApiDeleteProjectSecurityRolesByIdRequest {
	return ApiDeleteProjectSecurityRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProjectSecurityRolesAPIService) DeleteProjectSecurityRolesByIdExecute(r ApiDeleteProjectSecurityRolesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.DeleteProjectSecurityRolesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectSecurityRolesRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectSecurityRolesRequest) ClientId(clientId string) ApiGetProjectSecurityRolesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) Conditions(conditions string) ApiGetProjectSecurityRolesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) ChildConditions(childConditions string) ApiGetProjectSecurityRolesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectSecurityRolesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) OrderBy(orderBy string) ApiGetProjectSecurityRolesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) Fields(fields string) ApiGetProjectSecurityRolesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) Page(page int32) ApiGetProjectSecurityRolesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) PageSize(pageSize int32) ApiGetProjectSecurityRolesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectSecurityRolesRequest) PageId(pageId int32) ApiGetProjectSecurityRolesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectSecurityRolesRequest) Execute() ([]ProjectSecurityRole, *http.Response, error) {
	return r.ApiService.GetProjectSecurityRolesExecute(r)
}

/*
GetProjectSecurityRoles Get List of ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectSecurityRolesRequest
*/
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRoles(ctx context.Context) ApiGetProjectSecurityRolesRequest {
	return ApiGetProjectSecurityRolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProjectSecurityRole
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRolesExecute(r ApiGetProjectSecurityRolesRequest) ([]ProjectSecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectSecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.GetProjectSecurityRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectSecurityRolesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) ClientId(clientId string) ApiGetProjectSecurityRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) Conditions(conditions string) ApiGetProjectSecurityRolesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) ChildConditions(childConditions string) ApiGetProjectSecurityRolesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectSecurityRolesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) OrderBy(orderBy string) ApiGetProjectSecurityRolesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) Fields(fields string) ApiGetProjectSecurityRolesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) Page(page int32) ApiGetProjectSecurityRolesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) PageSize(pageSize int32) ApiGetProjectSecurityRolesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectSecurityRolesByIdRequest) PageId(pageId int32) ApiGetProjectSecurityRolesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectSecurityRolesByIdRequest) Execute() (*ProjectSecurityRole, *http.Response, error) {
	return r.ApiService.GetProjectSecurityRolesByIdExecute(r)
}

/*
GetProjectSecurityRolesById Get ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityRoleId
 @return ApiGetProjectSecurityRolesByIdRequest
*/
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRolesById(ctx context.Context, id int32) ApiGetProjectSecurityRolesByIdRequest {
	return ApiGetProjectSecurityRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectSecurityRole
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRolesByIdExecute(r ApiGetProjectSecurityRolesByIdRequest) (*ProjectSecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectSecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.GetProjectSecurityRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectSecurityRolesCountRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) ClientId(clientId string) ApiGetProjectSecurityRolesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) Conditions(conditions string) ApiGetProjectSecurityRolesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) ChildConditions(childConditions string) ApiGetProjectSecurityRolesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectSecurityRolesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) OrderBy(orderBy string) ApiGetProjectSecurityRolesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) Fields(fields string) ApiGetProjectSecurityRolesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) Page(page int32) ApiGetProjectSecurityRolesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) PageSize(pageSize int32) ApiGetProjectSecurityRolesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectSecurityRolesCountRequest) PageId(pageId int32) ApiGetProjectSecurityRolesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectSecurityRolesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectSecurityRolesCountExecute(r)
}

/*
GetProjectSecurityRolesCount Get Count of ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectSecurityRolesCountRequest
*/
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRolesCount(ctx context.Context) ApiGetProjectSecurityRolesCountRequest {
	return ApiGetProjectSecurityRolesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectSecurityRolesAPIService) GetProjectSecurityRolesCountExecute(r ApiGetProjectSecurityRolesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.GetProjectSecurityRolesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectSecurityRolesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProjectSecurityRolesByIdRequest) ClientId(clientId string) ApiPatchProjectSecurityRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectSecurityRolesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectSecurityRolesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectSecurityRolesByIdRequest) Execute() (*ProjectSecurityRole, *http.Response, error) {
	return r.ApiService.PatchProjectSecurityRolesByIdExecute(r)
}

/*
PatchProjectSecurityRolesById Patch ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityRoleId
 @return ApiPatchProjectSecurityRolesByIdRequest
*/
func (a *ProjectSecurityRolesAPIService) PatchProjectSecurityRolesById(ctx context.Context, id int32) ApiPatchProjectSecurityRolesByIdRequest {
	return ApiPatchProjectSecurityRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectSecurityRole
func (a *ProjectSecurityRolesAPIService) PatchProjectSecurityRolesByIdExecute(r ApiPatchProjectSecurityRolesByIdRequest) (*ProjectSecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectSecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.PatchProjectSecurityRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectSecurityRolesRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	clientId *string
	projectSecurityRole *ProjectSecurityRole
}

// 
func (r ApiPostProjectSecurityRolesRequest) ClientId(clientId string) ApiPostProjectSecurityRolesRequest {
	r.clientId = &clientId
	return r
}

// projectSecurityRole
func (r ApiPostProjectSecurityRolesRequest) ProjectSecurityRole(projectSecurityRole ProjectSecurityRole) ApiPostProjectSecurityRolesRequest {
	r.projectSecurityRole = &projectSecurityRole
	return r
}

func (r ApiPostProjectSecurityRolesRequest) Execute() (*ProjectSecurityRole, *http.Response, error) {
	return r.ApiService.PostProjectSecurityRolesExecute(r)
}

/*
PostProjectSecurityRoles Post ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProjectSecurityRolesRequest
*/
func (a *ProjectSecurityRolesAPIService) PostProjectSecurityRoles(ctx context.Context) ApiPostProjectSecurityRolesRequest {
	return ApiPostProjectSecurityRolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectSecurityRole
func (a *ProjectSecurityRolesAPIService) PostProjectSecurityRolesExecute(r ApiPostProjectSecurityRolesRequest) (*ProjectSecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectSecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.PostProjectSecurityRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectSecurityRole == nil {
		return localVarReturnValue, nil, reportError("projectSecurityRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectSecurityRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectSecurityRolesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectSecurityRolesAPIService
	id int32
	clientId *string
	projectSecurityRole *ProjectSecurityRole
}

// 
func (r ApiPutProjectSecurityRolesByIdRequest) ClientId(clientId string) ApiPutProjectSecurityRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// projectSecurityRole
func (r ApiPutProjectSecurityRolesByIdRequest) ProjectSecurityRole(projectSecurityRole ProjectSecurityRole) ApiPutProjectSecurityRolesByIdRequest {
	r.projectSecurityRole = &projectSecurityRole
	return r
}

func (r ApiPutProjectSecurityRolesByIdRequest) Execute() (*ProjectSecurityRole, *http.Response, error) {
	return r.ApiService.PutProjectSecurityRolesByIdExecute(r)
}

/*
PutProjectSecurityRolesById Put ProjectSecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityRoleId
 @return ApiPutProjectSecurityRolesByIdRequest
*/
func (a *ProjectSecurityRolesAPIService) PutProjectSecurityRolesById(ctx context.Context, id int32) ApiPutProjectSecurityRolesByIdRequest {
	return ApiPutProjectSecurityRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectSecurityRole
func (a *ProjectSecurityRolesAPIService) PutProjectSecurityRolesByIdExecute(r ApiPutProjectSecurityRolesByIdRequest) (*ProjectSecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectSecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectSecurityRolesAPIService.PutProjectSecurityRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/securityRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectSecurityRole == nil {
		return localVarReturnValue, nil, reportError("projectSecurityRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectSecurityRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
