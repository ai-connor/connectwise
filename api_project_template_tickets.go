/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectTemplateTicketsAPIService ProjectTemplateTicketsAPI service
type ProjectTemplateTicketsAPIService service

type ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r)
}

/*
DeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsById Delete ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateTicketId
 @param parentId projectTemplateId
 @return ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest
*/
func (a *ProjectTemplateTicketsAPIService) DeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	return ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectTemplateTicketsAPIService) DeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r ApiDeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.DeleteProjectProjectTemplatesByParentIdProjectTemplateTicketsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) Fields(fields string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) Page(page int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) Execute() ([]ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByParentIdProjectTemplateTicketsExecute(r)
}

/*
GetProjectProjectTemplatesByParentIdProjectTemplateTickets Get List of ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectTemplateId
 @return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest
*/
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTickets(ctx context.Context, parentId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTicketsExecute(r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) ([]ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.GetProjectProjectTemplatesByParentIdProjectTemplateTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Fields(fields string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Page(page int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Execute() (*ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r)
}

/*
GetProjectProjectTemplatesByParentIdProjectTemplateTicketsById Get ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateTicketId
 @param parentId projectTemplateId
 @return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest
*/
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTicketsById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) (*ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.GetProjectProjectTemplatesByParentIdProjectTemplateTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) Fields(fields string) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) Page(page int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountExecute(r)
}

/*
GetProjectProjectTemplatesByParentIdProjectTemplateTicketsCount Get Count of ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectTemplateId
 @return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest
*/
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTicketsCount(ctx context.Context, parentId int32) ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest {
	return ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountExecute(r ApiGetProjectProjectTemplatesByParentIdProjectTemplateTicketsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.GetProjectProjectTemplatesByParentIdProjectTemplateTicketsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	clientId *string
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) Fields(fields string) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) Page(page int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) Execute() ([]ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesProjectTemplateTicketsExecute(r)
}

/*
GetProjectProjectTemplatesProjectTemplateTickets Get List of ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectTemplateId
 @return ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest
*/
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesProjectTemplateTickets(ctx context.Context, parentId int32) ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest {
	return ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) GetProjectProjectTemplatesProjectTemplateTicketsExecute(r ApiGetProjectProjectTemplatesProjectTemplateTicketsRequest) ([]ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.GetProjectProjectTemplatesProjectTemplateTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/projectTemplateTickets"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ClientId(clientId string) ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Execute() (*ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.PatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r)
}

/*
PatchProjectProjectTemplatesByParentIdProjectTemplateTicketsById Patch ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateTicketId
 @param parentId projectTemplateId
 @return ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest
*/
func (a *ProjectTemplateTicketsAPIService) PatchProjectProjectTemplatesByParentIdProjectTemplateTicketsById(ctx context.Context, id int32, parentId int32) ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	return ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) PatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r ApiPatchProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) (*ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.PatchProjectProjectTemplatesByParentIdProjectTemplateTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	parentId int32
	clientId *string
	projectTemplateTicket *ProjectTemplateTicket
}

// 
func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) ClientId(clientId string) ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.clientId = &clientId
	return r
}

// ProjectTemplateTicket
func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) ProjectTemplateTicket(projectTemplateTicket ProjectTemplateTicket) ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	r.projectTemplateTicket = &projectTemplateTicket
	return r
}

func (r ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) Execute() (*ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.PostProjectProjectTemplatesByParentIdProjectTemplateTicketsExecute(r)
}

/*
PostProjectProjectTemplatesByParentIdProjectTemplateTickets Post ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectTemplateId
 @return ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest
*/
func (a *ProjectTemplateTicketsAPIService) PostProjectProjectTemplatesByParentIdProjectTemplateTickets(ctx context.Context, parentId int32) ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest {
	return ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) PostProjectProjectTemplatesByParentIdProjectTemplateTicketsExecute(r ApiPostProjectProjectTemplatesByParentIdProjectTemplateTicketsRequest) (*ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.PostProjectProjectTemplatesByParentIdProjectTemplateTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplateTicket == nil {
		return localVarReturnValue, nil, reportError("projectTemplateTicket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplateTicket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplateTicketsAPIService
	id int32
	parentId int32
	clientId *string
	projectTemplateTicket *ProjectTemplateTicket
}

// 
func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ClientId(clientId string) ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) ProjectTemplateTicket(projectTemplateTicket ProjectTemplateTicket) ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	r.projectTemplateTicket = &projectTemplateTicket
	return r
}

func (r ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) Execute() (*ProjectTemplateTicket, *http.Response, error) {
	return r.ApiService.PutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r)
}

/*
PutProjectProjectTemplatesByParentIdProjectTemplateTicketsById Put ProjectTemplateTickets

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateTicketId
 @param parentId projectTemplateId
 @return ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest
*/
func (a *ProjectTemplateTicketsAPIService) PutProjectProjectTemplatesByParentIdProjectTemplateTicketsById(ctx context.Context, id int32, parentId int32) ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest {
	return ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTemplateTicket
func (a *ProjectTemplateTicketsAPIService) PutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdExecute(r ApiPutProjectProjectTemplatesByParentIdProjectTemplateTicketsByIdRequest) (*ProjectTemplateTicket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplateTicket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplateTicketsAPIService.PutProjectProjectTemplatesByParentIdProjectTemplateTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{parentId}/projectTemplateTickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplateTicket == nil {
		return localVarReturnValue, nil, reportError("projectTemplateTicket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplateTicket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
