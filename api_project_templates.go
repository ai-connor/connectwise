/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectTemplatesAPIService ProjectTemplatesAPI service
type ProjectTemplatesAPIService service

type ApiDeleteProjectProjectTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProjectProjectTemplatesByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectTemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectTemplatesByIdExecute(r)
}

/*
DeleteProjectProjectTemplatesById Delete ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateId
 @return ApiDeleteProjectProjectTemplatesByIdRequest
*/
func (a *ProjectTemplatesAPIService) DeleteProjectProjectTemplatesById(ctx context.Context, id int32) ApiDeleteProjectProjectTemplatesByIdRequest {
	return ApiDeleteProjectProjectTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProjectTemplatesAPIService) DeleteProjectProjectTemplatesByIdExecute(r ApiDeleteProjectProjectTemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.DeleteProjectProjectTemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) Fields(fields string) ApiGetProjectProjectTemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) Page(page int32) ApiGetProjectProjectTemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesRequest) Execute() ([]ProjectTemplate, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesExecute(r)
}

/*
GetProjectProjectTemplates Get List of ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectProjectTemplatesRequest
*/
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplates(ctx context.Context) ApiGetProjectProjectTemplatesRequest {
	return ApiGetProjectProjectTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ProjectTemplate
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesExecute(r ApiGetProjectProjectTemplatesRequest) ([]ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.GetProjectProjectTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) Fields(fields string) ApiGetProjectProjectTemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) Page(page int32) ApiGetProjectProjectTemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByIdRequest) Execute() (*ProjectTemplate, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByIdExecute(r)
}

/*
GetProjectProjectTemplatesById Get ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateId
 @return ApiGetProjectProjectTemplatesByIdRequest
*/
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesById(ctx context.Context, id int32) ApiGetProjectProjectTemplatesByIdRequest {
	return ApiGetProjectProjectTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTemplate
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesByIdExecute(r ApiGetProjectProjectTemplatesByIdRequest) (*ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.GetProjectProjectTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesByIdWorkplanRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) Fields(fields string) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) Page(page int32) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesByIdWorkplanRequest) Execute() ([]ProjectTemplateWorkPlan, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesByIdWorkplanExecute(r)
}

/*
GetProjectProjectTemplatesByIdWorkplan Get ProjectTemplatesWorkplan

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateId
 @return ApiGetProjectProjectTemplatesByIdWorkplanRequest
*/
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesByIdWorkplan(ctx context.Context, id int32) ApiGetProjectProjectTemplatesByIdWorkplanRequest {
	return ApiGetProjectProjectTemplatesByIdWorkplanRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []ProjectTemplateWorkPlan
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesByIdWorkplanExecute(r ApiGetProjectProjectTemplatesByIdWorkplanRequest) ([]ProjectTemplateWorkPlan, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTemplateWorkPlan
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.GetProjectProjectTemplatesByIdWorkplan")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{id}/workplan"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectTemplatesCountRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) ClientId(clientId string) ApiGetProjectProjectTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) Conditions(conditions string) ApiGetProjectProjectTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) OrderBy(orderBy string) ApiGetProjectProjectTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) Fields(fields string) ApiGetProjectProjectTemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) Page(page int32) ApiGetProjectProjectTemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) PageSize(pageSize int32) ApiGetProjectProjectTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectTemplatesCountRequest) PageId(pageId int32) ApiGetProjectProjectTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProjectProjectTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectTemplatesCountExecute(r)
}

/*
GetProjectProjectTemplatesCount Get Count of ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProjectProjectTemplatesCountRequest
*/
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesCount(ctx context.Context) ApiGetProjectProjectTemplatesCountRequest {
	return ApiGetProjectProjectTemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectTemplatesAPIService) GetProjectProjectTemplatesCountExecute(r ApiGetProjectProjectTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.GetProjectProjectTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProjectProjectTemplatesByIdRequest) ClientId(clientId string) ApiPatchProjectProjectTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProjectProjectTemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectTemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProjectProjectTemplatesByIdRequest) Execute() (*ProjectTemplate, *http.Response, error) {
	return r.ApiService.PatchProjectProjectTemplatesByIdExecute(r)
}

/*
PatchProjectProjectTemplatesById Patch ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateId
 @return ApiPatchProjectProjectTemplatesByIdRequest
*/
func (a *ProjectTemplatesAPIService) PatchProjectProjectTemplatesById(ctx context.Context, id int32) ApiPatchProjectProjectTemplatesByIdRequest {
	return ApiPatchProjectProjectTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTemplate
func (a *ProjectTemplatesAPIService) PatchProjectProjectTemplatesByIdExecute(r ApiPatchProjectProjectTemplatesByIdRequest) (*ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.PatchProjectProjectTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTemplatesRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	clientId *string
	projectTemplate *ProjectTemplate
}

// 
func (r ApiPostProjectProjectTemplatesRequest) ClientId(clientId string) ApiPostProjectProjectTemplatesRequest {
	r.clientId = &clientId
	return r
}

// ProjectTemplate
func (r ApiPostProjectProjectTemplatesRequest) ProjectTemplate(projectTemplate ProjectTemplate) ApiPostProjectProjectTemplatesRequest {
	r.projectTemplate = &projectTemplate
	return r
}

func (r ApiPostProjectProjectTemplatesRequest) Execute() (*ProjectTemplate, *http.Response, error) {
	return r.ApiService.PostProjectProjectTemplatesExecute(r)
}

/*
PostProjectProjectTemplates Post ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProjectProjectTemplatesRequest
*/
func (a *ProjectTemplatesAPIService) PostProjectProjectTemplates(ctx context.Context) ApiPostProjectProjectTemplatesRequest {
	return ApiPostProjectProjectTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProjectTemplate
func (a *ProjectTemplatesAPIService) PostProjectProjectTemplatesExecute(r ApiPostProjectProjectTemplatesRequest) (*ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.PostProjectProjectTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplate == nil {
		return localVarReturnValue, nil, reportError("projectTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
	projectTemplate *ProjectTemplate
}

// 
func (r ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest) ClientId(clientId string) ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest {
	r.clientId = &clientId
	return r
}

// ProjectTemplate
func (r ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest) ProjectTemplate(projectTemplate ProjectTemplate) ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest {
	r.projectTemplate = &projectTemplate
	return r
}

func (r ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest) Execute() (*ProjectTemplate, *http.Response, error) {
	return r.ApiService.PostProjectProjectTemplatesCreateFromProjectByIdExecute(r)
}

/*
PostProjectProjectTemplatesCreateFromProjectById Post CreateFromProject

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id projectId
 @return ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest
*/
func (a *ProjectTemplatesAPIService) PostProjectProjectTemplatesCreateFromProjectById(ctx context.Context, id int32) ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest {
	return ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTemplate
func (a *ProjectTemplatesAPIService) PostProjectProjectTemplatesCreateFromProjectByIdExecute(r ApiPostProjectProjectTemplatesCreateFromProjectByIdRequest) (*ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.PostProjectProjectTemplatesCreateFromProjectById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/createFromProject/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplate == nil {
		return localVarReturnValue, nil, reportError("projectTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ProjectTemplatesAPIService
	id int32
	clientId *string
	projectTemplate *ProjectTemplate
}

// 
func (r ApiPutProjectProjectTemplatesByIdRequest) ClientId(clientId string) ApiPutProjectProjectTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutProjectProjectTemplatesByIdRequest) ProjectTemplate(projectTemplate ProjectTemplate) ApiPutProjectProjectTemplatesByIdRequest {
	r.projectTemplate = &projectTemplate
	return r
}

func (r ApiPutProjectProjectTemplatesByIdRequest) Execute() (*ProjectTemplate, *http.Response, error) {
	return r.ApiService.PutProjectProjectTemplatesByIdExecute(r)
}

/*
PutProjectProjectTemplatesById Put ProjectTemplates

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ProjectTemplateId
 @return ApiPutProjectProjectTemplatesByIdRequest
*/
func (a *ProjectTemplatesAPIService) PutProjectProjectTemplatesById(ctx context.Context, id int32) ApiPutProjectProjectTemplatesByIdRequest {
	return ApiPutProjectProjectTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProjectTemplate
func (a *ProjectTemplatesAPIService) PutProjectProjectTemplatesByIdExecute(r ApiPutProjectProjectTemplatesByIdRequest) (*ProjectTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectTemplatesAPIService.PutProjectProjectTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projectTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.projectTemplate == nil {
		return localVarReturnValue, nil, reportError("projectTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.projectTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
