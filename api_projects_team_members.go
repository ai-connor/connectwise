/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ProjectsTeamMembersAPIService ProjectsTeamMembersAPI service
type ProjectsTeamMembersAPIService service

type ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest) ClientId(clientId string) ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectProjectsByParentIdTeamMembersByIdExecute(r)
}

/*
DeleteProjectProjectsByParentIdTeamMembersById Delete ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamMemberId
 @param parentId projectId
 @return ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest
*/
func (a *ProjectsTeamMembersAPIService) DeleteProjectProjectsByParentIdTeamMembersById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest {
	return ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ProjectsTeamMembersAPIService) DeleteProjectProjectsByParentIdTeamMembersByIdExecute(r ApiDeleteProjectProjectsByParentIdTeamMembersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.DeleteProjectProjectsByParentIdTeamMembersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdTeamMembersRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) Fields(fields string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) Page(page int32) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdTeamMembersRequest) Execute() ([]ProjectTeamMember, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdTeamMembersExecute(r)
}

/*
GetProjectProjectsByParentIdTeamMembers Get List of ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdTeamMembersRequest
*/
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembers(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdTeamMembersRequest {
	return ApiGetProjectProjectsByParentIdTeamMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProjectTeamMember
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembersExecute(r ApiGetProjectProjectsByParentIdTeamMembersRequest) ([]ProjectTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProjectTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.GetProjectProjectsByParentIdTeamMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdTeamMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) Fields(fields string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) Page(page int32) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) Execute() (*ProjectTeamMember, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdTeamMembersByIdExecute(r)
}

/*
GetProjectProjectsByParentIdTeamMembersById Get ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamMemberId
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdTeamMembersByIdRequest
*/
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembersById(ctx context.Context, id int32, parentId int32) ApiGetProjectProjectsByParentIdTeamMembersByIdRequest {
	return ApiGetProjectProjectsByParentIdTeamMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTeamMember
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembersByIdExecute(r ApiGetProjectProjectsByParentIdTeamMembersByIdRequest) (*ProjectTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.GetProjectProjectsByParentIdTeamMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectProjectsByParentIdTeamMembersCountRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) Conditions(conditions string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) ChildConditions(childConditions string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) OrderBy(orderBy string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) Fields(fields string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) Page(page int32) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) PageSize(pageSize int32) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) PageId(pageId int32) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) ClientId(clientId string) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectProjectsByParentIdTeamMembersCountExecute(r)
}

/*
GetProjectProjectsByParentIdTeamMembersCount Get Count of ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiGetProjectProjectsByParentIdTeamMembersCountRequest
*/
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembersCount(ctx context.Context, parentId int32) ApiGetProjectProjectsByParentIdTeamMembersCountRequest {
	return ApiGetProjectProjectsByParentIdTeamMembersCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ProjectsTeamMembersAPIService) GetProjectProjectsByParentIdTeamMembersCountExecute(r ApiGetProjectProjectsByParentIdTeamMembersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.GetProjectProjectsByParentIdTeamMembersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest) ClientId(clientId string) ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest) Execute() (*ProjectTeamMember, *http.Response, error) {
	return r.ApiService.PatchProjectProjectsByParentIdTeamMembersByIdExecute(r)
}

/*
PatchProjectProjectsByParentIdTeamMembersById Patch ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamMemberId
 @param parentId projectId
 @return ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest
*/
func (a *ProjectsTeamMembersAPIService) PatchProjectProjectsByParentIdTeamMembersById(ctx context.Context, id int32, parentId int32) ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest {
	return ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTeamMember
func (a *ProjectsTeamMembersAPIService) PatchProjectProjectsByParentIdTeamMembersByIdExecute(r ApiPatchProjectProjectsByParentIdTeamMembersByIdRequest) (*ProjectTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.PatchProjectProjectsByParentIdTeamMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectProjectsByParentIdTeamMembersRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	parentId int32
	projectTeamMember *ProjectTeamMember
	clientId *string
}

// teamMember
func (r ApiPostProjectProjectsByParentIdTeamMembersRequest) ProjectTeamMember(projectTeamMember ProjectTeamMember) ApiPostProjectProjectsByParentIdTeamMembersRequest {
	r.projectTeamMember = &projectTeamMember
	return r
}

// 
func (r ApiPostProjectProjectsByParentIdTeamMembersRequest) ClientId(clientId string) ApiPostProjectProjectsByParentIdTeamMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectProjectsByParentIdTeamMembersRequest) Execute() (*ProjectTeamMember, *http.Response, error) {
	return r.ApiService.PostProjectProjectsByParentIdTeamMembersExecute(r)
}

/*
PostProjectProjectsByParentIdTeamMembers Post ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId projectId
 @return ApiPostProjectProjectsByParentIdTeamMembersRequest
*/
func (a *ProjectsTeamMembersAPIService) PostProjectProjectsByParentIdTeamMembers(ctx context.Context, parentId int32) ApiPostProjectProjectsByParentIdTeamMembersRequest {
	return ApiPostProjectProjectsByParentIdTeamMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTeamMember
func (a *ProjectsTeamMembersAPIService) PostProjectProjectsByParentIdTeamMembersExecute(r ApiPostProjectProjectsByParentIdTeamMembersRequest) (*ProjectTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.PostProjectProjectsByParentIdTeamMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTeamMember == nil {
		return localVarReturnValue, nil, reportError("projectTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectProjectsByParentIdTeamMembersByIdRequest struct {
	ctx context.Context
	ApiService *ProjectsTeamMembersAPIService
	id int32
	parentId int32
	projectTeamMember *ProjectTeamMember
	clientId *string
}

// teamMember
func (r ApiPutProjectProjectsByParentIdTeamMembersByIdRequest) ProjectTeamMember(projectTeamMember ProjectTeamMember) ApiPutProjectProjectsByParentIdTeamMembersByIdRequest {
	r.projectTeamMember = &projectTeamMember
	return r
}

// 
func (r ApiPutProjectProjectsByParentIdTeamMembersByIdRequest) ClientId(clientId string) ApiPutProjectProjectsByParentIdTeamMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectProjectsByParentIdTeamMembersByIdRequest) Execute() (*ProjectTeamMember, *http.Response, error) {
	return r.ApiService.PutProjectProjectsByParentIdTeamMembersByIdExecute(r)
}

/*
PutProjectProjectsByParentIdTeamMembersById Put ProjectTeamMember

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id teamMemberId
 @param parentId projectId
 @return ApiPutProjectProjectsByParentIdTeamMembersByIdRequest
*/
func (a *ProjectsTeamMembersAPIService) PutProjectProjectsByParentIdTeamMembersById(ctx context.Context, id int32, parentId int32) ApiPutProjectProjectsByParentIdTeamMembersByIdRequest {
	return ApiPutProjectProjectsByParentIdTeamMembersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ProjectTeamMember
func (a *ProjectsTeamMembersAPIService) PutProjectProjectsByParentIdTeamMembersByIdExecute(r ApiPutProjectProjectsByParentIdTeamMembersByIdRequest) (*ProjectTeamMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProjectTeamMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProjectsTeamMembersAPIService.PutProjectProjectsByParentIdTeamMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/projects/{parentId}/teamMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.projectTeamMember == nil {
		return localVarReturnValue, nil, reportError("projectTeamMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.projectTeamMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
