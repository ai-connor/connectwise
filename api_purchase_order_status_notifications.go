/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PurchaseOrderStatusNotificationsAPIService PurchaseOrderStatusNotificationsAPI service
type PurchaseOrderStatusNotificationsAPIService service

type ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r)
}

/*
DeleteProcurementPurchaseorderstatusesByParentIdNotificationsById Delete PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId purchaseorderstatusId
 @return ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) DeleteProcurementPurchaseorderstatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	return ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *PurchaseOrderStatusNotificationsAPIService) DeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r ApiDeleteProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.DeleteProcurementPurchaseorderstatusesByParentIdNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) Execute() ([]PurchaseOrderStatusNotification, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdNotificationsExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdNotifications Get List of PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId purchaseorderstatusId
 @return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []PurchaseOrderStatusNotification
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotificationsExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsRequest) ([]PurchaseOrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PurchaseOrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.GetProcurementPurchaseorderstatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Execute() (*PurchaseOrderStatusNotification, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdNotificationsById Get PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId purchaseorderstatusId
 @return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PurchaseOrderStatusNotification
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) (*PurchaseOrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.GetProcurementPurchaseorderstatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) Fields(fields string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) Page(page int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseorderstatusesByParentIdNotificationsCountExecute(r)
}

/*
GetProcurementPurchaseorderstatusesByParentIdNotificationsCount Get Count of PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId purchaseorderstatusId
 @return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotificationsCount(ctx context.Context, parentId int32) ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest {
	return ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *PurchaseOrderStatusNotificationsAPIService) GetProcurementPurchaseorderstatusesByParentIdNotificationsCountExecute(r ApiGetProcurementPurchaseorderstatusesByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.GetProcurementPurchaseorderstatusesByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Execute() (*PurchaseOrderStatusNotification, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r)
}

/*
PatchProcurementPurchaseorderstatusesByParentIdNotificationsById Patch PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId purchaseorderstatusId
 @return ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) PatchProcurementPurchaseorderstatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	return ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PurchaseOrderStatusNotification
func (a *PurchaseOrderStatusNotificationsAPIService) PatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r ApiPatchProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) (*PurchaseOrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.PatchProcurementPurchaseorderstatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	parentId int32
	purchaseOrderStatusNotification *PurchaseOrderStatusNotification
	clientId *string
}

// purchaseOrderStatusNotification
func (r ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest) PurchaseOrderStatusNotification(purchaseOrderStatusNotification PurchaseOrderStatusNotification) ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.purchaseOrderStatusNotification = &purchaseOrderStatusNotification
	return r
}

// 
func (r ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest) Execute() (*PurchaseOrderStatusNotification, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseorderstatusesByParentIdNotificationsExecute(r)
}

/*
PostProcurementPurchaseorderstatusesByParentIdNotifications Post PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId purchaseorderstatusId
 @return ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) PostProcurementPurchaseorderstatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest {
	return ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PurchaseOrderStatusNotification
func (a *PurchaseOrderStatusNotificationsAPIService) PostProcurementPurchaseorderstatusesByParentIdNotificationsExecute(r ApiPostProcurementPurchaseorderstatusesByParentIdNotificationsRequest) (*PurchaseOrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.PostProcurementPurchaseorderstatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.purchaseOrderStatusNotification == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.purchaseOrderStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrderStatusNotificationsAPIService
	id int32
	parentId int32
	purchaseOrderStatusNotification *PurchaseOrderStatusNotification
	clientId *string
}

// purchaseOrderStatusNotification
func (r ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) PurchaseOrderStatusNotification(purchaseOrderStatusNotification PurchaseOrderStatusNotification) ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.purchaseOrderStatusNotification = &purchaseOrderStatusNotification
	return r
}

// 
func (r ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) Execute() (*PurchaseOrderStatusNotification, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r)
}

/*
PutProcurementPurchaseorderstatusesByParentIdNotificationsById Put PurchaseOrderStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId purchaseorderstatusId
 @return ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest
*/
func (a *PurchaseOrderStatusNotificationsAPIService) PutProcurementPurchaseorderstatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest {
	return ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return PurchaseOrderStatusNotification
func (a *PurchaseOrderStatusNotificationsAPIService) PutProcurementPurchaseorderstatusesByParentIdNotificationsByIdExecute(r ApiPutProcurementPurchaseorderstatusesByParentIdNotificationsByIdRequest) (*PurchaseOrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrderStatusNotificationsAPIService.PutProcurementPurchaseorderstatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorderstatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.purchaseOrderStatusNotification == nil {
		return localVarReturnValue, nil, reportError("purchaseOrderStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.purchaseOrderStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
