/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// PurchaseOrdersAPIService PurchaseOrdersAPI service
type PurchaseOrdersAPIService service

type ApiDeleteProcurementPurchaseordersByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementPurchaseordersByIdRequest) ClientId(clientId string) ApiDeleteProcurementPurchaseordersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementPurchaseordersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementPurchaseordersByIdExecute(r)
}

/*
DeleteProcurementPurchaseordersById Delete PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseorderId
 @return ApiDeleteProcurementPurchaseordersByIdRequest
*/
func (a *PurchaseOrdersAPIService) DeleteProcurementPurchaseordersById(ctx context.Context, id int32) ApiDeleteProcurementPurchaseordersByIdRequest {
	return ApiDeleteProcurementPurchaseordersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *PurchaseOrdersAPIService) DeleteProcurementPurchaseordersByIdExecute(r ApiDeleteProcurementPurchaseordersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.DeleteProcurementPurchaseordersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPurchaseordersRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) Fields(fields string) ApiGetProcurementPurchaseordersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) Page(page int32) ApiGetProcurementPurchaseordersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseordersRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersRequest) Execute() ([]PurchaseOrder, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersExecute(r)
}

/*
GetProcurementPurchaseorders Get List of PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementPurchaseordersRequest
*/
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseorders(ctx context.Context) ApiGetProcurementPurchaseordersRequest {
	return ApiGetProcurementPurchaseordersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PurchaseOrder
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersExecute(r ApiGetProcurementPurchaseordersRequest) ([]PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.GetProcurementPurchaseorders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) Fields(fields string) ApiGetProcurementPurchaseordersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) Page(page int32) ApiGetProcurementPurchaseordersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByIdRequest) Execute() (*PurchaseOrder, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByIdExecute(r)
}

/*
GetProcurementPurchaseordersById Get PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseorderId
 @return ApiGetProcurementPurchaseordersByIdRequest
*/
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersById(ctx context.Context, id int32) ApiGetProcurementPurchaseordersByIdRequest {
	return ApiGetProcurementPurchaseordersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PurchaseOrder
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersByIdExecute(r ApiGetProcurementPurchaseordersByIdRequest) (*PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.GetProcurementPurchaseordersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) Fields(fields string) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) Page(page int32) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) Execute() (*HttpResponseMessage, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByIdQuickAccessCountExecute(r)
}

/*
GetProcurementPurchaseordersByIdQuickAccessCount Get Count of PurchaseOrder Quick Access Links

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseOrderId
 @return ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest
*/
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersByIdQuickAccessCount(ctx context.Context, id int32) ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest {
	return ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return HttpResponseMessage
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersByIdQuickAccessCountExecute(r ApiGetProcurementPurchaseordersByIdQuickAccessCountRequest) (*HttpResponseMessage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HttpResponseMessage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.GetProcurementPurchaseordersByIdQuickAccessCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}/quickAccess/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) Fields(fields string) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) Page(page int32) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersByParentIdNotesRequest) Execute() ([]PurchaseOrderNote, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersByParentIdNotesExecute(r)
}

/*
GetProcurementPurchaseordersByParentIdNotes Get List of PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId PurchaseHeaderRecID
 @return ApiGetProcurementPurchaseordersByParentIdNotesRequest
*/
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersByParentIdNotes(ctx context.Context, parentId int32) ApiGetProcurementPurchaseordersByParentIdNotesRequest {
	return ApiGetProcurementPurchaseordersByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []PurchaseOrderNote
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersByParentIdNotesExecute(r ApiGetProcurementPurchaseordersByParentIdNotesRequest) ([]PurchaseOrderNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PurchaseOrderNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.GetProcurementPurchaseordersByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementPurchaseordersCountRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) ClientId(clientId string) ApiGetProcurementPurchaseordersCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) Conditions(conditions string) ApiGetProcurementPurchaseordersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) ChildConditions(childConditions string) ApiGetProcurementPurchaseordersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementPurchaseordersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) OrderBy(orderBy string) ApiGetProcurementPurchaseordersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) Fields(fields string) ApiGetProcurementPurchaseordersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) Page(page int32) ApiGetProcurementPurchaseordersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) PageSize(pageSize int32) ApiGetProcurementPurchaseordersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementPurchaseordersCountRequest) PageId(pageId int32) ApiGetProcurementPurchaseordersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementPurchaseordersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementPurchaseordersCountExecute(r)
}

/*
GetProcurementPurchaseordersCount Get Count of PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementPurchaseordersCountRequest
*/
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersCount(ctx context.Context) ApiGetProcurementPurchaseordersCountRequest {
	return ApiGetProcurementPurchaseordersCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *PurchaseOrdersAPIService) GetProcurementPurchaseordersCountExecute(r ApiGetProcurementPurchaseordersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.GetProcurementPurchaseordersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementPurchaseordersByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementPurchaseordersByIdRequest) ClientId(clientId string) ApiPatchProcurementPurchaseordersByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementPurchaseordersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementPurchaseordersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementPurchaseordersByIdRequest) Execute() (*PurchaseOrder, *http.Response, error) {
	return r.ApiService.PatchProcurementPurchaseordersByIdExecute(r)
}

/*
PatchProcurementPurchaseordersById Patch PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseorderId
 @return ApiPatchProcurementPurchaseordersByIdRequest
*/
func (a *PurchaseOrdersAPIService) PatchProcurementPurchaseordersById(ctx context.Context, id int32) ApiPatchProcurementPurchaseordersByIdRequest {
	return ApiPatchProcurementPurchaseordersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PurchaseOrder
func (a *PurchaseOrdersAPIService) PatchProcurementPurchaseordersByIdExecute(r ApiPatchProcurementPurchaseordersByIdRequest) (*PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PatchProcurementPurchaseordersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	clientId *string
	purchaseOrder *PurchaseOrder
}

// 
func (r ApiPostProcurementPurchaseordersRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrder
func (r ApiPostProcurementPurchaseordersRequest) PurchaseOrder(purchaseOrder PurchaseOrder) ApiPostProcurementPurchaseordersRequest {
	r.purchaseOrder = &purchaseOrder
	return r
}

func (r ApiPostProcurementPurchaseordersRequest) Execute() (*PurchaseOrder, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersExecute(r)
}

/*
PostProcurementPurchaseorders Post PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementPurchaseordersRequest
*/
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseorders(ctx context.Context) ApiPostProcurementPurchaseordersRequest {
	return ApiPostProcurementPurchaseordersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PurchaseOrder
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersExecute(r ApiPostProcurementPurchaseordersRequest) (*PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PostProcurementPurchaseorders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrder == nil {
		return localVarReturnValue, nil, reportError("purchaseOrder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByIdCopyRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostProcurementPurchaseordersByIdCopyRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementPurchaseordersByIdCopyRequest) Execute() (*PurchaseOrder, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByIdCopyExecute(r)
}

/*
PostProcurementPurchaseordersByIdCopy Post PurchaseOrderCopy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseorderId
 @return ApiPostProcurementPurchaseordersByIdCopyRequest
*/
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdCopy(ctx context.Context, id int32) ApiPostProcurementPurchaseordersByIdCopyRequest {
	return ApiPostProcurementPurchaseordersByIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PurchaseOrder
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdCopyExecute(r ApiPostProcurementPurchaseordersByIdCopyRequest) (*PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PostProcurementPurchaseordersByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByIdRebatchRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostProcurementPurchaseordersByIdRebatchRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByIdRebatchRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementPurchaseordersByIdRebatchRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByIdRebatchExecute(r)
}

/*
PostProcurementPurchaseordersByIdRebatch Post RebatchPurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseOrderId
 @return ApiPostProcurementPurchaseordersByIdRebatchRequest
*/
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdRebatch(ctx context.Context, id int32) ApiPostProcurementPurchaseordersByIdRebatchRequest {
	return ApiPostProcurementPurchaseordersByIdRebatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdRebatchExecute(r ApiPostProcurementPurchaseordersByIdRebatchRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PostProcurementPurchaseordersByIdRebatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}/rebatch"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementPurchaseordersByIdUnbatchRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostProcurementPurchaseordersByIdUnbatchRequest) ClientId(clientId string) ApiPostProcurementPurchaseordersByIdUnbatchRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementPurchaseordersByIdUnbatchRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostProcurementPurchaseordersByIdUnbatchExecute(r)
}

/*
PostProcurementPurchaseordersByIdUnbatch Post UnbatchPurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseOrderId
 @return ApiPostProcurementPurchaseordersByIdUnbatchRequest
*/
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdUnbatch(ctx context.Context, id int32) ApiPostProcurementPurchaseordersByIdUnbatchRequest {
	return ApiPostProcurementPurchaseordersByIdUnbatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *PurchaseOrdersAPIService) PostProcurementPurchaseordersByIdUnbatchExecute(r ApiPostProcurementPurchaseordersByIdUnbatchRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PostProcurementPurchaseordersByIdUnbatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}/unbatch"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementPurchaseordersByIdRequest struct {
	ctx context.Context
	ApiService *PurchaseOrdersAPIService
	id int32
	clientId *string
	purchaseOrder *PurchaseOrder
}

// 
func (r ApiPutProcurementPurchaseordersByIdRequest) ClientId(clientId string) ApiPutProcurementPurchaseordersByIdRequest {
	r.clientId = &clientId
	return r
}

// purchaseOrder
func (r ApiPutProcurementPurchaseordersByIdRequest) PurchaseOrder(purchaseOrder PurchaseOrder) ApiPutProcurementPurchaseordersByIdRequest {
	r.purchaseOrder = &purchaseOrder
	return r
}

func (r ApiPutProcurementPurchaseordersByIdRequest) Execute() (*PurchaseOrder, *http.Response, error) {
	return r.ApiService.PutProcurementPurchaseordersByIdExecute(r)
}

/*
PutProcurementPurchaseordersById Put PurchaseOrder

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id purchaseorderId
 @return ApiPutProcurementPurchaseordersByIdRequest
*/
func (a *PurchaseOrdersAPIService) PutProcurementPurchaseordersById(ctx context.Context, id int32) ApiPutProcurementPurchaseordersByIdRequest {
	return ApiPutProcurementPurchaseordersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PurchaseOrder
func (a *PurchaseOrdersAPIService) PutProcurementPurchaseordersByIdExecute(r ApiPutProcurementPurchaseordersByIdRequest) (*PurchaseOrder, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PurchaseOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PurchaseOrdersAPIService.PutProcurementPurchaseordersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/purchaseorders/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.purchaseOrder == nil {
		return localVarReturnValue, nil, reportError("purchaseOrder is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.purchaseOrder
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
