/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// QuoteLinksAPIService QuoteLinksAPI service
type QuoteLinksAPIService service

type ApiDeleteSystemQuoteLinkSetupByIdRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemQuoteLinkSetupByIdRequest) ClientId(clientId string) ApiDeleteSystemQuoteLinkSetupByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemQuoteLinkSetupByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemQuoteLinkSetupByIdExecute(r)
}

/*
DeleteSystemQuoteLinkSetupById Delete QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id quoteLinkSetupId
 @return ApiDeleteSystemQuoteLinkSetupByIdRequest
*/
func (a *QuoteLinksAPIService) DeleteSystemQuoteLinkSetupById(ctx context.Context, id int32) ApiDeleteSystemQuoteLinkSetupByIdRequest {
	return ApiDeleteSystemQuoteLinkSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *QuoteLinksAPIService) DeleteSystemQuoteLinkSetupByIdExecute(r ApiDeleteSystemQuoteLinkSetupByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.DeleteSystemQuoteLinkSetupById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemQuoteLinkSetupRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) ClientId(clientId string) ApiGetSystemQuoteLinkSetupRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) Conditions(conditions string) ApiGetSystemQuoteLinkSetupRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) ChildConditions(childConditions string) ApiGetSystemQuoteLinkSetupRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemQuoteLinkSetupRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) OrderBy(orderBy string) ApiGetSystemQuoteLinkSetupRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) Fields(fields string) ApiGetSystemQuoteLinkSetupRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) Page(page int32) ApiGetSystemQuoteLinkSetupRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) PageSize(pageSize int32) ApiGetSystemQuoteLinkSetupRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupRequest) PageId(pageId int32) ApiGetSystemQuoteLinkSetupRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemQuoteLinkSetupRequest) Execute() ([]QuoteLink, *http.Response, error) {
	return r.ApiService.GetSystemQuoteLinkSetupExecute(r)
}

/*
GetSystemQuoteLinkSetup Get List of QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemQuoteLinkSetupRequest
*/
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetup(ctx context.Context) ApiGetSystemQuoteLinkSetupRequest {
	return ApiGetSystemQuoteLinkSetupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []QuoteLink
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupExecute(r ApiGetSystemQuoteLinkSetupRequest) ([]QuoteLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []QuoteLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.GetSystemQuoteLinkSetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemQuoteLinkSetupByIdRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) ClientId(clientId string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) Conditions(conditions string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) ChildConditions(childConditions string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) OrderBy(orderBy string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) Fields(fields string) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) Page(page int32) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) PageSize(pageSize int32) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupByIdRequest) PageId(pageId int32) ApiGetSystemQuoteLinkSetupByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemQuoteLinkSetupByIdRequest) Execute() (*QuoteLink, *http.Response, error) {
	return r.ApiService.GetSystemQuoteLinkSetupByIdExecute(r)
}

/*
GetSystemQuoteLinkSetupById Get QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id quoteLinkSetupId
 @return ApiGetSystemQuoteLinkSetupByIdRequest
*/
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupById(ctx context.Context, id int32) ApiGetSystemQuoteLinkSetupByIdRequest {
	return ApiGetSystemQuoteLinkSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QuoteLink
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupByIdExecute(r ApiGetSystemQuoteLinkSetupByIdRequest) (*QuoteLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuoteLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.GetSystemQuoteLinkSetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemQuoteLinkSetupCountRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) ClientId(clientId string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) Conditions(conditions string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) ChildConditions(childConditions string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) OrderBy(orderBy string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) Fields(fields string) ApiGetSystemQuoteLinkSetupCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) Page(page int32) ApiGetSystemQuoteLinkSetupCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) PageSize(pageSize int32) ApiGetSystemQuoteLinkSetupCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupCountRequest) PageId(pageId int32) ApiGetSystemQuoteLinkSetupCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemQuoteLinkSetupCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemQuoteLinkSetupCountExecute(r)
}

/*
GetSystemQuoteLinkSetupCount Get Count of QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemQuoteLinkSetupCountRequest
*/
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupCount(ctx context.Context) ApiGetSystemQuoteLinkSetupCountRequest {
	return ApiGetSystemQuoteLinkSetupCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupCountExecute(r ApiGetSystemQuoteLinkSetupCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.GetSystemQuoteLinkSetupCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemQuoteLinkSetupTestConnectionRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	clientId *string
	url string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) ClientId(clientId string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) Conditions(conditions string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) ChildConditions(childConditions string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) OrderBy(orderBy string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) Fields(fields string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) Page(page int32) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) PageSize(pageSize int32) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) PageId(pageId int32) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemQuoteLinkSetupTestConnectionRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.GetSystemQuoteLinkSetupTestConnectionExecute(r)
}

/*
GetSystemQuoteLinkSetupTestConnection Get SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param url url
 @return ApiGetSystemQuoteLinkSetupTestConnectionRequest
*/
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupTestConnection(ctx context.Context, url string) ApiGetSystemQuoteLinkSetupTestConnectionRequest {
	return ApiGetSystemQuoteLinkSetupTestConnectionRequest{
		ApiService: a,
		ctx: ctx,
		url: url,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *QuoteLinksAPIService) GetSystemQuoteLinkSetupTestConnectionExecute(r ApiGetSystemQuoteLinkSetupTestConnectionRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.GetSystemQuoteLinkSetupTestConnection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/testConnection"
	localVarPath = strings.Replace(localVarPath, "{"+"url"+"}", url.PathEscape(parameterValueToString(r.url, "url")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemQuoteLinkSetupByIdRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemQuoteLinkSetupByIdRequest) ClientId(clientId string) ApiPatchSystemQuoteLinkSetupByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemQuoteLinkSetupByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemQuoteLinkSetupByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemQuoteLinkSetupByIdRequest) Execute() (*QuoteLink, *http.Response, error) {
	return r.ApiService.PatchSystemQuoteLinkSetupByIdExecute(r)
}

/*
PatchSystemQuoteLinkSetupById Patch QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id quoteLinkSetupId
 @return ApiPatchSystemQuoteLinkSetupByIdRequest
*/
func (a *QuoteLinksAPIService) PatchSystemQuoteLinkSetupById(ctx context.Context, id int32) ApiPatchSystemQuoteLinkSetupByIdRequest {
	return ApiPatchSystemQuoteLinkSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QuoteLink
func (a *QuoteLinksAPIService) PatchSystemQuoteLinkSetupByIdExecute(r ApiPatchSystemQuoteLinkSetupByIdRequest) (*QuoteLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuoteLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.PatchSystemQuoteLinkSetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemQuoteLinkSetupRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	clientId *string
	quoteLink *QuoteLink
}

// 
func (r ApiPostSystemQuoteLinkSetupRequest) ClientId(clientId string) ApiPostSystemQuoteLinkSetupRequest {
	r.clientId = &clientId
	return r
}

// quoteLink
func (r ApiPostSystemQuoteLinkSetupRequest) QuoteLink(quoteLink QuoteLink) ApiPostSystemQuoteLinkSetupRequest {
	r.quoteLink = &quoteLink
	return r
}

func (r ApiPostSystemQuoteLinkSetupRequest) Execute() (*QuoteLink, *http.Response, error) {
	return r.ApiService.PostSystemQuoteLinkSetupExecute(r)
}

/*
PostSystemQuoteLinkSetup Post QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemQuoteLinkSetupRequest
*/
func (a *QuoteLinksAPIService) PostSystemQuoteLinkSetup(ctx context.Context) ApiPostSystemQuoteLinkSetupRequest {
	return ApiPostSystemQuoteLinkSetupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return QuoteLink
func (a *QuoteLinksAPIService) PostSystemQuoteLinkSetupExecute(r ApiPostSystemQuoteLinkSetupRequest) (*QuoteLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuoteLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.PostSystemQuoteLinkSetup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.quoteLink == nil {
		return localVarReturnValue, nil, reportError("quoteLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.quoteLink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemQuoteLinkSetupByIdRequest struct {
	ctx context.Context
	ApiService *QuoteLinksAPIService
	id int32
	clientId *string
	quoteLink *QuoteLink
}

// 
func (r ApiPutSystemQuoteLinkSetupByIdRequest) ClientId(clientId string) ApiPutSystemQuoteLinkSetupByIdRequest {
	r.clientId = &clientId
	return r
}

// quoteLink
func (r ApiPutSystemQuoteLinkSetupByIdRequest) QuoteLink(quoteLink QuoteLink) ApiPutSystemQuoteLinkSetupByIdRequest {
	r.quoteLink = &quoteLink
	return r
}

func (r ApiPutSystemQuoteLinkSetupByIdRequest) Execute() (*QuoteLink, *http.Response, error) {
	return r.ApiService.PutSystemQuoteLinkSetupByIdExecute(r)
}

/*
PutSystemQuoteLinkSetupById Put QuoteLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id quoteLinkSetupId
 @return ApiPutSystemQuoteLinkSetupByIdRequest
*/
func (a *QuoteLinksAPIService) PutSystemQuoteLinkSetupById(ctx context.Context, id int32) ApiPutSystemQuoteLinkSetupByIdRequest {
	return ApiPutSystemQuoteLinkSetupByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return QuoteLink
func (a *QuoteLinksAPIService) PutSystemQuoteLinkSetupByIdExecute(r ApiPutSystemQuoteLinkSetupByIdRequest) (*QuoteLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *QuoteLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuoteLinksAPIService.PutSystemQuoteLinkSetupById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/quoteLinkSetup/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.quoteLink == nil {
		return localVarReturnValue, nil, reportError("quoteLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.quoteLink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
