/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportCardDetailsAPIService ReportCardDetailsAPI service
type ReportCardDetailsAPIService service

type ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemReportCardsByParentIdDetailsByIdExecute(r)
}

/*
DeleteSystemReportCardsByParentIdDetailsById Delete ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId reportCardId
 @return ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest
*/
func (a *ReportCardDetailsAPIService) DeleteSystemReportCardsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest {
	return ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ReportCardDetailsAPIService) DeleteSystemReportCardsByParentIdDetailsByIdExecute(r ApiDeleteSystemReportCardsByParentIdDetailsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.DeleteSystemReportCardsByParentIdDetailsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) ClientId(clientId string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) Conditions(conditions string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) OrderBy(orderBy string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) Fields(fields string) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) Page(page int32) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) PageSize(pageSize int32) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsRequest) PageId(pageId int32) ApiGetSystemReportCardsByParentIdDetailsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemReportCardsByParentIdDetailsRequest) Execute() ([]ReportCardDetail, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsByParentIdDetailsExecute(r)
}

/*
GetSystemReportCardsByParentIdDetails Get List of ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId reportCardId
 @return ApiGetSystemReportCardsByParentIdDetailsRequest
*/
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetails(ctx context.Context, parentId int32) ApiGetSystemReportCardsByParentIdDetailsRequest {
	return ApiGetSystemReportCardsByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ReportCardDetail
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetailsExecute(r ApiGetSystemReportCardsByParentIdDetailsRequest) ([]ReportCardDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ReportCardDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.GetSystemReportCardsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) Conditions(conditions string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) OrderBy(orderBy string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) Fields(fields string) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) Page(page int32) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) PageSize(pageSize int32) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) PageId(pageId int32) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) Execute() (*ReportCardDetail, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsByParentIdDetailsByIdExecute(r)
}

/*
GetSystemReportCardsByParentIdDetailsById Get ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId reportCardId
 @return ApiGetSystemReportCardsByParentIdDetailsByIdRequest
*/
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiGetSystemReportCardsByParentIdDetailsByIdRequest {
	return ApiGetSystemReportCardsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ReportCardDetail
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetailsByIdExecute(r ApiGetSystemReportCardsByParentIdDetailsByIdRequest) (*ReportCardDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCardDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.GetSystemReportCardsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsByParentIdDetailsCountRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) ClientId(clientId string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) Conditions(conditions string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) OrderBy(orderBy string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) Fields(fields string) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) Page(page int32) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) PageSize(pageSize int32) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) PageId(pageId int32) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemReportCardsByParentIdDetailsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsByParentIdDetailsCountExecute(r)
}

/*
GetSystemReportCardsByParentIdDetailsCount Get Count of ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId reportCardId
 @return ApiGetSystemReportCardsByParentIdDetailsCountRequest
*/
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetailsCount(ctx context.Context, parentId int32) ApiGetSystemReportCardsByParentIdDetailsCountRequest {
	return ApiGetSystemReportCardsByParentIdDetailsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ReportCardDetailsAPIService) GetSystemReportCardsByParentIdDetailsCountExecute(r ApiGetSystemReportCardsByParentIdDetailsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.GetSystemReportCardsByParentIdDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemReportCardsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemReportCardsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPatchSystemReportCardsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemReportCardsByParentIdDetailsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemReportCardsByParentIdDetailsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemReportCardsByParentIdDetailsByIdRequest) Execute() (*ReportCardDetail, *http.Response, error) {
	return r.ApiService.PatchSystemReportCardsByParentIdDetailsByIdExecute(r)
}

/*
PatchSystemReportCardsByParentIdDetailsById Patch ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId reportCardId
 @return ApiPatchSystemReportCardsByParentIdDetailsByIdRequest
*/
func (a *ReportCardDetailsAPIService) PatchSystemReportCardsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemReportCardsByParentIdDetailsByIdRequest {
	return ApiPatchSystemReportCardsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ReportCardDetail
func (a *ReportCardDetailsAPIService) PatchSystemReportCardsByParentIdDetailsByIdExecute(r ApiPatchSystemReportCardsByParentIdDetailsByIdRequest) (*ReportCardDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCardDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.PatchSystemReportCardsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemReportCardsByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	parentId int32
	clientId *string
	reportCardDetail *ReportCardDetail
}

// 
func (r ApiPostSystemReportCardsByParentIdDetailsRequest) ClientId(clientId string) ApiPostSystemReportCardsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// reportCardDetail
func (r ApiPostSystemReportCardsByParentIdDetailsRequest) ReportCardDetail(reportCardDetail ReportCardDetail) ApiPostSystemReportCardsByParentIdDetailsRequest {
	r.reportCardDetail = &reportCardDetail
	return r
}

func (r ApiPostSystemReportCardsByParentIdDetailsRequest) Execute() (*ReportCardDetail, *http.Response, error) {
	return r.ApiService.PostSystemReportCardsByParentIdDetailsExecute(r)
}

/*
PostSystemReportCardsByParentIdDetails Post ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId reportCardId
 @return ApiPostSystemReportCardsByParentIdDetailsRequest
*/
func (a *ReportCardDetailsAPIService) PostSystemReportCardsByParentIdDetails(ctx context.Context, parentId int32) ApiPostSystemReportCardsByParentIdDetailsRequest {
	return ApiPostSystemReportCardsByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ReportCardDetail
func (a *ReportCardDetailsAPIService) PostSystemReportCardsByParentIdDetailsExecute(r ApiPostSystemReportCardsByParentIdDetailsRequest) (*ReportCardDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCardDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.PostSystemReportCardsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.reportCardDetail == nil {
		return localVarReturnValue, nil, reportError("reportCardDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.reportCardDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemReportCardsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardDetailsAPIService
	id int32
	parentId int32
	clientId *string
	reportCardDetail *ReportCardDetail
}

// 
func (r ApiPutSystemReportCardsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPutSystemReportCardsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// reportCardDetail
func (r ApiPutSystemReportCardsByParentIdDetailsByIdRequest) ReportCardDetail(reportCardDetail ReportCardDetail) ApiPutSystemReportCardsByParentIdDetailsByIdRequest {
	r.reportCardDetail = &reportCardDetail
	return r
}

func (r ApiPutSystemReportCardsByParentIdDetailsByIdRequest) Execute() (*ReportCardDetail, *http.Response, error) {
	return r.ApiService.PutSystemReportCardsByParentIdDetailsByIdExecute(r)
}

/*
PutSystemReportCardsByParentIdDetailsById Put ReportCardDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId reportCardId
 @return ApiPutSystemReportCardsByParentIdDetailsByIdRequest
*/
func (a *ReportCardDetailsAPIService) PutSystemReportCardsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPutSystemReportCardsByParentIdDetailsByIdRequest {
	return ApiPutSystemReportCardsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ReportCardDetail
func (a *ReportCardDetailsAPIService) PutSystemReportCardsByParentIdDetailsByIdExecute(r ApiPutSystemReportCardsByParentIdDetailsByIdRequest) (*ReportCardDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCardDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardDetailsAPIService.PutSystemReportCardsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.reportCardDetail == nil {
		return localVarReturnValue, nil, reportError("reportCardDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.reportCardDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
