/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportCardsAPIService ReportCardsAPI service
type ReportCardsAPIService service

type ApiDeleteSystemReportCardsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemReportCardsByIdRequest) ClientId(clientId string) ApiDeleteSystemReportCardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemReportCardsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemReportCardsByIdExecute(r)
}

/*
DeleteSystemReportCardsById Delete ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportCardId
 @return ApiDeleteSystemReportCardsByIdRequest
*/
func (a *ReportCardsAPIService) DeleteSystemReportCardsById(ctx context.Context, id int32) ApiDeleteSystemReportCardsByIdRequest {
	return ApiDeleteSystemReportCardsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ReportCardsAPIService) DeleteSystemReportCardsByIdExecute(r ApiDeleteSystemReportCardsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.DeleteSystemReportCardsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportCardsRequest) Conditions(conditions string) ApiGetSystemReportCardsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) OrderBy(orderBy string) ApiGetSystemReportCardsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) Fields(fields string) ApiGetSystemReportCardsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) Page(page int32) ApiGetSystemReportCardsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) PageSize(pageSize int32) ApiGetSystemReportCardsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) PageId(pageId int32) ApiGetSystemReportCardsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportCardsRequest) ClientId(clientId string) ApiGetSystemReportCardsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportCardsRequest) Execute() ([]ReportCard, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsExecute(r)
}

/*
GetSystemReportCards Get List of ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemReportCardsRequest
*/
func (a *ReportCardsAPIService) GetSystemReportCards(ctx context.Context) ApiGetSystemReportCardsRequest {
	return ApiGetSystemReportCardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ReportCard
func (a *ReportCardsAPIService) GetSystemReportCardsExecute(r ApiGetSystemReportCardsRequest) ([]ReportCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ReportCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.GetSystemReportCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportCardsByIdRequest) Conditions(conditions string) ApiGetSystemReportCardsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) OrderBy(orderBy string) ApiGetSystemReportCardsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) Fields(fields string) ApiGetSystemReportCardsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) Page(page int32) ApiGetSystemReportCardsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) PageSize(pageSize int32) ApiGetSystemReportCardsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) PageId(pageId int32) ApiGetSystemReportCardsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportCardsByIdRequest) ClientId(clientId string) ApiGetSystemReportCardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportCardsByIdRequest) Execute() (*ReportCard, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsByIdExecute(r)
}

/*
GetSystemReportCardsById Get ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportCardId
 @return ApiGetSystemReportCardsByIdRequest
*/
func (a *ReportCardsAPIService) GetSystemReportCardsById(ctx context.Context, id int32) ApiGetSystemReportCardsByIdRequest {
	return ApiGetSystemReportCardsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReportCard
func (a *ReportCardsAPIService) GetSystemReportCardsByIdExecute(r ApiGetSystemReportCardsByIdRequest) (*ReportCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.GetSystemReportCardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportCardsCountRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportCardsCountRequest) Conditions(conditions string) ApiGetSystemReportCardsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) ChildConditions(childConditions string) ApiGetSystemReportCardsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportCardsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) OrderBy(orderBy string) ApiGetSystemReportCardsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) Fields(fields string) ApiGetSystemReportCardsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) Page(page int32) ApiGetSystemReportCardsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) PageSize(pageSize int32) ApiGetSystemReportCardsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) PageId(pageId int32) ApiGetSystemReportCardsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportCardsCountRequest) ClientId(clientId string) ApiGetSystemReportCardsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportCardsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemReportCardsCountExecute(r)
}

/*
GetSystemReportCardsCount Get Count of ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemReportCardsCountRequest
*/
func (a *ReportCardsAPIService) GetSystemReportCardsCount(ctx context.Context) ApiGetSystemReportCardsCountRequest {
	return ApiGetSystemReportCardsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ReportCardsAPIService) GetSystemReportCardsCountExecute(r ApiGetSystemReportCardsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.GetSystemReportCardsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemReportCardsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemReportCardsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemReportCardsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemReportCardsByIdRequest) ClientId(clientId string) ApiPatchSystemReportCardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemReportCardsByIdRequest) Execute() (*ReportCard, *http.Response, error) {
	return r.ApiService.PatchSystemReportCardsByIdExecute(r)
}

/*
PatchSystemReportCardsById Patch ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportCardId
 @return ApiPatchSystemReportCardsByIdRequest
*/
func (a *ReportCardsAPIService) PatchSystemReportCardsById(ctx context.Context, id int32) ApiPatchSystemReportCardsByIdRequest {
	return ApiPatchSystemReportCardsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReportCard
func (a *ReportCardsAPIService) PatchSystemReportCardsByIdExecute(r ApiPatchSystemReportCardsByIdRequest) (*ReportCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.PatchSystemReportCardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemReportCardsRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	reportCard *ReportCard
	clientId *string
}

// reportCard
func (r ApiPostSystemReportCardsRequest) ReportCard(reportCard ReportCard) ApiPostSystemReportCardsRequest {
	r.reportCard = &reportCard
	return r
}

// 
func (r ApiPostSystemReportCardsRequest) ClientId(clientId string) ApiPostSystemReportCardsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemReportCardsRequest) Execute() (*ReportCard, *http.Response, error) {
	return r.ApiService.PostSystemReportCardsExecute(r)
}

/*
PostSystemReportCards Post ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemReportCardsRequest
*/
func (a *ReportCardsAPIService) PostSystemReportCards(ctx context.Context) ApiPostSystemReportCardsRequest {
	return ApiPostSystemReportCardsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ReportCard
func (a *ReportCardsAPIService) PostSystemReportCardsExecute(r ApiPostSystemReportCardsRequest) (*ReportCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.PostSystemReportCards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportCard == nil {
		return localVarReturnValue, nil, reportError("reportCard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.reportCard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemReportCardsByIdRequest struct {
	ctx context.Context
	ApiService *ReportCardsAPIService
	id int32
	reportCard *ReportCard
	clientId *string
}

// reportCard
func (r ApiPutSystemReportCardsByIdRequest) ReportCard(reportCard ReportCard) ApiPutSystemReportCardsByIdRequest {
	r.reportCard = &reportCard
	return r
}

// 
func (r ApiPutSystemReportCardsByIdRequest) ClientId(clientId string) ApiPutSystemReportCardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemReportCardsByIdRequest) Execute() (*ReportCard, *http.Response, error) {
	return r.ApiService.PutSystemReportCardsByIdExecute(r)
}

/*
PutSystemReportCardsById Put ReportCard

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reportCardId
 @return ApiPutSystemReportCardsByIdRequest
*/
func (a *ReportCardsAPIService) PutSystemReportCardsById(ctx context.Context, id int32) ApiPutSystemReportCardsByIdRequest {
	return ApiPutSystemReportCardsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ReportCard
func (a *ReportCardsAPIService) PutSystemReportCardsByIdExecute(r ApiPutSystemReportCardsByIdRequest) (*ReportCard, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportCard
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportCardsAPIService.PutSystemReportCardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reportCards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.reportCard == nil {
		return localVarReturnValue, nil, reportError("reportCard is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.reportCard
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
