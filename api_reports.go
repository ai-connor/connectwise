/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ReportsAPIService ReportsAPI service
type ReportsAPIService service

type ApiGetSystemReportsRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportsRequest) Conditions(conditions string) ApiGetSystemReportsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportsRequest) ChildConditions(childConditions string) ApiGetSystemReportsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportsRequest) OrderBy(orderBy string) ApiGetSystemReportsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportsRequest) Fields(fields string) ApiGetSystemReportsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportsRequest) Page(page int32) ApiGetSystemReportsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportsRequest) PageSize(pageSize int32) ApiGetSystemReportsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportsRequest) PageId(pageId int32) ApiGetSystemReportsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportsRequest) ClientId(clientId string) ApiGetSystemReportsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportsRequest) Execute() ([]Report, *http.Response, error) {
	return r.ApiService.GetSystemReportsExecute(r)
}

/*
GetSystemReports Get List of Report

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemReportsRequest
*/
func (a *ReportsAPIService) GetSystemReports(ctx context.Context) ApiGetSystemReportsRequest {
	return ApiGetSystemReportsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Report
func (a *ReportsAPIService) GetSystemReportsExecute(r ApiGetSystemReportsRequest) ([]Report, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Report
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetSystemReports")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportsByReportNameRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	reportName string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportsByReportNameRequest) Conditions(conditions string) ApiGetSystemReportsByReportNameRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) ChildConditions(childConditions string) ApiGetSystemReportsByReportNameRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportsByReportNameRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) OrderBy(orderBy string) ApiGetSystemReportsByReportNameRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) Fields(fields string) ApiGetSystemReportsByReportNameRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) Page(page int32) ApiGetSystemReportsByReportNameRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) PageSize(pageSize int32) ApiGetSystemReportsByReportNameRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) PageId(pageId int32) ApiGetSystemReportsByReportNameRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportsByReportNameRequest) ClientId(clientId string) ApiGetSystemReportsByReportNameRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportsByReportNameRequest) Execute() (*ReportDataResponse, *http.Response, error) {
	return r.ApiService.GetSystemReportsByReportNameExecute(r)
}

/*
GetSystemReportsByReportName Get ReportDataResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reportName reportName
 @return ApiGetSystemReportsByReportNameRequest
*/
func (a *ReportsAPIService) GetSystemReportsByReportName(ctx context.Context, reportName string) ApiGetSystemReportsByReportNameRequest {
	return ApiGetSystemReportsByReportNameRequest{
		ApiService: a,
		ctx: ctx,
		reportName: reportName,
	}
}

// Execute executes the request
//  @return ReportDataResponse
func (a *ReportsAPIService) GetSystemReportsByReportNameExecute(r ApiGetSystemReportsByReportNameRequest) (*ReportDataResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ReportDataResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetSystemReportsByReportName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reports/{reportName}"
	localVarPath = strings.Replace(localVarPath, "{"+"reportName"+"}", url.PathEscape(parameterValueToString(r.reportName, "reportName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportsByReportNameColumnsRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	reportName string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) Conditions(conditions string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) ChildConditions(childConditions string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) OrderBy(orderBy string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) Fields(fields string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) Page(page int32) ApiGetSystemReportsByReportNameColumnsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) PageSize(pageSize int32) ApiGetSystemReportsByReportNameColumnsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) PageId(pageId int32) ApiGetSystemReportsByReportNameColumnsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportsByReportNameColumnsRequest) ClientId(clientId string) ApiGetSystemReportsByReportNameColumnsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportsByReportNameColumnsRequest) Execute() ([]map[string]ReportColumnDefinition, *http.Response, error) {
	return r.ApiService.GetSystemReportsByReportNameColumnsExecute(r)
}

/*
GetSystemReportsByReportNameColumns Get List of JObject

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reportName reportName
 @return ApiGetSystemReportsByReportNameColumnsRequest
*/
func (a *ReportsAPIService) GetSystemReportsByReportNameColumns(ctx context.Context, reportName string) ApiGetSystemReportsByReportNameColumnsRequest {
	return ApiGetSystemReportsByReportNameColumnsRequest{
		ApiService: a,
		ctx: ctx,
		reportName: reportName,
	}
}

// Execute executes the request
//  @return []map[string]ReportColumnDefinition
func (a *ReportsAPIService) GetSystemReportsByReportNameColumnsExecute(r ApiGetSystemReportsByReportNameColumnsRequest) ([]map[string]ReportColumnDefinition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]ReportColumnDefinition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetSystemReportsByReportNameColumns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reports/{reportName}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"reportName"+"}", url.PathEscape(parameterValueToString(r.reportName, "reportName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemReportsByReportNameCountRequest struct {
	ctx context.Context
	ApiService *ReportsAPIService
	reportName string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) Conditions(conditions string) ApiGetSystemReportsByReportNameCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) ChildConditions(childConditions string) ApiGetSystemReportsByReportNameCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemReportsByReportNameCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) OrderBy(orderBy string) ApiGetSystemReportsByReportNameCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) Fields(fields string) ApiGetSystemReportsByReportNameCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) Page(page int32) ApiGetSystemReportsByReportNameCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) PageSize(pageSize int32) ApiGetSystemReportsByReportNameCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) PageId(pageId int32) ApiGetSystemReportsByReportNameCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemReportsByReportNameCountRequest) ClientId(clientId string) ApiGetSystemReportsByReportNameCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemReportsByReportNameCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemReportsByReportNameCountExecute(r)
}

/*
GetSystemReportsByReportNameCount Get Count of ReportDataResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param reportName reportName
 @return ApiGetSystemReportsByReportNameCountRequest
*/
func (a *ReportsAPIService) GetSystemReportsByReportNameCount(ctx context.Context, reportName string) ApiGetSystemReportsByReportNameCountRequest {
	return ApiGetSystemReportsByReportNameCountRequest{
		ApiService: a,
		ctx: ctx,
		reportName: reportName,
	}
}

// Execute executes the request
//  @return Count
func (a *ReportsAPIService) GetSystemReportsByReportNameCountExecute(r ApiGetSystemReportsByReportNameCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsAPIService.GetSystemReportsByReportNameCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/reports/{reportName}/count"
	localVarPath = strings.Replace(localVarPath, "{"+"reportName"+"}", url.PathEscape(parameterValueToString(r.reportName, "reportName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
