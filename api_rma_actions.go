/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RMAActionsAPIService RMAActionsAPI service
type RMAActionsAPIService service

type ApiDeleteProcurementRmaActionsByIdRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRmaActionsByIdRequest) ClientId(clientId string) ApiDeleteProcurementRmaActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRmaActionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRmaActionsByIdExecute(r)
}

/*
DeleteProcurementRmaActionsById Delete RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaActionId
 @return ApiDeleteProcurementRmaActionsByIdRequest
*/
func (a *RMAActionsAPIService) DeleteProcurementRmaActionsById(ctx context.Context, id int32) ApiDeleteProcurementRmaActionsByIdRequest {
	return ApiDeleteProcurementRmaActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RMAActionsAPIService) DeleteProcurementRmaActionsByIdExecute(r ApiDeleteProcurementRmaActionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.DeleteProcurementRmaActionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRmaActionsRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementRmaActionsRequest) Conditions(conditions string) ApiGetProcurementRmaActionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) ChildConditions(childConditions string) ApiGetProcurementRmaActionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaActionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) OrderBy(orderBy string) ApiGetProcurementRmaActionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) Fields(fields string) ApiGetProcurementRmaActionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) Page(page int32) ApiGetProcurementRmaActionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) PageSize(pageSize int32) ApiGetProcurementRmaActionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) PageId(pageId int32) ApiGetProcurementRmaActionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementRmaActionsRequest) ClientId(clientId string) ApiGetProcurementRmaActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementRmaActionsRequest) Execute() ([]RmaAction, *http.Response, error) {
	return r.ApiService.GetProcurementRmaActionsExecute(r)
}

/*
GetProcurementRmaActions Get List of RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaActionsRequest
*/
func (a *RMAActionsAPIService) GetProcurementRmaActions(ctx context.Context) ApiGetProcurementRmaActionsRequest {
	return ApiGetProcurementRmaActionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RmaAction
func (a *RMAActionsAPIService) GetProcurementRmaActionsExecute(r ApiGetProcurementRmaActionsRequest) ([]RmaAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.GetProcurementRmaActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaActionsByIdRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) Conditions(conditions string) ApiGetProcurementRmaActionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRmaActionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaActionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) OrderBy(orderBy string) ApiGetProcurementRmaActionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) Fields(fields string) ApiGetProcurementRmaActionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) Page(page int32) ApiGetProcurementRmaActionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) PageSize(pageSize int32) ApiGetProcurementRmaActionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) PageId(pageId int32) ApiGetProcurementRmaActionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementRmaActionsByIdRequest) ClientId(clientId string) ApiGetProcurementRmaActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementRmaActionsByIdRequest) Execute() (*RmaAction, *http.Response, error) {
	return r.ApiService.GetProcurementRmaActionsByIdExecute(r)
}

/*
GetProcurementRmaActionsById Get RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaActionId
 @return ApiGetProcurementRmaActionsByIdRequest
*/
func (a *RMAActionsAPIService) GetProcurementRmaActionsById(ctx context.Context, id int32) ApiGetProcurementRmaActionsByIdRequest {
	return ApiGetProcurementRmaActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaAction
func (a *RMAActionsAPIService) GetProcurementRmaActionsByIdExecute(r ApiGetProcurementRmaActionsByIdRequest) (*RmaAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.GetProcurementRmaActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaActionsCountRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) Conditions(conditions string) ApiGetProcurementRmaActionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) ChildConditions(childConditions string) ApiGetProcurementRmaActionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaActionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) OrderBy(orderBy string) ApiGetProcurementRmaActionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) Fields(fields string) ApiGetProcurementRmaActionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) Page(page int32) ApiGetProcurementRmaActionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) PageSize(pageSize int32) ApiGetProcurementRmaActionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) PageId(pageId int32) ApiGetProcurementRmaActionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementRmaActionsCountRequest) ClientId(clientId string) ApiGetProcurementRmaActionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementRmaActionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRmaActionsCountExecute(r)
}

/*
GetProcurementRmaActionsCount Get Count of RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaActionsCountRequest
*/
func (a *RMAActionsAPIService) GetProcurementRmaActionsCount(ctx context.Context) ApiGetProcurementRmaActionsCountRequest {
	return ApiGetProcurementRmaActionsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *RMAActionsAPIService) GetProcurementRmaActionsCountExecute(r ApiGetProcurementRmaActionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.GetProcurementRmaActionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRmaActionsByIdRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementRmaActionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRmaActionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementRmaActionsByIdRequest) ClientId(clientId string) ApiPatchProcurementRmaActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementRmaActionsByIdRequest) Execute() (*RmaAction, *http.Response, error) {
	return r.ApiService.PatchProcurementRmaActionsByIdExecute(r)
}

/*
PatchProcurementRmaActionsById Patch RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaActionId
 @return ApiPatchProcurementRmaActionsByIdRequest
*/
func (a *RMAActionsAPIService) PatchProcurementRmaActionsById(ctx context.Context, id int32) ApiPatchProcurementRmaActionsByIdRequest {
	return ApiPatchProcurementRmaActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaAction
func (a *RMAActionsAPIService) PatchProcurementRmaActionsByIdExecute(r ApiPatchProcurementRmaActionsByIdRequest) (*RmaAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.PatchProcurementRmaActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRmaActionsRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	rmaAction *RmaAction
	clientId *string
}

// rmaAction
func (r ApiPostProcurementRmaActionsRequest) RmaAction(rmaAction RmaAction) ApiPostProcurementRmaActionsRequest {
	r.rmaAction = &rmaAction
	return r
}

// 
func (r ApiPostProcurementRmaActionsRequest) ClientId(clientId string) ApiPostProcurementRmaActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementRmaActionsRequest) Execute() (*RmaAction, *http.Response, error) {
	return r.ApiService.PostProcurementRmaActionsExecute(r)
}

/*
PostProcurementRmaActions Post RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementRmaActionsRequest
*/
func (a *RMAActionsAPIService) PostProcurementRmaActions(ctx context.Context) ApiPostProcurementRmaActionsRequest {
	return ApiPostProcurementRmaActionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RmaAction
func (a *RMAActionsAPIService) PostProcurementRmaActionsExecute(r ApiPostProcurementRmaActionsRequest) (*RmaAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.PostProcurementRmaActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rmaAction == nil {
		return localVarReturnValue, nil, reportError("rmaAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.rmaAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRmaActionsByIdRequest struct {
	ctx context.Context
	ApiService *RMAActionsAPIService
	id int32
	rmaAction *RmaAction
	clientId *string
}

// rmaAction
func (r ApiPutProcurementRmaActionsByIdRequest) RmaAction(rmaAction RmaAction) ApiPutProcurementRmaActionsByIdRequest {
	r.rmaAction = &rmaAction
	return r
}

// 
func (r ApiPutProcurementRmaActionsByIdRequest) ClientId(clientId string) ApiPutProcurementRmaActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementRmaActionsByIdRequest) Execute() (*RmaAction, *http.Response, error) {
	return r.ApiService.PutProcurementRmaActionsByIdExecute(r)
}

/*
PutProcurementRmaActionsById Put RmaAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaActionId
 @return ApiPutProcurementRmaActionsByIdRequest
*/
func (a *RMAActionsAPIService) PutProcurementRmaActionsById(ctx context.Context, id int32) ApiPutProcurementRmaActionsByIdRequest {
	return ApiPutProcurementRmaActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaAction
func (a *RMAActionsAPIService) PutProcurementRmaActionsByIdExecute(r ApiPutProcurementRmaActionsByIdRequest) (*RmaAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMAActionsAPIService.PutProcurementRmaActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaActions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rmaAction == nil {
		return localVarReturnValue, nil, reportError("rmaAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.rmaAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
