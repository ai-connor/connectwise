/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RMADispositionsAPIService RMADispositionsAPI service
type RMADispositionsAPIService service

type ApiDeleteProcurementRMADispositionsByIdRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRMADispositionsByIdRequest) ClientId(clientId string) ApiDeleteProcurementRMADispositionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRMADispositionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRMADispositionsByIdExecute(r)
}

/*
DeleteProcurementRMADispositionsById Delete RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id RMADispositionId
 @return ApiDeleteProcurementRMADispositionsByIdRequest
*/
func (a *RMADispositionsAPIService) DeleteProcurementRMADispositionsById(ctx context.Context, id int32) ApiDeleteProcurementRMADispositionsByIdRequest {
	return ApiDeleteProcurementRMADispositionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RMADispositionsAPIService) DeleteProcurementRMADispositionsByIdExecute(r ApiDeleteProcurementRMADispositionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.DeleteProcurementRMADispositionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRMADispositionsRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRMADispositionsRequest) ClientId(clientId string) ApiGetProcurementRMADispositionsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) Conditions(conditions string) ApiGetProcurementRMADispositionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) ChildConditions(childConditions string) ApiGetProcurementRMADispositionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRMADispositionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) OrderBy(orderBy string) ApiGetProcurementRMADispositionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) Fields(fields string) ApiGetProcurementRMADispositionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) Page(page int32) ApiGetProcurementRMADispositionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) PageSize(pageSize int32) ApiGetProcurementRMADispositionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRMADispositionsRequest) PageId(pageId int32) ApiGetProcurementRMADispositionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRMADispositionsRequest) Execute() ([]RmaDisposition, *http.Response, error) {
	return r.ApiService.GetProcurementRMADispositionsExecute(r)
}

/*
GetProcurementRMADispositions Get List of RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRMADispositionsRequest
*/
func (a *RMADispositionsAPIService) GetProcurementRMADispositions(ctx context.Context) ApiGetProcurementRMADispositionsRequest {
	return ApiGetProcurementRMADispositionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RmaDisposition
func (a *RMADispositionsAPIService) GetProcurementRMADispositionsExecute(r ApiGetProcurementRMADispositionsRequest) ([]RmaDisposition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaDisposition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.GetProcurementRMADispositions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRMADispositionsByIdRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) ClientId(clientId string) ApiGetProcurementRMADispositionsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) Conditions(conditions string) ApiGetProcurementRMADispositionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRMADispositionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRMADispositionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) OrderBy(orderBy string) ApiGetProcurementRMADispositionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) Fields(fields string) ApiGetProcurementRMADispositionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) Page(page int32) ApiGetProcurementRMADispositionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) PageSize(pageSize int32) ApiGetProcurementRMADispositionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRMADispositionsByIdRequest) PageId(pageId int32) ApiGetProcurementRMADispositionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRMADispositionsByIdRequest) Execute() (*RmaDisposition, *http.Response, error) {
	return r.ApiService.GetProcurementRMADispositionsByIdExecute(r)
}

/*
GetProcurementRMADispositionsById Get RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id RMADispositionId
 @return ApiGetProcurementRMADispositionsByIdRequest
*/
func (a *RMADispositionsAPIService) GetProcurementRMADispositionsById(ctx context.Context, id int32) ApiGetProcurementRMADispositionsByIdRequest {
	return ApiGetProcurementRMADispositionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaDisposition
func (a *RMADispositionsAPIService) GetProcurementRMADispositionsByIdExecute(r ApiGetProcurementRMADispositionsByIdRequest) (*RmaDisposition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaDisposition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.GetProcurementRMADispositionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRMADispositionsCountRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) ClientId(clientId string) ApiGetProcurementRMADispositionsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) Conditions(conditions string) ApiGetProcurementRMADispositionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) ChildConditions(childConditions string) ApiGetProcurementRMADispositionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRMADispositionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) OrderBy(orderBy string) ApiGetProcurementRMADispositionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) Fields(fields string) ApiGetProcurementRMADispositionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) Page(page int32) ApiGetProcurementRMADispositionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) PageSize(pageSize int32) ApiGetProcurementRMADispositionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRMADispositionsCountRequest) PageId(pageId int32) ApiGetProcurementRMADispositionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRMADispositionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRMADispositionsCountExecute(r)
}

/*
GetProcurementRMADispositionsCount Get Count of RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRMADispositionsCountRequest
*/
func (a *RMADispositionsAPIService) GetProcurementRMADispositionsCount(ctx context.Context) ApiGetProcurementRMADispositionsCountRequest {
	return ApiGetProcurementRMADispositionsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *RMADispositionsAPIService) GetProcurementRMADispositionsCountExecute(r ApiGetProcurementRMADispositionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.GetProcurementRMADispositionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRMADispositionsByIdRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementRMADispositionsByIdRequest) ClientId(clientId string) ApiPatchProcurementRMADispositionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementRMADispositionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRMADispositionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementRMADispositionsByIdRequest) Execute() (*RmaDisposition, *http.Response, error) {
	return r.ApiService.PatchProcurementRMADispositionsByIdExecute(r)
}

/*
PatchProcurementRMADispositionsById Patch RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id RMADispositionId
 @return ApiPatchProcurementRMADispositionsByIdRequest
*/
func (a *RMADispositionsAPIService) PatchProcurementRMADispositionsById(ctx context.Context, id int32) ApiPatchProcurementRMADispositionsByIdRequest {
	return ApiPatchProcurementRMADispositionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaDisposition
func (a *RMADispositionsAPIService) PatchProcurementRMADispositionsByIdExecute(r ApiPatchProcurementRMADispositionsByIdRequest) (*RmaDisposition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaDisposition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.PatchProcurementRMADispositionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRMADispositionsRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	clientId *string
	rmaDisposition *RmaDisposition
}

// 
func (r ApiPostProcurementRMADispositionsRequest) ClientId(clientId string) ApiPostProcurementRMADispositionsRequest {
	r.clientId = &clientId
	return r
}

// rmaDisposition
func (r ApiPostProcurementRMADispositionsRequest) RmaDisposition(rmaDisposition RmaDisposition) ApiPostProcurementRMADispositionsRequest {
	r.rmaDisposition = &rmaDisposition
	return r
}

func (r ApiPostProcurementRMADispositionsRequest) Execute() (*RmaDisposition, *http.Response, error) {
	return r.ApiService.PostProcurementRMADispositionsExecute(r)
}

/*
PostProcurementRMADispositions Post RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementRMADispositionsRequest
*/
func (a *RMADispositionsAPIService) PostProcurementRMADispositions(ctx context.Context) ApiPostProcurementRMADispositionsRequest {
	return ApiPostProcurementRMADispositionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RmaDisposition
func (a *RMADispositionsAPIService) PostProcurementRMADispositionsExecute(r ApiPostProcurementRMADispositionsRequest) (*RmaDisposition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaDisposition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.PostProcurementRMADispositions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaDisposition == nil {
		return localVarReturnValue, nil, reportError("rmaDisposition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaDisposition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRMADispositionsByIdRequest struct {
	ctx context.Context
	ApiService *RMADispositionsAPIService
	id int32
	clientId *string
	rmaDisposition *RmaDisposition
}

// 
func (r ApiPutProcurementRMADispositionsByIdRequest) ClientId(clientId string) ApiPutProcurementRMADispositionsByIdRequest {
	r.clientId = &clientId
	return r
}

// rmaDisposition
func (r ApiPutProcurementRMADispositionsByIdRequest) RmaDisposition(rmaDisposition RmaDisposition) ApiPutProcurementRMADispositionsByIdRequest {
	r.rmaDisposition = &rmaDisposition
	return r
}

func (r ApiPutProcurementRMADispositionsByIdRequest) Execute() (*RmaDisposition, *http.Response, error) {
	return r.ApiService.PutProcurementRMADispositionsByIdExecute(r)
}

/*
PutProcurementRMADispositionsById Put RmaDisposition

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id RMADispositionId
 @return ApiPutProcurementRMADispositionsByIdRequest
*/
func (a *RMADispositionsAPIService) PutProcurementRMADispositionsById(ctx context.Context, id int32) ApiPutProcurementRMADispositionsByIdRequest {
	return ApiPutProcurementRMADispositionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaDisposition
func (a *RMADispositionsAPIService) PutProcurementRMADispositionsByIdExecute(r ApiPutProcurementRMADispositionsByIdRequest) (*RmaDisposition, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaDisposition
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RMADispositionsAPIService.PutProcurementRMADispositionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/RMADispositions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaDisposition == nil {
		return localVarReturnValue, nil, reportError("rmaDisposition is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaDisposition
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
