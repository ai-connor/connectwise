/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RmaStatusEmailTemplatesAPIService RmaStatusEmailTemplatesAPI service
type RmaStatusEmailTemplatesAPIService service

type ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
DeleteProcurementRmaStatusesByParentIdEmailtemplatesById Delete RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId rmaStatusId
 @return ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) DeleteProcurementRmaStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *RmaStatusEmailTemplatesAPIService) DeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r ApiDeleteProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.DeleteProcurementRmaStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) Execute() ([]RmaStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdEmailTemplatesExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdEmailTemplates Get List of RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailTemplates(ctx context.Context, parentId int32) ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest {
	return ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []RmaStatusEmailTemplate
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailTemplatesExecute(r ApiGetProcurementRmaStatusesByParentIdEmailTemplatesRequest) ([]RmaStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.GetProcurementRmaStatusesByParentIdEmailTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailTemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*RmaStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdEmailtemplatesById Get RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusEmailTemplate
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) (*RmaStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.GetProcurementRmaStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdEmailtemplatesCountExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdEmailtemplatesCount Get Count of RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailtemplatesCount(ctx context.Context, parentId int32) ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest {
	return ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *RmaStatusEmailTemplatesAPIService) GetProcurementRmaStatusesByParentIdEmailtemplatesCountExecute(r ApiGetProcurementRmaStatusesByParentIdEmailtemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.GetProcurementRmaStatusesByParentIdEmailtemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*RmaStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PatchProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PatchProcurementRmaStatusesByParentIdEmailtemplatesById Patch RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId rmaStatusId
 @return ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) PatchProcurementRmaStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusEmailTemplate
func (a *RmaStatusEmailTemplatesAPIService) PatchProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r ApiPatchProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) (*RmaStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.PatchProcurementRmaStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	parentId int32
	clientId *string
	rmaStatusEmailTemplate *RmaStatusEmailTemplate
}

// 
func (r ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest) ClientId(clientId string) ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest {
	r.clientId = &clientId
	return r
}

// rmaStatusEmailTemplate
func (r ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest) RmaStatusEmailTemplate(rmaStatusEmailTemplate RmaStatusEmailTemplate) ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest {
	r.rmaStatusEmailTemplate = &rmaStatusEmailTemplate
	return r
}

func (r ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest) Execute() (*RmaStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PostProcurementRmaStatusesByParentIdEmailtemplatesExecute(r)
}

/*
PostProcurementRmaStatusesByParentIdEmailtemplates Post RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) PostProcurementRmaStatusesByParentIdEmailtemplates(ctx context.Context, parentId int32) ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest {
	return ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusEmailTemplate
func (a *RmaStatusEmailTemplatesAPIService) PostProcurementRmaStatusesByParentIdEmailtemplatesExecute(r ApiPostProcurementRmaStatusesByParentIdEmailtemplatesRequest) (*RmaStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.PostProcurementRmaStatusesByParentIdEmailtemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("rmaStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusEmailTemplatesAPIService
	id int32
	parentId int32
	clientId *string
	rmaStatusEmailTemplate *RmaStatusEmailTemplate
}

// 
func (r ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) ClientId(clientId string) ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// rmaStatusEmailTemplate
func (r ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) RmaStatusEmailTemplate(rmaStatusEmailTemplate RmaStatusEmailTemplate) ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	r.rmaStatusEmailTemplate = &rmaStatusEmailTemplate
	return r
}

func (r ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) Execute() (*RmaStatusEmailTemplate, *http.Response, error) {
	return r.ApiService.PutProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r)
}

/*
PutProcurementRmaStatusesByParentIdEmailtemplatesById Put RmaStatusEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailtemplateId
 @param parentId rmaStatusId
 @return ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest
*/
func (a *RmaStatusEmailTemplatesAPIService) PutProcurementRmaStatusesByParentIdEmailtemplatesById(ctx context.Context, id int32, parentId int32) ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest {
	return ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusEmailTemplate
func (a *RmaStatusEmailTemplatesAPIService) PutProcurementRmaStatusesByParentIdEmailtemplatesByIdExecute(r ApiPutProcurementRmaStatusesByParentIdEmailtemplatesByIdRequest) (*RmaStatusEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusEmailTemplatesAPIService.PutProcurementRmaStatusesByParentIdEmailtemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/emailtemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatusEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("rmaStatusEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatusEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
