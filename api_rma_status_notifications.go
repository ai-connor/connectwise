/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RmaStatusNotificationsAPIService RmaStatusNotificationsAPI service
type RmaStatusNotificationsAPIService service

type ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRmaStatusesByParentIdNotificationsByIdExecute(r)
}

/*
DeleteProcurementRmaStatusesByParentIdNotificationsById Delete RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId rmaStatusId
 @return ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest
*/
func (a *RmaStatusNotificationsAPIService) DeleteProcurementRmaStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	return ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *RmaStatusNotificationsAPIService) DeleteProcurementRmaStatusesByParentIdNotificationsByIdExecute(r ApiDeleteProcurementRmaStatusesByParentIdNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.DeleteProcurementRmaStatusesByParentIdNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) Execute() ([]RmaStatusNotification, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdNotificationsExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdNotifications Get List of RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdNotificationsRequest
*/
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsRequest {
	return ApiGetProcurementRmaStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []RmaStatusNotification
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotificationsExecute(r ApiGetProcurementRmaStatusesByParentIdNotificationsRequest) ([]RmaStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.GetProcurementRmaStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) Execute() (*RmaStatusNotification, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdNotificationsByIdExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdNotificationsById Get RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest
*/
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	return ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusNotification
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotificationsByIdExecute(r ApiGetProcurementRmaStatusesByParentIdNotificationsByIdRequest) (*RmaStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.GetProcurementRmaStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) Fields(fields string) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) Page(page int32) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByParentIdNotificationsCountExecute(r)
}

/*
GetProcurementRmaStatusesByParentIdNotificationsCount Get Count of RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest
*/
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotificationsCount(ctx context.Context, parentId int32) ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest {
	return ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *RmaStatusNotificationsAPIService) GetProcurementRmaStatusesByParentIdNotificationsCountExecute(r ApiGetProcurementRmaStatusesByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.GetProcurementRmaStatusesByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest) Execute() (*RmaStatusNotification, *http.Response, error) {
	return r.ApiService.PatchProcurementRmaStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PatchProcurementRmaStatusesByParentIdNotificationsById Patch RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId rmaStatusId
 @return ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest
*/
func (a *RmaStatusNotificationsAPIService) PatchProcurementRmaStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	return ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusNotification
func (a *RmaStatusNotificationsAPIService) PatchProcurementRmaStatusesByParentIdNotificationsByIdExecute(r ApiPatchProcurementRmaStatusesByParentIdNotificationsByIdRequest) (*RmaStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.PatchProcurementRmaStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRmaStatusesByParentIdNotificationsRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	parentId int32
	clientId *string
	rmaStatusNotification *RmaStatusNotification
}

// 
func (r ApiPostProcurementRmaStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiPostProcurementRmaStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// rmaStatusNotification
func (r ApiPostProcurementRmaStatusesByParentIdNotificationsRequest) RmaStatusNotification(rmaStatusNotification RmaStatusNotification) ApiPostProcurementRmaStatusesByParentIdNotificationsRequest {
	r.rmaStatusNotification = &rmaStatusNotification
	return r
}

func (r ApiPostProcurementRmaStatusesByParentIdNotificationsRequest) Execute() (*RmaStatusNotification, *http.Response, error) {
	return r.ApiService.PostProcurementRmaStatusesByParentIdNotificationsExecute(r)
}

/*
PostProcurementRmaStatusesByParentIdNotifications Post RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId rmaStatusId
 @return ApiPostProcurementRmaStatusesByParentIdNotificationsRequest
*/
func (a *RmaStatusNotificationsAPIService) PostProcurementRmaStatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiPostProcurementRmaStatusesByParentIdNotificationsRequest {
	return ApiPostProcurementRmaStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusNotification
func (a *RmaStatusNotificationsAPIService) PostProcurementRmaStatusesByParentIdNotificationsExecute(r ApiPostProcurementRmaStatusesByParentIdNotificationsRequest) (*RmaStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.PostProcurementRmaStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatusNotification == nil {
		return localVarReturnValue, nil, reportError("rmaStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusNotificationsAPIService
	id int32
	parentId int32
	clientId *string
	rmaStatusNotification *RmaStatusNotification
}

// 
func (r ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// rmaStatusNotification
func (r ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest) RmaStatusNotification(rmaStatusNotification RmaStatusNotification) ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	r.rmaStatusNotification = &rmaStatusNotification
	return r
}

func (r ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest) Execute() (*RmaStatusNotification, *http.Response, error) {
	return r.ApiService.PutProcurementRmaStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PutProcurementRmaStatusesByParentIdNotificationsById Put RmaStatusNotification

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id notificationId
 @param parentId rmaStatusId
 @return ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest
*/
func (a *RmaStatusNotificationsAPIService) PutProcurementRmaStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest {
	return ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return RmaStatusNotification
func (a *RmaStatusNotificationsAPIService) PutProcurementRmaStatusesByParentIdNotificationsByIdExecute(r ApiPutProcurementRmaStatusesByParentIdNotificationsByIdRequest) (*RmaStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusNotificationsAPIService.PutProcurementRmaStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatusNotification == nil {
		return localVarReturnValue, nil, reportError("rmaStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
