/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RmaStatusesAPIService RmaStatusesAPI service
type RmaStatusesAPIService service

type ApiDeleteProcurementRmaStatusesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRmaStatusesByIdRequest) ClientId(clientId string) ApiDeleteProcurementRmaStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRmaStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRmaStatusesByIdExecute(r)
}

/*
DeleteProcurementRmaStatusesById Delete RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiDeleteProcurementRmaStatusesByIdRequest
*/
func (a *RmaStatusesAPIService) DeleteProcurementRmaStatusesById(ctx context.Context, id int32) ApiDeleteProcurementRmaStatusesByIdRequest {
	return ApiDeleteProcurementRmaStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RmaStatusesAPIService) DeleteProcurementRmaStatusesByIdExecute(r ApiDeleteProcurementRmaStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.DeleteProcurementRmaStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) Fields(fields string) ApiGetProcurementRmaStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) Page(page int32) ApiGetProcurementRmaStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesRequest) Execute() ([]RmaStatus, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesExecute(r)
}

/*
GetProcurementRmaStatuses Get List of RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaStatusesRequest
*/
func (a *RmaStatusesAPIService) GetProcurementRmaStatuses(ctx context.Context) ApiGetProcurementRmaStatusesRequest {
	return ApiGetProcurementRmaStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RmaStatus
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesExecute(r ApiGetProcurementRmaStatusesRequest) ([]RmaStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.GetProcurementRmaStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) Fields(fields string) ApiGetProcurementRmaStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) Page(page int32) ApiGetProcurementRmaStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByIdRequest) Execute() (*RmaStatus, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByIdExecute(r)
}

/*
GetProcurementRmaStatusesById Get RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiGetProcurementRmaStatusesByIdRequest
*/
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesById(ctx context.Context, id int32) ApiGetProcurementRmaStatusesByIdRequest {
	return ApiGetProcurementRmaStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaStatus
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesByIdExecute(r ApiGetProcurementRmaStatusesByIdRequest) (*RmaStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.GetProcurementRmaStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) Fields(fields string) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) Page(page int32) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByIdUsagesExecute(r)
}

/*
GetProcurementRmaStatusesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiGetProcurementRmaStatusesByIdUsagesRequest
*/
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesByIdUsages(ctx context.Context, id int32) ApiGetProcurementRmaStatusesByIdUsagesRequest {
	return ApiGetProcurementRmaStatusesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesByIdUsagesExecute(r ApiGetProcurementRmaStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.GetProcurementRmaStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) Fields(fields string) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) Page(page int32) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesByIdUsagesListExecute(r)
}

/*
GetProcurementRmaStatusesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiGetProcurementRmaStatusesByIdUsagesListRequest
*/
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementRmaStatusesByIdUsagesListRequest {
	return ApiGetProcurementRmaStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesByIdUsagesListExecute(r ApiGetProcurementRmaStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.GetProcurementRmaStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaStatusesCountRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) ClientId(clientId string) ApiGetProcurementRmaStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) Conditions(conditions string) ApiGetProcurementRmaStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) ChildConditions(childConditions string) ApiGetProcurementRmaStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) OrderBy(orderBy string) ApiGetProcurementRmaStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) Fields(fields string) ApiGetProcurementRmaStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) Page(page int32) ApiGetProcurementRmaStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) PageSize(pageSize int32) ApiGetProcurementRmaStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaStatusesCountRequest) PageId(pageId int32) ApiGetProcurementRmaStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRmaStatusesCountExecute(r)
}

/*
GetProcurementRmaStatusesCount Get Count of RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaStatusesCountRequest
*/
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesCount(ctx context.Context) ApiGetProcurementRmaStatusesCountRequest {
	return ApiGetProcurementRmaStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *RmaStatusesAPIService) GetProcurementRmaStatusesCountExecute(r ApiGetProcurementRmaStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.GetProcurementRmaStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRmaStatusesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementRmaStatusesByIdRequest) ClientId(clientId string) ApiPatchProcurementRmaStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementRmaStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRmaStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementRmaStatusesByIdRequest) Execute() (*RmaStatus, *http.Response, error) {
	return r.ApiService.PatchProcurementRmaStatusesByIdExecute(r)
}

/*
PatchProcurementRmaStatusesById Patch RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiPatchProcurementRmaStatusesByIdRequest
*/
func (a *RmaStatusesAPIService) PatchProcurementRmaStatusesById(ctx context.Context, id int32) ApiPatchProcurementRmaStatusesByIdRequest {
	return ApiPatchProcurementRmaStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaStatus
func (a *RmaStatusesAPIService) PatchProcurementRmaStatusesByIdExecute(r ApiPatchProcurementRmaStatusesByIdRequest) (*RmaStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.PatchProcurementRmaStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRmaStatusesRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	clientId *string
	rmaStatus *RmaStatus
}

// 
func (r ApiPostProcurementRmaStatusesRequest) ClientId(clientId string) ApiPostProcurementRmaStatusesRequest {
	r.clientId = &clientId
	return r
}

// rmaStatus
func (r ApiPostProcurementRmaStatusesRequest) RmaStatus(rmaStatus RmaStatus) ApiPostProcurementRmaStatusesRequest {
	r.rmaStatus = &rmaStatus
	return r
}

func (r ApiPostProcurementRmaStatusesRequest) Execute() (*RmaStatus, *http.Response, error) {
	return r.ApiService.PostProcurementRmaStatusesExecute(r)
}

/*
PostProcurementRmaStatuses Post RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementRmaStatusesRequest
*/
func (a *RmaStatusesAPIService) PostProcurementRmaStatuses(ctx context.Context) ApiPostProcurementRmaStatusesRequest {
	return ApiPostProcurementRmaStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RmaStatus
func (a *RmaStatusesAPIService) PostProcurementRmaStatusesExecute(r ApiPostProcurementRmaStatusesRequest) (*RmaStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.PostProcurementRmaStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatus == nil {
		return localVarReturnValue, nil, reportError("rmaStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRmaStatusesByIdRequest struct {
	ctx context.Context
	ApiService *RmaStatusesAPIService
	id int32
	clientId *string
	rmaStatus *RmaStatus
}

// 
func (r ApiPutProcurementRmaStatusesByIdRequest) ClientId(clientId string) ApiPutProcurementRmaStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// rmaStatus
func (r ApiPutProcurementRmaStatusesByIdRequest) RmaStatus(rmaStatus RmaStatus) ApiPutProcurementRmaStatusesByIdRequest {
	r.rmaStatus = &rmaStatus
	return r
}

func (r ApiPutProcurementRmaStatusesByIdRequest) Execute() (*RmaStatus, *http.Response, error) {
	return r.ApiService.PutProcurementRmaStatusesByIdExecute(r)
}

/*
PutProcurementRmaStatusesById Put RmaStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaStatusId
 @return ApiPutProcurementRmaStatusesByIdRequest
*/
func (a *RmaStatusesAPIService) PutProcurementRmaStatusesById(ctx context.Context, id int32) ApiPutProcurementRmaStatusesByIdRequest {
	return ApiPutProcurementRmaStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaStatus
func (a *RmaStatusesAPIService) PutProcurementRmaStatusesByIdExecute(r ApiPutProcurementRmaStatusesByIdRequest) (*RmaStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaStatusesAPIService.PutProcurementRmaStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaStatus == nil {
		return localVarReturnValue, nil, reportError("rmaStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
