/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RmaTagsAPIService RmaTagsAPI service
type RmaTagsAPIService service

type ApiDeleteProcurementRmaTagsByIdRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementRmaTagsByIdRequest) ClientId(clientId string) ApiDeleteProcurementRmaTagsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementRmaTagsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementRmaTagsByIdExecute(r)
}

/*
DeleteProcurementRmaTagsById Delete RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaTagId
 @return ApiDeleteProcurementRmaTagsByIdRequest
*/
func (a *RmaTagsAPIService) DeleteProcurementRmaTagsById(ctx context.Context, id int32) ApiDeleteProcurementRmaTagsByIdRequest {
	return ApiDeleteProcurementRmaTagsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *RmaTagsAPIService) DeleteProcurementRmaTagsByIdExecute(r ApiDeleteProcurementRmaTagsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.DeleteProcurementRmaTagsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementRmaTagsRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaTagsRequest) ClientId(clientId string) ApiGetProcurementRmaTagsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) Conditions(conditions string) ApiGetProcurementRmaTagsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) ChildConditions(childConditions string) ApiGetProcurementRmaTagsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaTagsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) OrderBy(orderBy string) ApiGetProcurementRmaTagsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) Fields(fields string) ApiGetProcurementRmaTagsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) Page(page int32) ApiGetProcurementRmaTagsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) PageSize(pageSize int32) ApiGetProcurementRmaTagsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaTagsRequest) PageId(pageId int32) ApiGetProcurementRmaTagsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaTagsRequest) Execute() ([]RmaTag, *http.Response, error) {
	return r.ApiService.GetProcurementRmaTagsExecute(r)
}

/*
GetProcurementRmaTags Get List of RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaTagsRequest
*/
func (a *RmaTagsAPIService) GetProcurementRmaTags(ctx context.Context) ApiGetProcurementRmaTagsRequest {
	return ApiGetProcurementRmaTagsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []RmaTag
func (a *RmaTagsAPIService) GetProcurementRmaTagsExecute(r ApiGetProcurementRmaTagsRequest) ([]RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.GetProcurementRmaTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaTagsByIdRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) ClientId(clientId string) ApiGetProcurementRmaTagsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) Conditions(conditions string) ApiGetProcurementRmaTagsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementRmaTagsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaTagsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) OrderBy(orderBy string) ApiGetProcurementRmaTagsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) Fields(fields string) ApiGetProcurementRmaTagsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) Page(page int32) ApiGetProcurementRmaTagsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) PageSize(pageSize int32) ApiGetProcurementRmaTagsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaTagsByIdRequest) PageId(pageId int32) ApiGetProcurementRmaTagsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaTagsByIdRequest) Execute() (*RmaTag, *http.Response, error) {
	return r.ApiService.GetProcurementRmaTagsByIdExecute(r)
}

/*
GetProcurementRmaTagsById Get RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaTagId
 @return ApiGetProcurementRmaTagsByIdRequest
*/
func (a *RmaTagsAPIService) GetProcurementRmaTagsById(ctx context.Context, id int32) ApiGetProcurementRmaTagsByIdRequest {
	return ApiGetProcurementRmaTagsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaTag
func (a *RmaTagsAPIService) GetProcurementRmaTagsByIdExecute(r ApiGetProcurementRmaTagsByIdRequest) (*RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.GetProcurementRmaTagsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaTagsCountRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) ClientId(clientId string) ApiGetProcurementRmaTagsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) Conditions(conditions string) ApiGetProcurementRmaTagsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) ChildConditions(childConditions string) ApiGetProcurementRmaTagsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaTagsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) OrderBy(orderBy string) ApiGetProcurementRmaTagsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) Fields(fields string) ApiGetProcurementRmaTagsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) Page(page int32) ApiGetProcurementRmaTagsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) PageSize(pageSize int32) ApiGetProcurementRmaTagsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaTagsCountRequest) PageId(pageId int32) ApiGetProcurementRmaTagsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaTagsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementRmaTagsCountExecute(r)
}

/*
GetProcurementRmaTagsCount Get Count of RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementRmaTagsCountRequest
*/
func (a *RmaTagsAPIService) GetProcurementRmaTagsCount(ctx context.Context) ApiGetProcurementRmaTagsCountRequest {
	return ApiGetProcurementRmaTagsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *RmaTagsAPIService) GetProcurementRmaTagsCountExecute(r ApiGetProcurementRmaTagsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.GetProcurementRmaTagsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementRmaTagsDefaultRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	clientId *string
	productId int32
	billingLogId int32
	ticketId int32
	projectId int32
	salesOrderId int32
	companyId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) ClientId(clientId string) ApiGetProcurementRmaTagsDefaultRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) Conditions(conditions string) ApiGetProcurementRmaTagsDefaultRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) ChildConditions(childConditions string) ApiGetProcurementRmaTagsDefaultRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementRmaTagsDefaultRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) OrderBy(orderBy string) ApiGetProcurementRmaTagsDefaultRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) Fields(fields string) ApiGetProcurementRmaTagsDefaultRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) Page(page int32) ApiGetProcurementRmaTagsDefaultRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) PageSize(pageSize int32) ApiGetProcurementRmaTagsDefaultRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementRmaTagsDefaultRequest) PageId(pageId int32) ApiGetProcurementRmaTagsDefaultRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementRmaTagsDefaultRequest) Execute() (*RmaTag, *http.Response, error) {
	return r.ApiService.GetProcurementRmaTagsDefaultExecute(r)
}

/*
GetProcurementRmaTagsDefault Get RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param productId productId
 @param billingLogId billingLogId
 @param ticketId ticketId
 @param projectId projectId
 @param salesOrderId salesOrderId
 @param companyId companyId
 @return ApiGetProcurementRmaTagsDefaultRequest
*/
func (a *RmaTagsAPIService) GetProcurementRmaTagsDefault(ctx context.Context, productId int32, billingLogId int32, ticketId int32, projectId int32, salesOrderId int32, companyId int32) ApiGetProcurementRmaTagsDefaultRequest {
	return ApiGetProcurementRmaTagsDefaultRequest{
		ApiService: a,
		ctx: ctx,
		productId: productId,
		billingLogId: billingLogId,
		ticketId: ticketId,
		projectId: projectId,
		salesOrderId: salesOrderId,
		companyId: companyId,
	}
}

// Execute executes the request
//  @return RmaTag
func (a *RmaTagsAPIService) GetProcurementRmaTagsDefaultExecute(r ApiGetProcurementRmaTagsDefaultRequest) (*RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.GetProcurementRmaTagsDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/default"
	localVarPath = strings.Replace(localVarPath, "{"+"productId"+"}", url.PathEscape(parameterValueToString(r.productId, "productId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"billingLogId"+"}", url.PathEscape(parameterValueToString(r.billingLogId, "billingLogId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"ticketId"+"}", url.PathEscape(parameterValueToString(r.ticketId, "ticketId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"salesOrderId"+"}", url.PathEscape(parameterValueToString(r.salesOrderId, "salesOrderId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"companyId"+"}", url.PathEscape(parameterValueToString(r.companyId, "companyId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementRmaTagsByIdRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementRmaTagsByIdRequest) ClientId(clientId string) ApiPatchProcurementRmaTagsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementRmaTagsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementRmaTagsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementRmaTagsByIdRequest) Execute() (*RmaTag, *http.Response, error) {
	return r.ApiService.PatchProcurementRmaTagsByIdExecute(r)
}

/*
PatchProcurementRmaTagsById Patch RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaTagId
 @return ApiPatchProcurementRmaTagsByIdRequest
*/
func (a *RmaTagsAPIService) PatchProcurementRmaTagsById(ctx context.Context, id int32) ApiPatchProcurementRmaTagsByIdRequest {
	return ApiPatchProcurementRmaTagsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaTag
func (a *RmaTagsAPIService) PatchProcurementRmaTagsByIdExecute(r ApiPatchProcurementRmaTagsByIdRequest) (*RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.PatchProcurementRmaTagsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementRmaTagsRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	clientId *string
	rmaTag *RmaTag
}

// 
func (r ApiPostProcurementRmaTagsRequest) ClientId(clientId string) ApiPostProcurementRmaTagsRequest {
	r.clientId = &clientId
	return r
}

// rmaTag
func (r ApiPostProcurementRmaTagsRequest) RmaTag(rmaTag RmaTag) ApiPostProcurementRmaTagsRequest {
	r.rmaTag = &rmaTag
	return r
}

func (r ApiPostProcurementRmaTagsRequest) Execute() (*RmaTag, *http.Response, error) {
	return r.ApiService.PostProcurementRmaTagsExecute(r)
}

/*
PostProcurementRmaTags Post RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementRmaTagsRequest
*/
func (a *RmaTagsAPIService) PostProcurementRmaTags(ctx context.Context) ApiPostProcurementRmaTagsRequest {
	return ApiPostProcurementRmaTagsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RmaTag
func (a *RmaTagsAPIService) PostProcurementRmaTagsExecute(r ApiPostProcurementRmaTagsRequest) (*RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.PostProcurementRmaTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaTag == nil {
		return localVarReturnValue, nil, reportError("rmaTag is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaTag
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementRmaTagsByIdRequest struct {
	ctx context.Context
	ApiService *RmaTagsAPIService
	id int32
	clientId *string
	rmaTag *RmaTag
}

// 
func (r ApiPutProcurementRmaTagsByIdRequest) ClientId(clientId string) ApiPutProcurementRmaTagsByIdRequest {
	r.clientId = &clientId
	return r
}

// rmaTag
func (r ApiPutProcurementRmaTagsByIdRequest) RmaTag(rmaTag RmaTag) ApiPutProcurementRmaTagsByIdRequest {
	r.rmaTag = &rmaTag
	return r
}

func (r ApiPutProcurementRmaTagsByIdRequest) Execute() (*RmaTag, *http.Response, error) {
	return r.ApiService.PutProcurementRmaTagsByIdExecute(r)
}

/*
PutProcurementRmaTagsById Put RmaTag

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id rmaTagId
 @return ApiPutProcurementRmaTagsByIdRequest
*/
func (a *RmaTagsAPIService) PutProcurementRmaTagsById(ctx context.Context, id int32) ApiPutProcurementRmaTagsByIdRequest {
	return ApiPutProcurementRmaTagsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RmaTag
func (a *RmaTagsAPIService) PutProcurementRmaTagsByIdExecute(r ApiPutProcurementRmaTagsByIdRequest) (*RmaTag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RmaTag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RmaTagsAPIService.PutProcurementRmaTagsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/rmaTags/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.rmaTag == nil {
		return localVarReturnValue, nil, reportError("rmaTag is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.rmaTag
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
