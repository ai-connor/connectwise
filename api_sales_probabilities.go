/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SalesProbabilitiesAPIService SalesProbabilitiesAPI service
type SalesProbabilitiesAPIService service

type ApiDeleteSalesProbabilitiesByIdRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSalesProbabilitiesByIdRequest) ClientId(clientId string) ApiDeleteSalesProbabilitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesProbabilitiesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesProbabilitiesByIdExecute(r)
}

/*
DeleteSalesProbabilitiesById Delete SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id probabilityId
 @return ApiDeleteSalesProbabilitiesByIdRequest
*/
func (a *SalesProbabilitiesAPIService) DeleteSalesProbabilitiesById(ctx context.Context, id int32) ApiDeleteSalesProbabilitiesByIdRequest {
	return ApiDeleteSalesProbabilitiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SalesProbabilitiesAPIService) DeleteSalesProbabilitiesByIdExecute(r ApiDeleteSalesProbabilitiesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.DeleteSalesProbabilitiesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesProbabilitiesRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesProbabilitiesRequest) Conditions(conditions string) ApiGetSalesProbabilitiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) ChildConditions(childConditions string) ApiGetSalesProbabilitiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesProbabilitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) OrderBy(orderBy string) ApiGetSalesProbabilitiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) Fields(fields string) ApiGetSalesProbabilitiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) Page(page int32) ApiGetSalesProbabilitiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) PageSize(pageSize int32) ApiGetSalesProbabilitiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) PageId(pageId int32) ApiGetSalesProbabilitiesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesProbabilitiesRequest) ClientId(clientId string) ApiGetSalesProbabilitiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesProbabilitiesRequest) Execute() ([]SalesProbability, *http.Response, error) {
	return r.ApiService.GetSalesProbabilitiesExecute(r)
}

/*
GetSalesProbabilities Get List of SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesProbabilitiesRequest
*/
func (a *SalesProbabilitiesAPIService) GetSalesProbabilities(ctx context.Context) ApiGetSalesProbabilitiesRequest {
	return ApiGetSalesProbabilitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SalesProbability
func (a *SalesProbabilitiesAPIService) GetSalesProbabilitiesExecute(r ApiGetSalesProbabilitiesRequest) ([]SalesProbability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SalesProbability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.GetSalesProbabilities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesProbabilitiesByIdRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) Conditions(conditions string) ApiGetSalesProbabilitiesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) ChildConditions(childConditions string) ApiGetSalesProbabilitiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesProbabilitiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) OrderBy(orderBy string) ApiGetSalesProbabilitiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) Fields(fields string) ApiGetSalesProbabilitiesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) Page(page int32) ApiGetSalesProbabilitiesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) PageSize(pageSize int32) ApiGetSalesProbabilitiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) PageId(pageId int32) ApiGetSalesProbabilitiesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesProbabilitiesByIdRequest) ClientId(clientId string) ApiGetSalesProbabilitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesProbabilitiesByIdRequest) Execute() (*SalesProbability, *http.Response, error) {
	return r.ApiService.GetSalesProbabilitiesByIdExecute(r)
}

/*
GetSalesProbabilitiesById Get SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id probabilityId
 @return ApiGetSalesProbabilitiesByIdRequest
*/
func (a *SalesProbabilitiesAPIService) GetSalesProbabilitiesById(ctx context.Context, id int32) ApiGetSalesProbabilitiesByIdRequest {
	return ApiGetSalesProbabilitiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SalesProbability
func (a *SalesProbabilitiesAPIService) GetSalesProbabilitiesByIdExecute(r ApiGetSalesProbabilitiesByIdRequest) (*SalesProbability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesProbability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.GetSalesProbabilitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesProbabilitiesCountRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) Conditions(conditions string) ApiGetSalesProbabilitiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) ChildConditions(childConditions string) ApiGetSalesProbabilitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesProbabilitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) OrderBy(orderBy string) ApiGetSalesProbabilitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) Fields(fields string) ApiGetSalesProbabilitiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) Page(page int32) ApiGetSalesProbabilitiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) PageSize(pageSize int32) ApiGetSalesProbabilitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) PageId(pageId int32) ApiGetSalesProbabilitiesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSalesProbabilitiesCountRequest) ClientId(clientId string) ApiGetSalesProbabilitiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesProbabilitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesProbabilitiesCountExecute(r)
}

/*
GetSalesProbabilitiesCount Get Count of SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSalesProbabilitiesCountRequest
*/
func (a *SalesProbabilitiesAPIService) GetSalesProbabilitiesCount(ctx context.Context) ApiGetSalesProbabilitiesCountRequest {
	return ApiGetSalesProbabilitiesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SalesProbabilitiesAPIService) GetSalesProbabilitiesCountExecute(r ApiGetSalesProbabilitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.GetSalesProbabilitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesProbabilitiesByIdRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSalesProbabilitiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesProbabilitiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSalesProbabilitiesByIdRequest) ClientId(clientId string) ApiPatchSalesProbabilitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSalesProbabilitiesByIdRequest) Execute() (*SalesProbability, *http.Response, error) {
	return r.ApiService.PatchSalesProbabilitiesByIdExecute(r)
}

/*
PatchSalesProbabilitiesById Patch SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id probabilityId
 @return ApiPatchSalesProbabilitiesByIdRequest
*/
func (a *SalesProbabilitiesAPIService) PatchSalesProbabilitiesById(ctx context.Context, id int32) ApiPatchSalesProbabilitiesByIdRequest {
	return ApiPatchSalesProbabilitiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SalesProbability
func (a *SalesProbabilitiesAPIService) PatchSalesProbabilitiesByIdExecute(r ApiPatchSalesProbabilitiesByIdRequest) (*SalesProbability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesProbability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.PatchSalesProbabilitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesProbabilitiesRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	salesProbability *SalesProbability
	clientId *string
}

// probability
func (r ApiPostSalesProbabilitiesRequest) SalesProbability(salesProbability SalesProbability) ApiPostSalesProbabilitiesRequest {
	r.salesProbability = &salesProbability
	return r
}

// 
func (r ApiPostSalesProbabilitiesRequest) ClientId(clientId string) ApiPostSalesProbabilitiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSalesProbabilitiesRequest) Execute() (*SalesProbability, *http.Response, error) {
	return r.ApiService.PostSalesProbabilitiesExecute(r)
}

/*
PostSalesProbabilities Post SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSalesProbabilitiesRequest
*/
func (a *SalesProbabilitiesAPIService) PostSalesProbabilities(ctx context.Context) ApiPostSalesProbabilitiesRequest {
	return ApiPostSalesProbabilitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SalesProbability
func (a *SalesProbabilitiesAPIService) PostSalesProbabilitiesExecute(r ApiPostSalesProbabilitiesRequest) (*SalesProbability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesProbability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.PostSalesProbabilities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.salesProbability == nil {
		return localVarReturnValue, nil, reportError("salesProbability is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.salesProbability
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesProbabilitiesByIdRequest struct {
	ctx context.Context
	ApiService *SalesProbabilitiesAPIService
	id int32
	salesProbability *SalesProbability
	clientId *string
}

// probability
func (r ApiPutSalesProbabilitiesByIdRequest) SalesProbability(salesProbability SalesProbability) ApiPutSalesProbabilitiesByIdRequest {
	r.salesProbability = &salesProbability
	return r
}

// 
func (r ApiPutSalesProbabilitiesByIdRequest) ClientId(clientId string) ApiPutSalesProbabilitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSalesProbabilitiesByIdRequest) Execute() (*SalesProbability, *http.Response, error) {
	return r.ApiService.PutSalesProbabilitiesByIdExecute(r)
}

/*
PutSalesProbabilitiesById Put SalesProbability

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id probabilityId
 @return ApiPutSalesProbabilitiesByIdRequest
*/
func (a *SalesProbabilitiesAPIService) PutSalesProbabilitiesById(ctx context.Context, id int32) ApiPutSalesProbabilitiesByIdRequest {
	return ApiPutSalesProbabilitiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SalesProbability
func (a *SalesProbabilitiesAPIService) PutSalesProbabilitiesByIdExecute(r ApiPutSalesProbabilitiesByIdRequest) (*SalesProbability, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SalesProbability
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SalesProbabilitiesAPIService.PutSalesProbabilitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/probabilities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.salesProbability == nil {
		return localVarReturnValue, nil, reportError("salesProbability is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.salesProbability
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
