/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleColorsAPIService ScheduleColorsAPI service
type ScheduleColorsAPIService service

type ApiGetScheduleColorsRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleColorsRequest) Conditions(conditions string) ApiGetScheduleColorsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleColorsRequest) ChildConditions(childConditions string) ApiGetScheduleColorsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleColorsRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleColorsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleColorsRequest) OrderBy(orderBy string) ApiGetScheduleColorsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleColorsRequest) Fields(fields string) ApiGetScheduleColorsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleColorsRequest) Page(page int32) ApiGetScheduleColorsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleColorsRequest) PageSize(pageSize int32) ApiGetScheduleColorsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleColorsRequest) PageId(pageId int32) ApiGetScheduleColorsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleColorsRequest) ClientId(clientId string) ApiGetScheduleColorsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleColorsRequest) Execute() ([]ScheduleColor, *http.Response, error) {
	return r.ApiService.GetScheduleColorsExecute(r)
}

/*
GetScheduleColors Get List of ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleColorsRequest
*/
func (a *ScheduleColorsAPIService) GetScheduleColors(ctx context.Context) ApiGetScheduleColorsRequest {
	return ApiGetScheduleColorsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleColor
func (a *ScheduleColorsAPIService) GetScheduleColorsExecute(r ApiGetScheduleColorsRequest) ([]ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.GetScheduleColors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleColorsByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleColorsByIdRequest) Conditions(conditions string) ApiGetScheduleColorsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) ChildConditions(childConditions string) ApiGetScheduleColorsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleColorsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) OrderBy(orderBy string) ApiGetScheduleColorsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) Fields(fields string) ApiGetScheduleColorsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) Page(page int32) ApiGetScheduleColorsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) PageSize(pageSize int32) ApiGetScheduleColorsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) PageId(pageId int32) ApiGetScheduleColorsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleColorsByIdRequest) ClientId(clientId string) ApiGetScheduleColorsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleColorsByIdRequest) Execute() (*ScheduleColor, *http.Response, error) {
	return r.ApiService.GetScheduleColorsByIdExecute(r)
}

/*
GetScheduleColorsById Get ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id colorId
 @return ApiGetScheduleColorsByIdRequest
*/
func (a *ScheduleColorsAPIService) GetScheduleColorsById(ctx context.Context, id int32) ApiGetScheduleColorsByIdRequest {
	return ApiGetScheduleColorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleColor
func (a *ScheduleColorsAPIService) GetScheduleColorsByIdExecute(r ApiGetScheduleColorsByIdRequest) (*ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.GetScheduleColorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleColorsCountRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleColorsCountRequest) Conditions(conditions string) ApiGetScheduleColorsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) ChildConditions(childConditions string) ApiGetScheduleColorsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleColorsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) OrderBy(orderBy string) ApiGetScheduleColorsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) Fields(fields string) ApiGetScheduleColorsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) Page(page int32) ApiGetScheduleColorsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) PageSize(pageSize int32) ApiGetScheduleColorsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) PageId(pageId int32) ApiGetScheduleColorsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleColorsCountRequest) ClientId(clientId string) ApiGetScheduleColorsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleColorsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleColorsCountExecute(r)
}

/*
GetScheduleColorsCount Get Count of ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleColorsCountRequest
*/
func (a *ScheduleColorsAPIService) GetScheduleColorsCount(ctx context.Context) ApiGetScheduleColorsCountRequest {
	return ApiGetScheduleColorsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleColorsAPIService) GetScheduleColorsCountExecute(r ApiGetScheduleColorsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.GetScheduleColorsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleColorsByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchScheduleColorsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleColorsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchScheduleColorsByIdRequest) ClientId(clientId string) ApiPatchScheduleColorsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchScheduleColorsByIdRequest) Execute() (*ScheduleColor, *http.Response, error) {
	return r.ApiService.PatchScheduleColorsByIdExecute(r)
}

/*
PatchScheduleColorsById Patch ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id colorId
 @return ApiPatchScheduleColorsByIdRequest
*/
func (a *ScheduleColorsAPIService) PatchScheduleColorsById(ctx context.Context, id int32) ApiPatchScheduleColorsByIdRequest {
	return ApiPatchScheduleColorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleColor
func (a *ScheduleColorsAPIService) PatchScheduleColorsByIdExecute(r ApiPatchScheduleColorsByIdRequest) (*ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.PatchScheduleColorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleColorsByIdClearRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostScheduleColorsByIdClearRequest) ClientId(clientId string) ApiPostScheduleColorsByIdClearRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleColorsByIdClearRequest) Execute() (*ScheduleColor, *http.Response, error) {
	return r.ApiService.PostScheduleColorsByIdClearExecute(r)
}

/*
PostScheduleColorsByIdClear Post ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id colorId
 @return ApiPostScheduleColorsByIdClearRequest
*/
func (a *ScheduleColorsAPIService) PostScheduleColorsByIdClear(ctx context.Context, id int32) ApiPostScheduleColorsByIdClearRequest {
	return ApiPostScheduleColorsByIdClearRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleColor
func (a *ScheduleColorsAPIService) PostScheduleColorsByIdClearExecute(r ApiPostScheduleColorsByIdClearRequest) (*ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.PostScheduleColorsByIdClear")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/{id}/clear"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleColorsResetRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	clientId *string
}

// 
func (r ApiPostScheduleColorsResetRequest) ClientId(clientId string) ApiPostScheduleColorsResetRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleColorsResetRequest) Execute() ([]ScheduleColor, *http.Response, error) {
	return r.ApiService.PostScheduleColorsResetExecute(r)
}

/*
PostScheduleColorsReset Post List of ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostScheduleColorsResetRequest
*/
func (a *ScheduleColorsAPIService) PostScheduleColorsReset(ctx context.Context) ApiPostScheduleColorsResetRequest {
	return ApiPostScheduleColorsResetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleColor
func (a *ScheduleColorsAPIService) PostScheduleColorsResetExecute(r ApiPostScheduleColorsResetRequest) ([]ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.PostScheduleColorsReset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/reset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleColorsByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleColorsAPIService
	id int32
	scheduleColor *ScheduleColor
	clientId *string
}

// scheduleColor
func (r ApiPutScheduleColorsByIdRequest) ScheduleColor(scheduleColor ScheduleColor) ApiPutScheduleColorsByIdRequest {
	r.scheduleColor = &scheduleColor
	return r
}

// 
func (r ApiPutScheduleColorsByIdRequest) ClientId(clientId string) ApiPutScheduleColorsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutScheduleColorsByIdRequest) Execute() (*ScheduleColor, *http.Response, error) {
	return r.ApiService.PutScheduleColorsByIdExecute(r)
}

/*
PutScheduleColorsById Put ScheduleColor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id colorId
 @return ApiPutScheduleColorsByIdRequest
*/
func (a *ScheduleColorsAPIService) PutScheduleColorsById(ctx context.Context, id int32) ApiPutScheduleColorsByIdRequest {
	return ApiPutScheduleColorsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleColor
func (a *ScheduleColorsAPIService) PutScheduleColorsByIdExecute(r ApiPutScheduleColorsByIdRequest) (*ScheduleColor, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleColor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleColorsAPIService.PutScheduleColorsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/colors/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scheduleColor == nil {
		return localVarReturnValue, nil, reportError("scheduleColor is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.scheduleColor
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
