/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleEntriesAPIService ScheduleEntriesAPI service
type ScheduleEntriesAPIService service

type ApiDeleteScheduleEntriesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteScheduleEntriesByIdRequest) ClientId(clientId string) ApiDeleteScheduleEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleEntriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleEntriesByIdExecute(r)
}

/*
DeleteScheduleEntriesById Delete ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiDeleteScheduleEntriesByIdRequest
*/
func (a *ScheduleEntriesAPIService) DeleteScheduleEntriesById(ctx context.Context, id int32) ApiDeleteScheduleEntriesByIdRequest {
	return ApiDeleteScheduleEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ScheduleEntriesAPIService) DeleteScheduleEntriesByIdExecute(r ApiDeleteScheduleEntriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.DeleteScheduleEntriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteScheduleEntriesByIdByNotifyResourceRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	id int32
	notifyResource string
	clientId *string
}

// 
func (r ApiDeleteScheduleEntriesByIdByNotifyResourceRequest) ClientId(clientId string) ApiDeleteScheduleEntriesByIdByNotifyResourceRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleEntriesByIdByNotifyResourceRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleEntriesByIdByNotifyResourceExecute(r)
}

/*
DeleteScheduleEntriesByIdByNotifyResource Delete ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @param notifyResource notifyResource
 @return ApiDeleteScheduleEntriesByIdByNotifyResourceRequest
*/
func (a *ScheduleEntriesAPIService) DeleteScheduleEntriesByIdByNotifyResource(ctx context.Context, id int32, notifyResource string) ApiDeleteScheduleEntriesByIdByNotifyResourceRequest {
	return ApiDeleteScheduleEntriesByIdByNotifyResourceRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		notifyResource: notifyResource,
	}
}

// Execute executes the request
func (a *ScheduleEntriesAPIService) DeleteScheduleEntriesByIdByNotifyResourceExecute(r ApiDeleteScheduleEntriesByIdByNotifyResourceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.DeleteScheduleEntriesByIdByNotifyResource")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/{id}/{notifyResource}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"notifyResource"+"}", url.PathEscape(parameterValueToString(r.notifyResource, "notifyResource")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScheduleEntriesRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleEntriesRequest) Conditions(conditions string) ApiGetScheduleEntriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) ChildConditions(childConditions string) ApiGetScheduleEntriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleEntriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) OrderBy(orderBy string) ApiGetScheduleEntriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) Fields(fields string) ApiGetScheduleEntriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) Page(page int32) ApiGetScheduleEntriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) PageSize(pageSize int32) ApiGetScheduleEntriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) PageId(pageId int32) ApiGetScheduleEntriesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleEntriesRequest) ClientId(clientId string) ApiGetScheduleEntriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleEntriesRequest) Execute() ([]ScheduleEntry, *http.Response, error) {
	return r.ApiService.GetScheduleEntriesExecute(r)
}

/*
GetScheduleEntries Get List of ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleEntriesRequest
*/
func (a *ScheduleEntriesAPIService) GetScheduleEntries(ctx context.Context) ApiGetScheduleEntriesRequest {
	return ApiGetScheduleEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleEntry
func (a *ScheduleEntriesAPIService) GetScheduleEntriesExecute(r ApiGetScheduleEntriesRequest) ([]ScheduleEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.GetScheduleEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleEntriesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleEntriesByIdRequest) Conditions(conditions string) ApiGetScheduleEntriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) ChildConditions(childConditions string) ApiGetScheduleEntriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleEntriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) OrderBy(orderBy string) ApiGetScheduleEntriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) Fields(fields string) ApiGetScheduleEntriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) Page(page int32) ApiGetScheduleEntriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) PageSize(pageSize int32) ApiGetScheduleEntriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) PageId(pageId int32) ApiGetScheduleEntriesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleEntriesByIdRequest) ClientId(clientId string) ApiGetScheduleEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleEntriesByIdRequest) Execute() (*ScheduleEntry, *http.Response, error) {
	return r.ApiService.GetScheduleEntriesByIdExecute(r)
}

/*
GetScheduleEntriesById Get ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiGetScheduleEntriesByIdRequest
*/
func (a *ScheduleEntriesAPIService) GetScheduleEntriesById(ctx context.Context, id int32) ApiGetScheduleEntriesByIdRequest {
	return ApiGetScheduleEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleEntry
func (a *ScheduleEntriesAPIService) GetScheduleEntriesByIdExecute(r ApiGetScheduleEntriesByIdRequest) (*ScheduleEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.GetScheduleEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleEntriesCountRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetScheduleEntriesCountRequest) Conditions(conditions string) ApiGetScheduleEntriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) ChildConditions(childConditions string) ApiGetScheduleEntriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleEntriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) OrderBy(orderBy string) ApiGetScheduleEntriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) Fields(fields string) ApiGetScheduleEntriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) Page(page int32) ApiGetScheduleEntriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) PageSize(pageSize int32) ApiGetScheduleEntriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) PageId(pageId int32) ApiGetScheduleEntriesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetScheduleEntriesCountRequest) ClientId(clientId string) ApiGetScheduleEntriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleEntriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleEntriesCountExecute(r)
}

/*
GetScheduleEntriesCount Get Count of ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleEntriesCountRequest
*/
func (a *ScheduleEntriesAPIService) GetScheduleEntriesCount(ctx context.Context) ApiGetScheduleEntriesCountRequest {
	return ApiGetScheduleEntriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleEntriesAPIService) GetScheduleEntriesCountExecute(r ApiGetScheduleEntriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.GetScheduleEntriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleEntriesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchScheduleEntriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleEntriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchScheduleEntriesByIdRequest) ClientId(clientId string) ApiPatchScheduleEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchScheduleEntriesByIdRequest) Execute() (*ScheduleEntry, *http.Response, error) {
	return r.ApiService.PatchScheduleEntriesByIdExecute(r)
}

/*
PatchScheduleEntriesById Patch ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiPatchScheduleEntriesByIdRequest
*/
func (a *ScheduleEntriesAPIService) PatchScheduleEntriesById(ctx context.Context, id int32) ApiPatchScheduleEntriesByIdRequest {
	return ApiPatchScheduleEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleEntry
func (a *ScheduleEntriesAPIService) PatchScheduleEntriesByIdExecute(r ApiPatchScheduleEntriesByIdRequest) (*ScheduleEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.PatchScheduleEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleEntriesRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	scheduleEntry *ScheduleEntry
	clientId *string
}

// scheduleEntry
func (r ApiPostScheduleEntriesRequest) ScheduleEntry(scheduleEntry ScheduleEntry) ApiPostScheduleEntriesRequest {
	r.scheduleEntry = &scheduleEntry
	return r
}

// 
func (r ApiPostScheduleEntriesRequest) ClientId(clientId string) ApiPostScheduleEntriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleEntriesRequest) Execute() (*ScheduleEntry, *http.Response, error) {
	return r.ApiService.PostScheduleEntriesExecute(r)
}

/*
PostScheduleEntries Post ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostScheduleEntriesRequest
*/
func (a *ScheduleEntriesAPIService) PostScheduleEntries(ctx context.Context) ApiPostScheduleEntriesRequest {
	return ApiPostScheduleEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScheduleEntry
func (a *ScheduleEntriesAPIService) PostScheduleEntriesExecute(r ApiPostScheduleEntriesRequest) (*ScheduleEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.PostScheduleEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scheduleEntry == nil {
		return localVarReturnValue, nil, reportError("scheduleEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.scheduleEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleEntriesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleEntriesAPIService
	id int32
	scheduleEntry *ScheduleEntry
	clientId *string
}

// scheduleEntry
func (r ApiPutScheduleEntriesByIdRequest) ScheduleEntry(scheduleEntry ScheduleEntry) ApiPutScheduleEntriesByIdRequest {
	r.scheduleEntry = &scheduleEntry
	return r
}

// 
func (r ApiPutScheduleEntriesByIdRequest) ClientId(clientId string) ApiPutScheduleEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutScheduleEntriesByIdRequest) Execute() (*ScheduleEntry, *http.Response, error) {
	return r.ApiService.PutScheduleEntriesByIdExecute(r)
}

/*
PutScheduleEntriesById Put ScheduleEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiPutScheduleEntriesByIdRequest
*/
func (a *ScheduleEntriesAPIService) PutScheduleEntriesById(ctx context.Context, id int32) ApiPutScheduleEntriesByIdRequest {
	return ApiPutScheduleEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleEntry
func (a *ScheduleEntriesAPIService) PutScheduleEntriesByIdExecute(r ApiPutScheduleEntriesByIdRequest) (*ScheduleEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleEntriesAPIService.PutScheduleEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.scheduleEntry == nil {
		return localVarReturnValue, nil, reportError("scheduleEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.scheduleEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
