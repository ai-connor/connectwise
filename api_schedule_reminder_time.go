/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleReminderTimeAPIService ScheduleReminderTimeAPI service
type ScheduleReminderTimeAPIService service

type ApiGetScheduleReminderTimesRequest struct {
	ctx context.Context
	ApiService *ScheduleReminderTimeAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleReminderTimesRequest) ClientId(clientId string) ApiGetScheduleReminderTimesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) Conditions(conditions string) ApiGetScheduleReminderTimesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) ChildConditions(childConditions string) ApiGetScheduleReminderTimesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleReminderTimesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) OrderBy(orderBy string) ApiGetScheduleReminderTimesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) Fields(fields string) ApiGetScheduleReminderTimesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) Page(page int32) ApiGetScheduleReminderTimesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) PageSize(pageSize int32) ApiGetScheduleReminderTimesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleReminderTimesRequest) PageId(pageId int32) ApiGetScheduleReminderTimesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleReminderTimesRequest) Execute() ([]ScheduleReminderTime, *http.Response, error) {
	return r.ApiService.GetScheduleReminderTimesExecute(r)
}

/*
GetScheduleReminderTimes Get List of ScheduleReminderTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleReminderTimesRequest
*/
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimes(ctx context.Context) ApiGetScheduleReminderTimesRequest {
	return ApiGetScheduleReminderTimesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleReminderTime
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimesExecute(r ApiGetScheduleReminderTimesRequest) ([]ScheduleReminderTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleReminderTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleReminderTimeAPIService.GetScheduleReminderTimes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/reminderTimes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleReminderTimesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleReminderTimeAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) ClientId(clientId string) ApiGetScheduleReminderTimesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) Conditions(conditions string) ApiGetScheduleReminderTimesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) ChildConditions(childConditions string) ApiGetScheduleReminderTimesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleReminderTimesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) OrderBy(orderBy string) ApiGetScheduleReminderTimesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) Fields(fields string) ApiGetScheduleReminderTimesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) Page(page int32) ApiGetScheduleReminderTimesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) PageSize(pageSize int32) ApiGetScheduleReminderTimesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleReminderTimesByIdRequest) PageId(pageId int32) ApiGetScheduleReminderTimesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleReminderTimesByIdRequest) Execute() (*ScheduleReminderTime, *http.Response, error) {
	return r.ApiService.GetScheduleReminderTimesByIdExecute(r)
}

/*
GetScheduleReminderTimesById Get ScheduleReminderTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reminderTimeId
 @return ApiGetScheduleReminderTimesByIdRequest
*/
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimesById(ctx context.Context, id int32) ApiGetScheduleReminderTimesByIdRequest {
	return ApiGetScheduleReminderTimesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleReminderTime
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimesByIdExecute(r ApiGetScheduleReminderTimesByIdRequest) (*ScheduleReminderTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleReminderTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleReminderTimeAPIService.GetScheduleReminderTimesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/reminderTimes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleReminderTimesCountRequest struct {
	ctx context.Context
	ApiService *ScheduleReminderTimeAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) ClientId(clientId string) ApiGetScheduleReminderTimesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) Conditions(conditions string) ApiGetScheduleReminderTimesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) ChildConditions(childConditions string) ApiGetScheduleReminderTimesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleReminderTimesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) OrderBy(orderBy string) ApiGetScheduleReminderTimesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) Fields(fields string) ApiGetScheduleReminderTimesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) Page(page int32) ApiGetScheduleReminderTimesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) PageSize(pageSize int32) ApiGetScheduleReminderTimesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleReminderTimesCountRequest) PageId(pageId int32) ApiGetScheduleReminderTimesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleReminderTimesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleReminderTimesCountExecute(r)
}

/*
GetScheduleReminderTimesCount Get Count of ScheduleReminderTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleReminderTimesCountRequest
*/
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimesCount(ctx context.Context) ApiGetScheduleReminderTimesCountRequest {
	return ApiGetScheduleReminderTimesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleReminderTimeAPIService) GetScheduleReminderTimesCountExecute(r ApiGetScheduleReminderTimesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleReminderTimeAPIService.GetScheduleReminderTimesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/reminderTimes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleReminderTimesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleReminderTimeAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchScheduleReminderTimesByIdRequest) ClientId(clientId string) ApiPatchScheduleReminderTimesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchScheduleReminderTimesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleReminderTimesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchScheduleReminderTimesByIdRequest) Execute() (*ScheduleReminderTime, *http.Response, error) {
	return r.ApiService.PatchScheduleReminderTimesByIdExecute(r)
}

/*
PatchScheduleReminderTimesById Patch ScheduleReminderTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reminderTimeId
 @return ApiPatchScheduleReminderTimesByIdRequest
*/
func (a *ScheduleReminderTimeAPIService) PatchScheduleReminderTimesById(ctx context.Context, id int32) ApiPatchScheduleReminderTimesByIdRequest {
	return ApiPatchScheduleReminderTimesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleReminderTime
func (a *ScheduleReminderTimeAPIService) PatchScheduleReminderTimesByIdExecute(r ApiPatchScheduleReminderTimesByIdRequest) (*ScheduleReminderTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleReminderTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleReminderTimeAPIService.PatchScheduleReminderTimesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/reminderTimes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleReminderTimesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleReminderTimeAPIService
	id int32
	clientId *string
	scheduleReminderTime *ScheduleReminderTime
}

// 
func (r ApiPutScheduleReminderTimesByIdRequest) ClientId(clientId string) ApiPutScheduleReminderTimesByIdRequest {
	r.clientId = &clientId
	return r
}

// reminderTime
func (r ApiPutScheduleReminderTimesByIdRequest) ScheduleReminderTime(scheduleReminderTime ScheduleReminderTime) ApiPutScheduleReminderTimesByIdRequest {
	r.scheduleReminderTime = &scheduleReminderTime
	return r
}

func (r ApiPutScheduleReminderTimesByIdRequest) Execute() (*ScheduleReminderTime, *http.Response, error) {
	return r.ApiService.PutScheduleReminderTimesByIdExecute(r)
}

/*
PutScheduleReminderTimesById Put ScheduleReminderTime

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id reminderTimeId
 @return ApiPutScheduleReminderTimesByIdRequest
*/
func (a *ScheduleReminderTimeAPIService) PutScheduleReminderTimesById(ctx context.Context, id int32) ApiPutScheduleReminderTimesByIdRequest {
	return ApiPutScheduleReminderTimesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleReminderTime
func (a *ScheduleReminderTimeAPIService) PutScheduleReminderTimesByIdExecute(r ApiPutScheduleReminderTimesByIdRequest) (*ScheduleReminderTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleReminderTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleReminderTimeAPIService.PutScheduleReminderTimesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/reminderTimes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.scheduleReminderTime == nil {
		return localVarReturnValue, nil, reportError("scheduleReminderTime is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.scheduleReminderTime
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
