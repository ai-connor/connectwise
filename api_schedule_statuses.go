/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleStatusesAPIService ScheduleStatusesAPI service
type ScheduleStatusesAPIService service

type ApiDeleteScheduleStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteScheduleStatusesByIdRequest) ClientId(clientId string) ApiDeleteScheduleStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleStatusesByIdExecute(r)
}

/*
DeleteScheduleStatusesById Delete ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiDeleteScheduleStatusesByIdRequest
*/
func (a *ScheduleStatusesAPIService) DeleteScheduleStatusesById(ctx context.Context, id int32) ApiDeleteScheduleStatusesByIdRequest {
	return ApiDeleteScheduleStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ScheduleStatusesAPIService) DeleteScheduleStatusesByIdExecute(r ApiDeleteScheduleStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.DeleteScheduleStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScheduleStatusesRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleStatusesRequest) ClientId(clientId string) ApiGetScheduleStatusesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) Conditions(conditions string) ApiGetScheduleStatusesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) ChildConditions(childConditions string) ApiGetScheduleStatusesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) OrderBy(orderBy string) ApiGetScheduleStatusesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) Fields(fields string) ApiGetScheduleStatusesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) Page(page int32) ApiGetScheduleStatusesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) PageSize(pageSize int32) ApiGetScheduleStatusesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleStatusesRequest) PageId(pageId int32) ApiGetScheduleStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleStatusesRequest) Execute() ([]ScheduleStatus, *http.Response, error) {
	return r.ApiService.GetScheduleStatusesExecute(r)
}

/*
GetScheduleStatuses Get List of ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleStatusesRequest
*/
func (a *ScheduleStatusesAPIService) GetScheduleStatuses(ctx context.Context) ApiGetScheduleStatusesRequest {
	return ApiGetScheduleStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleStatus
func (a *ScheduleStatusesAPIService) GetScheduleStatusesExecute(r ApiGetScheduleStatusesRequest) ([]ScheduleStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.GetScheduleStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleStatusesByIdRequest) ClientId(clientId string) ApiGetScheduleStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) Conditions(conditions string) ApiGetScheduleStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) ChildConditions(childConditions string) ApiGetScheduleStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) OrderBy(orderBy string) ApiGetScheduleStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) Fields(fields string) ApiGetScheduleStatusesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) Page(page int32) ApiGetScheduleStatusesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) PageSize(pageSize int32) ApiGetScheduleStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleStatusesByIdRequest) PageId(pageId int32) ApiGetScheduleStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleStatusesByIdRequest) Execute() (*ScheduleStatus, *http.Response, error) {
	return r.ApiService.GetScheduleStatusesByIdExecute(r)
}

/*
GetScheduleStatusesById Get ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiGetScheduleStatusesByIdRequest
*/
func (a *ScheduleStatusesAPIService) GetScheduleStatusesById(ctx context.Context, id int32) ApiGetScheduleStatusesByIdRequest {
	return ApiGetScheduleStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStatus
func (a *ScheduleStatusesAPIService) GetScheduleStatusesByIdExecute(r ApiGetScheduleStatusesByIdRequest) (*ScheduleStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.GetScheduleStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleStatusesCountRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleStatusesCountRequest) ClientId(clientId string) ApiGetScheduleStatusesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) Conditions(conditions string) ApiGetScheduleStatusesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) ChildConditions(childConditions string) ApiGetScheduleStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) OrderBy(orderBy string) ApiGetScheduleStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) Fields(fields string) ApiGetScheduleStatusesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) Page(page int32) ApiGetScheduleStatusesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) PageSize(pageSize int32) ApiGetScheduleStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleStatusesCountRequest) PageId(pageId int32) ApiGetScheduleStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleStatusesCountExecute(r)
}

/*
GetScheduleStatusesCount Get Count of ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleStatusesCountRequest
*/
func (a *ScheduleStatusesAPIService) GetScheduleStatusesCount(ctx context.Context) ApiGetScheduleStatusesCountRequest {
	return ApiGetScheduleStatusesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleStatusesAPIService) GetScheduleStatusesCountExecute(r ApiGetScheduleStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.GetScheduleStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchScheduleStatusesByIdRequest) ClientId(clientId string) ApiPatchScheduleStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchScheduleStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchScheduleStatusesByIdRequest) Execute() (*ScheduleStatus, *http.Response, error) {
	return r.ApiService.PatchScheduleStatusesByIdExecute(r)
}

/*
PatchScheduleStatusesById Patch ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPatchScheduleStatusesByIdRequest
*/
func (a *ScheduleStatusesAPIService) PatchScheduleStatusesById(ctx context.Context, id int32) ApiPatchScheduleStatusesByIdRequest {
	return ApiPatchScheduleStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStatus
func (a *ScheduleStatusesAPIService) PatchScheduleStatusesByIdExecute(r ApiPatchScheduleStatusesByIdRequest) (*ScheduleStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.PatchScheduleStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleStatusesRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	clientId *string
	scheduleStatus *ScheduleStatus
}

// 
func (r ApiPostScheduleStatusesRequest) ClientId(clientId string) ApiPostScheduleStatusesRequest {
	r.clientId = &clientId
	return r
}

// scheduleStatus
func (r ApiPostScheduleStatusesRequest) ScheduleStatus(scheduleStatus ScheduleStatus) ApiPostScheduleStatusesRequest {
	r.scheduleStatus = &scheduleStatus
	return r
}

func (r ApiPostScheduleStatusesRequest) Execute() (*ScheduleStatus, *http.Response, error) {
	return r.ApiService.PostScheduleStatusesExecute(r)
}

/*
PostScheduleStatuses Post ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostScheduleStatusesRequest
*/
func (a *ScheduleStatusesAPIService) PostScheduleStatuses(ctx context.Context) ApiPostScheduleStatusesRequest {
	return ApiPostScheduleStatusesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScheduleStatus
func (a *ScheduleStatusesAPIService) PostScheduleStatusesExecute(r ApiPostScheduleStatusesRequest) (*ScheduleStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.PostScheduleStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.scheduleStatus == nil {
		return localVarReturnValue, nil, reportError("scheduleStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.scheduleStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleStatusesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStatusesAPIService
	id int32
	clientId *string
	scheduleStatus *ScheduleStatus
}

// 
func (r ApiPutScheduleStatusesByIdRequest) ClientId(clientId string) ApiPutScheduleStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// scheduleStatus
func (r ApiPutScheduleStatusesByIdRequest) ScheduleStatus(scheduleStatus ScheduleStatus) ApiPutScheduleStatusesByIdRequest {
	r.scheduleStatus = &scheduleStatus
	return r
}

func (r ApiPutScheduleStatusesByIdRequest) Execute() (*ScheduleStatus, *http.Response, error) {
	return r.ApiService.PutScheduleStatusesByIdExecute(r)
}

/*
PutScheduleStatusesById Put ScheduleStatus

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id statusId
 @return ApiPutScheduleStatusesByIdRequest
*/
func (a *ScheduleStatusesAPIService) PutScheduleStatusesById(ctx context.Context, id int32) ApiPutScheduleStatusesByIdRequest {
	return ApiPutScheduleStatusesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStatus
func (a *ScheduleStatusesAPIService) PutScheduleStatusesByIdExecute(r ApiPutScheduleStatusesByIdRequest) (*ScheduleStatus, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStatusesAPIService.PutScheduleStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.scheduleStatus == nil {
		return localVarReturnValue, nil, reportError("scheduleStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.scheduleStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
