/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleStopwatchAPIService ScheduleStopwatchAPI service
type ScheduleStopwatchAPIService service

type ApiDeleteTimeSchedulestopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeSchedulestopwatchesByIdRequest) ClientId(clientId string) ApiDeleteTimeSchedulestopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeSchedulestopwatchesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeSchedulestopwatchesByIdExecute(r)
}

/*
DeleteTimeSchedulestopwatchesById Delete ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id schedulestopwatcheId
 @return ApiDeleteTimeSchedulestopwatchesByIdRequest
*/
func (a *ScheduleStopwatchAPIService) DeleteTimeSchedulestopwatchesById(ctx context.Context, id int32) ApiDeleteTimeSchedulestopwatchesByIdRequest {
	return ApiDeleteTimeSchedulestopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ScheduleStopwatchAPIService) DeleteTimeSchedulestopwatchesByIdExecute(r ApiDeleteTimeSchedulestopwatchesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.DeleteTimeSchedulestopwatchesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeSchedulestopwatchesRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) ClientId(clientId string) ApiGetTimeSchedulestopwatchesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) Conditions(conditions string) ApiGetTimeSchedulestopwatchesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) ChildConditions(childConditions string) ApiGetTimeSchedulestopwatchesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeSchedulestopwatchesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) OrderBy(orderBy string) ApiGetTimeSchedulestopwatchesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) Fields(fields string) ApiGetTimeSchedulestopwatchesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) Page(page int32) ApiGetTimeSchedulestopwatchesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) PageSize(pageSize int32) ApiGetTimeSchedulestopwatchesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesRequest) PageId(pageId int32) ApiGetTimeSchedulestopwatchesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeSchedulestopwatchesRequest) Execute() ([]ScheduleStopwatch, *http.Response, error) {
	return r.ApiService.GetTimeSchedulestopwatchesExecute(r)
}

/*
GetTimeSchedulestopwatches Get List of ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeSchedulestopwatchesRequest
*/
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatches(ctx context.Context) ApiGetTimeSchedulestopwatchesRequest {
	return ApiGetTimeSchedulestopwatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleStopwatch
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatchesExecute(r ApiGetTimeSchedulestopwatchesRequest) ([]ScheduleStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.GetTimeSchedulestopwatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeSchedulestopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) ClientId(clientId string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) Conditions(conditions string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) ChildConditions(childConditions string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) OrderBy(orderBy string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) Fields(fields string) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) Page(page int32) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) PageSize(pageSize int32) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesByIdRequest) PageId(pageId int32) ApiGetTimeSchedulestopwatchesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeSchedulestopwatchesByIdRequest) Execute() (*ScheduleStopwatch, *http.Response, error) {
	return r.ApiService.GetTimeSchedulestopwatchesByIdExecute(r)
}

/*
GetTimeSchedulestopwatchesById Get ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id schedulestopwatcheId
 @return ApiGetTimeSchedulestopwatchesByIdRequest
*/
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatchesById(ctx context.Context, id int32) ApiGetTimeSchedulestopwatchesByIdRequest {
	return ApiGetTimeSchedulestopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStopwatch
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatchesByIdExecute(r ApiGetTimeSchedulestopwatchesByIdRequest) (*ScheduleStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.GetTimeSchedulestopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeSchedulestopwatchesCountRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) ClientId(clientId string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) Conditions(conditions string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) ChildConditions(childConditions string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) OrderBy(orderBy string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) Fields(fields string) ApiGetTimeSchedulestopwatchesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) Page(page int32) ApiGetTimeSchedulestopwatchesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) PageSize(pageSize int32) ApiGetTimeSchedulestopwatchesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeSchedulestopwatchesCountRequest) PageId(pageId int32) ApiGetTimeSchedulestopwatchesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeSchedulestopwatchesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeSchedulestopwatchesCountExecute(r)
}

/*
GetTimeSchedulestopwatchesCount Get Count of ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeSchedulestopwatchesCountRequest
*/
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatchesCount(ctx context.Context) ApiGetTimeSchedulestopwatchesCountRequest {
	return ApiGetTimeSchedulestopwatchesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleStopwatchAPIService) GetTimeSchedulestopwatchesCountExecute(r ApiGetTimeSchedulestopwatchesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.GetTimeSchedulestopwatchesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeSchedulestopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeSchedulestopwatchesByIdRequest) ClientId(clientId string) ApiPatchTimeSchedulestopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeSchedulestopwatchesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeSchedulestopwatchesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeSchedulestopwatchesByIdRequest) Execute() (*ScheduleStopwatch, *http.Response, error) {
	return r.ApiService.PatchTimeSchedulestopwatchesByIdExecute(r)
}

/*
PatchTimeSchedulestopwatchesById Patch ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id schedulestopwatcheId
 @return ApiPatchTimeSchedulestopwatchesByIdRequest
*/
func (a *ScheduleStopwatchAPIService) PatchTimeSchedulestopwatchesById(ctx context.Context, id int32) ApiPatchTimeSchedulestopwatchesByIdRequest {
	return ApiPatchTimeSchedulestopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStopwatch
func (a *ScheduleStopwatchAPIService) PatchTimeSchedulestopwatchesByIdExecute(r ApiPatchTimeSchedulestopwatchesByIdRequest) (*ScheduleStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.PatchTimeSchedulestopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeSchedulestopwatchesRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	clientId *string
	scheduleStopwatch *ScheduleStopwatch
}

// 
func (r ApiPostTimeSchedulestopwatchesRequest) ClientId(clientId string) ApiPostTimeSchedulestopwatchesRequest {
	r.clientId = &clientId
	return r
}

// scheduleStopwatch
func (r ApiPostTimeSchedulestopwatchesRequest) ScheduleStopwatch(scheduleStopwatch ScheduleStopwatch) ApiPostTimeSchedulestopwatchesRequest {
	r.scheduleStopwatch = &scheduleStopwatch
	return r
}

func (r ApiPostTimeSchedulestopwatchesRequest) Execute() (*ScheduleStopwatch, *http.Response, error) {
	return r.ApiService.PostTimeSchedulestopwatchesExecute(r)
}

/*
PostTimeSchedulestopwatches Post ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeSchedulestopwatchesRequest
*/
func (a *ScheduleStopwatchAPIService) PostTimeSchedulestopwatches(ctx context.Context) ApiPostTimeSchedulestopwatchesRequest {
	return ApiPostTimeSchedulestopwatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ScheduleStopwatch
func (a *ScheduleStopwatchAPIService) PostTimeSchedulestopwatchesExecute(r ApiPostTimeSchedulestopwatchesRequest) (*ScheduleStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.PostTimeSchedulestopwatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.scheduleStopwatch == nil {
		return localVarReturnValue, nil, reportError("scheduleStopwatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.scheduleStopwatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeSchedulestopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *ScheduleStopwatchAPIService
	id int32
	clientId *string
	scheduleStopwatch *ScheduleStopwatch
}

// 
func (r ApiPutTimeSchedulestopwatchesByIdRequest) ClientId(clientId string) ApiPutTimeSchedulestopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// scheduleStopwatch
func (r ApiPutTimeSchedulestopwatchesByIdRequest) ScheduleStopwatch(scheduleStopwatch ScheduleStopwatch) ApiPutTimeSchedulestopwatchesByIdRequest {
	r.scheduleStopwatch = &scheduleStopwatch
	return r
}

func (r ApiPutTimeSchedulestopwatchesByIdRequest) Execute() (*ScheduleStopwatch, *http.Response, error) {
	return r.ApiService.PutTimeSchedulestopwatchesByIdExecute(r)
}

/*
PutTimeSchedulestopwatchesById Put ScheduleStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id schedulestopwatcheId
 @return ApiPutTimeSchedulestopwatchesByIdRequest
*/
func (a *ScheduleStopwatchAPIService) PutTimeSchedulestopwatchesById(ctx context.Context, id int32) ApiPutTimeSchedulestopwatchesByIdRequest {
	return ApiPutTimeSchedulestopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleStopwatch
func (a *ScheduleStopwatchAPIService) PutTimeSchedulestopwatchesByIdExecute(r ApiPutTimeSchedulestopwatchesByIdRequest) (*ScheduleStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleStopwatchAPIService.PutTimeSchedulestopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/schedulestopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.scheduleStopwatch == nil {
		return localVarReturnValue, nil, reportError("scheduleStopwatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.scheduleStopwatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
