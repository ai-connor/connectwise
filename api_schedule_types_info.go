/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ScheduleTypesInfoAPIService ScheduleTypesInfoAPI service
type ScheduleTypesInfoAPIService service

type ApiGetScheduleTypesByIdInfoRequest struct {
	ctx context.Context
	ApiService *ScheduleTypesInfoAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) ClientId(clientId string) ApiGetScheduleTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) Conditions(conditions string) ApiGetScheduleTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetScheduleTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetScheduleTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) Fields(fields string) ApiGetScheduleTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) Page(page int32) ApiGetScheduleTypesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetScheduleTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleTypesByIdInfoRequest) PageId(pageId int32) ApiGetScheduleTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleTypesByIdInfoRequest) Execute() (*ScheduleTypeInfo, *http.Response, error) {
	return r.ApiService.GetScheduleTypesByIdInfoExecute(r)
}

/*
GetScheduleTypesByIdInfo Get ScheduleTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id typeId
 @return ApiGetScheduleTypesByIdInfoRequest
*/
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesByIdInfo(ctx context.Context, id int32) ApiGetScheduleTypesByIdInfoRequest {
	return ApiGetScheduleTypesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduleTypeInfo
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesByIdInfoExecute(r ApiGetScheduleTypesByIdInfoRequest) (*ScheduleTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduleTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleTypesInfoAPIService.GetScheduleTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/types/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleTypesInfoRequest struct {
	ctx context.Context
	ApiService *ScheduleTypesInfoAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleTypesInfoRequest) ClientId(clientId string) ApiGetScheduleTypesInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) Conditions(conditions string) ApiGetScheduleTypesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) ChildConditions(childConditions string) ApiGetScheduleTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) OrderBy(orderBy string) ApiGetScheduleTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) Fields(fields string) ApiGetScheduleTypesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) Page(page int32) ApiGetScheduleTypesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) PageSize(pageSize int32) ApiGetScheduleTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleTypesInfoRequest) PageId(pageId int32) ApiGetScheduleTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleTypesInfoRequest) Execute() ([]ScheduleTypeInfo, *http.Response, error) {
	return r.ApiService.GetScheduleTypesInfoExecute(r)
}

/*
GetScheduleTypesInfo Get List of ScheduleTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleTypesInfoRequest
*/
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesInfo(ctx context.Context) ApiGetScheduleTypesInfoRequest {
	return ApiGetScheduleTypesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ScheduleTypeInfo
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesInfoExecute(r ApiGetScheduleTypesInfoRequest) ([]ScheduleTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleTypesInfoAPIService.GetScheduleTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/types/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleTypesInfoCountRequest struct {
	ctx context.Context
	ApiService *ScheduleTypesInfoAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) ClientId(clientId string) ApiGetScheduleTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) Conditions(conditions string) ApiGetScheduleTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetScheduleTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) OrderBy(orderBy string) ApiGetScheduleTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) Fields(fields string) ApiGetScheduleTypesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) Page(page int32) ApiGetScheduleTypesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) PageSize(pageSize int32) ApiGetScheduleTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetScheduleTypesInfoCountRequest) PageId(pageId int32) ApiGetScheduleTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetScheduleTypesInfoCountExecute(r)
}

/*
GetScheduleTypesInfoCount Get Count of ScheduleTypeInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetScheduleTypesInfoCountRequest
*/
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesInfoCount(ctx context.Context) ApiGetScheduleTypesInfoCountRequest {
	return ApiGetScheduleTypesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ScheduleTypesInfoAPIService) GetScheduleTypesInfoCountExecute(r ApiGetScheduleTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ScheduleTypesInfoAPIService.GetScheduleTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/types/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
