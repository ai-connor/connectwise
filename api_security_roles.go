/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SecurityRolesAPIService SecurityRolesAPI service
type SecurityRolesAPIService service

type ApiDeleteSystemSecurityrolesByIdRequest struct {
	ctx context.Context
	ApiService *SecurityRolesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemSecurityrolesByIdRequest) ClientId(clientId string) ApiDeleteSystemSecurityrolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemSecurityrolesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemSecurityrolesByIdExecute(r)
}

/*
DeleteSystemSecurityrolesById Delete SecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityroleId
 @return ApiDeleteSystemSecurityrolesByIdRequest
*/
func (a *SecurityRolesAPIService) DeleteSystemSecurityrolesById(ctx context.Context, id int32) ApiDeleteSystemSecurityrolesByIdRequest {
	return ApiDeleteSystemSecurityrolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SecurityRolesAPIService) DeleteSystemSecurityrolesByIdExecute(r ApiDeleteSystemSecurityrolesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityRolesAPIService.DeleteSystemSecurityrolesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/securityroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemSecurityrolesRequest struct {
	ctx context.Context
	ApiService *SecurityRolesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSecurityrolesRequest) Conditions(conditions string) ApiGetSystemSecurityrolesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) ChildConditions(childConditions string) ApiGetSystemSecurityrolesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSecurityrolesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) OrderBy(orderBy string) ApiGetSystemSecurityrolesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) Fields(fields string) ApiGetSystemSecurityrolesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) Page(page int32) ApiGetSystemSecurityrolesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) PageSize(pageSize int32) ApiGetSystemSecurityrolesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) PageId(pageId int32) ApiGetSystemSecurityrolesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSecurityrolesRequest) ClientId(clientId string) ApiGetSystemSecurityrolesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSecurityrolesRequest) Execute() ([]SecurityRole, *http.Response, error) {
	return r.ApiService.GetSystemSecurityrolesExecute(r)
}

/*
GetSystemSecurityroles Get List of SecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSecurityrolesRequest
*/
func (a *SecurityRolesAPIService) GetSystemSecurityroles(ctx context.Context) ApiGetSystemSecurityrolesRequest {
	return ApiGetSystemSecurityrolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SecurityRole
func (a *SecurityRolesAPIService) GetSystemSecurityrolesExecute(r ApiGetSystemSecurityrolesRequest) ([]SecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityRolesAPIService.GetSystemSecurityroles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/securityroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSecurityrolesByIdRequest struct {
	ctx context.Context
	ApiService *SecurityRolesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) Conditions(conditions string) ApiGetSystemSecurityrolesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) ChildConditions(childConditions string) ApiGetSystemSecurityrolesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSecurityrolesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) OrderBy(orderBy string) ApiGetSystemSecurityrolesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) Fields(fields string) ApiGetSystemSecurityrolesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) Page(page int32) ApiGetSystemSecurityrolesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) PageSize(pageSize int32) ApiGetSystemSecurityrolesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) PageId(pageId int32) ApiGetSystemSecurityrolesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSecurityrolesByIdRequest) ClientId(clientId string) ApiGetSystemSecurityrolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSecurityrolesByIdRequest) Execute() (*SecurityRole, *http.Response, error) {
	return r.ApiService.GetSystemSecurityrolesByIdExecute(r)
}

/*
GetSystemSecurityrolesById Get SecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id securityroleId
 @return ApiGetSystemSecurityrolesByIdRequest
*/
func (a *SecurityRolesAPIService) GetSystemSecurityrolesById(ctx context.Context, id int32) ApiGetSystemSecurityrolesByIdRequest {
	return ApiGetSystemSecurityrolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecurityRole
func (a *SecurityRolesAPIService) GetSystemSecurityrolesByIdExecute(r ApiGetSystemSecurityrolesByIdRequest) (*SecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityRolesAPIService.GetSystemSecurityrolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/securityroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSecurityrolesCountRequest struct {
	ctx context.Context
	ApiService *SecurityRolesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) Conditions(conditions string) ApiGetSystemSecurityrolesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) ChildConditions(childConditions string) ApiGetSystemSecurityrolesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSecurityrolesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) OrderBy(orderBy string) ApiGetSystemSecurityrolesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) Fields(fields string) ApiGetSystemSecurityrolesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) Page(page int32) ApiGetSystemSecurityrolesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) PageSize(pageSize int32) ApiGetSystemSecurityrolesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) PageId(pageId int32) ApiGetSystemSecurityrolesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSecurityrolesCountRequest) ClientId(clientId string) ApiGetSystemSecurityrolesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSecurityrolesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSecurityrolesCountExecute(r)
}

/*
GetSystemSecurityrolesCount Get Count of SecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSecurityrolesCountRequest
*/
func (a *SecurityRolesAPIService) GetSystemSecurityrolesCount(ctx context.Context) ApiGetSystemSecurityrolesCountRequest {
	return ApiGetSystemSecurityrolesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SecurityRolesAPIService) GetSystemSecurityrolesCountExecute(r ApiGetSystemSecurityrolesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityRolesAPIService.GetSystemSecurityrolesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/securityroles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSecurityrolesRequest struct {
	ctx context.Context
	ApiService *SecurityRolesAPIService
	securityRole *SecurityRole
	clientId *string
}

// securityRole
func (r ApiPostSystemSecurityrolesRequest) SecurityRole(securityRole SecurityRole) ApiPostSystemSecurityrolesRequest {
	r.securityRole = &securityRole
	return r
}

// 
func (r ApiPostSystemSecurityrolesRequest) ClientId(clientId string) ApiPostSystemSecurityrolesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemSecurityrolesRequest) Execute() (*SecurityRole, *http.Response, error) {
	return r.ApiService.PostSystemSecurityrolesExecute(r)
}

/*
PostSystemSecurityroles Post SecurityRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemSecurityrolesRequest
*/
func (a *SecurityRolesAPIService) PostSystemSecurityroles(ctx context.Context) ApiPostSystemSecurityrolesRequest {
	return ApiPostSystemSecurityrolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecurityRole
func (a *SecurityRolesAPIService) PostSystemSecurityrolesExecute(r ApiPostSystemSecurityrolesRequest) (*SecurityRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecurityRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SecurityRolesAPIService.PostSystemSecurityroles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/securityroles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.securityRole == nil {
		return localVarReturnValue, nil, reportError("securityRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.securityRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
