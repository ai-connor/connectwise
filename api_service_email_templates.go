/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ServiceEmailTemplatesAPIService ServiceEmailTemplatesAPI service
type ServiceEmailTemplatesAPIService service

type ApiDeleteServiceEmailTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiDeleteServiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceEmailTemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceEmailTemplatesByIdExecute(r)
}

/*
DeleteServiceEmailTemplatesById Delete ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiDeleteServiceEmailTemplatesByIdRequest
*/
func (a *ServiceEmailTemplatesAPIService) DeleteServiceEmailTemplatesById(ctx context.Context, id int32) ApiDeleteServiceEmailTemplatesByIdRequest {
	return ApiDeleteServiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ServiceEmailTemplatesAPIService) DeleteServiceEmailTemplatesByIdExecute(r ApiDeleteServiceEmailTemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.DeleteServiceEmailTemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceEmailTemplatesRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceEmailTemplatesRequest) ClientId(clientId string) ApiGetServiceEmailTemplatesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) Conditions(conditions string) ApiGetServiceEmailTemplatesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) ChildConditions(childConditions string) ApiGetServiceEmailTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceEmailTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) OrderBy(orderBy string) ApiGetServiceEmailTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) Fields(fields string) ApiGetServiceEmailTemplatesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) Page(page int32) ApiGetServiceEmailTemplatesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) PageSize(pageSize int32) ApiGetServiceEmailTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceEmailTemplatesRequest) PageId(pageId int32) ApiGetServiceEmailTemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceEmailTemplatesRequest) Execute() ([]ServiceEmailTemplate, *http.Response, error) {
	return r.ApiService.GetServiceEmailTemplatesExecute(r)
}

/*
GetServiceEmailTemplates Get List of ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceEmailTemplatesRequest
*/
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplates(ctx context.Context) ApiGetServiceEmailTemplatesRequest {
	return ApiGetServiceEmailTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ServiceEmailTemplate
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesExecute(r ApiGetServiceEmailTemplatesRequest) ([]ServiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.GetServiceEmailTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceEmailTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiGetServiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) Conditions(conditions string) ApiGetServiceEmailTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetServiceEmailTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceEmailTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) OrderBy(orderBy string) ApiGetServiceEmailTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) Fields(fields string) ApiGetServiceEmailTemplatesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) Page(page int32) ApiGetServiceEmailTemplatesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) PageSize(pageSize int32) ApiGetServiceEmailTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdRequest) PageId(pageId int32) ApiGetServiceEmailTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceEmailTemplatesByIdRequest) Execute() (*ServiceEmailTemplate, *http.Response, error) {
	return r.ApiService.GetServiceEmailTemplatesByIdExecute(r)
}

/*
GetServiceEmailTemplatesById Get ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiGetServiceEmailTemplatesByIdRequest
*/
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesById(ctx context.Context, id int32) ApiGetServiceEmailTemplatesByIdRequest {
	return ApiGetServiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceEmailTemplate
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesByIdExecute(r ApiGetServiceEmailTemplatesByIdRequest) (*ServiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.GetServiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceEmailTemplatesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) ClientId(clientId string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) Conditions(conditions string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) Fields(fields string) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) Page(page int32) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) PageId(pageId int32) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceEmailTemplatesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceEmailTemplatesByIdUsagesExecute(r)
}

/*
GetServiceEmailTemplatesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiGetServiceEmailTemplatesByIdUsagesRequest
*/
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesByIdUsages(ctx context.Context, id int32) ApiGetServiceEmailTemplatesByIdUsagesRequest {
	return ApiGetServiceEmailTemplatesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesByIdUsagesExecute(r ApiGetServiceEmailTemplatesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.GetServiceEmailTemplatesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceEmailTemplatesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) Fields(fields string) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) Page(page int32) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceEmailTemplatesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceEmailTemplatesByIdUsagesListExecute(r)
}

/*
GetServiceEmailTemplatesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiGetServiceEmailTemplatesByIdUsagesListRequest
*/
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesByIdUsagesList(ctx context.Context, id int32) ApiGetServiceEmailTemplatesByIdUsagesListRequest {
	return ApiGetServiceEmailTemplatesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesByIdUsagesListExecute(r ApiGetServiceEmailTemplatesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.GetServiceEmailTemplatesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceEmailTemplatesCountRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) ClientId(clientId string) ApiGetServiceEmailTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) Conditions(conditions string) ApiGetServiceEmailTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) ChildConditions(childConditions string) ApiGetServiceEmailTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceEmailTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) OrderBy(orderBy string) ApiGetServiceEmailTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) Fields(fields string) ApiGetServiceEmailTemplatesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) Page(page int32) ApiGetServiceEmailTemplatesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) PageSize(pageSize int32) ApiGetServiceEmailTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceEmailTemplatesCountRequest) PageId(pageId int32) ApiGetServiceEmailTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceEmailTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceEmailTemplatesCountExecute(r)
}

/*
GetServiceEmailTemplatesCount Get Count of ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceEmailTemplatesCountRequest
*/
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesCount(ctx context.Context) ApiGetServiceEmailTemplatesCountRequest {
	return ApiGetServiceEmailTemplatesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ServiceEmailTemplatesAPIService) GetServiceEmailTemplatesCountExecute(r ApiGetServiceEmailTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.GetServiceEmailTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceEmailTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiPatchServiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceEmailTemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceEmailTemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceEmailTemplatesByIdRequest) Execute() (*ServiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PatchServiceEmailTemplatesByIdExecute(r)
}

/*
PatchServiceEmailTemplatesById Patch ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiPatchServiceEmailTemplatesByIdRequest
*/
func (a *ServiceEmailTemplatesAPIService) PatchServiceEmailTemplatesById(ctx context.Context, id int32) ApiPatchServiceEmailTemplatesByIdRequest {
	return ApiPatchServiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceEmailTemplate
func (a *ServiceEmailTemplatesAPIService) PatchServiceEmailTemplatesByIdExecute(r ApiPatchServiceEmailTemplatesByIdRequest) (*ServiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.PatchServiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceEmailTemplatesRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	clientId *string
	serviceEmailTemplate *ServiceEmailTemplate
}

// 
func (r ApiPostServiceEmailTemplatesRequest) ClientId(clientId string) ApiPostServiceEmailTemplatesRequest {
	r.clientId = &clientId
	return r
}

// serviceEmailTemplate
func (r ApiPostServiceEmailTemplatesRequest) ServiceEmailTemplate(serviceEmailTemplate ServiceEmailTemplate) ApiPostServiceEmailTemplatesRequest {
	r.serviceEmailTemplate = &serviceEmailTemplate
	return r
}

func (r ApiPostServiceEmailTemplatesRequest) Execute() (*ServiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PostServiceEmailTemplatesExecute(r)
}

/*
PostServiceEmailTemplates Post ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceEmailTemplatesRequest
*/
func (a *ServiceEmailTemplatesAPIService) PostServiceEmailTemplates(ctx context.Context) ApiPostServiceEmailTemplatesRequest {
	return ApiPostServiceEmailTemplatesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceEmailTemplate
func (a *ServiceEmailTemplatesAPIService) PostServiceEmailTemplatesExecute(r ApiPostServiceEmailTemplatesRequest) (*ServiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.PostServiceEmailTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("serviceEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceEmailTemplatesByIdRequest struct {
	ctx context.Context
	ApiService *ServiceEmailTemplatesAPIService
	id int32
	clientId *string
	serviceEmailTemplate *ServiceEmailTemplate
}

// 
func (r ApiPutServiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiPutServiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// serviceEmailTemplate
func (r ApiPutServiceEmailTemplatesByIdRequest) ServiceEmailTemplate(serviceEmailTemplate ServiceEmailTemplate) ApiPutServiceEmailTemplatesByIdRequest {
	r.serviceEmailTemplate = &serviceEmailTemplate
	return r
}

func (r ApiPutServiceEmailTemplatesByIdRequest) Execute() (*ServiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PutServiceEmailTemplatesByIdExecute(r)
}

/*
PutServiceEmailTemplatesById Put ServiceEmailTemplate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id emailTemplateId
 @return ApiPutServiceEmailTemplatesByIdRequest
*/
func (a *ServiceEmailTemplatesAPIService) PutServiceEmailTemplatesById(ctx context.Context, id int32) ApiPutServiceEmailTemplatesByIdRequest {
	return ApiPutServiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceEmailTemplate
func (a *ServiceEmailTemplatesAPIService) PutServiceEmailTemplatesByIdExecute(r ApiPutServiceEmailTemplatesByIdRequest) (*ServiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceEmailTemplatesAPIService.PutServiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/emailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("serviceEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
