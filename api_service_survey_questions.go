/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ServiceSurveyQuestionsAPIService ServiceSurveyQuestionsAPI service
type ServiceSurveyQuestionsAPIService service

type ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSurveysByParentIdQuestionsByIdExecute(r)
}

/*
DeleteServiceSurveysByParentIdQuestionsById Delete ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest
*/
func (a *ServiceSurveyQuestionsAPIService) DeleteServiceSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest {
	return ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *ServiceSurveyQuestionsAPIService) DeleteServiceSurveysByParentIdQuestionsByIdExecute(r ApiDeleteServiceSurveysByParentIdQuestionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.DeleteServiceSurveysByParentIdQuestionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) Fields(fields string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) Page(page int32) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdQuestionsRequest) Execute() ([]ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdQuestionsExecute(r)
}

/*
GetServiceSurveysByParentIdQuestions Get List of ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdQuestionsRequest
*/
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestions(ctx context.Context, parentId int32) ApiGetServiceSurveysByParentIdQuestionsRequest {
	return ApiGetServiceSurveysByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestionsExecute(r ApiGetServiceSurveysByParentIdQuestionsRequest) ([]ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.GetServiceSurveysByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) Fields(fields string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) Page(page int32) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) Execute() (*ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdQuestionsByIdExecute(r)
}

/*
GetServiceSurveysByParentIdQuestionsById Get ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdQuestionsByIdRequest
*/
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiGetServiceSurveysByParentIdQuestionsByIdRequest {
	return ApiGetServiceSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestionsByIdExecute(r ApiGetServiceSurveysByParentIdQuestionsByIdRequest) (*ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.GetServiceSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdQuestionsCountRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) Fields(fields string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) Page(page int32) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdQuestionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdQuestionsCountExecute(r)
}

/*
GetServiceSurveysByParentIdQuestionsCount Get Count of ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdQuestionsCountRequest
*/
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestionsCount(ctx context.Context, parentId int32) ApiGetServiceSurveysByParentIdQuestionsCountRequest {
	return ApiGetServiceSurveysByParentIdQuestionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *ServiceSurveyQuestionsAPIService) GetServiceSurveysByParentIdQuestionsCountExecute(r ApiGetServiceSurveysByParentIdQuestionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.GetServiceSurveysByParentIdQuestionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceSurveysByParentIdQuestionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSurveysByParentIdQuestionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPatchServiceSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceSurveysByParentIdQuestionsByIdRequest) Execute() (*ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.PatchServiceSurveysByParentIdQuestionsByIdExecute(r)
}

/*
PatchServiceSurveysByParentIdQuestionsById Patch ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiPatchServiceSurveysByParentIdQuestionsByIdRequest
*/
func (a *ServiceSurveyQuestionsAPIService) PatchServiceSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceSurveysByParentIdQuestionsByIdRequest {
	return ApiPatchServiceSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) PatchServiceSurveysByParentIdQuestionsByIdExecute(r ApiPatchServiceSurveysByParentIdQuestionsByIdRequest) (*ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.PatchServiceSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	parentId int32
	serviceSurveyQuestion *ServiceSurveyQuestion
	clientId *string
}

// serviceSurveyQuestion
func (r ApiPostServiceSurveysByParentIdQuestionsRequest) ServiceSurveyQuestion(serviceSurveyQuestion ServiceSurveyQuestion) ApiPostServiceSurveysByParentIdQuestionsRequest {
	r.serviceSurveyQuestion = &serviceSurveyQuestion
	return r
}

// 
func (r ApiPostServiceSurveysByParentIdQuestionsRequest) ClientId(clientId string) ApiPostServiceSurveysByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSurveysByParentIdQuestionsRequest) Execute() (*ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.PostServiceSurveysByParentIdQuestionsExecute(r)
}

/*
PostServiceSurveysByParentIdQuestions Post ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiPostServiceSurveysByParentIdQuestionsRequest
*/
func (a *ServiceSurveyQuestionsAPIService) PostServiceSurveysByParentIdQuestions(ctx context.Context, parentId int32) ApiPostServiceSurveysByParentIdQuestionsRequest {
	return ApiPostServiceSurveysByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) PostServiceSurveysByParentIdQuestionsExecute(r ApiPostServiceSurveysByParentIdQuestionsRequest) (*ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.PostServiceSurveysByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceSurveyQuestion == nil {
		return localVarReturnValue, nil, reportError("serviceSurveyQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.serviceSurveyQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest) ClientId(clientId string) ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest) Execute() (*ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.PostServiceSurveysByParentIdQuestionsByIdCopyExecute(r)
}

/*
PostServiceSurveysByParentIdQuestionsByIdCopy Post ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest
*/
func (a *ServiceSurveyQuestionsAPIService) PostServiceSurveysByParentIdQuestionsByIdCopy(ctx context.Context, id int32, parentId int32) ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest {
	return ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) PostServiceSurveysByParentIdQuestionsByIdCopyExecute(r ApiPostServiceSurveysByParentIdQuestionsByIdCopyRequest) (*ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.PostServiceSurveysByParentIdQuestionsByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveyQuestionsAPIService
	id int32
	parentId int32
	serviceSurveyQuestion *ServiceSurveyQuestion
	clientId *string
}

// serviceSurveyQuestion
func (r ApiPutServiceSurveysByParentIdQuestionsByIdRequest) ServiceSurveyQuestion(serviceSurveyQuestion ServiceSurveyQuestion) ApiPutServiceSurveysByParentIdQuestionsByIdRequest {
	r.serviceSurveyQuestion = &serviceSurveyQuestion
	return r
}

// 
func (r ApiPutServiceSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPutServiceSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceSurveysByParentIdQuestionsByIdRequest) Execute() (*ServiceSurveyQuestion, *http.Response, error) {
	return r.ApiService.PutServiceSurveysByParentIdQuestionsByIdExecute(r)
}

/*
PutServiceSurveysByParentIdQuestionsById Put ServiceSurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiPutServiceSurveysByParentIdQuestionsByIdRequest
*/
func (a *ServiceSurveyQuestionsAPIService) PutServiceSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPutServiceSurveysByParentIdQuestionsByIdRequest {
	return ApiPutServiceSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceSurveyQuestion
func (a *ServiceSurveyQuestionsAPIService) PutServiceSurveysByParentIdQuestionsByIdExecute(r ApiPutServiceSurveysByParentIdQuestionsByIdRequest) (*ServiceSurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveyQuestionsAPIService.PutServiceSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceSurveyQuestion == nil {
		return localVarReturnValue, nil, reportError("serviceSurveyQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.serviceSurveyQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
