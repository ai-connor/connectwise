/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ServiceSurveysAPIService ServiceSurveysAPI service
type ServiceSurveysAPIService service

type ApiDeleteServiceSurveysByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceSurveysByIdRequest) ClientId(clientId string) ApiDeleteServiceSurveysByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSurveysByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSurveysByIdExecute(r)
}

/*
DeleteServiceSurveysById Delete ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiDeleteServiceSurveysByIdRequest
*/
func (a *ServiceSurveysAPIService) DeleteServiceSurveysById(ctx context.Context, id int32) ApiDeleteServiceSurveysByIdRequest {
	return ApiDeleteServiceSurveysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ServiceSurveysAPIService) DeleteServiceSurveysByIdExecute(r ApiDeleteServiceSurveysByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.DeleteServiceSurveysById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSurveysRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSurveysRequest) ClientId(clientId string) ApiGetServiceSurveysRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSurveysRequest) Conditions(conditions string) ApiGetServiceSurveysRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysRequest) ChildConditions(childConditions string) ApiGetServiceSurveysRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysRequest) OrderBy(orderBy string) ApiGetServiceSurveysRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysRequest) Fields(fields string) ApiGetServiceSurveysRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysRequest) Page(page int32) ApiGetServiceSurveysRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysRequest) PageSize(pageSize int32) ApiGetServiceSurveysRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysRequest) PageId(pageId int32) ApiGetServiceSurveysRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSurveysRequest) Execute() ([]ServiceSurvey, *http.Response, error) {
	return r.ApiService.GetServiceSurveysExecute(r)
}

/*
GetServiceSurveys Get List of ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSurveysRequest
*/
func (a *ServiceSurveysAPIService) GetServiceSurveys(ctx context.Context) ApiGetServiceSurveysRequest {
	return ApiGetServiceSurveysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ServiceSurvey
func (a *ServiceSurveysAPIService) GetServiceSurveysExecute(r ApiGetServiceSurveysRequest) ([]ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.GetServiceSurveys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSurveysByIdRequest) ClientId(clientId string) ApiGetServiceSurveysByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) Conditions(conditions string) ApiGetServiceSurveysByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) OrderBy(orderBy string) ApiGetServiceSurveysByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) Fields(fields string) ApiGetServiceSurveysByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) Page(page int32) ApiGetServiceSurveysByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) PageSize(pageSize int32) ApiGetServiceSurveysByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByIdRequest) PageId(pageId int32) ApiGetServiceSurveysByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSurveysByIdRequest) Execute() (*ServiceSurvey, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByIdExecute(r)
}

/*
GetServiceSurveysById Get ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiGetServiceSurveysByIdRequest
*/
func (a *ServiceSurveysAPIService) GetServiceSurveysById(ctx context.Context, id int32) ApiGetServiceSurveysByIdRequest {
	return ApiGetServiceSurveysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceSurvey
func (a *ServiceSurveysAPIService) GetServiceSurveysByIdExecute(r ApiGetServiceSurveysByIdRequest) (*ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.GetServiceSurveysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByIdUsagesRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) ClientId(clientId string) ApiGetServiceSurveysByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) Conditions(conditions string) ApiGetServiceSurveysByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceSurveysByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) Fields(fields string) ApiGetServiceSurveysByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) Page(page int32) ApiGetServiceSurveysByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceSurveysByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesRequest) PageId(pageId int32) ApiGetServiceSurveysByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSurveysByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByIdUsagesExecute(r)
}

/*
GetServiceSurveysByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiGetServiceSurveysByIdUsagesRequest
*/
func (a *ServiceSurveysAPIService) GetServiceSurveysByIdUsages(ctx context.Context, id int32) ApiGetServiceSurveysByIdUsagesRequest {
	return ApiGetServiceSurveysByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ServiceSurveysAPIService) GetServiceSurveysByIdUsagesExecute(r ApiGetServiceSurveysByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.GetServiceSurveysByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) Fields(fields string) ApiGetServiceSurveysByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) Page(page int32) ApiGetServiceSurveysByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceSurveysByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceSurveysByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSurveysByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByIdUsagesListExecute(r)
}

/*
GetServiceSurveysByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiGetServiceSurveysByIdUsagesListRequest
*/
func (a *ServiceSurveysAPIService) GetServiceSurveysByIdUsagesList(ctx context.Context, id int32) ApiGetServiceSurveysByIdUsagesListRequest {
	return ApiGetServiceSurveysByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *ServiceSurveysAPIService) GetServiceSurveysByIdUsagesListExecute(r ApiGetServiceSurveysByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.GetServiceSurveysByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysCountRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSurveysCountRequest) ClientId(clientId string) ApiGetServiceSurveysCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) Conditions(conditions string) ApiGetServiceSurveysCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) ChildConditions(childConditions string) ApiGetServiceSurveysCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) OrderBy(orderBy string) ApiGetServiceSurveysCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) Fields(fields string) ApiGetServiceSurveysCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) Page(page int32) ApiGetServiceSurveysCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) PageSize(pageSize int32) ApiGetServiceSurveysCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysCountRequest) PageId(pageId int32) ApiGetServiceSurveysCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSurveysCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSurveysCountExecute(r)
}

/*
GetServiceSurveysCount Get Count of ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSurveysCountRequest
*/
func (a *ServiceSurveysAPIService) GetServiceSurveysCount(ctx context.Context) ApiGetServiceSurveysCountRequest {
	return ApiGetServiceSurveysCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ServiceSurveysAPIService) GetServiceSurveysCountExecute(r ApiGetServiceSurveysCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.GetServiceSurveysCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSurveysByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceSurveysByIdRequest) ClientId(clientId string) ApiPatchServiceSurveysByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceSurveysByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSurveysByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceSurveysByIdRequest) Execute() (*ServiceSurvey, *http.Response, error) {
	return r.ApiService.PatchServiceSurveysByIdExecute(r)
}

/*
PatchServiceSurveysById Patch ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiPatchServiceSurveysByIdRequest
*/
func (a *ServiceSurveysAPIService) PatchServiceSurveysById(ctx context.Context, id int32) ApiPatchServiceSurveysByIdRequest {
	return ApiPatchServiceSurveysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceSurvey
func (a *ServiceSurveysAPIService) PatchServiceSurveysByIdExecute(r ApiPatchServiceSurveysByIdRequest) (*ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.PatchServiceSurveysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	clientId *string
	serviceSurvey *ServiceSurvey
}

// 
func (r ApiPostServiceSurveysRequest) ClientId(clientId string) ApiPostServiceSurveysRequest {
	r.clientId = &clientId
	return r
}

// survey
func (r ApiPostServiceSurveysRequest) ServiceSurvey(serviceSurvey ServiceSurvey) ApiPostServiceSurveysRequest {
	r.serviceSurvey = &serviceSurvey
	return r
}

func (r ApiPostServiceSurveysRequest) Execute() (*ServiceSurvey, *http.Response, error) {
	return r.ApiService.PostServiceSurveysExecute(r)
}

/*
PostServiceSurveys Post ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceSurveysRequest
*/
func (a *ServiceSurveysAPIService) PostServiceSurveys(ctx context.Context) ApiPostServiceSurveysRequest {
	return ApiPostServiceSurveysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceSurvey
func (a *ServiceSurveysAPIService) PostServiceSurveysExecute(r ApiPostServiceSurveysRequest) (*ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.PostServiceSurveys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSurvey == nil {
		return localVarReturnValue, nil, reportError("serviceSurvey is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSurvey
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysByIdCopyRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostServiceSurveysByIdCopyRequest) ClientId(clientId string) ApiPostServiceSurveysByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSurveysByIdCopyRequest) Execute() (*ServiceSurvey, *http.Response, error) {
	return r.ApiService.PostServiceSurveysByIdCopyExecute(r)
}

/*
PostServiceSurveysByIdCopy Post ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiPostServiceSurveysByIdCopyRequest
*/
func (a *ServiceSurveysAPIService) PostServiceSurveysByIdCopy(ctx context.Context, id int32) ApiPostServiceSurveysByIdCopyRequest {
	return ApiPostServiceSurveysByIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceSurvey
func (a *ServiceSurveysAPIService) PostServiceSurveysByIdCopyExecute(r ApiPostServiceSurveysByIdCopyRequest) (*ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.PostServiceSurveysByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSurveysByIdRequest struct {
	ctx context.Context
	ApiService *ServiceSurveysAPIService
	id int32
	clientId *string
	serviceSurvey *ServiceSurvey
}

// 
func (r ApiPutServiceSurveysByIdRequest) ClientId(clientId string) ApiPutServiceSurveysByIdRequest {
	r.clientId = &clientId
	return r
}

// survey
func (r ApiPutServiceSurveysByIdRequest) ServiceSurvey(serviceSurvey ServiceSurvey) ApiPutServiceSurveysByIdRequest {
	r.serviceSurvey = &serviceSurvey
	return r
}

func (r ApiPutServiceSurveysByIdRequest) Execute() (*ServiceSurvey, *http.Response, error) {
	return r.ApiService.PutServiceSurveysByIdExecute(r)
}

/*
PutServiceSurveysById Put ServiceSurvey

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id surveyId
 @return ApiPutServiceSurveysByIdRequest
*/
func (a *ServiceSurveysAPIService) PutServiceSurveysById(ctx context.Context, id int32) ApiPutServiceSurveysByIdRequest {
	return ApiPutServiceSurveysByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceSurvey
func (a *ServiceSurveysAPIService) PutServiceSurveysByIdExecute(r ApiPutServiceSurveysByIdRequest) (*ServiceSurvey, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceSurvey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceSurveysAPIService.PutServiceSurveysById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceSurvey == nil {
		return localVarReturnValue, nil, reportError("serviceSurvey is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceSurvey
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
