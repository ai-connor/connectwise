/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ServiceTicketLinksAPIService ServiceTicketLinksAPI service
type ServiceTicketLinksAPIService service

type ApiDeleteServiceTicketLinksByIdRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceTicketLinksByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketLinksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketLinksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketLinksByIdExecute(r)
}

/*
DeleteServiceTicketLinksById Delete ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketLinkId
 @return ApiDeleteServiceTicketLinksByIdRequest
*/
func (a *ServiceTicketLinksAPIService) DeleteServiceTicketLinksById(ctx context.Context, id int32) ApiDeleteServiceTicketLinksByIdRequest {
	return ApiDeleteServiceTicketLinksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ServiceTicketLinksAPIService) DeleteServiceTicketLinksByIdExecute(r ApiDeleteServiceTicketLinksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.DeleteServiceTicketLinksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceTicketLinksRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketLinksRequest) ClientId(clientId string) ApiGetServiceTicketLinksRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) Conditions(conditions string) ApiGetServiceTicketLinksRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) ChildConditions(childConditions string) ApiGetServiceTicketLinksRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketLinksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) OrderBy(orderBy string) ApiGetServiceTicketLinksRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) Fields(fields string) ApiGetServiceTicketLinksRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) Page(page int32) ApiGetServiceTicketLinksRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) PageSize(pageSize int32) ApiGetServiceTicketLinksRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketLinksRequest) PageId(pageId int32) ApiGetServiceTicketLinksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketLinksRequest) Execute() ([]ServiceTicketLink, *http.Response, error) {
	return r.ApiService.GetServiceTicketLinksExecute(r)
}

/*
GetServiceTicketLinks Get List of ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketLinksRequest
*/
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinks(ctx context.Context) ApiGetServiceTicketLinksRequest {
	return ApiGetServiceTicketLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ServiceTicketLink
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinksExecute(r ApiGetServiceTicketLinksRequest) ([]ServiceTicketLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServiceTicketLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.GetServiceTicketLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketLinksByIdRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) ClientId(clientId string) ApiGetServiceTicketLinksByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) Conditions(conditions string) ApiGetServiceTicketLinksByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketLinksByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketLinksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketLinksByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) Fields(fields string) ApiGetServiceTicketLinksByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) Page(page int32) ApiGetServiceTicketLinksByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketLinksByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketLinksByIdRequest) PageId(pageId int32) ApiGetServiceTicketLinksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketLinksByIdRequest) Execute() (*ServiceTicketLink, *http.Response, error) {
	return r.ApiService.GetServiceTicketLinksByIdExecute(r)
}

/*
GetServiceTicketLinksById Get ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketLinkId
 @return ApiGetServiceTicketLinksByIdRequest
*/
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinksById(ctx context.Context, id int32) ApiGetServiceTicketLinksByIdRequest {
	return ApiGetServiceTicketLinksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceTicketLink
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinksByIdExecute(r ApiGetServiceTicketLinksByIdRequest) (*ServiceTicketLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceTicketLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.GetServiceTicketLinksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketLinksCountRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketLinksCountRequest) ClientId(clientId string) ApiGetServiceTicketLinksCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) Conditions(conditions string) ApiGetServiceTicketLinksCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketLinksCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketLinksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) OrderBy(orderBy string) ApiGetServiceTicketLinksCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) Fields(fields string) ApiGetServiceTicketLinksCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) Page(page int32) ApiGetServiceTicketLinksCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) PageSize(pageSize int32) ApiGetServiceTicketLinksCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketLinksCountRequest) PageId(pageId int32) ApiGetServiceTicketLinksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketLinksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketLinksCountExecute(r)
}

/*
GetServiceTicketLinksCount Get Count of ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketLinksCountRequest
*/
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinksCount(ctx context.Context) ApiGetServiceTicketLinksCountRequest {
	return ApiGetServiceTicketLinksCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *ServiceTicketLinksAPIService) GetServiceTicketLinksCountExecute(r ApiGetServiceTicketLinksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.GetServiceTicketLinksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceTicketLinksByIdRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceTicketLinksByIdRequest) ClientId(clientId string) ApiPatchServiceTicketLinksByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceTicketLinksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceTicketLinksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceTicketLinksByIdRequest) Execute() (*ServiceTicketLink, *http.Response, error) {
	return r.ApiService.PatchServiceTicketLinksByIdExecute(r)
}

/*
PatchServiceTicketLinksById Patch ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketLinkId
 @return ApiPatchServiceTicketLinksByIdRequest
*/
func (a *ServiceTicketLinksAPIService) PatchServiceTicketLinksById(ctx context.Context, id int32) ApiPatchServiceTicketLinksByIdRequest {
	return ApiPatchServiceTicketLinksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceTicketLink
func (a *ServiceTicketLinksAPIService) PatchServiceTicketLinksByIdExecute(r ApiPatchServiceTicketLinksByIdRequest) (*ServiceTicketLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceTicketLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.PatchServiceTicketLinksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketLinksRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	clientId *string
	serviceTicketLink *ServiceTicketLink
}

// 
func (r ApiPostServiceTicketLinksRequest) ClientId(clientId string) ApiPostServiceTicketLinksRequest {
	r.clientId = &clientId
	return r
}

// serviceTicketLink
func (r ApiPostServiceTicketLinksRequest) ServiceTicketLink(serviceTicketLink ServiceTicketLink) ApiPostServiceTicketLinksRequest {
	r.serviceTicketLink = &serviceTicketLink
	return r
}

func (r ApiPostServiceTicketLinksRequest) Execute() (*ServiceTicketLink, *http.Response, error) {
	return r.ApiService.PostServiceTicketLinksExecute(r)
}

/*
PostServiceTicketLinks Post ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceTicketLinksRequest
*/
func (a *ServiceTicketLinksAPIService) PostServiceTicketLinks(ctx context.Context) ApiPostServiceTicketLinksRequest {
	return ApiPostServiceTicketLinksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ServiceTicketLink
func (a *ServiceTicketLinksAPIService) PostServiceTicketLinksExecute(r ApiPostServiceTicketLinksRequest) (*ServiceTicketLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceTicketLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.PostServiceTicketLinks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceTicketLink == nil {
		return localVarReturnValue, nil, reportError("serviceTicketLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceTicketLink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceTicketLinksByIdRequest struct {
	ctx context.Context
	ApiService *ServiceTicketLinksAPIService
	id int32
	clientId *string
	serviceTicketLink *ServiceTicketLink
}

// 
func (r ApiPutServiceTicketLinksByIdRequest) ClientId(clientId string) ApiPutServiceTicketLinksByIdRequest {
	r.clientId = &clientId
	return r
}

// serviceTicketLink
func (r ApiPutServiceTicketLinksByIdRequest) ServiceTicketLink(serviceTicketLink ServiceTicketLink) ApiPutServiceTicketLinksByIdRequest {
	r.serviceTicketLink = &serviceTicketLink
	return r
}

func (r ApiPutServiceTicketLinksByIdRequest) Execute() (*ServiceTicketLink, *http.Response, error) {
	return r.ApiService.PutServiceTicketLinksByIdExecute(r)
}

/*
PutServiceTicketLinksById Put ServiceTicketLink

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketLinkId
 @return ApiPutServiceTicketLinksByIdRequest
*/
func (a *ServiceTicketLinksAPIService) PutServiceTicketLinksById(ctx context.Context, id int32) ApiPutServiceTicketLinksByIdRequest {
	return ApiPutServiceTicketLinksByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ServiceTicketLink
func (a *ServiceTicketLinksAPIService) PutServiceTicketLinksByIdExecute(r ApiPutServiceTicketLinksByIdRequest) (*ServiceTicketLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceTicketLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ServiceTicketLinksAPIService.PutServiceTicketLinksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketLinks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.serviceTicketLink == nil {
		return localVarReturnValue, nil, reportError("serviceTicketLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.serviceTicketLink
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
