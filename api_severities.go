/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SeveritiesAPIService SeveritiesAPI service
type SeveritiesAPIService service

type ApiGetServiceSeveritiesRequest struct {
	ctx context.Context
	ApiService *SeveritiesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSeveritiesRequest) Conditions(conditions string) ApiGetServiceSeveritiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) ChildConditions(childConditions string) ApiGetServiceSeveritiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSeveritiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) OrderBy(orderBy string) ApiGetServiceSeveritiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) Fields(fields string) ApiGetServiceSeveritiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) Page(page int32) ApiGetServiceSeveritiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) PageSize(pageSize int32) ApiGetServiceSeveritiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) PageId(pageId int32) ApiGetServiceSeveritiesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSeveritiesRequest) ClientId(clientId string) ApiGetServiceSeveritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSeveritiesRequest) Execute() ([]Severity, *http.Response, error) {
	return r.ApiService.GetServiceSeveritiesExecute(r)
}

/*
GetServiceSeverities Get List of Severity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSeveritiesRequest
*/
func (a *SeveritiesAPIService) GetServiceSeverities(ctx context.Context) ApiGetServiceSeveritiesRequest {
	return ApiGetServiceSeveritiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Severity
func (a *SeveritiesAPIService) GetServiceSeveritiesExecute(r ApiGetServiceSeveritiesRequest) ([]Severity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Severity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeveritiesAPIService.GetServiceSeverities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/severities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSeveritiesByIdRequest struct {
	ctx context.Context
	ApiService *SeveritiesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) Conditions(conditions string) ApiGetServiceSeveritiesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) ChildConditions(childConditions string) ApiGetServiceSeveritiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSeveritiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) OrderBy(orderBy string) ApiGetServiceSeveritiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) Fields(fields string) ApiGetServiceSeveritiesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) Page(page int32) ApiGetServiceSeveritiesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) PageSize(pageSize int32) ApiGetServiceSeveritiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) PageId(pageId int32) ApiGetServiceSeveritiesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSeveritiesByIdRequest) ClientId(clientId string) ApiGetServiceSeveritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSeveritiesByIdRequest) Execute() (*Severity, *http.Response, error) {
	return r.ApiService.GetServiceSeveritiesByIdExecute(r)
}

/*
GetServiceSeveritiesById Get Severity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id severityId
 @return ApiGetServiceSeveritiesByIdRequest
*/
func (a *SeveritiesAPIService) GetServiceSeveritiesById(ctx context.Context, id int32) ApiGetServiceSeveritiesByIdRequest {
	return ApiGetServiceSeveritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Severity
func (a *SeveritiesAPIService) GetServiceSeveritiesByIdExecute(r ApiGetServiceSeveritiesByIdRequest) (*Severity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Severity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeveritiesAPIService.GetServiceSeveritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/severities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSeveritiesCountRequest struct {
	ctx context.Context
	ApiService *SeveritiesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSeveritiesCountRequest) Conditions(conditions string) ApiGetServiceSeveritiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) ChildConditions(childConditions string) ApiGetServiceSeveritiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSeveritiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) OrderBy(orderBy string) ApiGetServiceSeveritiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) Fields(fields string) ApiGetServiceSeveritiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) Page(page int32) ApiGetServiceSeveritiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) PageSize(pageSize int32) ApiGetServiceSeveritiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) PageId(pageId int32) ApiGetServiceSeveritiesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSeveritiesCountRequest) ClientId(clientId string) ApiGetServiceSeveritiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSeveritiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSeveritiesCountExecute(r)
}

/*
GetServiceSeveritiesCount Get Count of Severity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSeveritiesCountRequest
*/
func (a *SeveritiesAPIService) GetServiceSeveritiesCount(ctx context.Context) ApiGetServiceSeveritiesCountRequest {
	return ApiGetServiceSeveritiesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SeveritiesAPIService) GetServiceSeveritiesCountExecute(r ApiGetServiceSeveritiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeveritiesAPIService.GetServiceSeveritiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/severities/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSeveritiesByIdRequest struct {
	ctx context.Context
	ApiService *SeveritiesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceSeveritiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSeveritiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceSeveritiesByIdRequest) ClientId(clientId string) ApiPatchServiceSeveritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceSeveritiesByIdRequest) Execute() (*Severity, *http.Response, error) {
	return r.ApiService.PatchServiceSeveritiesByIdExecute(r)
}

/*
PatchServiceSeveritiesById Patch Severity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id severityId
 @return ApiPatchServiceSeveritiesByIdRequest
*/
func (a *SeveritiesAPIService) PatchServiceSeveritiesById(ctx context.Context, id int32) ApiPatchServiceSeveritiesByIdRequest {
	return ApiPatchServiceSeveritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Severity
func (a *SeveritiesAPIService) PatchServiceSeveritiesByIdExecute(r ApiPatchServiceSeveritiesByIdRequest) (*Severity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Severity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeveritiesAPIService.PatchServiceSeveritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/severities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSeveritiesByIdRequest struct {
	ctx context.Context
	ApiService *SeveritiesAPIService
	id int32
	severity *Severity
	clientId *string
}

// severity
func (r ApiPutServiceSeveritiesByIdRequest) Severity(severity Severity) ApiPutServiceSeveritiesByIdRequest {
	r.severity = &severity
	return r
}

// 
func (r ApiPutServiceSeveritiesByIdRequest) ClientId(clientId string) ApiPutServiceSeveritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceSeveritiesByIdRequest) Execute() (*Severity, *http.Response, error) {
	return r.ApiService.PutServiceSeveritiesByIdExecute(r)
}

/*
PutServiceSeveritiesById Put Severity

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id severityId
 @return ApiPutServiceSeveritiesByIdRequest
*/
func (a *SeveritiesAPIService) PutServiceSeveritiesById(ctx context.Context, id int32) ApiPutServiceSeveritiesByIdRequest {
	return ApiPutServiceSeveritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Severity
func (a *SeveritiesAPIService) PutServiceSeveritiesByIdExecute(r ApiPutServiceSeveritiesByIdRequest) (*Severity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Severity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SeveritiesAPIService.PutServiceSeveritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/severities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.severity == nil {
		return localVarReturnValue, nil, reportError("severity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.severity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
