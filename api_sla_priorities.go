/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SLAPrioritiesAPIService SLAPrioritiesAPI service
type SLAPrioritiesAPIService service

type ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest) ClientId(clientId string) ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSLAsByParentIdPrioritiesByIdExecute(r)
}

/*
DeleteServiceSLAsByParentIdPrioritiesById Delete SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id priorityId
 @param parentId SLAId
 @return ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest
*/
func (a *SLAPrioritiesAPIService) DeleteServiceSLAsByParentIdPrioritiesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest {
	return ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *SLAPrioritiesAPIService) DeleteServiceSLAsByParentIdPrioritiesByIdExecute(r ApiDeleteServiceSLAsByParentIdPrioritiesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.DeleteServiceSLAsByParentIdPrioritiesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByParentIdPrioritiesRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) Conditions(conditions string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) OrderBy(orderBy string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) Fields(fields string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) Page(page int32) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) PageSize(pageSize int32) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) PageId(pageId int32) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) ClientId(clientId string) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSLAsByParentIdPrioritiesRequest) Execute() ([]SLAPriority, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByParentIdPrioritiesExecute(r)
}

/*
GetServiceSLAsByParentIdPriorities Get List of SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId SLAId
 @return ApiGetServiceSLAsByParentIdPrioritiesRequest
*/
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPriorities(ctx context.Context, parentId int32) ApiGetServiceSLAsByParentIdPrioritiesRequest {
	return ApiGetServiceSLAsByParentIdPrioritiesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []SLAPriority
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPrioritiesExecute(r ApiGetServiceSLAsByParentIdPrioritiesRequest) ([]SLAPriority, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SLAPriority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.GetServiceSLAsByParentIdPriorities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByParentIdPrioritiesByIdRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) Conditions(conditions string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) OrderBy(orderBy string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) Fields(fields string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) Page(page int32) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) PageSize(pageSize int32) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) PageId(pageId int32) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) ClientId(clientId string) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) Execute() (*SLAPriority, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByParentIdPrioritiesByIdExecute(r)
}

/*
GetServiceSLAsByParentIdPrioritiesById Get SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id priorityId
 @param parentId SLAId
 @return ApiGetServiceSLAsByParentIdPrioritiesByIdRequest
*/
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPrioritiesById(ctx context.Context, id int32, parentId int32) ApiGetServiceSLAsByParentIdPrioritiesByIdRequest {
	return ApiGetServiceSLAsByParentIdPrioritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SLAPriority
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPrioritiesByIdExecute(r ApiGetServiceSLAsByParentIdPrioritiesByIdRequest) (*SLAPriority, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLAPriority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.GetServiceSLAsByParentIdPrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByParentIdPrioritiesCountRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) Conditions(conditions string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) OrderBy(orderBy string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) Fields(fields string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) Page(page int32) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) PageSize(pageSize int32) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) PageId(pageId int32) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) ClientId(clientId string) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByParentIdPrioritiesCountExecute(r)
}

/*
GetServiceSLAsByParentIdPrioritiesCount Get Count of SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId SLAId
 @return ApiGetServiceSLAsByParentIdPrioritiesCountRequest
*/
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPrioritiesCount(ctx context.Context, parentId int32) ApiGetServiceSLAsByParentIdPrioritiesCountRequest {
	return ApiGetServiceSLAsByParentIdPrioritiesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *SLAPrioritiesAPIService) GetServiceSLAsByParentIdPrioritiesCountExecute(r ApiGetServiceSLAsByParentIdPrioritiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.GetServiceSLAsByParentIdPrioritiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest) ClientId(clientId string) ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest) Execute() (*SLAPriority, *http.Response, error) {
	return r.ApiService.PatchServiceSLAsByParentIdPrioritiesByIdExecute(r)
}

/*
PatchServiceSLAsByParentIdPrioritiesById Patch SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id priorityId
 @param parentId SLAId
 @return ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest
*/
func (a *SLAPrioritiesAPIService) PatchServiceSLAsByParentIdPrioritiesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest {
	return ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SLAPriority
func (a *SLAPrioritiesAPIService) PatchServiceSLAsByParentIdPrioritiesByIdExecute(r ApiPatchServiceSLAsByParentIdPrioritiesByIdRequest) (*SLAPriority, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLAPriority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.PatchServiceSLAsByParentIdPrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSLAsByParentIdPrioritiesRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	parentId int32
	sLAPriority *SLAPriority
	clientId *string
}

// sLAPriority
func (r ApiPostServiceSLAsByParentIdPrioritiesRequest) SLAPriority(sLAPriority SLAPriority) ApiPostServiceSLAsByParentIdPrioritiesRequest {
	r.sLAPriority = &sLAPriority
	return r
}

// 
func (r ApiPostServiceSLAsByParentIdPrioritiesRequest) ClientId(clientId string) ApiPostServiceSLAsByParentIdPrioritiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSLAsByParentIdPrioritiesRequest) Execute() (*SLAPriority, *http.Response, error) {
	return r.ApiService.PostServiceSLAsByParentIdPrioritiesExecute(r)
}

/*
PostServiceSLAsByParentIdPriorities Post SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId SLAId
 @return ApiPostServiceSLAsByParentIdPrioritiesRequest
*/
func (a *SLAPrioritiesAPIService) PostServiceSLAsByParentIdPriorities(ctx context.Context, parentId int32) ApiPostServiceSLAsByParentIdPrioritiesRequest {
	return ApiPostServiceSLAsByParentIdPrioritiesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SLAPriority
func (a *SLAPrioritiesAPIService) PostServiceSLAsByParentIdPrioritiesExecute(r ApiPostServiceSLAsByParentIdPrioritiesRequest) (*SLAPriority, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLAPriority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.PostServiceSLAsByParentIdPriorities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sLAPriority == nil {
		return localVarReturnValue, nil, reportError("sLAPriority is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.sLAPriority
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSLAsByParentIdPrioritiesByIdRequest struct {
	ctx context.Context
	ApiService *SLAPrioritiesAPIService
	id int32
	parentId int32
	sLAPriority *SLAPriority
	clientId *string
}

// sLAPriority
func (r ApiPutServiceSLAsByParentIdPrioritiesByIdRequest) SLAPriority(sLAPriority SLAPriority) ApiPutServiceSLAsByParentIdPrioritiesByIdRequest {
	r.sLAPriority = &sLAPriority
	return r
}

// 
func (r ApiPutServiceSLAsByParentIdPrioritiesByIdRequest) ClientId(clientId string) ApiPutServiceSLAsByParentIdPrioritiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceSLAsByParentIdPrioritiesByIdRequest) Execute() (*SLAPriority, *http.Response, error) {
	return r.ApiService.PutServiceSLAsByParentIdPrioritiesByIdExecute(r)
}

/*
PutServiceSLAsByParentIdPrioritiesById Put SLAPriority

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id priorityId
 @param parentId SLAId
 @return ApiPutServiceSLAsByParentIdPrioritiesByIdRequest
*/
func (a *SLAPrioritiesAPIService) PutServiceSLAsByParentIdPrioritiesById(ctx context.Context, id int32, parentId int32) ApiPutServiceSLAsByParentIdPrioritiesByIdRequest {
	return ApiPutServiceSLAsByParentIdPrioritiesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SLAPriority
func (a *SLAPrioritiesAPIService) PutServiceSLAsByParentIdPrioritiesByIdExecute(r ApiPutServiceSLAsByParentIdPrioritiesByIdRequest) (*SLAPriority, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLAPriority
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAPrioritiesAPIService.PutServiceSLAsByParentIdPrioritiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{parentId}/priorities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.sLAPriority == nil {
		return localVarReturnValue, nil, reportError("sLAPriority is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.sLAPriority
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
