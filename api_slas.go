/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SLAsAPIService SLAsAPI service
type SLAsAPIService service

type ApiDeleteServiceSLAsByIdRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceSLAsByIdRequest) ClientId(clientId string) ApiDeleteServiceSLAsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSLAsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSLAsByIdExecute(r)
}

/*
DeleteServiceSLAsById Delete SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiDeleteServiceSLAsByIdRequest
*/
func (a *SLAsAPIService) DeleteServiceSLAsById(ctx context.Context, id int32) ApiDeleteServiceSLAsByIdRequest {
	return ApiDeleteServiceSLAsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SLAsAPIService) DeleteServiceSLAsByIdExecute(r ApiDeleteServiceSLAsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.DeleteServiceSLAsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSLAsRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSLAsRequest) ClientId(clientId string) ApiGetServiceSLAsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSLAsRequest) Conditions(conditions string) ApiGetServiceSLAsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsRequest) ChildConditions(childConditions string) ApiGetServiceSLAsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsRequest) OrderBy(orderBy string) ApiGetServiceSLAsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsRequest) Fields(fields string) ApiGetServiceSLAsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsRequest) Page(page int32) ApiGetServiceSLAsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsRequest) PageSize(pageSize int32) ApiGetServiceSLAsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsRequest) PageId(pageId int32) ApiGetServiceSLAsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSLAsRequest) Execute() ([]SLA, *http.Response, error) {
	return r.ApiService.GetServiceSLAsExecute(r)
}

/*
GetServiceSLAs Get List of SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSLAsRequest
*/
func (a *SLAsAPIService) GetServiceSLAs(ctx context.Context) ApiGetServiceSLAsRequest {
	return ApiGetServiceSLAsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SLA
func (a *SLAsAPIService) GetServiceSLAsExecute(r ApiGetServiceSLAsRequest) ([]SLA, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SLA
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.GetServiceSLAs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByIdRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSLAsByIdRequest) ClientId(clientId string) ApiGetServiceSLAsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) Conditions(conditions string) ApiGetServiceSLAsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) OrderBy(orderBy string) ApiGetServiceSLAsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) Fields(fields string) ApiGetServiceSLAsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) Page(page int32) ApiGetServiceSLAsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) PageSize(pageSize int32) ApiGetServiceSLAsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByIdRequest) PageId(pageId int32) ApiGetServiceSLAsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSLAsByIdRequest) Execute() (*SLA, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByIdExecute(r)
}

/*
GetServiceSLAsById Get SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiGetServiceSLAsByIdRequest
*/
func (a *SLAsAPIService) GetServiceSLAsById(ctx context.Context, id int32) ApiGetServiceSLAsByIdRequest {
	return ApiGetServiceSLAsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SLA
func (a *SLAsAPIService) GetServiceSLAsByIdExecute(r ApiGetServiceSLAsByIdRequest) (*SLA, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLA
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.GetServiceSLAsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByIdUsagesRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) ClientId(clientId string) ApiGetServiceSLAsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) Conditions(conditions string) ApiGetServiceSLAsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceSLAsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) Fields(fields string) ApiGetServiceSLAsByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) Page(page int32) ApiGetServiceSLAsByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceSLAsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesRequest) PageId(pageId int32) ApiGetServiceSLAsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSLAsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByIdUsagesExecute(r)
}

/*
GetServiceSLAsByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiGetServiceSLAsByIdUsagesRequest
*/
func (a *SLAsAPIService) GetServiceSLAsByIdUsages(ctx context.Context, id int32) ApiGetServiceSLAsByIdUsagesRequest {
	return ApiGetServiceSLAsByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *SLAsAPIService) GetServiceSLAsByIdUsagesExecute(r ApiGetServiceSLAsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.GetServiceSLAsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) Fields(fields string) ApiGetServiceSLAsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) Page(page int32) ApiGetServiceSLAsByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceSLAsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceSLAsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSLAsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceSLAsByIdUsagesListExecute(r)
}

/*
GetServiceSLAsByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiGetServiceSLAsByIdUsagesListRequest
*/
func (a *SLAsAPIService) GetServiceSLAsByIdUsagesList(ctx context.Context, id int32) ApiGetServiceSLAsByIdUsagesListRequest {
	return ApiGetServiceSLAsByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *SLAsAPIService) GetServiceSLAsByIdUsagesListExecute(r ApiGetServiceSLAsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.GetServiceSLAsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSLAsCountRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceSLAsCountRequest) ClientId(clientId string) ApiGetServiceSLAsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) Conditions(conditions string) ApiGetServiceSLAsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) ChildConditions(childConditions string) ApiGetServiceSLAsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSLAsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) OrderBy(orderBy string) ApiGetServiceSLAsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) Fields(fields string) ApiGetServiceSLAsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) Page(page int32) ApiGetServiceSLAsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) PageSize(pageSize int32) ApiGetServiceSLAsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSLAsCountRequest) PageId(pageId int32) ApiGetServiceSLAsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceSLAsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSLAsCountExecute(r)
}

/*
GetServiceSLAsCount Get Count of SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceSLAsCountRequest
*/
func (a *SLAsAPIService) GetServiceSLAsCount(ctx context.Context) ApiGetServiceSLAsCountRequest {
	return ApiGetServiceSLAsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SLAsAPIService) GetServiceSLAsCountExecute(r ApiGetServiceSLAsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.GetServiceSLAsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSLAsByIdRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceSLAsByIdRequest) ClientId(clientId string) ApiPatchServiceSLAsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceSLAsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSLAsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceSLAsByIdRequest) Execute() (*SLA, *http.Response, error) {
	return r.ApiService.PatchServiceSLAsByIdExecute(r)
}

/*
PatchServiceSLAsById Patch SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiPatchServiceSLAsByIdRequest
*/
func (a *SLAsAPIService) PatchServiceSLAsById(ctx context.Context, id int32) ApiPatchServiceSLAsByIdRequest {
	return ApiPatchServiceSLAsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SLA
func (a *SLAsAPIService) PatchServiceSLAsByIdExecute(r ApiPatchServiceSLAsByIdRequest) (*SLA, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLA
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.PatchServiceSLAsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSLAsRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	clientId *string
	sLA *SLA
}

// 
func (r ApiPostServiceSLAsRequest) ClientId(clientId string) ApiPostServiceSLAsRequest {
	r.clientId = &clientId
	return r
}

// sLA
func (r ApiPostServiceSLAsRequest) SLA(sLA SLA) ApiPostServiceSLAsRequest {
	r.sLA = &sLA
	return r
}

func (r ApiPostServiceSLAsRequest) Execute() (*SLA, *http.Response, error) {
	return r.ApiService.PostServiceSLAsExecute(r)
}

/*
PostServiceSLAs Post SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceSLAsRequest
*/
func (a *SLAsAPIService) PostServiceSLAs(ctx context.Context) ApiPostServiceSLAsRequest {
	return ApiPostServiceSLAsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SLA
func (a *SLAsAPIService) PostServiceSLAsExecute(r ApiPostServiceSLAsRequest) (*SLA, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLA
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.PostServiceSLAs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.sLA == nil {
		return localVarReturnValue, nil, reportError("sLA is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.sLA
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSLAsByIdRequest struct {
	ctx context.Context
	ApiService *SLAsAPIService
	id int32
	clientId *string
	sLA *SLA
}

// 
func (r ApiPutServiceSLAsByIdRequest) ClientId(clientId string) ApiPutServiceSLAsByIdRequest {
	r.clientId = &clientId
	return r
}

// sLA
func (r ApiPutServiceSLAsByIdRequest) SLA(sLA SLA) ApiPutServiceSLAsByIdRequest {
	r.sLA = &sLA
	return r
}

func (r ApiPutServiceSLAsByIdRequest) Execute() (*SLA, *http.Response, error) {
	return r.ApiService.PutServiceSLAsByIdExecute(r)
}

/*
PutServiceSLAsById Put SLA

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id SLAId
 @return ApiPutServiceSLAsByIdRequest
*/
func (a *SLAsAPIService) PutServiceSLAsById(ctx context.Context, id int32) ApiPutServiceSLAsByIdRequest {
	return ApiPutServiceSLAsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SLA
func (a *SLAsAPIService) PutServiceSLAsByIdExecute(r ApiPutServiceSLAsByIdRequest) (*SLA, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SLA
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SLAsAPIService.PutServiceSLAsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/SLAs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.sLA == nil {
		return localVarReturnValue, nil, reportError("sLA is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.sLA
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
