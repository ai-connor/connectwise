/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SsoConfigurationsAPIService SsoConfigurationsAPI service
type SsoConfigurationsAPIService service

type ApiDeleteSystemSsoConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemSsoConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteSystemSsoConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemSsoConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemSsoConfigurationsByIdExecute(r)
}

/*
DeleteSystemSsoConfigurationsById Delete SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiDeleteSystemSsoConfigurationsByIdRequest
*/
func (a *SsoConfigurationsAPIService) DeleteSystemSsoConfigurationsById(ctx context.Context, id int32) ApiDeleteSystemSsoConfigurationsByIdRequest {
	return ApiDeleteSystemSsoConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SsoConfigurationsAPIService) DeleteSystemSsoConfigurationsByIdExecute(r ApiDeleteSystemSsoConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.DeleteSystemSsoConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemSsoConfigurationsRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) Conditions(conditions string) ApiGetSystemSsoConfigurationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) ChildConditions(childConditions string) ApiGetSystemSsoConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) OrderBy(orderBy string) ApiGetSystemSsoConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) Fields(fields string) ApiGetSystemSsoConfigurationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) Page(page int32) ApiGetSystemSsoConfigurationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) PageSize(pageSize int32) ApiGetSystemSsoConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) PageId(pageId int32) ApiGetSystemSsoConfigurationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsRequest) ClientId(clientId string) ApiGetSystemSsoConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoConfigurationsRequest) Execute() ([]SsoConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemSsoConfigurationsExecute(r)
}

/*
GetSystemSsoConfigurations Get List of SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSsoConfigurationsRequest
*/
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurations(ctx context.Context) ApiGetSystemSsoConfigurationsRequest {
	return ApiGetSystemSsoConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SsoConfiguration
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurationsExecute(r ApiGetSystemSsoConfigurationsRequest) ([]SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.GetSystemSsoConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSsoConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) Conditions(conditions string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) Fields(fields string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) Page(page int32) ApiGetSystemSsoConfigurationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetSystemSsoConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) PageId(pageId int32) ApiGetSystemSsoConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsByIdRequest) ClientId(clientId string) ApiGetSystemSsoConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoConfigurationsByIdRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemSsoConfigurationsByIdExecute(r)
}

/*
GetSystemSsoConfigurationsById Get SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiGetSystemSsoConfigurationsByIdRequest
*/
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurationsById(ctx context.Context, id int32) ApiGetSystemSsoConfigurationsByIdRequest {
	return ApiGetSystemSsoConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurationsByIdExecute(r ApiGetSystemSsoConfigurationsByIdRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.GetSystemSsoConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSsoConfigurationsCountRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) Conditions(conditions string) ApiGetSystemSsoConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetSystemSsoConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSsoConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) OrderBy(orderBy string) ApiGetSystemSsoConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) Fields(fields string) ApiGetSystemSsoConfigurationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) Page(page int32) ApiGetSystemSsoConfigurationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) PageSize(pageSize int32) ApiGetSystemSsoConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) PageId(pageId int32) ApiGetSystemSsoConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSsoConfigurationsCountRequest) ClientId(clientId string) ApiGetSystemSsoConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSsoConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSsoConfigurationsCountExecute(r)
}

/*
GetSystemSsoConfigurationsCount Get Count of SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSsoConfigurationsCountRequest
*/
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurationsCount(ctx context.Context) ApiGetSystemSsoConfigurationsCountRequest {
	return ApiGetSystemSsoConfigurationsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SsoConfigurationsAPIService) GetSystemSsoConfigurationsCountExecute(r ApiGetSystemSsoConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.GetSystemSsoConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemSsoConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemSsoConfigurationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemSsoConfigurationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemSsoConfigurationsByIdRequest) ClientId(clientId string) ApiPatchSystemSsoConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemSsoConfigurationsByIdRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.PatchSystemSsoConfigurationsByIdExecute(r)
}

/*
PatchSystemSsoConfigurationsById Patch SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiPatchSystemSsoConfigurationsByIdRequest
*/
func (a *SsoConfigurationsAPIService) PatchSystemSsoConfigurationsById(ctx context.Context, id int32) ApiPatchSystemSsoConfigurationsByIdRequest {
	return ApiPatchSystemSsoConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) PatchSystemSsoConfigurationsByIdExecute(r ApiPatchSystemSsoConfigurationsByIdRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.PatchSystemSsoConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSsoConfigurationsRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	ssoConfiguration *SsoConfiguration
	clientId *string
}

// ssoConfiguration
func (r ApiPostSystemSsoConfigurationsRequest) SsoConfiguration(ssoConfiguration SsoConfiguration) ApiPostSystemSsoConfigurationsRequest {
	r.ssoConfiguration = &ssoConfiguration
	return r
}

// 
func (r ApiPostSystemSsoConfigurationsRequest) ClientId(clientId string) ApiPostSystemSsoConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemSsoConfigurationsRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.PostSystemSsoConfigurationsExecute(r)
}

/*
PostSystemSsoConfigurations Post SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemSsoConfigurationsRequest
*/
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurations(ctx context.Context) ApiPostSystemSsoConfigurationsRequest {
	return ApiPostSystemSsoConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurationsExecute(r ApiPostSystemSsoConfigurationsRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.PostSystemSsoConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoConfiguration == nil {
		return localVarReturnValue, nil, reportError("ssoConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ssoConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSsoConfigurationsByIdRegistertokenRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	ssoConfiguration *SsoConfiguration
	clientId *string
}

// ssoConfiguration
func (r ApiPostSystemSsoConfigurationsByIdRegistertokenRequest) SsoConfiguration(ssoConfiguration SsoConfiguration) ApiPostSystemSsoConfigurationsByIdRegistertokenRequest {
	r.ssoConfiguration = &ssoConfiguration
	return r
}

// 
func (r ApiPostSystemSsoConfigurationsByIdRegistertokenRequest) ClientId(clientId string) ApiPostSystemSsoConfigurationsByIdRegistertokenRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemSsoConfigurationsByIdRegistertokenRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.PostSystemSsoConfigurationsByIdRegistertokenExecute(r)
}

/*
PostSystemSsoConfigurationsByIdRegistertoken Post SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiPostSystemSsoConfigurationsByIdRegistertokenRequest
*/
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurationsByIdRegistertoken(ctx context.Context, id int32) ApiPostSystemSsoConfigurationsByIdRegistertokenRequest {
	return ApiPostSystemSsoConfigurationsByIdRegistertokenRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurationsByIdRegistertokenExecute(r ApiPostSystemSsoConfigurationsByIdRegistertokenRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.PostSystemSsoConfigurationsByIdRegistertoken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}/registertoken"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoConfiguration == nil {
		return localVarReturnValue, nil, reportError("ssoConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ssoConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	ssoConfiguration *SsoConfiguration
	clientId *string
}

// ssoConfiguration
func (r ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest) SsoConfiguration(ssoConfiguration SsoConfiguration) ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest {
	r.ssoConfiguration = &ssoConfiguration
	return r
}

// 
func (r ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest) ClientId(clientId string) ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.PostSystemSsoConfigurationsByIdSubmitmembersExecute(r)
}

/*
PostSystemSsoConfigurationsByIdSubmitmembers Post SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest
*/
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurationsByIdSubmitmembers(ctx context.Context, id int32) ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest {
	return ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) PostSystemSsoConfigurationsByIdSubmitmembersExecute(r ApiPostSystemSsoConfigurationsByIdSubmitmembersRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.PostSystemSsoConfigurationsByIdSubmitmembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}/submitmembers"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoConfiguration == nil {
		return localVarReturnValue, nil, reportError("ssoConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ssoConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemSsoConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *SsoConfigurationsAPIService
	id int32
	ssoConfiguration *SsoConfiguration
	clientId *string
}

// ssoConfiguration
func (r ApiPutSystemSsoConfigurationsByIdRequest) SsoConfiguration(ssoConfiguration SsoConfiguration) ApiPutSystemSsoConfigurationsByIdRequest {
	r.ssoConfiguration = &ssoConfiguration
	return r
}

// 
func (r ApiPutSystemSsoConfigurationsByIdRequest) ClientId(clientId string) ApiPutSystemSsoConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemSsoConfigurationsByIdRequest) Execute() (*SsoConfiguration, *http.Response, error) {
	return r.ApiService.PutSystemSsoConfigurationsByIdExecute(r)
}

/*
PutSystemSsoConfigurationsById Put SsoConfiguration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ssoConfigurationId
 @return ApiPutSystemSsoConfigurationsByIdRequest
*/
func (a *SsoConfigurationsAPIService) PutSystemSsoConfigurationsById(ctx context.Context, id int32) ApiPutSystemSsoConfigurationsByIdRequest {
	return ApiPutSystemSsoConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SsoConfiguration
func (a *SsoConfigurationsAPIService) PutSystemSsoConfigurationsByIdExecute(r ApiPutSystemSsoConfigurationsByIdRequest) (*SsoConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SsoConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SsoConfigurationsAPIService.PutSystemSsoConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ssoConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ssoConfiguration == nil {
		return localVarReturnValue, nil, reportError("ssoConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ssoConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
