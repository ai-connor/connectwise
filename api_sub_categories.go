/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SubCategoriesAPIService SubCategoriesAPI service
type SubCategoriesAPIService service

type ApiDeleteProcurementSubcategoriesByIdRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementSubcategoriesByIdRequest) ClientId(clientId string) ApiDeleteProcurementSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementSubcategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementSubcategoriesByIdExecute(r)
}

/*
DeleteProcurementSubcategoriesById Delete SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiDeleteProcurementSubcategoriesByIdRequest
*/
func (a *SubCategoriesAPIService) DeleteProcurementSubcategoriesById(ctx context.Context, id int32) ApiDeleteProcurementSubcategoriesByIdRequest {
	return ApiDeleteProcurementSubcategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *SubCategoriesAPIService) DeleteProcurementSubcategoriesByIdExecute(r ApiDeleteProcurementSubcategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.DeleteProcurementSubcategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) Fields(fields string) ApiGetProcurementSubcategoriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) Page(page int32) ApiGetProcurementSubcategoriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesRequest) Execute() ([]SubCategory, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesExecute(r)
}

/*
GetProcurementSubcategories Get List of SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementSubcategoriesRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategories(ctx context.Context) ApiGetProcurementSubcategoriesRequest {
	return ApiGetProcurementSubcategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SubCategory
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesExecute(r ApiGetProcurementSubcategoriesRequest) ([]SubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesByIdRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) Fields(fields string) ApiGetProcurementSubcategoriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) Page(page int32) ApiGetProcurementSubcategoriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesByIdRequest) Execute() (*SubCategory, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesByIdExecute(r)
}

/*
GetProcurementSubcategoriesById Get SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiGetProcurementSubcategoriesByIdRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesById(ctx context.Context, id int32) ApiGetProcurementSubcategoriesByIdRequest {
	return ApiGetProcurementSubcategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubCategory
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdExecute(r ApiGetProcurementSubcategoriesByIdRequest) (*SubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesByIdInfoRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) Fields(fields string) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) Page(page int32) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdInfoRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesByIdInfoRequest) Execute() (*SubCategoryInfo, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesByIdInfoExecute(r)
}

/*
GetProcurementSubcategoriesByIdInfo Get SubCategoryInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiGetProcurementSubcategoriesByIdInfoRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdInfo(ctx context.Context, id int32) ApiGetProcurementSubcategoriesByIdInfoRequest {
	return ApiGetProcurementSubcategoriesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubCategoryInfo
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdInfoExecute(r ApiGetProcurementSubcategoriesByIdInfoRequest) (*SubCategoryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubCategoryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) Fields(fields string) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) Page(page int32) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesByIdUsagesExecute(r)
}

/*
GetProcurementSubcategoriesByIdUsages Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiGetProcurementSubcategoriesByIdUsagesRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdUsages(ctx context.Context, id int32) ApiGetProcurementSubcategoriesByIdUsagesRequest {
	return ApiGetProcurementSubcategoriesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdUsagesExecute(r ApiGetProcurementSubcategoriesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) Fields(fields string) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) Page(page int32) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesByIdUsagesListExecute(r)
}

/*
GetProcurementSubcategoriesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiGetProcurementSubcategoriesByIdUsagesListRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdUsagesList(ctx context.Context, id int32) ApiGetProcurementSubcategoriesByIdUsagesListRequest {
	return ApiGetProcurementSubcategoriesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesByIdUsagesListExecute(r ApiGetProcurementSubcategoriesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesCountRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) Fields(fields string) ApiGetProcurementSubcategoriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) Page(page int32) ApiGetProcurementSubcategoriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesCountRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesCountExecute(r)
}

/*
GetProcurementSubcategoriesCount Get Count of SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementSubcategoriesCountRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesCount(ctx context.Context) ApiGetProcurementSubcategoriesCountRequest {
	return ApiGetProcurementSubcategoriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesCountExecute(r ApiGetProcurementSubcategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesInfoRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) Fields(fields string) ApiGetProcurementSubcategoriesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) Page(page int32) ApiGetProcurementSubcategoriesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesInfoRequest) Execute() ([]SubCategoryInfo, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesInfoExecute(r)
}

/*
GetProcurementSubcategoriesInfo Get List of SubCategoryInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementSubcategoriesInfoRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesInfo(ctx context.Context) ApiGetProcurementSubcategoriesInfoRequest {
	return ApiGetProcurementSubcategoriesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SubCategoryInfo
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesInfoExecute(r ApiGetProcurementSubcategoriesInfoRequest) ([]SubCategoryInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SubCategoryInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/info/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementSubcategoriesInfoCountRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) ClientId(clientId string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) Conditions(conditions string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) ChildConditions(childConditions string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) OrderBy(orderBy string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) Fields(fields string) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) Page(page int32) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) PageSize(pageSize int32) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementSubcategoriesInfoCountRequest) PageId(pageId int32) ApiGetProcurementSubcategoriesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementSubcategoriesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementSubcategoriesInfoCountExecute(r)
}

/*
GetProcurementSubcategoriesInfoCount Get Count of SubCategoryInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementSubcategoriesInfoCountRequest
*/
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesInfoCount(ctx context.Context) ApiGetProcurementSubcategoriesInfoCountRequest {
	return ApiGetProcurementSubcategoriesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SubCategoriesAPIService) GetProcurementSubcategoriesInfoCountExecute(r ApiGetProcurementSubcategoriesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.GetProcurementSubcategoriesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementSubcategoriesByIdRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchProcurementSubcategoriesByIdRequest) ClientId(clientId string) ApiPatchProcurementSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementSubcategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementSubcategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementSubcategoriesByIdRequest) Execute() (*SubCategory, *http.Response, error) {
	return r.ApiService.PatchProcurementSubcategoriesByIdExecute(r)
}

/*
PatchProcurementSubcategoriesById Patch SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiPatchProcurementSubcategoriesByIdRequest
*/
func (a *SubCategoriesAPIService) PatchProcurementSubcategoriesById(ctx context.Context, id int32) ApiPatchProcurementSubcategoriesByIdRequest {
	return ApiPatchProcurementSubcategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubCategory
func (a *SubCategoriesAPIService) PatchProcurementSubcategoriesByIdExecute(r ApiPatchProcurementSubcategoriesByIdRequest) (*SubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.PatchProcurementSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementSubcategoriesRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	clientId *string
	subCategory *SubCategory
}

// 
func (r ApiPostProcurementSubcategoriesRequest) ClientId(clientId string) ApiPostProcurementSubcategoriesRequest {
	r.clientId = &clientId
	return r
}

// subCategory
func (r ApiPostProcurementSubcategoriesRequest) SubCategory(subCategory SubCategory) ApiPostProcurementSubcategoriesRequest {
	r.subCategory = &subCategory
	return r
}

func (r ApiPostProcurementSubcategoriesRequest) Execute() (*SubCategory, *http.Response, error) {
	return r.ApiService.PostProcurementSubcategoriesExecute(r)
}

/*
PostProcurementSubcategories Post SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementSubcategoriesRequest
*/
func (a *SubCategoriesAPIService) PostProcurementSubcategories(ctx context.Context) ApiPostProcurementSubcategoriesRequest {
	return ApiPostProcurementSubcategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SubCategory
func (a *SubCategoriesAPIService) PostProcurementSubcategoriesExecute(r ApiPostProcurementSubcategoriesRequest) (*SubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.PostProcurementSubcategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.subCategory == nil {
		return localVarReturnValue, nil, reportError("subCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.subCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementSubcategoriesByIdRequest struct {
	ctx context.Context
	ApiService *SubCategoriesAPIService
	id int32
	clientId *string
	subCategory *SubCategory
}

// 
func (r ApiPutProcurementSubcategoriesByIdRequest) ClientId(clientId string) ApiPutProcurementSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// subCategory
func (r ApiPutProcurementSubcategoriesByIdRequest) SubCategory(subCategory SubCategory) ApiPutProcurementSubcategoriesByIdRequest {
	r.subCategory = &subCategory
	return r
}

func (r ApiPutProcurementSubcategoriesByIdRequest) Execute() (*SubCategory, *http.Response, error) {
	return r.ApiService.PutProcurementSubcategoriesByIdExecute(r)
}

/*
PutProcurementSubcategoriesById Put SubCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id subcategoryId
 @return ApiPutProcurementSubcategoriesByIdRequest
*/
func (a *SubCategoriesAPIService) PutProcurementSubcategoriesById(ctx context.Context, id int32) ApiPutProcurementSubcategoriesByIdRequest {
	return ApiPutProcurementSubcategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SubCategory
func (a *SubCategoriesAPIService) PutProcurementSubcategoriesByIdExecute(r ApiPutProcurementSubcategoriesByIdRequest) (*SubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubCategoriesAPIService.PutProcurementSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.subCategory == nil {
		return localVarReturnValue, nil, reportError("subCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.subCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
