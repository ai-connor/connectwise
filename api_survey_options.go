/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SurveyOptionsAPIService SurveyOptionsAPI service
type SurveyOptionsAPIService service

type ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) ClientId(clientId string) ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r)
}

/*
DeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById Delete SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id optionId
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest
*/
func (a *SurveyOptionsAPIService) DeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	return ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *SurveyOptionsAPIService) DeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r ApiDeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.DeleteServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) Conditions(conditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) OrderBy(orderBy string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) Fields(fields string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) Page(page int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) PageSize(pageSize int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) PageId(pageId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) ClientId(clientId string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) Execute() ([]SurveyOption, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsExecute(r)
}

/*
GetServiceSurveysByGrandparentIdQuestionsByParentIdOptions Get List of SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest
*/
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptions(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []SurveyOption
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsExecute(r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) ([]SurveyOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SurveyOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Conditions(conditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) OrderBy(orderBy string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Fields(fields string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Page(page int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) PageSize(pageSize int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) PageId(pageId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) ClientId(clientId string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Execute() (*SurveyOption, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r)
}

/*
GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById Get SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id optionId
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest
*/
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return SurveyOption
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) (*SurveyOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) Conditions(conditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) OrderBy(orderBy string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) Fields(fields string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) Page(page int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) PageSize(pageSize int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) PageId(pageId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) ClientId(clientId string) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountExecute(r)
}

/*
GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCount Get Count of SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest
*/
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest {
	return ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *SurveyOptionsAPIService) GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountExecute(r ApiGetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.GetServiceSurveysByGrandparentIdQuestionsByParentIdOptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) ClientId(clientId string) ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Execute() (*SurveyOption, *http.Response, error) {
	return r.ApiService.PatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r)
}

/*
PatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById Patch SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id optionId
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest
*/
func (a *SurveyOptionsAPIService) PatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	return ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return SurveyOption
func (a *SurveyOptionsAPIService) PatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r ApiPatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) (*SurveyOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.PatchServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	parentId int32
	grandparentId int32
	surveyOption *SurveyOption
	clientId *string
}

// surveyOption
func (r ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) SurveyOption(surveyOption SurveyOption) ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.surveyOption = &surveyOption
	return r
}

// 
func (r ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) ClientId(clientId string) ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) Execute() (*SurveyOption, *http.Response, error) {
	return r.ApiService.PostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsExecute(r)
}

/*
PostServiceSurveysByGrandparentIdQuestionsByParentIdOptions Post SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest
*/
func (a *SurveyOptionsAPIService) PostServiceSurveysByGrandparentIdQuestionsByParentIdOptions(ctx context.Context, parentId int32, grandparentId int32) ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest {
	return ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return SurveyOption
func (a *SurveyOptionsAPIService) PostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsExecute(r ApiPostServiceSurveysByGrandparentIdQuestionsByParentIdOptionsRequest) (*SurveyOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.PostServiceSurveysByGrandparentIdQuestionsByParentIdOptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyOption == nil {
		return localVarReturnValue, nil, reportError("surveyOption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyOption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyOptionsAPIService
	id int32
	parentId int32
	grandparentId int32
	surveyOption *SurveyOption
	clientId *string
}

// surveyOption
func (r ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) SurveyOption(surveyOption SurveyOption) ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.surveyOption = &surveyOption
	return r
}

// 
func (r ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) ClientId(clientId string) ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) Execute() (*SurveyOption, *http.Response, error) {
	return r.ApiService.PutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r)
}

/*
PutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById Put SurveyOption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id optionId
 @param parentId questionId
 @param grandparentId surveyId
 @return ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest
*/
func (a *SurveyOptionsAPIService) PutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest {
	return ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return SurveyOption
func (a *SurveyOptionsAPIService) PutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdExecute(r ApiPutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsByIdRequest) (*SurveyOption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyOption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyOptionsAPIService.PutServiceSurveysByGrandparentIdQuestionsByParentIdOptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{grandparentId}/questions/{parentId}/options/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyOption == nil {
		return localVarReturnValue, nil, reportError("surveyOption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyOption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
