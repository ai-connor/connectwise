/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SurveyQuestionsAPIService SurveyQuestionsAPI service
type SurveyQuestionsAPIService service

type ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemSurveysByParentIdQuestionsByIdExecute(r)
}

/*
DeleteSystemSurveysByParentIdQuestionsById Delete SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest
*/
func (a *SurveyQuestionsAPIService) DeleteSystemSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest {
	return ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *SurveyQuestionsAPIService) DeleteSystemSurveysByParentIdQuestionsByIdExecute(r ApiDeleteSystemSurveysByParentIdQuestionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.DeleteSystemSurveysByParentIdQuestionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemSurveysByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) Conditions(conditions string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) ChildConditions(childConditions string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) OrderBy(orderBy string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) Fields(fields string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) Page(page int32) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) PageSize(pageSize int32) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) PageId(pageId int32) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsRequest) ClientId(clientId string) ApiGetSystemSurveysByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSurveysByParentIdQuestionsRequest) Execute() ([]SurveyQuestion, *http.Response, error) {
	return r.ApiService.GetSystemSurveysByParentIdQuestionsExecute(r)
}

/*
GetSystemSurveysByParentIdQuestions Get List of SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetSystemSurveysByParentIdQuestionsRequest
*/
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestions(ctx context.Context, parentId int32) ApiGetSystemSurveysByParentIdQuestionsRequest {
	return ApiGetSystemSurveysByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []SurveyQuestion
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestionsExecute(r ApiGetSystemSurveysByParentIdQuestionsRequest) ([]SurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.GetSystemSurveysByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) Conditions(conditions string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) ChildConditions(childConditions string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) OrderBy(orderBy string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) Fields(fields string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) Page(page int32) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) PageSize(pageSize int32) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) PageId(pageId int32) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) Execute() (*SurveyQuestion, *http.Response, error) {
	return r.ApiService.GetSystemSurveysByParentIdQuestionsByIdExecute(r)
}

/*
GetSystemSurveysByParentIdQuestionsById Get SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiGetSystemSurveysByParentIdQuestionsByIdRequest
*/
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiGetSystemSurveysByParentIdQuestionsByIdRequest {
	return ApiGetSystemSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyQuestion
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestionsByIdExecute(r ApiGetSystemSurveysByParentIdQuestionsByIdRequest) (*SurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.GetSystemSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSurveysByParentIdQuestionsCountRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) Conditions(conditions string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) ChildConditions(childConditions string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) OrderBy(orderBy string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) Fields(fields string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) Page(page int32) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) PageSize(pageSize int32) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) PageId(pageId int32) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) ClientId(clientId string) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemSurveysByParentIdQuestionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSurveysByParentIdQuestionsCountExecute(r)
}

/*
GetSystemSurveysByParentIdQuestionsCount Get Count of SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetSystemSurveysByParentIdQuestionsCountRequest
*/
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestionsCount(ctx context.Context, parentId int32) ApiGetSystemSurveysByParentIdQuestionsCountRequest {
	return ApiGetSystemSurveysByParentIdQuestionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *SurveyQuestionsAPIService) GetSystemSurveysByParentIdQuestionsCountExecute(r ApiGetSystemSurveysByParentIdQuestionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.GetSystemSurveysByParentIdQuestionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemSurveysByParentIdQuestionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemSurveysByParentIdQuestionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPatchSystemSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemSurveysByParentIdQuestionsByIdRequest) Execute() (*SurveyQuestion, *http.Response, error) {
	return r.ApiService.PatchSystemSurveysByParentIdQuestionsByIdExecute(r)
}

/*
PatchSystemSurveysByParentIdQuestionsById Patch SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiPatchSystemSurveysByParentIdQuestionsByIdRequest
*/
func (a *SurveyQuestionsAPIService) PatchSystemSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemSurveysByParentIdQuestionsByIdRequest {
	return ApiPatchSystemSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyQuestion
func (a *SurveyQuestionsAPIService) PatchSystemSurveysByParentIdQuestionsByIdExecute(r ApiPatchSystemSurveysByParentIdQuestionsByIdRequest) (*SurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.PatchSystemSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemSurveysByParentIdQuestionsRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	parentId int32
	surveyQuestion *SurveyQuestion
	clientId *string
}

// surveyQuestion
func (r ApiPostSystemSurveysByParentIdQuestionsRequest) SurveyQuestion(surveyQuestion SurveyQuestion) ApiPostSystemSurveysByParentIdQuestionsRequest {
	r.surveyQuestion = &surveyQuestion
	return r
}

// 
func (r ApiPostSystemSurveysByParentIdQuestionsRequest) ClientId(clientId string) ApiPostSystemSurveysByParentIdQuestionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemSurveysByParentIdQuestionsRequest) Execute() (*SurveyQuestion, *http.Response, error) {
	return r.ApiService.PostSystemSurveysByParentIdQuestionsExecute(r)
}

/*
PostSystemSurveysByParentIdQuestions Post SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiPostSystemSurveysByParentIdQuestionsRequest
*/
func (a *SurveyQuestionsAPIService) PostSystemSurveysByParentIdQuestions(ctx context.Context, parentId int32) ApiPostSystemSurveysByParentIdQuestionsRequest {
	return ApiPostSystemSurveysByParentIdQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyQuestion
func (a *SurveyQuestionsAPIService) PostSystemSurveysByParentIdQuestionsExecute(r ApiPostSystemSurveysByParentIdQuestionsRequest) (*SurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.PostSystemSurveysByParentIdQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyQuestion == nil {
		return localVarReturnValue, nil, reportError("surveyQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemSurveysByParentIdQuestionsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyQuestionsAPIService
	id int32
	parentId int32
	surveyQuestion *SurveyQuestion
	clientId *string
}

// surveyQuestion
func (r ApiPutSystemSurveysByParentIdQuestionsByIdRequest) SurveyQuestion(surveyQuestion SurveyQuestion) ApiPutSystemSurveysByParentIdQuestionsByIdRequest {
	r.surveyQuestion = &surveyQuestion
	return r
}

// 
func (r ApiPutSystemSurveysByParentIdQuestionsByIdRequest) ClientId(clientId string) ApiPutSystemSurveysByParentIdQuestionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemSurveysByParentIdQuestionsByIdRequest) Execute() (*SurveyQuestion, *http.Response, error) {
	return r.ApiService.PutSystemSurveysByParentIdQuestionsByIdExecute(r)
}

/*
PutSystemSurveysByParentIdQuestionsById Put SurveyQuestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id questionId
 @param parentId surveyId
 @return ApiPutSystemSurveysByParentIdQuestionsByIdRequest
*/
func (a *SurveyQuestionsAPIService) PutSystemSurveysByParentIdQuestionsById(ctx context.Context, id int32, parentId int32) ApiPutSystemSurveysByParentIdQuestionsByIdRequest {
	return ApiPutSystemSurveysByParentIdQuestionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyQuestion
func (a *SurveyQuestionsAPIService) PutSystemSurveysByParentIdQuestionsByIdExecute(r ApiPutSystemSurveysByParentIdQuestionsByIdRequest) (*SurveyQuestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyQuestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyQuestionsAPIService.PutSystemSurveysByParentIdQuestionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/surveys/{parentId}/questions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyQuestion == nil {
		return localVarReturnValue, nil, reportError("surveyQuestion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyQuestion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
