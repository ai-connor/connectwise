/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SurveyResultsAPIService SurveyResultsAPI service
type SurveyResultsAPIService service

type ApiDeleteServiceSurveysByParentIdResultsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceSurveysByParentIdResultsByIdRequest) ClientId(clientId string) ApiDeleteServiceSurveysByParentIdResultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceSurveysByParentIdResultsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceSurveysByParentIdResultsByIdExecute(r)
}

/*
DeleteServiceSurveysByParentIdResultsById Delete SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id resultId
 @param parentId surveyId
 @return ApiDeleteServiceSurveysByParentIdResultsByIdRequest
*/
func (a *SurveyResultsAPIService) DeleteServiceSurveysByParentIdResultsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceSurveysByParentIdResultsByIdRequest {
	return ApiDeleteServiceSurveysByParentIdResultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *SurveyResultsAPIService) DeleteServiceSurveysByParentIdResultsByIdExecute(r ApiDeleteServiceSurveysByParentIdResultsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.DeleteServiceSurveysByParentIdResultsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdResultsRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) Fields(fields string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) Page(page int32) ApiGetServiceSurveysByParentIdResultsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdResultsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdResultsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdResultsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdResultsRequest) Execute() ([]SurveyResult, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdResultsExecute(r)
}

/*
GetServiceSurveysByParentIdResults Get List of SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdResultsRequest
*/
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResults(ctx context.Context, parentId int32) ApiGetServiceSurveysByParentIdResultsRequest {
	return ApiGetServiceSurveysByParentIdResultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []SurveyResult
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResultsExecute(r ApiGetServiceSurveysByParentIdResultsRequest) ([]SurveyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SurveyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.GetServiceSurveysByParentIdResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdResultsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) Fields(fields string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) Page(page int32) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdResultsByIdRequest) Execute() (*SurveyResult, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdResultsByIdExecute(r)
}

/*
GetServiceSurveysByParentIdResultsById Get SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id resultId
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdResultsByIdRequest
*/
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResultsById(ctx context.Context, id int32, parentId int32) ApiGetServiceSurveysByParentIdResultsByIdRequest {
	return ApiGetServiceSurveysByParentIdResultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyResult
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResultsByIdExecute(r ApiGetServiceSurveysByParentIdResultsByIdRequest) (*SurveyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.GetServiceSurveysByParentIdResultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceSurveysByParentIdResultsCountRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) Conditions(conditions string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) ChildConditions(childConditions string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) OrderBy(orderBy string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) Fields(fields string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) Page(page int32) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) PageSize(pageSize int32) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) PageId(pageId int32) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceSurveysByParentIdResultsCountRequest) ClientId(clientId string) ApiGetServiceSurveysByParentIdResultsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceSurveysByParentIdResultsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceSurveysByParentIdResultsCountExecute(r)
}

/*
GetServiceSurveysByParentIdResultsCount Get Count of SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiGetServiceSurveysByParentIdResultsCountRequest
*/
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResultsCount(ctx context.Context, parentId int32) ApiGetServiceSurveysByParentIdResultsCountRequest {
	return ApiGetServiceSurveysByParentIdResultsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *SurveyResultsAPIService) GetServiceSurveysByParentIdResultsCountExecute(r ApiGetServiceSurveysByParentIdResultsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.GetServiceSurveysByParentIdResultsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceSurveysByParentIdResultsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceSurveysByParentIdResultsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceSurveysByParentIdResultsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceSurveysByParentIdResultsByIdRequest) ClientId(clientId string) ApiPatchServiceSurveysByParentIdResultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceSurveysByParentIdResultsByIdRequest) Execute() (*SurveyResult, *http.Response, error) {
	return r.ApiService.PatchServiceSurveysByParentIdResultsByIdExecute(r)
}

/*
PatchServiceSurveysByParentIdResultsById Patch SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id resultId
 @param parentId surveyId
 @return ApiPatchServiceSurveysByParentIdResultsByIdRequest
*/
func (a *SurveyResultsAPIService) PatchServiceSurveysByParentIdResultsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceSurveysByParentIdResultsByIdRequest {
	return ApiPatchServiceSurveysByParentIdResultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyResult
func (a *SurveyResultsAPIService) PatchServiceSurveysByParentIdResultsByIdExecute(r ApiPatchServiceSurveysByParentIdResultsByIdRequest) (*SurveyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.PatchServiceSurveysByParentIdResultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceSurveysByParentIdResultsRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	parentId int32
	surveyResult *SurveyResult
	clientId *string
}

// surveyResult
func (r ApiPostServiceSurveysByParentIdResultsRequest) SurveyResult(surveyResult SurveyResult) ApiPostServiceSurveysByParentIdResultsRequest {
	r.surveyResult = &surveyResult
	return r
}

// 
func (r ApiPostServiceSurveysByParentIdResultsRequest) ClientId(clientId string) ApiPostServiceSurveysByParentIdResultsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceSurveysByParentIdResultsRequest) Execute() (*SurveyResult, *http.Response, error) {
	return r.ApiService.PostServiceSurveysByParentIdResultsExecute(r)
}

/*
PostServiceSurveysByParentIdResults Post SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId surveyId
 @return ApiPostServiceSurveysByParentIdResultsRequest
*/
func (a *SurveyResultsAPIService) PostServiceSurveysByParentIdResults(ctx context.Context, parentId int32) ApiPostServiceSurveysByParentIdResultsRequest {
	return ApiPostServiceSurveysByParentIdResultsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyResult
func (a *SurveyResultsAPIService) PostServiceSurveysByParentIdResultsExecute(r ApiPostServiceSurveysByParentIdResultsRequest) (*SurveyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.PostServiceSurveysByParentIdResults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyResult == nil {
		return localVarReturnValue, nil, reportError("surveyResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceSurveysByParentIdResultsByIdRequest struct {
	ctx context.Context
	ApiService *SurveyResultsAPIService
	id int32
	parentId int32
	surveyResult *SurveyResult
	clientId *string
}

// surveyResult
func (r ApiPutServiceSurveysByParentIdResultsByIdRequest) SurveyResult(surveyResult SurveyResult) ApiPutServiceSurveysByParentIdResultsByIdRequest {
	r.surveyResult = &surveyResult
	return r
}

// 
func (r ApiPutServiceSurveysByParentIdResultsByIdRequest) ClientId(clientId string) ApiPutServiceSurveysByParentIdResultsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceSurveysByParentIdResultsByIdRequest) Execute() (*SurveyResult, *http.Response, error) {
	return r.ApiService.PutServiceSurveysByParentIdResultsByIdExecute(r)
}

/*
PutServiceSurveysByParentIdResultsById Put SurveyResult

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id resultId
 @param parentId surveyId
 @return ApiPutServiceSurveysByParentIdResultsByIdRequest
*/
func (a *SurveyResultsAPIService) PutServiceSurveysByParentIdResultsById(ctx context.Context, id int32, parentId int32) ApiPutServiceSurveysByParentIdResultsByIdRequest {
	return ApiPutServiceSurveysByParentIdResultsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SurveyResult
func (a *SurveyResultsAPIService) PutServiceSurveysByParentIdResultsByIdExecute(r ApiPutServiceSurveysByParentIdResultsByIdRequest) (*SurveyResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SurveyResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SurveyResultsAPIService.PutServiceSurveysByParentIdResultsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/surveys/{parentId}/results/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.surveyResult == nil {
		return localVarReturnValue, nil, reportError("surveyResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.surveyResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
