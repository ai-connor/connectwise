/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// SystemSettingsAPIService SystemSettingsAPI service
type SystemSettingsAPIService service

type ApiGetSystemSettingsRequest struct {
	ctx context.Context
	ApiService *SystemSettingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemSettingsRequest) ClientId(clientId string) ApiGetSystemSettingsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemSettingsRequest) Conditions(conditions string) ApiGetSystemSettingsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSettingsRequest) ChildConditions(childConditions string) ApiGetSystemSettingsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSettingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSettingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSettingsRequest) OrderBy(orderBy string) ApiGetSystemSettingsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSettingsRequest) Fields(fields string) ApiGetSystemSettingsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSettingsRequest) Page(page int32) ApiGetSystemSettingsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSettingsRequest) PageSize(pageSize int32) ApiGetSystemSettingsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSettingsRequest) PageId(pageId int32) ApiGetSystemSettingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSettingsRequest) Execute() ([]SystemSetting, *http.Response, error) {
	return r.ApiService.GetSystemSettingsExecute(r)
}

/*
GetSystemSettings Get List of SystemSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSettingsRequest
*/
func (a *SystemSettingsAPIService) GetSystemSettings(ctx context.Context) ApiGetSystemSettingsRequest {
	return ApiGetSystemSettingsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []SystemSetting
func (a *SystemSettingsAPIService) GetSystemSettingsExecute(r ApiGetSystemSettingsRequest) ([]SystemSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []SystemSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.GetSystemSettings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/settings"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSettingsByIdRequest struct {
	ctx context.Context
	ApiService *SystemSettingsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemSettingsByIdRequest) ClientId(clientId string) ApiGetSystemSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) Conditions(conditions string) ApiGetSystemSettingsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) ChildConditions(childConditions string) ApiGetSystemSettingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSettingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) OrderBy(orderBy string) ApiGetSystemSettingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) Fields(fields string) ApiGetSystemSettingsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) Page(page int32) ApiGetSystemSettingsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) PageSize(pageSize int32) ApiGetSystemSettingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSettingsByIdRequest) PageId(pageId int32) ApiGetSystemSettingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSettingsByIdRequest) Execute() (*SystemSetting, *http.Response, error) {
	return r.ApiService.GetSystemSettingsByIdExecute(r)
}

/*
GetSystemSettingsById Get SystemSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id settingId
 @return ApiGetSystemSettingsByIdRequest
*/
func (a *SystemSettingsAPIService) GetSystemSettingsById(ctx context.Context, id int32) ApiGetSystemSettingsByIdRequest {
	return ApiGetSystemSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SystemSetting
func (a *SystemSettingsAPIService) GetSystemSettingsByIdExecute(r ApiGetSystemSettingsByIdRequest) (*SystemSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.GetSystemSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemSettingsCountRequest struct {
	ctx context.Context
	ApiService *SystemSettingsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemSettingsCountRequest) ClientId(clientId string) ApiGetSystemSettingsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) Conditions(conditions string) ApiGetSystemSettingsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) ChildConditions(childConditions string) ApiGetSystemSettingsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemSettingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) OrderBy(orderBy string) ApiGetSystemSettingsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) Fields(fields string) ApiGetSystemSettingsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) Page(page int32) ApiGetSystemSettingsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) PageSize(pageSize int32) ApiGetSystemSettingsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemSettingsCountRequest) PageId(pageId int32) ApiGetSystemSettingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemSettingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemSettingsCountExecute(r)
}

/*
GetSystemSettingsCount Get Count of SystemSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemSettingsCountRequest
*/
func (a *SystemSettingsAPIService) GetSystemSettingsCount(ctx context.Context) ApiGetSystemSettingsCountRequest {
	return ApiGetSystemSettingsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *SystemSettingsAPIService) GetSystemSettingsCountExecute(r ApiGetSystemSettingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.GetSystemSettingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/settings/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemSettingsByIdRequest struct {
	ctx context.Context
	ApiService *SystemSettingsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemSettingsByIdRequest) ClientId(clientId string) ApiPatchSystemSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemSettingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemSettingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemSettingsByIdRequest) Execute() (*SystemSetting, *http.Response, error) {
	return r.ApiService.PatchSystemSettingsByIdExecute(r)
}

/*
PatchSystemSettingsById Patch SystemSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id settingId
 @return ApiPatchSystemSettingsByIdRequest
*/
func (a *SystemSettingsAPIService) PatchSystemSettingsById(ctx context.Context, id int32) ApiPatchSystemSettingsByIdRequest {
	return ApiPatchSystemSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SystemSetting
func (a *SystemSettingsAPIService) PatchSystemSettingsByIdExecute(r ApiPatchSystemSettingsByIdRequest) (*SystemSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.PatchSystemSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemSettingsByIdRequest struct {
	ctx context.Context
	ApiService *SystemSettingsAPIService
	id int32
	clientId *string
	systemSetting *SystemSetting
}

// 
func (r ApiPutSystemSettingsByIdRequest) ClientId(clientId string) ApiPutSystemSettingsByIdRequest {
	r.clientId = &clientId
	return r
}

// systemSetting
func (r ApiPutSystemSettingsByIdRequest) SystemSetting(systemSetting SystemSetting) ApiPutSystemSettingsByIdRequest {
	r.systemSetting = &systemSetting
	return r
}

func (r ApiPutSystemSettingsByIdRequest) Execute() (*SystemSetting, *http.Response, error) {
	return r.ApiService.PutSystemSettingsByIdExecute(r)
}

/*
PutSystemSettingsById Put SystemSetting

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id settingId
 @return ApiPutSystemSettingsByIdRequest
*/
func (a *SystemSettingsAPIService) PutSystemSettingsById(ctx context.Context, id int32) ApiPutSystemSettingsByIdRequest {
	return ApiPutSystemSettingsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SystemSetting
func (a *SystemSettingsAPIService) PutSystemSettingsByIdExecute(r ApiPutSystemSettingsByIdRequest) (*SystemSetting, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.PutSystemSettingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/settings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.systemSetting == nil {
		return localVarReturnValue, nil, reportError("systemSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.systemSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
