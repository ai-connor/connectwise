/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaxCodeExpenseTypeExemptionsAPIService TaxCodeExpenseTypeExemptionsAPI service
type TaxCodeExpenseTypeExemptionsAPIService service

type ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsById Delete ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeExemptionId
 @param parentId taxCodeId
 @return ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) DeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	return ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TaxCodeExpenseTypeExemptionsAPIService) DeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r ApiDeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.DeleteFinanceTaxCodesByParentIdExpenseTypeExemptionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) Execute() ([]ExpenseTypeExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdExpenseTypeExemptionsExecute(r)
}

/*
GetFinanceTaxCodesByParentIdExpenseTypeExemptions Get List of ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptions(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ExpenseTypeExemption
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptionsExecute(r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) ([]ExpenseTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ExpenseTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdExpenseTypeExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Execute() (*ExpenseTypeExemption, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r)
}

/*
GetFinanceTaxCodesByParentIdExpenseTypeExemptionsById Get ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeExemptionId
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ExpenseTypeExemption
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) (*ExpenseTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExpenseTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdExpenseTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountExecute(r)
}

/*
GetFinanceTaxCodesByParentIdExpenseTypeExemptionsCount Get Count of ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptionsCount(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest {
	return ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TaxCodeExpenseTypeExemptionsAPIService) GetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountExecute(r ApiGetFinanceTaxCodesByParentIdExpenseTypeExemptionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.GetFinanceTaxCodesByParentIdExpenseTypeExemptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Execute() (*ExpenseTypeExemption, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByParentIdExpenseTypeExemptionsById Patch ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeExemptionId
 @param parentId taxCodeId
 @return ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) PatchFinanceTaxCodesByParentIdExpenseTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	return ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ExpenseTypeExemption
func (a *TaxCodeExpenseTypeExemptionsAPIService) PatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r ApiPatchFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) (*ExpenseTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExpenseTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.PatchFinanceTaxCodesByParentIdExpenseTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	parentId int32
	expenseTypeExemption *ExpenseTypeExemption
	clientId *string
}

// expenseTypeExemption
func (r ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) ExpenseTypeExemption(expenseTypeExemption ExpenseTypeExemption) ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.expenseTypeExemption = &expenseTypeExemption
	return r
}

// 
func (r ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) Execute() (*ExpenseTypeExemption, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByParentIdExpenseTypeExemptionsExecute(r)
}

/*
PostFinanceTaxCodesByParentIdExpenseTypeExemptions Post ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) PostFinanceTaxCodesByParentIdExpenseTypeExemptions(ctx context.Context, parentId int32) ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest {
	return ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ExpenseTypeExemption
func (a *TaxCodeExpenseTypeExemptionsAPIService) PostFinanceTaxCodesByParentIdExpenseTypeExemptionsExecute(r ApiPostFinanceTaxCodesByParentIdExpenseTypeExemptionsRequest) (*ExpenseTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExpenseTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.PostFinanceTaxCodesByParentIdExpenseTypeExemptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expenseTypeExemption == nil {
		return localVarReturnValue, nil, reportError("expenseTypeExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.expenseTypeExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeExpenseTypeExemptionsAPIService
	id int32
	parentId int32
	expenseTypeExemption *ExpenseTypeExemption
	clientId *string
}

// expenseTypeExemption
func (r ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ExpenseTypeExemption(expenseTypeExemption ExpenseTypeExemption) ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.expenseTypeExemption = &expenseTypeExemption
	return r
}

// 
func (r ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) Execute() (*ExpenseTypeExemption, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r)
}

/*
PutFinanceTaxCodesByParentIdExpenseTypeExemptionsById Put ExpenseTypeExemption

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id expenseTypeExemptionId
 @param parentId taxCodeId
 @return ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest
*/
func (a *TaxCodeExpenseTypeExemptionsAPIService) PutFinanceTaxCodesByParentIdExpenseTypeExemptionsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest {
	return ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ExpenseTypeExemption
func (a *TaxCodeExpenseTypeExemptionsAPIService) PutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdExecute(r ApiPutFinanceTaxCodesByParentIdExpenseTypeExemptionsByIdRequest) (*ExpenseTypeExemption, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExpenseTypeExemption
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeExpenseTypeExemptionsAPIService.PutFinanceTaxCodesByParentIdExpenseTypeExemptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/expenseTypeExemptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.expenseTypeExemption == nil {
		return localVarReturnValue, nil, reportError("expenseTypeExemption is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.expenseTypeExemption
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
