/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TaxCodeXRefsAPIService TaxCodeXRefsAPI service
type TaxCodeXRefsAPIService service

type ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) ClientId(clientId string) ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r)
}

/*
DeleteFinanceTaxCodesByParentIdTaxCodeXRefsById Delete TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id taxCodeXRefId
 @param parentId taxCodeId
 @return ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest
*/
func (a *TaxCodeXRefsAPIService) DeleteFinanceTaxCodesByParentIdTaxCodeXRefsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	return ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TaxCodeXRefsAPIService) DeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r ApiDeleteFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.DeleteFinanceTaxCodesByParentIdTaxCodeXRefsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) Execute() ([]TaxCodeXRef, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeXRefsExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeXRefs Get List of TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest
*/
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefs(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TaxCodeXRef
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefsExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsRequest) ([]TaxCodeXRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TaxCodeXRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.GetFinanceTaxCodesByParentIdTaxCodeXRefs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Execute() (*TaxCodeXRef, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeXRefsById Get TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id taxCodeXRefId
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest
*/
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TaxCodeXRef
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) (*TaxCodeXRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxCodeXRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.GetFinanceTaxCodesByParentIdTaxCodeXRefsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) Conditions(conditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) ChildConditions(childConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) OrderBy(orderBy string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) Fields(fields string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) Page(page int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) PageSize(pageSize int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) PageId(pageId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) ClientId(clientId string) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceTaxCodesByParentIdTaxCodeXRefsCountExecute(r)
}

/*
GetFinanceTaxCodesByParentIdTaxCodeXRefsCount Get Count of TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest
*/
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefsCount(ctx context.Context, parentId int32) ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest {
	return ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TaxCodeXRefsAPIService) GetFinanceTaxCodesByParentIdTaxCodeXRefsCountExecute(r ApiGetFinanceTaxCodesByParentIdTaxCodeXRefsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.GetFinanceTaxCodesByParentIdTaxCodeXRefsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) ClientId(clientId string) ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Execute() (*TaxCodeXRef, *http.Response, error) {
	return r.ApiService.PatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r)
}

/*
PatchFinanceTaxCodesByParentIdTaxCodeXRefsById Patch TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id taxCodeXRefId
 @param parentId taxCodeId
 @return ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest
*/
func (a *TaxCodeXRefsAPIService) PatchFinanceTaxCodesByParentIdTaxCodeXRefsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	return ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TaxCodeXRef
func (a *TaxCodeXRefsAPIService) PatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r ApiPatchFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) (*TaxCodeXRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxCodeXRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.PatchFinanceTaxCodesByParentIdTaxCodeXRefsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	parentId int32
	taxCodeXRef *TaxCodeXRef
	clientId *string
}

// taxCodeXRef
func (r ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest) TaxCodeXRef(taxCodeXRef TaxCodeXRef) ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.taxCodeXRef = &taxCodeXRef
	return r
}

// 
func (r ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest) ClientId(clientId string) ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest) Execute() (*TaxCodeXRef, *http.Response, error) {
	return r.ApiService.PostFinanceTaxCodesByParentIdTaxCodeXRefsExecute(r)
}

/*
PostFinanceTaxCodesByParentIdTaxCodeXRefs Post TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId taxCodeId
 @return ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest
*/
func (a *TaxCodeXRefsAPIService) PostFinanceTaxCodesByParentIdTaxCodeXRefs(ctx context.Context, parentId int32) ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest {
	return ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TaxCodeXRef
func (a *TaxCodeXRefsAPIService) PostFinanceTaxCodesByParentIdTaxCodeXRefsExecute(r ApiPostFinanceTaxCodesByParentIdTaxCodeXRefsRequest) (*TaxCodeXRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxCodeXRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.PostFinanceTaxCodesByParentIdTaxCodeXRefs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCodeXRef == nil {
		return localVarReturnValue, nil, reportError("taxCodeXRef is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.taxCodeXRef
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest struct {
	ctx context.Context
	ApiService *TaxCodeXRefsAPIService
	id int32
	parentId int32
	taxCodeXRef *TaxCodeXRef
	clientId *string
}

// taxCodeXRef
func (r ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) TaxCodeXRef(taxCodeXRef TaxCodeXRef) ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.taxCodeXRef = &taxCodeXRef
	return r
}

// 
func (r ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) ClientId(clientId string) ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) Execute() (*TaxCodeXRef, *http.Response, error) {
	return r.ApiService.PutFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r)
}

/*
PutFinanceTaxCodesByParentIdTaxCodeXRefsById Put TaxCodeXRef

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id taxCodeXRefId
 @param parentId taxCodeId
 @return ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest
*/
func (a *TaxCodeXRefsAPIService) PutFinanceTaxCodesByParentIdTaxCodeXRefsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest {
	return ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TaxCodeXRef
func (a *TaxCodeXRefsAPIService) PutFinanceTaxCodesByParentIdTaxCodeXRefsByIdExecute(r ApiPutFinanceTaxCodesByParentIdTaxCodeXRefsByIdRequest) (*TaxCodeXRef, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxCodeXRef
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaxCodeXRefsAPIService.PutFinanceTaxCodesByParentIdTaxCodeXRefsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/taxCodes/{parentId}/taxCodeXRefs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taxCodeXRef == nil {
		return localVarReturnValue, nil, reportError("taxCodeXRef is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.taxCodeXRef
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
