/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TicketNotesAPIService TicketNotesAPI service
type TicketNotesAPIService service

type ApiDeleteProjectTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteProjectTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteProjectTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProjectTicketsByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProjectTicketsByParentIdNotesByIdExecute(r)
}

/*
DeleteProjectTicketsByParentIdNotesById Delete TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiDeleteProjectTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) DeleteProjectTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteProjectTicketsByParentIdNotesByIdRequest {
	return ApiDeleteProjectTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TicketNotesAPIService) DeleteProjectTicketsByParentIdNotesByIdExecute(r ApiDeleteProjectTicketsByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.DeleteProjectTicketsByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteServiceTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketsByParentIdNotesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketsByParentIdNotesByIdExecute(r)
}

/*
DeleteServiceTicketsByParentIdNotesById Delete ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiDeleteServiceTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) DeleteServiceTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceTicketsByParentIdNotesByIdRequest {
	return ApiDeleteServiceTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TicketNotesAPIService) DeleteServiceTicketsByParentIdNotesByIdExecute(r ApiDeleteServiceTicketsByParentIdNotesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.DeleteServiceTicketsByParentIdNotesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) Fields(fields string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) Page(page int32) ApiGetProjectTicketsByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdNotesRequest) Execute() ([]TicketNote, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdNotesExecute(r)
}

/*
GetProjectTicketsByParentIdNotes Get List of TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetProjectTicketsByParentIdNotesRequest
*/
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotes(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdNotesRequest {
	return ApiGetProjectTicketsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TicketNote
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotesExecute(r ApiGetProjectTicketsByParentIdNotesRequest) ([]TicketNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TicketNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetProjectTicketsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) Fields(fields string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) Page(page int32) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdNotesByIdRequest) Execute() (*TicketNote, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdNotesByIdExecute(r)
}

/*
GetProjectTicketsByParentIdNotesById Get TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiGetProjectTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetProjectTicketsByParentIdNotesByIdRequest {
	return ApiGetProjectTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TicketNote
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotesByIdExecute(r ApiGetProjectTicketsByParentIdNotesByIdRequest) (*TicketNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetProjectTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProjectTicketsByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) Conditions(conditions string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) Fields(fields string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) Page(page int32) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) PageId(pageId int32) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProjectTicketsByParentIdNotesCountRequest) ClientId(clientId string) ApiGetProjectTicketsByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProjectTicketsByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProjectTicketsByParentIdNotesCountExecute(r)
}

/*
GetProjectTicketsByParentIdNotesCount Get Count of TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetProjectTicketsByParentIdNotesCountRequest
*/
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetProjectTicketsByParentIdNotesCountRequest {
	return ApiGetProjectTicketsByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketNotesAPIService) GetProjectTicketsByParentIdNotesCountExecute(r ApiGetProjectTicketsByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetProjectTicketsByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) Fields(fields string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) Page(page int32) ApiGetServiceTicketsByParentIdNotesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdNotesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdNotesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdNotesRequest) Execute() ([]ServiceNote, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdNotesExecute(r)
}

/*
GetServiceTicketsByParentIdNotes Get List of ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdNotesRequest
*/
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotes(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdNotesRequest {
	return ApiGetServiceTicketsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ServiceNote
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotesExecute(r ApiGetServiceTicketsByParentIdNotesRequest) ([]ServiceNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ServiceNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetServiceTicketsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) Fields(fields string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) Page(page int32) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdNotesByIdRequest) Execute() (*ServiceNote, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdNotesByIdExecute(r)
}

/*
GetServiceTicketsByParentIdNotesById Get ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiGetServiceTicketsByParentIdNotesByIdRequest {
	return ApiGetServiceTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceNote
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotesByIdExecute(r ApiGetServiceTicketsByParentIdNotesByIdRequest) (*ServiceNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetServiceTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdNotesCountRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdNotesCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdNotesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketsByParentIdNotesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdNotesCountExecute(r)
}

/*
GetServiceTicketsByParentIdNotesCount Get Count of ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdNotesCountRequest
*/
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotesCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdNotesCountRequest {
	return ApiGetServiceTicketsByParentIdNotesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketNotesAPIService) GetServiceTicketsByParentIdNotesCountExecute(r ApiGetServiceTicketsByParentIdNotesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.GetServiceTicketsByParentIdNotesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProjectTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProjectTicketsByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProjectTicketsByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProjectTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchProjectTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProjectTicketsByParentIdNotesByIdRequest) Execute() (*TicketNote, *http.Response, error) {
	return r.ApiService.PatchProjectTicketsByParentIdNotesByIdExecute(r)
}

/*
PatchProjectTicketsByParentIdNotesById Patch TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiPatchProjectTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) PatchProjectTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchProjectTicketsByParentIdNotesByIdRequest {
	return ApiPatchProjectTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TicketNote
func (a *TicketNotesAPIService) PatchProjectTicketsByParentIdNotesByIdExecute(r ApiPatchProjectTicketsByParentIdNotesByIdRequest) (*TicketNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PatchProjectTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceTicketsByParentIdNotesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceTicketsByParentIdNotesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPatchServiceTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceTicketsByParentIdNotesByIdRequest) Execute() (*ServiceNote, *http.Response, error) {
	return r.ApiService.PatchServiceTicketsByParentIdNotesByIdExecute(r)
}

/*
PatchServiceTicketsByParentIdNotesById Patch ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiPatchServiceTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) PatchServiceTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceTicketsByParentIdNotesByIdRequest {
	return ApiPatchServiceTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceNote
func (a *TicketNotesAPIService) PatchServiceTicketsByParentIdNotesByIdExecute(r ApiPatchServiceTicketsByParentIdNotesByIdRequest) (*ServiceNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PatchServiceTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProjectTicketsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	ticketNote *TicketNote
	clientId *string
}

// ticketNote
func (r ApiPostProjectTicketsByParentIdNotesRequest) TicketNote(ticketNote TicketNote) ApiPostProjectTicketsByParentIdNotesRequest {
	r.ticketNote = &ticketNote
	return r
}

// 
func (r ApiPostProjectTicketsByParentIdNotesRequest) ClientId(clientId string) ApiPostProjectTicketsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProjectTicketsByParentIdNotesRequest) Execute() (*TicketNote, *http.Response, error) {
	return r.ApiService.PostProjectTicketsByParentIdNotesExecute(r)
}

/*
PostProjectTicketsByParentIdNotes Post TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostProjectTicketsByParentIdNotesRequest
*/
func (a *TicketNotesAPIService) PostProjectTicketsByParentIdNotes(ctx context.Context, parentId int32) ApiPostProjectTicketsByParentIdNotesRequest {
	return ApiPostProjectTicketsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TicketNote
func (a *TicketNotesAPIService) PostProjectTicketsByParentIdNotesExecute(r ApiPostProjectTicketsByParentIdNotesRequest) (*TicketNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PostProjectTicketsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ticketNote == nil {
		return localVarReturnValue, nil, reportError("ticketNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ticketNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdNotesRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	parentId int32
	serviceNote *ServiceNote
	clientId *string
}

// serviceNote
func (r ApiPostServiceTicketsByParentIdNotesRequest) ServiceNote(serviceNote ServiceNote) ApiPostServiceTicketsByParentIdNotesRequest {
	r.serviceNote = &serviceNote
	return r
}

// 
func (r ApiPostServiceTicketsByParentIdNotesRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdNotesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceTicketsByParentIdNotesRequest) Execute() (*ServiceNote, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdNotesExecute(r)
}

/*
PostServiceTicketsByParentIdNotes Post ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostServiceTicketsByParentIdNotesRequest
*/
func (a *TicketNotesAPIService) PostServiceTicketsByParentIdNotes(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdNotesRequest {
	return ApiPostServiceTicketsByParentIdNotesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceNote
func (a *TicketNotesAPIService) PostServiceTicketsByParentIdNotesExecute(r ApiPostServiceTicketsByParentIdNotesRequest) (*ServiceNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PostServiceTicketsByParentIdNotes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceNote == nil {
		return localVarReturnValue, nil, reportError("serviceNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.serviceNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProjectTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	ticketNote *TicketNote
	clientId *string
}

// ticketNote
func (r ApiPutProjectTicketsByParentIdNotesByIdRequest) TicketNote(ticketNote TicketNote) ApiPutProjectTicketsByParentIdNotesByIdRequest {
	r.ticketNote = &ticketNote
	return r
}

// 
func (r ApiPutProjectTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutProjectTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProjectTicketsByParentIdNotesByIdRequest) Execute() (*TicketNote, *http.Response, error) {
	return r.ApiService.PutProjectTicketsByParentIdNotesByIdExecute(r)
}

/*
PutProjectTicketsByParentIdNotesById Put TicketNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiPutProjectTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) PutProjectTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutProjectTicketsByParentIdNotesByIdRequest {
	return ApiPutProjectTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TicketNote
func (a *TicketNotesAPIService) PutProjectTicketsByParentIdNotesByIdExecute(r ApiPutProjectTicketsByParentIdNotesByIdRequest) (*TicketNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PutProjectTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ticketNote == nil {
		return localVarReturnValue, nil, reportError("ticketNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ticketNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceTicketsByParentIdNotesByIdRequest struct {
	ctx context.Context
	ApiService *TicketNotesAPIService
	id int32
	parentId int32
	serviceNote *ServiceNote
	clientId *string
}

// serviceNote
func (r ApiPutServiceTicketsByParentIdNotesByIdRequest) ServiceNote(serviceNote ServiceNote) ApiPutServiceTicketsByParentIdNotesByIdRequest {
	r.serviceNote = &serviceNote
	return r
}

// 
func (r ApiPutServiceTicketsByParentIdNotesByIdRequest) ClientId(clientId string) ApiPutServiceTicketsByParentIdNotesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceTicketsByParentIdNotesByIdRequest) Execute() (*ServiceNote, *http.Response, error) {
	return r.ApiService.PutServiceTicketsByParentIdNotesByIdExecute(r)
}

/*
PutServiceTicketsByParentIdNotesById Put ServiceNote

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id noteId
 @param parentId ticketId
 @return ApiPutServiceTicketsByParentIdNotesByIdRequest
*/
func (a *TicketNotesAPIService) PutServiceTicketsByParentIdNotesById(ctx context.Context, id int32, parentId int32) ApiPutServiceTicketsByParentIdNotesByIdRequest {
	return ApiPutServiceTicketsByParentIdNotesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ServiceNote
func (a *TicketNotesAPIService) PutServiceTicketsByParentIdNotesByIdExecute(r ApiPutServiceTicketsByParentIdNotesByIdRequest) (*ServiceNote, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ServiceNote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketNotesAPIService.PutServiceTicketsByParentIdNotesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/notes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.serviceNote == nil {
		return localVarReturnValue, nil, reportError("serviceNote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.serviceNote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
