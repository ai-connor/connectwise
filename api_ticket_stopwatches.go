/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TicketStopwatchesAPIService TicketStopwatchesAPI service
type TicketStopwatchesAPIService service

type ApiDeleteTimeTicketstopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeTicketstopwatchesByIdRequest) ClientId(clientId string) ApiDeleteTimeTicketstopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeTicketstopwatchesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeTicketstopwatchesByIdExecute(r)
}

/*
DeleteTimeTicketstopwatchesById Delete TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketstopwatcheId
 @return ApiDeleteTimeTicketstopwatchesByIdRequest
*/
func (a *TicketStopwatchesAPIService) DeleteTimeTicketstopwatchesById(ctx context.Context, id int32) ApiDeleteTimeTicketstopwatchesByIdRequest {
	return ApiDeleteTimeTicketstopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TicketStopwatchesAPIService) DeleteTimeTicketstopwatchesByIdExecute(r ApiDeleteTimeTicketstopwatchesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.DeleteTimeTicketstopwatchesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeTicketstopwatchesRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) ClientId(clientId string) ApiGetTimeTicketstopwatchesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) Conditions(conditions string) ApiGetTimeTicketstopwatchesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) ChildConditions(childConditions string) ApiGetTimeTicketstopwatchesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTicketstopwatchesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) OrderBy(orderBy string) ApiGetTimeTicketstopwatchesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) Fields(fields string) ApiGetTimeTicketstopwatchesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) Page(page int32) ApiGetTimeTicketstopwatchesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) PageSize(pageSize int32) ApiGetTimeTicketstopwatchesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesRequest) PageId(pageId int32) ApiGetTimeTicketstopwatchesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTicketstopwatchesRequest) Execute() ([]TicketStopwatch, *http.Response, error) {
	return r.ApiService.GetTimeTicketstopwatchesExecute(r)
}

/*
GetTimeTicketstopwatches Get List of TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeTicketstopwatchesRequest
*/
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatches(ctx context.Context) ApiGetTimeTicketstopwatchesRequest {
	return ApiGetTimeTicketstopwatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TicketStopwatch
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatchesExecute(r ApiGetTimeTicketstopwatchesRequest) ([]TicketStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TicketStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.GetTimeTicketstopwatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTicketstopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) ClientId(clientId string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) Conditions(conditions string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) ChildConditions(childConditions string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) OrderBy(orderBy string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) Fields(fields string) ApiGetTimeTicketstopwatchesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) Page(page int32) ApiGetTimeTicketstopwatchesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) PageSize(pageSize int32) ApiGetTimeTicketstopwatchesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesByIdRequest) PageId(pageId int32) ApiGetTimeTicketstopwatchesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTicketstopwatchesByIdRequest) Execute() (*TicketStopwatch, *http.Response, error) {
	return r.ApiService.GetTimeTicketstopwatchesByIdExecute(r)
}

/*
GetTimeTicketstopwatchesById Get TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketstopwatcheId
 @return ApiGetTimeTicketstopwatchesByIdRequest
*/
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatchesById(ctx context.Context, id int32) ApiGetTimeTicketstopwatchesByIdRequest {
	return ApiGetTimeTicketstopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketStopwatch
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatchesByIdExecute(r ApiGetTimeTicketstopwatchesByIdRequest) (*TicketStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.GetTimeTicketstopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTicketstopwatchesCountRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) ClientId(clientId string) ApiGetTimeTicketstopwatchesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) Conditions(conditions string) ApiGetTimeTicketstopwatchesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) ChildConditions(childConditions string) ApiGetTimeTicketstopwatchesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTicketstopwatchesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) OrderBy(orderBy string) ApiGetTimeTicketstopwatchesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) Fields(fields string) ApiGetTimeTicketstopwatchesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) Page(page int32) ApiGetTimeTicketstopwatchesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) PageSize(pageSize int32) ApiGetTimeTicketstopwatchesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTicketstopwatchesCountRequest) PageId(pageId int32) ApiGetTimeTicketstopwatchesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTicketstopwatchesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeTicketstopwatchesCountExecute(r)
}

/*
GetTimeTicketstopwatchesCount Get Count of TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeTicketstopwatchesCountRequest
*/
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatchesCount(ctx context.Context) ApiGetTimeTicketstopwatchesCountRequest {
	return ApiGetTimeTicketstopwatchesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketStopwatchesAPIService) GetTimeTicketstopwatchesCountExecute(r ApiGetTimeTicketstopwatchesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.GetTimeTicketstopwatchesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeTicketstopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeTicketstopwatchesByIdRequest) ClientId(clientId string) ApiPatchTimeTicketstopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeTicketstopwatchesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeTicketstopwatchesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeTicketstopwatchesByIdRequest) Execute() (*TicketStopwatch, *http.Response, error) {
	return r.ApiService.PatchTimeTicketstopwatchesByIdExecute(r)
}

/*
PatchTimeTicketstopwatchesById Patch TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketstopwatcheId
 @return ApiPatchTimeTicketstopwatchesByIdRequest
*/
func (a *TicketStopwatchesAPIService) PatchTimeTicketstopwatchesById(ctx context.Context, id int32) ApiPatchTimeTicketstopwatchesByIdRequest {
	return ApiPatchTimeTicketstopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketStopwatch
func (a *TicketStopwatchesAPIService) PatchTimeTicketstopwatchesByIdExecute(r ApiPatchTimeTicketstopwatchesByIdRequest) (*TicketStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.PatchTimeTicketstopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeTicketstopwatchesRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	clientId *string
	ticketStopwatch *TicketStopwatch
}

// 
func (r ApiPostTimeTicketstopwatchesRequest) ClientId(clientId string) ApiPostTimeTicketstopwatchesRequest {
	r.clientId = &clientId
	return r
}

// ticketStopwatch
func (r ApiPostTimeTicketstopwatchesRequest) TicketStopwatch(ticketStopwatch TicketStopwatch) ApiPostTimeTicketstopwatchesRequest {
	r.ticketStopwatch = &ticketStopwatch
	return r
}

func (r ApiPostTimeTicketstopwatchesRequest) Execute() (*TicketStopwatch, *http.Response, error) {
	return r.ApiService.PostTimeTicketstopwatchesExecute(r)
}

/*
PostTimeTicketstopwatches Post TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeTicketstopwatchesRequest
*/
func (a *TicketStopwatchesAPIService) PostTimeTicketstopwatches(ctx context.Context) ApiPostTimeTicketstopwatchesRequest {
	return ApiPostTimeTicketstopwatchesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TicketStopwatch
func (a *TicketStopwatchesAPIService) PostTimeTicketstopwatchesExecute(r ApiPostTimeTicketstopwatchesRequest) (*TicketStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.PostTimeTicketstopwatches")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketStopwatch == nil {
		return localVarReturnValue, nil, reportError("ticketStopwatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketStopwatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeTicketstopwatchesByIdRequest struct {
	ctx context.Context
	ApiService *TicketStopwatchesAPIService
	id int32
	clientId *string
	ticketStopwatch *TicketStopwatch
}

// 
func (r ApiPutTimeTicketstopwatchesByIdRequest) ClientId(clientId string) ApiPutTimeTicketstopwatchesByIdRequest {
	r.clientId = &clientId
	return r
}

// ticketStopwatch
func (r ApiPutTimeTicketstopwatchesByIdRequest) TicketStopwatch(ticketStopwatch TicketStopwatch) ApiPutTimeTicketstopwatchesByIdRequest {
	r.ticketStopwatch = &ticketStopwatch
	return r
}

func (r ApiPutTimeTicketstopwatchesByIdRequest) Execute() (*TicketStopwatch, *http.Response, error) {
	return r.ApiService.PutTimeTicketstopwatchesByIdExecute(r)
}

/*
PutTimeTicketstopwatchesById Put TicketStopwatch

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketstopwatcheId
 @return ApiPutTimeTicketstopwatchesByIdRequest
*/
func (a *TicketStopwatchesAPIService) PutTimeTicketstopwatchesById(ctx context.Context, id int32) ApiPutTimeTicketstopwatchesByIdRequest {
	return ApiPutTimeTicketstopwatchesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketStopwatch
func (a *TicketStopwatchesAPIService) PutTimeTicketstopwatchesByIdExecute(r ApiPutTimeTicketstopwatchesByIdRequest) (*TicketStopwatch, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketStopwatch
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketStopwatchesAPIService.PutTimeTicketstopwatchesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/ticketstopwatches/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketStopwatch == nil {
		return localVarReturnValue, nil, reportError("ticketStopwatch is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketStopwatch
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
