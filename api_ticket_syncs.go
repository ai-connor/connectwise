/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TicketSyncsAPIService TicketSyncsAPI service
type TicketSyncsAPIService service

type ApiDeleteServiceTicketSyncsByIdRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceTicketSyncsByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketSyncsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketSyncsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketSyncsByIdExecute(r)
}

/*
DeleteServiceTicketSyncsById Delete TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketSyncId
 @return ApiDeleteServiceTicketSyncsByIdRequest
*/
func (a *TicketSyncsAPIService) DeleteServiceTicketSyncsById(ctx context.Context, id int32) ApiDeleteServiceTicketSyncsByIdRequest {
	return ApiDeleteServiceTicketSyncsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TicketSyncsAPIService) DeleteServiceTicketSyncsByIdExecute(r ApiDeleteServiceTicketSyncsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.DeleteServiceTicketSyncsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceTicketSyncsRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketSyncsRequest) Conditions(conditions string) ApiGetServiceTicketSyncsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) ChildConditions(childConditions string) ApiGetServiceTicketSyncsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketSyncsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) OrderBy(orderBy string) ApiGetServiceTicketSyncsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) Fields(fields string) ApiGetServiceTicketSyncsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) Page(page int32) ApiGetServiceTicketSyncsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) PageSize(pageSize int32) ApiGetServiceTicketSyncsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) PageId(pageId int32) ApiGetServiceTicketSyncsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketSyncsRequest) ClientId(clientId string) ApiGetServiceTicketSyncsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketSyncsRequest) Execute() ([]TicketSync, *http.Response, error) {
	return r.ApiService.GetServiceTicketSyncsExecute(r)
}

/*
GetServiceTicketSyncs Get List of TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketSyncsRequest
*/
func (a *TicketSyncsAPIService) GetServiceTicketSyncs(ctx context.Context) ApiGetServiceTicketSyncsRequest {
	return ApiGetServiceTicketSyncsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TicketSync
func (a *TicketSyncsAPIService) GetServiceTicketSyncsExecute(r ApiGetServiceTicketSyncsRequest) ([]TicketSync, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TicketSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.GetServiceTicketSyncs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketSyncsByIdRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) Conditions(conditions string) ApiGetServiceTicketSyncsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketSyncsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketSyncsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketSyncsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) Fields(fields string) ApiGetServiceTicketSyncsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) Page(page int32) ApiGetServiceTicketSyncsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketSyncsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) PageId(pageId int32) ApiGetServiceTicketSyncsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketSyncsByIdRequest) ClientId(clientId string) ApiGetServiceTicketSyncsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketSyncsByIdRequest) Execute() (*TicketSync, *http.Response, error) {
	return r.ApiService.GetServiceTicketSyncsByIdExecute(r)
}

/*
GetServiceTicketSyncsById Get TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketSyncId
 @return ApiGetServiceTicketSyncsByIdRequest
*/
func (a *TicketSyncsAPIService) GetServiceTicketSyncsById(ctx context.Context, id int32) ApiGetServiceTicketSyncsByIdRequest {
	return ApiGetServiceTicketSyncsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketSync
func (a *TicketSyncsAPIService) GetServiceTicketSyncsByIdExecute(r ApiGetServiceTicketSyncsByIdRequest) (*TicketSync, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.GetServiceTicketSyncsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketSyncsCountRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) Conditions(conditions string) ApiGetServiceTicketSyncsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketSyncsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketSyncsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) OrderBy(orderBy string) ApiGetServiceTicketSyncsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) Fields(fields string) ApiGetServiceTicketSyncsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) Page(page int32) ApiGetServiceTicketSyncsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) PageSize(pageSize int32) ApiGetServiceTicketSyncsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) PageId(pageId int32) ApiGetServiceTicketSyncsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetServiceTicketSyncsCountRequest) ClientId(clientId string) ApiGetServiceTicketSyncsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceTicketSyncsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketSyncsCountExecute(r)
}

/*
GetServiceTicketSyncsCount Get Count of TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketSyncsCountRequest
*/
func (a *TicketSyncsAPIService) GetServiceTicketSyncsCount(ctx context.Context) ApiGetServiceTicketSyncsCountRequest {
	return ApiGetServiceTicketSyncsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketSyncsAPIService) GetServiceTicketSyncsCountExecute(r ApiGetServiceTicketSyncsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.GetServiceTicketSyncsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceTicketSyncsByIdRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchServiceTicketSyncsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceTicketSyncsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchServiceTicketSyncsByIdRequest) ClientId(clientId string) ApiPatchServiceTicketSyncsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchServiceTicketSyncsByIdRequest) Execute() (*TicketSync, *http.Response, error) {
	return r.ApiService.PatchServiceTicketSyncsByIdExecute(r)
}

/*
PatchServiceTicketSyncsById Patch TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketSyncId
 @return ApiPatchServiceTicketSyncsByIdRequest
*/
func (a *TicketSyncsAPIService) PatchServiceTicketSyncsById(ctx context.Context, id int32) ApiPatchServiceTicketSyncsByIdRequest {
	return ApiPatchServiceTicketSyncsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketSync
func (a *TicketSyncsAPIService) PatchServiceTicketSyncsByIdExecute(r ApiPatchServiceTicketSyncsByIdRequest) (*TicketSync, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.PatchServiceTicketSyncsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketSyncsRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	ticketSync *TicketSync
	clientId *string
}

// ticketSync
func (r ApiPostServiceTicketSyncsRequest) TicketSync(ticketSync TicketSync) ApiPostServiceTicketSyncsRequest {
	r.ticketSync = &ticketSync
	return r
}

// 
func (r ApiPostServiceTicketSyncsRequest) ClientId(clientId string) ApiPostServiceTicketSyncsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceTicketSyncsRequest) Execute() (*TicketSync, *http.Response, error) {
	return r.ApiService.PostServiceTicketSyncsExecute(r)
}

/*
PostServiceTicketSyncs Post TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceTicketSyncsRequest
*/
func (a *TicketSyncsAPIService) PostServiceTicketSyncs(ctx context.Context) ApiPostServiceTicketSyncsRequest {
	return ApiPostServiceTicketSyncsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TicketSync
func (a *TicketSyncsAPIService) PostServiceTicketSyncsExecute(r ApiPostServiceTicketSyncsRequest) (*TicketSync, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.PostServiceTicketSyncs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ticketSync == nil {
		return localVarReturnValue, nil, reportError("ticketSync is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ticketSync
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceTicketSyncsByIdRequest struct {
	ctx context.Context
	ApiService *TicketSyncsAPIService
	id int32
	ticketSync *TicketSync
	clientId *string
}

// ticketSync
func (r ApiPutServiceTicketSyncsByIdRequest) TicketSync(ticketSync TicketSync) ApiPutServiceTicketSyncsByIdRequest {
	r.ticketSync = &ticketSync
	return r
}

// 
func (r ApiPutServiceTicketSyncsByIdRequest) ClientId(clientId string) ApiPutServiceTicketSyncsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutServiceTicketSyncsByIdRequest) Execute() (*TicketSync, *http.Response, error) {
	return r.ApiService.PutServiceTicketSyncsByIdExecute(r)
}

/*
PutServiceTicketSyncsById Put TicketSync

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketSyncId
 @return ApiPutServiceTicketSyncsByIdRequest
*/
func (a *TicketSyncsAPIService) PutServiceTicketSyncsById(ctx context.Context, id int32) ApiPutServiceTicketSyncsByIdRequest {
	return ApiPutServiceTicketSyncsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TicketSync
func (a *TicketSyncsAPIService) PutServiceTicketSyncsByIdExecute(r ApiPutServiceTicketSyncsByIdRequest) (*TicketSync, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TicketSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketSyncsAPIService.PutServiceTicketSyncsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/ticketSyncs/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ticketSync == nil {
		return localVarReturnValue, nil, reportError("ticketSync is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.ticketSync
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
