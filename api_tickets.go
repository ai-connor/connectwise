/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TicketsAPIService TicketsAPI service
type TicketsAPIService service

type ApiDeleteServiceTicketsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteServiceTicketsByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketsByIdExecute(r)
}

/*
DeleteServiceTicketsById Delete Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketId
 @return ApiDeleteServiceTicketsByIdRequest
*/
func (a *TicketsAPIService) DeleteServiceTicketsById(ctx context.Context, id int32) ApiDeleteServiceTicketsByIdRequest {
	return ApiDeleteServiceTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TicketsAPIService) DeleteServiceTicketsByIdExecute(r ApiDeleteServiceTicketsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.DeleteServiceTicketsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceTicketsByParentIdConfigurationsByIdExecute(r)
}

/*
DeleteServiceTicketsByParentIdConfigurationsById Delete ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id configurationId
 @param parentId ticketId
 @return ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest
*/
func (a *TicketsAPIService) DeleteServiceTicketsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest {
	return ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TicketsAPIService) DeleteServiceTicketsByParentIdConfigurationsByIdExecute(r ApiDeleteServiceTicketsByParentIdConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.DeleteServiceTicketsByParentIdConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceTicketsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsRequest) ClientId(clientId string) ApiGetServiceTicketsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsRequest) Conditions(conditions string) ApiGetServiceTicketsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsRequest) ChildConditions(childConditions string) ApiGetServiceTicketsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsRequest) OrderBy(orderBy string) ApiGetServiceTicketsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsRequest) Fields(fields string) ApiGetServiceTicketsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsRequest) Page(page int32) ApiGetServiceTicketsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsRequest) PageSize(pageSize int32) ApiGetServiceTicketsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsRequest) PageId(pageId int32) ApiGetServiceTicketsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsRequest) Execute() ([]Ticket, *http.Response, error) {
	return r.ApiService.GetServiceTicketsExecute(r)
}

/*
GetServiceTickets Get List of ConnectWise.Apis.v3_0.v2015_3.Service.Ticket.Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketsRequest
*/
func (a *TicketsAPIService) GetServiceTickets(ctx context.Context) ApiGetServiceTicketsRequest {
	return ApiGetServiceTicketsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Ticket
func (a *TicketsAPIService) GetServiceTicketsExecute(r ApiGetServiceTicketsRequest) ([]Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByIdRequest) ClientId(clientId string) ApiGetServiceTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) Conditions(conditions string) ApiGetServiceTicketsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) Fields(fields string) ApiGetServiceTicketsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) Page(page int32) ApiGetServiceTicketsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByIdRequest) PageId(pageId int32) ApiGetServiceTicketsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByIdRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByIdExecute(r)
}

/*
GetServiceTicketsById Get Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketId
 @return ApiGetServiceTicketsByIdRequest
*/
func (a *TicketsAPIService) GetServiceTicketsById(ctx context.Context, id int32) ApiGetServiceTicketsByIdRequest {
	return ApiGetServiceTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Ticket
func (a *TicketsAPIService) GetServiceTicketsByIdExecute(r ApiGetServiceTicketsByIdRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdActivitiesRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) Fields(fields string) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) Page(page int32) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdActivitiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdActivitiesRequest) Execute() ([]ActivityReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdActivitiesExecute(r)
}

/*
GetServiceTicketsByParentIdActivities Get List of ActivityReference              Gets activities associated to the ticket              Please use the /sales/activities?conditions=ticket/id={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdActivitiesRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdActivities(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdActivitiesRequest {
	return ApiGetServiceTicketsByParentIdActivitiesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ActivityReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdActivitiesExecute(r ApiGetServiceTicketsByParentIdActivitiesRequest) ([]ActivityReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ActivityReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdActivities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/activities"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdActivitiesCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdActivitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdActivitiesCountExecute(r)
}

/*
GetServiceTicketsByParentIdActivitiesCount Get Count of ActivityReference              Gets count of activities associated to the ticket              Please use the /sales/activities/count?conditions=ticket/id={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdActivitiesCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdActivitiesCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdActivitiesCountRequest {
	return ApiGetServiceTicketsByParentIdActivitiesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdActivitiesCountExecute(r ApiGetServiceTicketsByParentIdActivitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdActivitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/activities/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdConfigurationsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) Fields(fields string) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) Page(page int32) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdConfigurationsRequest) Execute() ([]ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdConfigurationsExecute(r)
}

/*
GetServiceTicketsByParentIdConfigurations Get List of ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdConfigurationsRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurations(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdConfigurationsRequest {
	return ApiGetServiceTicketsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ConfigurationReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurationsExecute(r ApiGetServiceTicketsByParentIdConfigurationsRequest) ([]ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdConfigurationsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) Fields(fields string) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) Page(page int32) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdConfigurationsByIdExecute(r)
}

/*
GetServiceTicketsByParentIdConfigurationsById Get ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id configurationId
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdConfigurationsByIdRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurationsById(ctx context.Context, id int32, parentId int32) ApiGetServiceTicketsByParentIdConfigurationsByIdRequest {
	return ApiGetServiceTicketsByParentIdConfigurationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurationsByIdExecute(r ApiGetServiceTicketsByParentIdConfigurationsByIdRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdConfigurationsCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdConfigurationsCountExecute(r)
}

/*
GetServiceTicketsByParentIdConfigurationsCount Get Count of ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdConfigurationsCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurationsCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdConfigurationsCountRequest {
	return ApiGetServiceTicketsByParentIdConfigurationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdConfigurationsCountExecute(r ApiGetServiceTicketsByParentIdConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/configurations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdDocumentsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) Fields(fields string) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) Page(page int32) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdDocumentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdDocumentsRequest) Execute() ([]DocumentReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdDocumentsExecute(r)
}

/*
GetServiceTicketsByParentIdDocuments Get List of DocumentReference              Gets the documents associated to the ticket              Please use the /system/documents?recordType=Ticket&amp;recordId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdDocumentsRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdDocuments(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdDocumentsRequest {
	return ApiGetServiceTicketsByParentIdDocumentsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []DocumentReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdDocumentsExecute(r ApiGetServiceTicketsByParentIdDocumentsRequest) ([]DocumentReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DocumentReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/documents"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdDocumentsCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdDocumentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdDocumentsCountExecute(r)
}

/*
GetServiceTicketsByParentIdDocumentsCount Get Count of DocumentReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdDocumentsCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdDocumentsCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdDocumentsCountRequest {
	return ApiGetServiceTicketsByParentIdDocumentsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdDocumentsCountExecute(r ApiGetServiceTicketsByParentIdDocumentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdDocumentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/documents/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdProductsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) Fields(fields string) ApiGetServiceTicketsByParentIdProductsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) Page(page int32) ApiGetServiceTicketsByParentIdProductsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdProductsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdProductsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdProductsRequest) Execute() ([]ProductReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdProductsExecute(r)
}

/*
GetServiceTicketsByParentIdProducts Get List of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdProductsRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdProducts(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdProductsRequest {
	return ApiGetServiceTicketsByParentIdProductsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ProductReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdProductsExecute(r ApiGetServiceTicketsByParentIdProductsRequest) ([]ProductReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ProductReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdProducts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/products"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdProductsCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdProductsCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdProductsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdProductsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdProductsCountExecute(r)
}

/*
GetServiceTicketsByParentIdProductsCount Get Count of ProductReference              Gets the products associated to the ticket              Please use the /procurement/products/count?conditions=chargeToType='Ticket' AND chargeToId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdProductsCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdProductsCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdProductsCountRequest {
	return ApiGetServiceTicketsByParentIdProductsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdProductsCountExecute(r ApiGetServiceTicketsByParentIdProductsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdProductsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/products/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdScheduleentriesRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) Fields(fields string) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) Page(page int32) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdScheduleentriesRequest) Execute() ([]ScheduleEntryReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdScheduleentriesExecute(r)
}

/*
GetServiceTicketsByParentIdScheduleentries Get List of ScheduleEntryReference              Gets the schedule entries associated to the ticket              Please use the /schedule/entries?conditions=type/id=4 AND objectId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdScheduleentriesRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdScheduleentries(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdScheduleentriesRequest {
	return ApiGetServiceTicketsByParentIdScheduleentriesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []ScheduleEntryReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdScheduleentriesExecute(r ApiGetServiceTicketsByParentIdScheduleentriesRequest) ([]ScheduleEntryReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ScheduleEntryReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdScheduleentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/scheduleentries"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdScheduleentriesCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdScheduleentriesCountExecute(r)
}

/*
GetServiceTicketsByParentIdScheduleentriesCount Get Count of ScheduleEntryReference              Gets the schedule entries count associated to the ticket              Please use the /schedule/entries/count?conditions=type/id=4 AND objectId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdScheduleentriesCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdScheduleentriesCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdScheduleentriesCountRequest {
	return ApiGetServiceTicketsByParentIdScheduleentriesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdScheduleentriesCountExecute(r ApiGetServiceTicketsByParentIdScheduleentriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdScheduleentriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/scheduleentries/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdTimeentriesRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) Fields(fields string) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) Page(page int32) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdTimeentriesRequest) Execute() ([]TimeEntryReference, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdTimeentriesExecute(r)
}

/*
GetServiceTicketsByParentIdTimeentries Get List of TimeEntryReference              Gets time entries associated to the ticket              Please use the /time/entries?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdTimeentriesRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdTimeentries(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdTimeentriesRequest {
	return ApiGetServiceTicketsByParentIdTimeentriesRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TimeEntryReference
func (a *TicketsAPIService) GetServiceTicketsByParentIdTimeentriesExecute(r ApiGetServiceTicketsByParentIdTimeentriesRequest) ([]TimeEntryReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeEntryReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdTimeentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/timeentries"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsByParentIdTimeentriesCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) ClientId(clientId string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) Conditions(conditions string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) Fields(fields string) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) Page(page int32) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) PageId(pageId int32) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsByParentIdTimeentriesCountExecute(r)
}

/*
GetServiceTicketsByParentIdTimeentriesCount Get Count of TimeEntryReference              Gets time entries count associated to the ticket              Please use the /time/entries/count?conditions=(chargeToType=\"ServiceTicket\" OR chargeToType=\"ProjectTicket\") AND chargeToId={id} endpoint

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiGetServiceTicketsByParentIdTimeentriesCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsByParentIdTimeentriesCount(ctx context.Context, parentId int32) ApiGetServiceTicketsByParentIdTimeentriesCountRequest {
	return ApiGetServiceTicketsByParentIdTimeentriesCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsByParentIdTimeentriesCountExecute(r ApiGetServiceTicketsByParentIdTimeentriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsByParentIdTimeentriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/timeentries/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsCalculateSlaRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) ClientId(clientId string) ApiGetServiceTicketsCalculateSlaRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) Conditions(conditions string) ApiGetServiceTicketsCalculateSlaRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) ChildConditions(childConditions string) ApiGetServiceTicketsCalculateSlaRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsCalculateSlaRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) OrderBy(orderBy string) ApiGetServiceTicketsCalculateSlaRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) Fields(fields string) ApiGetServiceTicketsCalculateSlaRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) Page(page int32) ApiGetServiceTicketsCalculateSlaRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) PageSize(pageSize int32) ApiGetServiceTicketsCalculateSlaRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsCalculateSlaRequest) PageId(pageId int32) ApiGetServiceTicketsCalculateSlaRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsCalculateSlaRequest) Execute() ([]Ticket, *http.Response, error) {
	return r.ApiService.GetServiceTicketsCalculateSlaExecute(r)
}

/*
GetServiceTicketsCalculateSla Get List of ConnectWise.Apis.v3_0.v2015_3.Service.Ticket.Ticket with SLA calculated

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketsCalculateSlaRequest
*/
func (a *TicketsAPIService) GetServiceTicketsCalculateSla(ctx context.Context) ApiGetServiceTicketsCalculateSlaRequest {
	return ApiGetServiceTicketsCalculateSlaRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Ticket
func (a *TicketsAPIService) GetServiceTicketsCalculateSlaExecute(r ApiGetServiceTicketsCalculateSlaRequest) ([]Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsCalculateSla")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/calculateSla"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceTicketsCountRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetServiceTicketsCountRequest) ClientId(clientId string) ApiGetServiceTicketsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) Conditions(conditions string) ApiGetServiceTicketsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) ChildConditions(childConditions string) ApiGetServiceTicketsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceTicketsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) OrderBy(orderBy string) ApiGetServiceTicketsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) Fields(fields string) ApiGetServiceTicketsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) Page(page int32) ApiGetServiceTicketsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) PageSize(pageSize int32) ApiGetServiceTicketsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetServiceTicketsCountRequest) PageId(pageId int32) ApiGetServiceTicketsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceTicketsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceTicketsCountExecute(r)
}

/*
GetServiceTicketsCount Get Count of ConnectWise.Apis.v3_0.v2015_3.Service.Ticket.Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetServiceTicketsCountRequest
*/
func (a *TicketsAPIService) GetServiceTicketsCount(ctx context.Context) ApiGetServiceTicketsCountRequest {
	return ApiGetServiceTicketsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TicketsAPIService) GetServiceTicketsCountExecute(r ApiGetServiceTicketsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.GetServiceTicketsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceTicketsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchServiceTicketsByIdRequest) ClientId(clientId string) ApiPatchServiceTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceTicketsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceTicketsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceTicketsByIdRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.PatchServiceTicketsByIdExecute(r)
}

/*
PatchServiceTicketsById Patch Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketId
 @return ApiPatchServiceTicketsByIdRequest
*/
func (a *TicketsAPIService) PatchServiceTicketsById(ctx context.Context, id int32) ApiPatchServiceTicketsByIdRequest {
	return ApiPatchServiceTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Ticket
func (a *TicketsAPIService) PatchServiceTicketsByIdExecute(r ApiPatchServiceTicketsByIdRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PatchServiceTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	clientId *string
	ticket *Ticket
}

// 
func (r ApiPostServiceTicketsRequest) ClientId(clientId string) ApiPostServiceTicketsRequest {
	r.clientId = &clientId
	return r
}

// ticket
func (r ApiPostServiceTicketsRequest) Ticket(ticket Ticket) ApiPostServiceTicketsRequest {
	r.ticket = &ticket
	return r
}

func (r ApiPostServiceTicketsRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.PostServiceTicketsExecute(r)
}

/*
PostServiceTickets Post Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceTicketsRequest
*/
func (a *TicketsAPIService) PostServiceTickets(ctx context.Context) ApiPostServiceTicketsRequest {
	return ApiPostServiceTicketsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Ticket
func (a *TicketsAPIService) PostServiceTicketsExecute(r ApiPostServiceTicketsRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTickets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticket == nil {
		return localVarReturnValue, nil, reportError("ticket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByIdCopyRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	clientId *string
}

// 
func (r ApiPostServiceTicketsByIdCopyRequest) ClientId(clientId string) ApiPostServiceTicketsByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostServiceTicketsByIdCopyRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByIdCopyExecute(r)
}

/*
PostServiceTicketsByIdCopy Post TicketCopy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketId
 @return ApiPostServiceTicketsByIdCopyRequest
*/
func (a *TicketsAPIService) PostServiceTicketsByIdCopy(ctx context.Context, id int32) ApiPostServiceTicketsByIdCopyRequest {
	return ApiPostServiceTicketsByIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Ticket
func (a *TicketsAPIService) PostServiceTicketsByIdCopyExecute(r ApiPostServiceTicketsByIdCopyRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdAttachChildrenRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	ticketBundle *TicketBundle
}

// 
func (r ApiPostServiceTicketsByParentIdAttachChildrenRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdAttachChildrenRequest {
	r.clientId = &clientId
	return r
}

// bundle
func (r ApiPostServiceTicketsByParentIdAttachChildrenRequest) TicketBundle(ticketBundle TicketBundle) ApiPostServiceTicketsByParentIdAttachChildrenRequest {
	r.ticketBundle = &ticketBundle
	return r
}

func (r ApiPostServiceTicketsByParentIdAttachChildrenRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdAttachChildrenExecute(r)
}

/*
PostServiceTicketsByParentIdAttachChildren Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostServiceTicketsByParentIdAttachChildrenRequest
*/
func (a *TicketsAPIService) PostServiceTicketsByParentIdAttachChildren(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdAttachChildrenRequest {
	return ApiPostServiceTicketsByParentIdAttachChildrenRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *TicketsAPIService) PostServiceTicketsByParentIdAttachChildrenExecute(r ApiPostServiceTicketsByParentIdAttachChildrenRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsByParentIdAttachChildren")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/attachChildren"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketBundle == nil {
		return localVarReturnValue, nil, reportError("ticketBundle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketBundle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdConfigurationsRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	configurationReference *ConfigurationReference
}

// 
func (r ApiPostServiceTicketsByParentIdConfigurationsRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// configuration
func (r ApiPostServiceTicketsByParentIdConfigurationsRequest) ConfigurationReference(configurationReference ConfigurationReference) ApiPostServiceTicketsByParentIdConfigurationsRequest {
	r.configurationReference = &configurationReference
	return r
}

func (r ApiPostServiceTicketsByParentIdConfigurationsRequest) Execute() (*ConfigurationReference, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdConfigurationsExecute(r)
}

/*
PostServiceTicketsByParentIdConfigurations Post ConfigurationReference

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostServiceTicketsByParentIdConfigurationsRequest
*/
func (a *TicketsAPIService) PostServiceTicketsByParentIdConfigurations(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdConfigurationsRequest {
	return ApiPostServiceTicketsByParentIdConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return ConfigurationReference
func (a *TicketsAPIService) PostServiceTicketsByParentIdConfigurationsExecute(r ApiPostServiceTicketsByParentIdConfigurationsRequest) (*ConfigurationReference, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigurationReference
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsByParentIdConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/configurations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.configurationReference == nil {
		return localVarReturnValue, nil, reportError("configurationReference is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.configurationReference
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdConvertRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	convertToProject *ConvertToProject
}

// 
func (r ApiPostServiceTicketsByParentIdConvertRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdConvertRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostServiceTicketsByParentIdConvertRequest) ConvertToProject(convertToProject ConvertToProject) ApiPostServiceTicketsByParentIdConvertRequest {
	r.convertToProject = &convertToProject
	return r
}

func (r ApiPostServiceTicketsByParentIdConvertRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdConvertExecute(r)
}

/*
PostServiceTicketsByParentIdConvert Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostServiceTicketsByParentIdConvertRequest
*/
func (a *TicketsAPIService) PostServiceTicketsByParentIdConvert(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdConvertRequest {
	return ApiPostServiceTicketsByParentIdConvertRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *TicketsAPIService) PostServiceTicketsByParentIdConvertExecute(r ApiPostServiceTicketsByParentIdConvertRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsByParentIdConvert")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/convert"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.convertToProject == nil {
		return localVarReturnValue, nil, reportError("convertToProject is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.convertToProject
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsByParentIdMergeRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	parentId int32
	clientId *string
	ticketMerge *TicketMerge
}

// 
func (r ApiPostServiceTicketsByParentIdMergeRequest) ClientId(clientId string) ApiPostServiceTicketsByParentIdMergeRequest {
	r.clientId = &clientId
	return r
}

// merge
func (r ApiPostServiceTicketsByParentIdMergeRequest) TicketMerge(ticketMerge TicketMerge) ApiPostServiceTicketsByParentIdMergeRequest {
	r.ticketMerge = &ticketMerge
	return r
}

func (r ApiPostServiceTicketsByParentIdMergeRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostServiceTicketsByParentIdMergeExecute(r)
}

/*
PostServiceTicketsByParentIdMerge Post SuccessResponse

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId ticketId
 @return ApiPostServiceTicketsByParentIdMergeRequest
*/
func (a *TicketsAPIService) PostServiceTicketsByParentIdMerge(ctx context.Context, parentId int32) ApiPostServiceTicketsByParentIdMergeRequest {
	return ApiPostServiceTicketsByParentIdMergeRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return SuccessResponse
func (a *TicketsAPIService) PostServiceTicketsByParentIdMergeExecute(r ApiPostServiceTicketsByParentIdMergeRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsByParentIdMerge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{parentId}/merge"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticketMerge == nil {
		return localVarReturnValue, nil, reportError("ticketMerge is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticketMerge
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceTicketsSearchRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	clientId *string
	filterValues *FilterValues
}

// 
func (r ApiPostServiceTicketsSearchRequest) ClientId(clientId string) ApiPostServiceTicketsSearchRequest {
	r.clientId = &clientId
	return r
}

// filterValues
func (r ApiPostServiceTicketsSearchRequest) FilterValues(filterValues FilterValues) ApiPostServiceTicketsSearchRequest {
	r.filterValues = &filterValues
	return r
}

func (r ApiPostServiceTicketsSearchRequest) Execute() ([]Ticket, *http.Response, error) {
	return r.ApiService.PostServiceTicketsSearchExecute(r)
}

/*
PostServiceTicketsSearch Post List of Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostServiceTicketsSearchRequest
*/
func (a *TicketsAPIService) PostServiceTicketsSearch(ctx context.Context) ApiPostServiceTicketsSearchRequest {
	return ApiPostServiceTicketsSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Ticket
func (a *TicketsAPIService) PostServiceTicketsSearchExecute(r ApiPostServiceTicketsSearchRequest) ([]Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PostServiceTicketsSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.filterValues == nil {
		return localVarReturnValue, nil, reportError("filterValues is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.filterValues
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceTicketsByIdRequest struct {
	ctx context.Context
	ApiService *TicketsAPIService
	id int32
	clientId *string
	ticket *Ticket
}

// 
func (r ApiPutServiceTicketsByIdRequest) ClientId(clientId string) ApiPutServiceTicketsByIdRequest {
	r.clientId = &clientId
	return r
}

// ticket
func (r ApiPutServiceTicketsByIdRequest) Ticket(ticket Ticket) ApiPutServiceTicketsByIdRequest {
	r.ticket = &ticket
	return r
}

func (r ApiPutServiceTicketsByIdRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.PutServiceTicketsByIdExecute(r)
}

/*
PutServiceTicketsById Put Ticket

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id ticketId
 @return ApiPutServiceTicketsByIdRequest
*/
func (a *TicketsAPIService) PutServiceTicketsById(ctx context.Context, id int32) ApiPutServiceTicketsByIdRequest {
	return ApiPutServiceTicketsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Ticket
func (a *TicketsAPIService) PutServiceTicketsByIdExecute(r ApiPutServiceTicketsByIdRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TicketsAPIService.PutServiceTicketsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/tickets/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ticket == nil {
		return localVarReturnValue, nil, reportError("ticket is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ticket
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
