/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeAccrualDetailsAPIService TimeAccrualDetailsAPI service
type TimeAccrualDetailsAPIService service

type ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeAccrualsByParentIdDetailsByIdExecute(r)
}

/*
DeleteTimeAccrualsByParentIdDetailsById Delete TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId accrualId
 @return ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest
*/
func (a *TimeAccrualDetailsAPIService) DeleteTimeAccrualsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest {
	return ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TimeAccrualDetailsAPIService) DeleteTimeAccrualsByParentIdDetailsByIdExecute(r ApiDeleteTimeAccrualsByParentIdDetailsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.DeleteTimeAccrualsByParentIdDetailsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) ClientId(clientId string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) Conditions(conditions string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) OrderBy(orderBy string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) Fields(fields string) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) Page(page int32) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) PageSize(pageSize int32) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsRequest) PageId(pageId int32) ApiGetTimeAccrualsByParentIdDetailsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeAccrualsByParentIdDetailsRequest) Execute() ([]TimeAccrualDetail, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsByParentIdDetailsExecute(r)
}

/*
GetTimeAccrualsByParentIdDetails Get List of TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId accrualId
 @return ApiGetTimeAccrualsByParentIdDetailsRequest
*/
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetails(ctx context.Context, parentId int32) ApiGetTimeAccrualsByParentIdDetailsRequest {
	return ApiGetTimeAccrualsByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TimeAccrualDetail
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetailsExecute(r ApiGetTimeAccrualsByParentIdDetailsRequest) ([]TimeAccrualDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeAccrualDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.GetTimeAccrualsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) Conditions(conditions string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) OrderBy(orderBy string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) Fields(fields string) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) Page(page int32) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) PageSize(pageSize int32) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) PageId(pageId int32) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) Execute() (*TimeAccrualDetail, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsByParentIdDetailsByIdExecute(r)
}

/*
GetTimeAccrualsByParentIdDetailsById Get TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId accrualId
 @return ApiGetTimeAccrualsByParentIdDetailsByIdRequest
*/
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiGetTimeAccrualsByParentIdDetailsByIdRequest {
	return ApiGetTimeAccrualsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TimeAccrualDetail
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetailsByIdExecute(r ApiGetTimeAccrualsByParentIdDetailsByIdRequest) (*TimeAccrualDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrualDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.GetTimeAccrualsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsByParentIdDetailsCountRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) ClientId(clientId string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) Conditions(conditions string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) OrderBy(orderBy string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) Fields(fields string) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) Page(page int32) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) PageSize(pageSize int32) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) PageId(pageId int32) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeAccrualsByParentIdDetailsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsByParentIdDetailsCountExecute(r)
}

/*
GetTimeAccrualsByParentIdDetailsCount Get Count of TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId accrualId
 @return ApiGetTimeAccrualsByParentIdDetailsCountRequest
*/
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetailsCount(ctx context.Context, parentId int32) ApiGetTimeAccrualsByParentIdDetailsCountRequest {
	return ApiGetTimeAccrualsByParentIdDetailsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TimeAccrualDetailsAPIService) GetTimeAccrualsByParentIdDetailsCountExecute(r ApiGetTimeAccrualsByParentIdDetailsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.GetTimeAccrualsByParentIdDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeAccrualsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeAccrualsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPatchTimeAccrualsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeAccrualsByParentIdDetailsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeAccrualsByParentIdDetailsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeAccrualsByParentIdDetailsByIdRequest) Execute() (*TimeAccrualDetail, *http.Response, error) {
	return r.ApiService.PatchTimeAccrualsByParentIdDetailsByIdExecute(r)
}

/*
PatchTimeAccrualsByParentIdDetailsById Patch TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId accrualId
 @return ApiPatchTimeAccrualsByParentIdDetailsByIdRequest
*/
func (a *TimeAccrualDetailsAPIService) PatchTimeAccrualsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPatchTimeAccrualsByParentIdDetailsByIdRequest {
	return ApiPatchTimeAccrualsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TimeAccrualDetail
func (a *TimeAccrualDetailsAPIService) PatchTimeAccrualsByParentIdDetailsByIdExecute(r ApiPatchTimeAccrualsByParentIdDetailsByIdRequest) (*TimeAccrualDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrualDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.PatchTimeAccrualsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeAccrualsByParentIdDetailsRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	parentId int32
	clientId *string
	timeAccrualDetail *TimeAccrualDetail
}

// 
func (r ApiPostTimeAccrualsByParentIdDetailsRequest) ClientId(clientId string) ApiPostTimeAccrualsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// timeAccrualDetail
func (r ApiPostTimeAccrualsByParentIdDetailsRequest) TimeAccrualDetail(timeAccrualDetail TimeAccrualDetail) ApiPostTimeAccrualsByParentIdDetailsRequest {
	r.timeAccrualDetail = &timeAccrualDetail
	return r
}

func (r ApiPostTimeAccrualsByParentIdDetailsRequest) Execute() (*TimeAccrualDetail, *http.Response, error) {
	return r.ApiService.PostTimeAccrualsByParentIdDetailsExecute(r)
}

/*
PostTimeAccrualsByParentIdDetails Post TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId accrualId
 @return ApiPostTimeAccrualsByParentIdDetailsRequest
*/
func (a *TimeAccrualDetailsAPIService) PostTimeAccrualsByParentIdDetails(ctx context.Context, parentId int32) ApiPostTimeAccrualsByParentIdDetailsRequest {
	return ApiPostTimeAccrualsByParentIdDetailsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TimeAccrualDetail
func (a *TimeAccrualDetailsAPIService) PostTimeAccrualsByParentIdDetailsExecute(r ApiPostTimeAccrualsByParentIdDetailsRequest) (*TimeAccrualDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrualDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.PostTimeAccrualsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timeAccrualDetail == nil {
		return localVarReturnValue, nil, reportError("timeAccrualDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timeAccrualDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeAccrualsByParentIdDetailsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualDetailsAPIService
	id int32
	parentId int32
	clientId *string
	timeAccrualDetail *TimeAccrualDetail
}

// 
func (r ApiPutTimeAccrualsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiPutTimeAccrualsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

// timeAccrualDetail
func (r ApiPutTimeAccrualsByParentIdDetailsByIdRequest) TimeAccrualDetail(timeAccrualDetail TimeAccrualDetail) ApiPutTimeAccrualsByParentIdDetailsByIdRequest {
	r.timeAccrualDetail = &timeAccrualDetail
	return r
}

func (r ApiPutTimeAccrualsByParentIdDetailsByIdRequest) Execute() (*TimeAccrualDetail, *http.Response, error) {
	return r.ApiService.PutTimeAccrualsByParentIdDetailsByIdExecute(r)
}

/*
PutTimeAccrualsByParentIdDetailsById Put TimeAccrualDetail

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id detailId
 @param parentId accrualId
 @return ApiPutTimeAccrualsByParentIdDetailsByIdRequest
*/
func (a *TimeAccrualDetailsAPIService) PutTimeAccrualsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiPutTimeAccrualsByParentIdDetailsByIdRequest {
	return ApiPutTimeAccrualsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TimeAccrualDetail
func (a *TimeAccrualDetailsAPIService) PutTimeAccrualsByParentIdDetailsByIdExecute(r ApiPutTimeAccrualsByParentIdDetailsByIdRequest) (*TimeAccrualDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrualDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualDetailsAPIService.PutTimeAccrualsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timeAccrualDetail == nil {
		return localVarReturnValue, nil, reportError("timeAccrualDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timeAccrualDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
