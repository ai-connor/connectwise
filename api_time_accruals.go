/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeAccrualsAPIService TimeAccrualsAPI service
type TimeAccrualsAPIService service

type ApiDeleteTimeAccrualsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeAccrualsByIdRequest) ClientId(clientId string) ApiDeleteTimeAccrualsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeAccrualsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeAccrualsByIdExecute(r)
}

/*
DeleteTimeAccrualsById Delete TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id accrualId
 @return ApiDeleteTimeAccrualsByIdRequest
*/
func (a *TimeAccrualsAPIService) DeleteTimeAccrualsById(ctx context.Context, id int32) ApiDeleteTimeAccrualsByIdRequest {
	return ApiDeleteTimeAccrualsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TimeAccrualsAPIService) DeleteTimeAccrualsByIdExecute(r ApiDeleteTimeAccrualsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.DeleteTimeAccrualsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeAccrualsRequest) Conditions(conditions string) ApiGetTimeAccrualsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) OrderBy(orderBy string) ApiGetTimeAccrualsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) Fields(fields string) ApiGetTimeAccrualsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) Page(page int32) ApiGetTimeAccrualsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) PageSize(pageSize int32) ApiGetTimeAccrualsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) PageId(pageId int32) ApiGetTimeAccrualsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeAccrualsRequest) ClientId(clientId string) ApiGetTimeAccrualsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeAccrualsRequest) Execute() ([]TimeAccrual, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsExecute(r)
}

/*
GetTimeAccruals Get List of TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeAccrualsRequest
*/
func (a *TimeAccrualsAPIService) GetTimeAccruals(ctx context.Context) ApiGetTimeAccrualsRequest {
	return ApiGetTimeAccrualsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TimeAccrual
func (a *TimeAccrualsAPIService) GetTimeAccrualsExecute(r ApiGetTimeAccrualsRequest) ([]TimeAccrual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeAccrual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.GetTimeAccruals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeAccrualsByIdRequest) Conditions(conditions string) ApiGetTimeAccrualsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) OrderBy(orderBy string) ApiGetTimeAccrualsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) Fields(fields string) ApiGetTimeAccrualsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) Page(page int32) ApiGetTimeAccrualsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) PageSize(pageSize int32) ApiGetTimeAccrualsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) PageId(pageId int32) ApiGetTimeAccrualsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeAccrualsByIdRequest) ClientId(clientId string) ApiGetTimeAccrualsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeAccrualsByIdRequest) Execute() (*TimeAccrual, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsByIdExecute(r)
}

/*
GetTimeAccrualsById Get TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id accrualId
 @return ApiGetTimeAccrualsByIdRequest
*/
func (a *TimeAccrualsAPIService) GetTimeAccrualsById(ctx context.Context, id int32) ApiGetTimeAccrualsByIdRequest {
	return ApiGetTimeAccrualsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeAccrual
func (a *TimeAccrualsAPIService) GetTimeAccrualsByIdExecute(r ApiGetTimeAccrualsByIdRequest) (*TimeAccrual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.GetTimeAccrualsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeAccrualsCountRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeAccrualsCountRequest) Conditions(conditions string) ApiGetTimeAccrualsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) ChildConditions(childConditions string) ApiGetTimeAccrualsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeAccrualsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) OrderBy(orderBy string) ApiGetTimeAccrualsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) Fields(fields string) ApiGetTimeAccrualsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) Page(page int32) ApiGetTimeAccrualsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) PageSize(pageSize int32) ApiGetTimeAccrualsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) PageId(pageId int32) ApiGetTimeAccrualsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeAccrualsCountRequest) ClientId(clientId string) ApiGetTimeAccrualsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeAccrualsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeAccrualsCountExecute(r)
}

/*
GetTimeAccrualsCount Get Count of TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeAccrualsCountRequest
*/
func (a *TimeAccrualsAPIService) GetTimeAccrualsCount(ctx context.Context) ApiGetTimeAccrualsCountRequest {
	return ApiGetTimeAccrualsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TimeAccrualsAPIService) GetTimeAccrualsCountExecute(r ApiGetTimeAccrualsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.GetTimeAccrualsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeAccrualsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchTimeAccrualsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeAccrualsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchTimeAccrualsByIdRequest) ClientId(clientId string) ApiPatchTimeAccrualsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchTimeAccrualsByIdRequest) Execute() (*TimeAccrual, *http.Response, error) {
	return r.ApiService.PatchTimeAccrualsByIdExecute(r)
}

/*
PatchTimeAccrualsById Patch TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id accrualId
 @return ApiPatchTimeAccrualsByIdRequest
*/
func (a *TimeAccrualsAPIService) PatchTimeAccrualsById(ctx context.Context, id int32) ApiPatchTimeAccrualsByIdRequest {
	return ApiPatchTimeAccrualsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeAccrual
func (a *TimeAccrualsAPIService) PatchTimeAccrualsByIdExecute(r ApiPatchTimeAccrualsByIdRequest) (*TimeAccrual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.PatchTimeAccrualsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeAccrualsRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	timeAccrual *TimeAccrual
	clientId *string
}

// timeAccrual
func (r ApiPostTimeAccrualsRequest) TimeAccrual(timeAccrual TimeAccrual) ApiPostTimeAccrualsRequest {
	r.timeAccrual = &timeAccrual
	return r
}

// 
func (r ApiPostTimeAccrualsRequest) ClientId(clientId string) ApiPostTimeAccrualsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostTimeAccrualsRequest) Execute() (*TimeAccrual, *http.Response, error) {
	return r.ApiService.PostTimeAccrualsExecute(r)
}

/*
PostTimeAccruals Post TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeAccrualsRequest
*/
func (a *TimeAccrualsAPIService) PostTimeAccruals(ctx context.Context) ApiPostTimeAccrualsRequest {
	return ApiPostTimeAccrualsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimeAccrual
func (a *TimeAccrualsAPIService) PostTimeAccrualsExecute(r ApiPostTimeAccrualsRequest) (*TimeAccrual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.PostTimeAccruals")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timeAccrual == nil {
		return localVarReturnValue, nil, reportError("timeAccrual is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.timeAccrual
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeAccrualsByIdRequest struct {
	ctx context.Context
	ApiService *TimeAccrualsAPIService
	id int32
	timeAccrual *TimeAccrual
	clientId *string
}

// timeAccrual
func (r ApiPutTimeAccrualsByIdRequest) TimeAccrual(timeAccrual TimeAccrual) ApiPutTimeAccrualsByIdRequest {
	r.timeAccrual = &timeAccrual
	return r
}

// 
func (r ApiPutTimeAccrualsByIdRequest) ClientId(clientId string) ApiPutTimeAccrualsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutTimeAccrualsByIdRequest) Execute() (*TimeAccrual, *http.Response, error) {
	return r.ApiService.PutTimeAccrualsByIdExecute(r)
}

/*
PutTimeAccrualsById Put TimeAccrual

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id accrualId
 @return ApiPutTimeAccrualsByIdRequest
*/
func (a *TimeAccrualsAPIService) PutTimeAccrualsById(ctx context.Context, id int32) ApiPutTimeAccrualsByIdRequest {
	return ApiPutTimeAccrualsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeAccrual
func (a *TimeAccrualsAPIService) PutTimeAccrualsByIdExecute(r ApiPutTimeAccrualsByIdRequest) (*TimeAccrual, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeAccrual
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeAccrualsAPIService.PutTimeAccrualsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/accruals/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timeAccrual == nil {
		return localVarReturnValue, nil, reportError("timeAccrual is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.timeAccrual
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
