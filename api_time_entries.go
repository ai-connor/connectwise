/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeEntriesAPIService TimeEntriesAPI service
type TimeEntriesAPIService service

type ApiDeleteTimeEntriesByIdRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeEntriesByIdRequest) ClientId(clientId string) ApiDeleteTimeEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeEntriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeEntriesByIdExecute(r)
}

/*
DeleteTimeEntriesById Delete TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiDeleteTimeEntriesByIdRequest
*/
func (a *TimeEntriesAPIService) DeleteTimeEntriesById(ctx context.Context, id int32) ApiDeleteTimeEntriesByIdRequest {
	return ApiDeleteTimeEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TimeEntriesAPIService) DeleteTimeEntriesByIdExecute(r ApiDeleteTimeEntriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.DeleteTimeEntriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeEntriesRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeEntriesRequest) ClientId(clientId string) ApiGetTimeEntriesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeEntriesRequest) Conditions(conditions string) ApiGetTimeEntriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeEntriesRequest) ChildConditions(childConditions string) ApiGetTimeEntriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeEntriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeEntriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeEntriesRequest) OrderBy(orderBy string) ApiGetTimeEntriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeEntriesRequest) Fields(fields string) ApiGetTimeEntriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeEntriesRequest) Page(page int32) ApiGetTimeEntriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeEntriesRequest) PageSize(pageSize int32) ApiGetTimeEntriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeEntriesRequest) PageId(pageId int32) ApiGetTimeEntriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeEntriesRequest) Execute() ([]TimeEntry, *http.Response, error) {
	return r.ApiService.GetTimeEntriesExecute(r)
}

/*
GetTimeEntries Get List of TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeEntriesRequest
*/
func (a *TimeEntriesAPIService) GetTimeEntries(ctx context.Context) ApiGetTimeEntriesRequest {
	return ApiGetTimeEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TimeEntry
func (a *TimeEntriesAPIService) GetTimeEntriesExecute(r ApiGetTimeEntriesRequest) ([]TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.GetTimeEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeEntriesByIdRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeEntriesByIdRequest) ClientId(clientId string) ApiGetTimeEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) Conditions(conditions string) ApiGetTimeEntriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) ChildConditions(childConditions string) ApiGetTimeEntriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeEntriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) OrderBy(orderBy string) ApiGetTimeEntriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) Fields(fields string) ApiGetTimeEntriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) Page(page int32) ApiGetTimeEntriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) PageSize(pageSize int32) ApiGetTimeEntriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeEntriesByIdRequest) PageId(pageId int32) ApiGetTimeEntriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeEntriesByIdRequest) Execute() (*TimeEntry, *http.Response, error) {
	return r.ApiService.GetTimeEntriesByIdExecute(r)
}

/*
GetTimeEntriesById Get TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiGetTimeEntriesByIdRequest
*/
func (a *TimeEntriesAPIService) GetTimeEntriesById(ctx context.Context, id int32) ApiGetTimeEntriesByIdRequest {
	return ApiGetTimeEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeEntry
func (a *TimeEntriesAPIService) GetTimeEntriesByIdExecute(r ApiGetTimeEntriesByIdRequest) (*TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.GetTimeEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeEntriesCountRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeEntriesCountRequest) ClientId(clientId string) ApiGetTimeEntriesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) Conditions(conditions string) ApiGetTimeEntriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) ChildConditions(childConditions string) ApiGetTimeEntriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeEntriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) OrderBy(orderBy string) ApiGetTimeEntriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) Fields(fields string) ApiGetTimeEntriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) Page(page int32) ApiGetTimeEntriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) PageSize(pageSize int32) ApiGetTimeEntriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeEntriesCountRequest) PageId(pageId int32) ApiGetTimeEntriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeEntriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeEntriesCountExecute(r)
}

/*
GetTimeEntriesCount Get Count of TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeEntriesCountRequest
*/
func (a *TimeEntriesAPIService) GetTimeEntriesCount(ctx context.Context) ApiGetTimeEntriesCountRequest {
	return ApiGetTimeEntriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TimeEntriesAPIService) GetTimeEntriesCountExecute(r ApiGetTimeEntriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.GetTimeEntriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeEntriesByIdRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeEntriesByIdRequest) ClientId(clientId string) ApiPatchTimeEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeEntriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeEntriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeEntriesByIdRequest) Execute() (*TimeEntry, *http.Response, error) {
	return r.ApiService.PatchTimeEntriesByIdExecute(r)
}

/*
PatchTimeEntriesById Patch TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiPatchTimeEntriesByIdRequest
*/
func (a *TimeEntriesAPIService) PatchTimeEntriesById(ctx context.Context, id int32) ApiPatchTimeEntriesByIdRequest {
	return ApiPatchTimeEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeEntry
func (a *TimeEntriesAPIService) PatchTimeEntriesByIdExecute(r ApiPatchTimeEntriesByIdRequest) (*TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.PatchTimeEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeEntriesRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	clientId *string
	timeEntry *TimeEntry
}

// 
func (r ApiPostTimeEntriesRequest) ClientId(clientId string) ApiPostTimeEntriesRequest {
	r.clientId = &clientId
	return r
}

// timeEntry
func (r ApiPostTimeEntriesRequest) TimeEntry(timeEntry TimeEntry) ApiPostTimeEntriesRequest {
	r.timeEntry = &timeEntry
	return r
}

func (r ApiPostTimeEntriesRequest) Execute() (*TimeEntry, *http.Response, error) {
	return r.ApiService.PostTimeEntriesExecute(r)
}

/*
PostTimeEntries Post TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeEntriesRequest
*/
func (a *TimeEntriesAPIService) PostTimeEntries(ctx context.Context) ApiPostTimeEntriesRequest {
	return ApiPostTimeEntriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimeEntry
func (a *TimeEntriesAPIService) PostTimeEntriesExecute(r ApiPostTimeEntriesRequest) (*TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.PostTimeEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timeEntry == nil {
		return localVarReturnValue, nil, reportError("timeEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timeEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeEntriesDefaultsRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	clientId *string
	timeEntry *TimeEntry
}

// 
func (r ApiPostTimeEntriesDefaultsRequest) ClientId(clientId string) ApiPostTimeEntriesDefaultsRequest {
	r.clientId = &clientId
	return r
}

// timeEntry
func (r ApiPostTimeEntriesDefaultsRequest) TimeEntry(timeEntry TimeEntry) ApiPostTimeEntriesDefaultsRequest {
	r.timeEntry = &timeEntry
	return r
}

func (r ApiPostTimeEntriesDefaultsRequest) Execute() (*TimeEntry, *http.Response, error) {
	return r.ApiService.PostTimeEntriesDefaultsExecute(r)
}

/*
PostTimeEntriesDefaults Post TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeEntriesDefaultsRequest
*/
func (a *TimeEntriesAPIService) PostTimeEntriesDefaults(ctx context.Context) ApiPostTimeEntriesDefaultsRequest {
	return ApiPostTimeEntriesDefaultsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimeEntry
func (a *TimeEntriesAPIService) PostTimeEntriesDefaultsExecute(r ApiPostTimeEntriesDefaultsRequest) (*TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.PostTimeEntriesDefaults")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/defaults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timeEntry == nil {
		return localVarReturnValue, nil, reportError("timeEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timeEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeEntriesByIdRequest struct {
	ctx context.Context
	ApiService *TimeEntriesAPIService
	id int32
	clientId *string
	timeEntry *TimeEntry
}

// 
func (r ApiPutTimeEntriesByIdRequest) ClientId(clientId string) ApiPutTimeEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

// timeEntry
func (r ApiPutTimeEntriesByIdRequest) TimeEntry(timeEntry TimeEntry) ApiPutTimeEntriesByIdRequest {
	r.timeEntry = &timeEntry
	return r
}

func (r ApiPutTimeEntriesByIdRequest) Execute() (*TimeEntry, *http.Response, error) {
	return r.ApiService.PutTimeEntriesByIdExecute(r)
}

/*
PutTimeEntriesById Put TimeEntry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id entryId
 @return ApiPutTimeEntriesByIdRequest
*/
func (a *TimeEntriesAPIService) PutTimeEntriesById(ctx context.Context, id int32) ApiPutTimeEntriesByIdRequest {
	return ApiPutTimeEntriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeEntry
func (a *TimeEntriesAPIService) PutTimeEntriesByIdExecute(r ApiPutTimeEntriesByIdRequest) (*TimeEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeEntriesAPIService.PutTimeEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timeEntry == nil {
		return localVarReturnValue, nil, reportError("timeEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timeEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
