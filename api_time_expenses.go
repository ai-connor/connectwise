/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeExpensesAPIService TimeExpensesAPI service
type TimeExpensesAPIService service

type ApiGetSystemMyCompanyTimeExpenseRequest struct {
	ctx context.Context
	ApiService *TimeExpensesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) Conditions(conditions string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) Fields(fields string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) Page(page int32) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) PageId(pageId int32) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseRequest) ClientId(clientId string) ApiGetSystemMyCompanyTimeExpenseRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyTimeExpenseRequest) Execute() ([]TimeExpense, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyTimeExpenseExecute(r)
}

/*
GetSystemMyCompanyTimeExpense Get List of TimeExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemMyCompanyTimeExpenseRequest
*/
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpense(ctx context.Context) ApiGetSystemMyCompanyTimeExpenseRequest {
	return ApiGetSystemMyCompanyTimeExpenseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TimeExpense
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpenseExecute(r ApiGetSystemMyCompanyTimeExpenseRequest) ([]TimeExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeExpensesAPIService.GetSystemMyCompanyTimeExpense")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/timeExpense"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyTimeExpenseByIdRequest struct {
	ctx context.Context
	ApiService *TimeExpensesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) Conditions(conditions string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) Fields(fields string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) Page(page int32) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) PageId(pageId int32) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) ClientId(clientId string) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyTimeExpenseByIdRequest) Execute() (*TimeExpense, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyTimeExpenseByIdExecute(r)
}

/*
GetSystemMyCompanyTimeExpenseById Get TimeExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeExpenseId
 @return ApiGetSystemMyCompanyTimeExpenseByIdRequest
*/
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpenseById(ctx context.Context, id int32) ApiGetSystemMyCompanyTimeExpenseByIdRequest {
	return ApiGetSystemMyCompanyTimeExpenseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeExpense
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpenseByIdExecute(r ApiGetSystemMyCompanyTimeExpenseByIdRequest) (*TimeExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeExpensesAPIService.GetSystemMyCompanyTimeExpenseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/timeExpense/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyTimeExpenseCountRequest struct {
	ctx context.Context
	ApiService *TimeExpensesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) Conditions(conditions string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) Fields(fields string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) Page(page int32) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) PageId(pageId int32) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) ClientId(clientId string) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyTimeExpenseCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyTimeExpenseCountExecute(r)
}

/*
GetSystemMyCompanyTimeExpenseCount Get Count of TimeExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemMyCompanyTimeExpenseCountRequest
*/
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpenseCount(ctx context.Context) ApiGetSystemMyCompanyTimeExpenseCountRequest {
	return ApiGetSystemMyCompanyTimeExpenseCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TimeExpensesAPIService) GetSystemMyCompanyTimeExpenseCountExecute(r ApiGetSystemMyCompanyTimeExpenseCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeExpensesAPIService.GetSystemMyCompanyTimeExpenseCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/timeExpense/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMyCompanyTimeExpenseByIdRequest struct {
	ctx context.Context
	ApiService *TimeExpensesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemMyCompanyTimeExpenseByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMyCompanyTimeExpenseByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemMyCompanyTimeExpenseByIdRequest) ClientId(clientId string) ApiPatchSystemMyCompanyTimeExpenseByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemMyCompanyTimeExpenseByIdRequest) Execute() (*TimeExpense, *http.Response, error) {
	return r.ApiService.PatchSystemMyCompanyTimeExpenseByIdExecute(r)
}

/*
PatchSystemMyCompanyTimeExpenseById Patch TimeExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeExpenseId
 @return ApiPatchSystemMyCompanyTimeExpenseByIdRequest
*/
func (a *TimeExpensesAPIService) PatchSystemMyCompanyTimeExpenseById(ctx context.Context, id int32) ApiPatchSystemMyCompanyTimeExpenseByIdRequest {
	return ApiPatchSystemMyCompanyTimeExpenseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeExpense
func (a *TimeExpensesAPIService) PatchSystemMyCompanyTimeExpenseByIdExecute(r ApiPatchSystemMyCompanyTimeExpenseByIdRequest) (*TimeExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeExpensesAPIService.PatchSystemMyCompanyTimeExpenseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/timeExpense/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMyCompanyTimeExpenseByIdRequest struct {
	ctx context.Context
	ApiService *TimeExpensesAPIService
	id int32
	timeExpense *TimeExpense
	clientId *string
}

// timeExpense
func (r ApiPutSystemMyCompanyTimeExpenseByIdRequest) TimeExpense(timeExpense TimeExpense) ApiPutSystemMyCompanyTimeExpenseByIdRequest {
	r.timeExpense = &timeExpense
	return r
}

// 
func (r ApiPutSystemMyCompanyTimeExpenseByIdRequest) ClientId(clientId string) ApiPutSystemMyCompanyTimeExpenseByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemMyCompanyTimeExpenseByIdRequest) Execute() (*TimeExpense, *http.Response, error) {
	return r.ApiService.PutSystemMyCompanyTimeExpenseByIdExecute(r)
}

/*
PutSystemMyCompanyTimeExpenseById Put TimeExpense

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeExpenseId
 @return ApiPutSystemMyCompanyTimeExpenseByIdRequest
*/
func (a *TimeExpensesAPIService) PutSystemMyCompanyTimeExpenseById(ctx context.Context, id int32) ApiPutSystemMyCompanyTimeExpenseByIdRequest {
	return ApiPutSystemMyCompanyTimeExpenseByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeExpense
func (a *TimeExpensesAPIService) PutSystemMyCompanyTimeExpenseByIdExecute(r ApiPutSystemMyCompanyTimeExpenseByIdRequest) (*TimeExpense, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeExpense
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeExpensesAPIService.PutSystemMyCompanyTimeExpenseById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/timeExpense/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timeExpense == nil {
		return localVarReturnValue, nil, reportError("timeExpense is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.timeExpense
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
