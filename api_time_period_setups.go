/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimePeriodSetupsAPIService TimePeriodSetupsAPI service
type TimePeriodSetupsAPIService service

type ApiDeleteTimeTimePeriodSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeTimePeriodSetupsByIdRequest) ClientId(clientId string) ApiDeleteTimeTimePeriodSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeTimePeriodSetupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeTimePeriodSetupsByIdExecute(r)
}

/*
DeleteTimeTimePeriodSetupsById Delete TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timePeriodSetupId
 @return ApiDeleteTimeTimePeriodSetupsByIdRequest
*/
func (a *TimePeriodSetupsAPIService) DeleteTimeTimePeriodSetupsById(ctx context.Context, id int32) ApiDeleteTimeTimePeriodSetupsByIdRequest {
	return ApiDeleteTimeTimePeriodSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TimePeriodSetupsAPIService) DeleteTimeTimePeriodSetupsByIdExecute(r ApiDeleteTimeTimePeriodSetupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.DeleteTimeTimePeriodSetupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) Page(page int32) ApiGetTimeTimePeriodSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsRequest) Execute() ([]TimePeriodSetup, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsExecute(r)
}

/*
GetTimeTimePeriodSetups Get List of TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeTimePeriodSetupsRequest
*/
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetups(ctx context.Context) ApiGetTimeTimePeriodSetupsRequest {
	return ApiGetTimeTimePeriodSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TimePeriodSetup
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsExecute(r ApiGetTimeTimePeriodSetupsRequest) ([]TimePeriodSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimePeriodSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.GetTimeTimePeriodSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) Page(page int32) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByIdRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsByIdRequest) Execute() (*TimePeriodSetup, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsByIdExecute(r)
}

/*
GetTimeTimePeriodSetupsById Get TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timePeriodSetupId
 @return ApiGetTimeTimePeriodSetupsByIdRequest
*/
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsById(ctx context.Context, id int32) ApiGetTimeTimePeriodSetupsByIdRequest {
	return ApiGetTimeTimePeriodSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimePeriodSetup
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsByIdExecute(r ApiGetTimeTimePeriodSetupsByIdRequest) (*TimePeriodSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimePeriodSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.GetTimeTimePeriodSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsCountRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) Page(page int32) ApiGetTimeTimePeriodSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsCountRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsCountExecute(r)
}

/*
GetTimeTimePeriodSetupsCount Get Count of TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeTimePeriodSetupsCountRequest
*/
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsCount(ctx context.Context) ApiGetTimeTimePeriodSetupsCountRequest {
	return ApiGetTimeTimePeriodSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsCountExecute(r ApiGetTimeTimePeriodSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.GetTimeTimePeriodSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsDefaultRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) Page(page int32) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsDefaultRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsDefaultRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsDefaultRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsDefaultExecute(r)
}

/*
GetTimeTimePeriodSetupsDefault Get TimePeriodSetupDefaults

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeTimePeriodSetupsDefaultRequest
*/
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsDefault(ctx context.Context) ApiGetTimeTimePeriodSetupsDefaultRequest {
	return ApiGetTimeTimePeriodSetupsDefaultRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *TimePeriodSetupsAPIService) GetTimeTimePeriodSetupsDefaultExecute(r ApiGetTimeTimePeriodSetupsDefaultRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.GetTimeTimePeriodSetupsDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/default"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeTimePeriodSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeTimePeriodSetupsByIdRequest) ClientId(clientId string) ApiPatchTimeTimePeriodSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeTimePeriodSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeTimePeriodSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeTimePeriodSetupsByIdRequest) Execute() (*TimePeriodSetup, *http.Response, error) {
	return r.ApiService.PatchTimeTimePeriodSetupsByIdExecute(r)
}

/*
PatchTimeTimePeriodSetupsById Patch TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timePeriodSetupId
 @return ApiPatchTimeTimePeriodSetupsByIdRequest
*/
func (a *TimePeriodSetupsAPIService) PatchTimeTimePeriodSetupsById(ctx context.Context, id int32) ApiPatchTimeTimePeriodSetupsByIdRequest {
	return ApiPatchTimeTimePeriodSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimePeriodSetup
func (a *TimePeriodSetupsAPIService) PatchTimeTimePeriodSetupsByIdExecute(r ApiPatchTimeTimePeriodSetupsByIdRequest) (*TimePeriodSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimePeriodSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.PatchTimeTimePeriodSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeTimePeriodSetupsRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	clientId *string
	timePeriodSetup *TimePeriodSetup
}

// 
func (r ApiPostTimeTimePeriodSetupsRequest) ClientId(clientId string) ApiPostTimeTimePeriodSetupsRequest {
	r.clientId = &clientId
	return r
}

// timePeriodSetup
func (r ApiPostTimeTimePeriodSetupsRequest) TimePeriodSetup(timePeriodSetup TimePeriodSetup) ApiPostTimeTimePeriodSetupsRequest {
	r.timePeriodSetup = &timePeriodSetup
	return r
}

func (r ApiPostTimeTimePeriodSetupsRequest) Execute() (*TimePeriodSetup, *http.Response, error) {
	return r.ApiService.PostTimeTimePeriodSetupsExecute(r)
}

/*
PostTimeTimePeriodSetups Post TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeTimePeriodSetupsRequest
*/
func (a *TimePeriodSetupsAPIService) PostTimeTimePeriodSetups(ctx context.Context) ApiPostTimeTimePeriodSetupsRequest {
	return ApiPostTimeTimePeriodSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimePeriodSetup
func (a *TimePeriodSetupsAPIService) PostTimeTimePeriodSetupsExecute(r ApiPostTimeTimePeriodSetupsRequest) (*TimePeriodSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimePeriodSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.PostTimeTimePeriodSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timePeriodSetup == nil {
		return localVarReturnValue, nil, reportError("timePeriodSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timePeriodSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeTimePeriodSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimePeriodSetupsAPIService
	id int32
	clientId *string
	timePeriodSetup *TimePeriodSetup
}

// 
func (r ApiPutTimeTimePeriodSetupsByIdRequest) ClientId(clientId string) ApiPutTimeTimePeriodSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// timePeriodSetup
func (r ApiPutTimeTimePeriodSetupsByIdRequest) TimePeriodSetup(timePeriodSetup TimePeriodSetup) ApiPutTimeTimePeriodSetupsByIdRequest {
	r.timePeriodSetup = &timePeriodSetup
	return r
}

func (r ApiPutTimeTimePeriodSetupsByIdRequest) Execute() (*TimePeriodSetup, *http.Response, error) {
	return r.ApiService.PutTimeTimePeriodSetupsByIdExecute(r)
}

/*
PutTimeTimePeriodSetupsById Put TimePeriodSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timePeriodSetupId
 @return ApiPutTimeTimePeriodSetupsByIdRequest
*/
func (a *TimePeriodSetupsAPIService) PutTimeTimePeriodSetupsById(ctx context.Context, id int32) ApiPutTimeTimePeriodSetupsByIdRequest {
	return ApiPutTimeTimePeriodSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimePeriodSetup
func (a *TimePeriodSetupsAPIService) PutTimeTimePeriodSetupsByIdExecute(r ApiPutTimeTimePeriodSetupsByIdRequest) (*TimePeriodSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimePeriodSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodSetupsAPIService.PutTimeTimePeriodSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.timePeriodSetup == nil {
		return localVarReturnValue, nil, reportError("timePeriodSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.timePeriodSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
