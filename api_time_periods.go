/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimePeriodsAPIService TimePeriodsAPI service
type TimePeriodsAPIService service

type ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest struct {
	ctx context.Context
	ApiService *TimePeriodsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) Page(page int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) Execute() ([]TimePeriod, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsByParentIdPeriodsExecute(r)
}

/*
GetTimeTimePeriodSetupsByParentIdPeriods Get List of TimePeriod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId timePeriodSetupId
 @return ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest
*/
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriods(ctx context.Context, parentId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest {
	return ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TimePeriod
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriodsExecute(r ApiGetTimeTimePeriodSetupsByParentIdPeriodsRequest) ([]TimePeriod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimePeriod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodsAPIService.GetTimeTimePeriodSetupsByParentIdPeriods")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{parentId}/periods"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest struct {
	ctx context.Context
	ApiService *TimePeriodsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) Page(page int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) Execute() (*TimePeriod, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsByParentIdPeriodsByIdExecute(r)
}

/*
GetTimeTimePeriodSetupsByParentIdPeriodsById Get TimePeriod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id periodId
 @param parentId timePeriodSetupId
 @return ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest
*/
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriodsById(ctx context.Context, id int32, parentId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest {
	return ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TimePeriod
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriodsByIdExecute(r ApiGetTimeTimePeriodSetupsByParentIdPeriodsByIdRequest) (*TimePeriod, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimePeriod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodsAPIService.GetTimeTimePeriodSetupsByParentIdPeriodsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{parentId}/periods/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest struct {
	ctx context.Context
	ApiService *TimePeriodsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) ClientId(clientId string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) Conditions(conditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) ChildConditions(childConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) OrderBy(orderBy string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) Fields(fields string) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) Page(page int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) PageSize(pageSize int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) PageId(pageId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeTimePeriodSetupsByParentIdPeriodsCountExecute(r)
}

/*
GetTimeTimePeriodSetupsByParentIdPeriodsCount Get Count of TimePeriod

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId timePeriodSetupId
 @return ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest
*/
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriodsCount(ctx context.Context, parentId int32) ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest {
	return ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TimePeriodsAPIService) GetTimeTimePeriodSetupsByParentIdPeriodsCountExecute(r ApiGetTimeTimePeriodSetupsByParentIdPeriodsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimePeriodsAPIService.GetTimeTimePeriodSetupsByParentIdPeriodsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/timePeriodSetups/{parentId}/periods/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
