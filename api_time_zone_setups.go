/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TimeZoneSetupsAPIService TimeZoneSetupsAPI service
type TimeZoneSetupsAPIService service

type ApiDeleteSystemTimeZoneSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemTimeZoneSetupsByIdRequest) ClientId(clientId string) ApiDeleteSystemTimeZoneSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemTimeZoneSetupsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemTimeZoneSetupsByIdExecute(r)
}

/*
DeleteSystemTimeZoneSetupsById Delete TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeZoneSetupId
 @return ApiDeleteSystemTimeZoneSetupsByIdRequest
*/
func (a *TimeZoneSetupsAPIService) DeleteSystemTimeZoneSetupsById(ctx context.Context, id int32) ApiDeleteSystemTimeZoneSetupsByIdRequest {
	return ApiDeleteSystemTimeZoneSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TimeZoneSetupsAPIService) DeleteSystemTimeZoneSetupsByIdExecute(r ApiDeleteSystemTimeZoneSetupsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.DeleteSystemTimeZoneSetupsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemTimeZoneSetupsRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) Conditions(conditions string) ApiGetSystemTimeZoneSetupsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) ChildConditions(childConditions string) ApiGetSystemTimeZoneSetupsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTimeZoneSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) OrderBy(orderBy string) ApiGetSystemTimeZoneSetupsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) Fields(fields string) ApiGetSystemTimeZoneSetupsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) Page(page int32) ApiGetSystemTimeZoneSetupsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) PageSize(pageSize int32) ApiGetSystemTimeZoneSetupsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) PageId(pageId int32) ApiGetSystemTimeZoneSetupsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsRequest) ClientId(clientId string) ApiGetSystemTimeZoneSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTimeZoneSetupsRequest) Execute() ([]TimeZoneSetup, *http.Response, error) {
	return r.ApiService.GetSystemTimeZoneSetupsExecute(r)
}

/*
GetSystemTimeZoneSetups Get List of TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemTimeZoneSetupsRequest
*/
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetups(ctx context.Context) ApiGetSystemTimeZoneSetupsRequest {
	return ApiGetSystemTimeZoneSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TimeZoneSetup
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetupsExecute(r ApiGetSystemTimeZoneSetupsRequest) ([]TimeZoneSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TimeZoneSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.GetSystemTimeZoneSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemTimeZoneSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) Conditions(conditions string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) ChildConditions(childConditions string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) OrderBy(orderBy string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) Fields(fields string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) Page(page int32) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) PageSize(pageSize int32) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) PageId(pageId int32) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsByIdRequest) ClientId(clientId string) ApiGetSystemTimeZoneSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTimeZoneSetupsByIdRequest) Execute() (*TimeZoneSetup, *http.Response, error) {
	return r.ApiService.GetSystemTimeZoneSetupsByIdExecute(r)
}

/*
GetSystemTimeZoneSetupsById Get TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeZoneSetupId
 @return ApiGetSystemTimeZoneSetupsByIdRequest
*/
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetupsById(ctx context.Context, id int32) ApiGetSystemTimeZoneSetupsByIdRequest {
	return ApiGetSystemTimeZoneSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeZoneSetup
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetupsByIdExecute(r ApiGetSystemTimeZoneSetupsByIdRequest) (*TimeZoneSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeZoneSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.GetSystemTimeZoneSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemTimeZoneSetupsCountRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) Conditions(conditions string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) ChildConditions(childConditions string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) OrderBy(orderBy string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) Fields(fields string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) Page(page int32) ApiGetSystemTimeZoneSetupsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) PageSize(pageSize int32) ApiGetSystemTimeZoneSetupsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) PageId(pageId int32) ApiGetSystemTimeZoneSetupsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTimeZoneSetupsCountRequest) ClientId(clientId string) ApiGetSystemTimeZoneSetupsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTimeZoneSetupsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemTimeZoneSetupsCountExecute(r)
}

/*
GetSystemTimeZoneSetupsCount Get Count of TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemTimeZoneSetupsCountRequest
*/
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetupsCount(ctx context.Context) ApiGetSystemTimeZoneSetupsCountRequest {
	return ApiGetSystemTimeZoneSetupsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TimeZoneSetupsAPIService) GetSystemTimeZoneSetupsCountExecute(r ApiGetSystemTimeZoneSetupsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.GetSystemTimeZoneSetupsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemTimeZoneSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemTimeZoneSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemTimeZoneSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemTimeZoneSetupsByIdRequest) ClientId(clientId string) ApiPatchSystemTimeZoneSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemTimeZoneSetupsByIdRequest) Execute() (*TimeZoneSetup, *http.Response, error) {
	return r.ApiService.PatchSystemTimeZoneSetupsByIdExecute(r)
}

/*
PatchSystemTimeZoneSetupsById Patch TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeZoneSetupId
 @return ApiPatchSystemTimeZoneSetupsByIdRequest
*/
func (a *TimeZoneSetupsAPIService) PatchSystemTimeZoneSetupsById(ctx context.Context, id int32) ApiPatchSystemTimeZoneSetupsByIdRequest {
	return ApiPatchSystemTimeZoneSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeZoneSetup
func (a *TimeZoneSetupsAPIService) PatchSystemTimeZoneSetupsByIdExecute(r ApiPatchSystemTimeZoneSetupsByIdRequest) (*TimeZoneSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeZoneSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.PatchSystemTimeZoneSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemTimeZoneSetupsRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	timeZoneSetup *TimeZoneSetup
	clientId *string
}

// timeZoneSetup
func (r ApiPostSystemTimeZoneSetupsRequest) TimeZoneSetup(timeZoneSetup TimeZoneSetup) ApiPostSystemTimeZoneSetupsRequest {
	r.timeZoneSetup = &timeZoneSetup
	return r
}

// 
func (r ApiPostSystemTimeZoneSetupsRequest) ClientId(clientId string) ApiPostSystemTimeZoneSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemTimeZoneSetupsRequest) Execute() (*TimeZoneSetup, *http.Response, error) {
	return r.ApiService.PostSystemTimeZoneSetupsExecute(r)
}

/*
PostSystemTimeZoneSetups Post TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemTimeZoneSetupsRequest
*/
func (a *TimeZoneSetupsAPIService) PostSystemTimeZoneSetups(ctx context.Context) ApiPostSystemTimeZoneSetupsRequest {
	return ApiPostSystemTimeZoneSetupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimeZoneSetup
func (a *TimeZoneSetupsAPIService) PostSystemTimeZoneSetupsExecute(r ApiPostSystemTimeZoneSetupsRequest) (*TimeZoneSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeZoneSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.PostSystemTimeZoneSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timeZoneSetup == nil {
		return localVarReturnValue, nil, reportError("timeZoneSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.timeZoneSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemTimeZoneSetupsByIdRequest struct {
	ctx context.Context
	ApiService *TimeZoneSetupsAPIService
	id int32
	timeZoneSetup *TimeZoneSetup
	clientId *string
}

// timeZoneSetup
func (r ApiPutSystemTimeZoneSetupsByIdRequest) TimeZoneSetup(timeZoneSetup TimeZoneSetup) ApiPutSystemTimeZoneSetupsByIdRequest {
	r.timeZoneSetup = &timeZoneSetup
	return r
}

// 
func (r ApiPutSystemTimeZoneSetupsByIdRequest) ClientId(clientId string) ApiPutSystemTimeZoneSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemTimeZoneSetupsByIdRequest) Execute() (*TimeZoneSetup, *http.Response, error) {
	return r.ApiService.PutSystemTimeZoneSetupsByIdExecute(r)
}

/*
PutSystemTimeZoneSetupsById Put TimeZoneSetup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id timeZoneSetupId
 @return ApiPutSystemTimeZoneSetupsByIdRequest
*/
func (a *TimeZoneSetupsAPIService) PutSystemTimeZoneSetupsById(ctx context.Context, id int32) ApiPutSystemTimeZoneSetupsByIdRequest {
	return ApiPutSystemTimeZoneSetupsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TimeZoneSetup
func (a *TimeZoneSetupsAPIService) PutSystemTimeZoneSetupsByIdExecute(r ApiPutSystemTimeZoneSetupsByIdRequest) (*TimeZoneSetup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeZoneSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimeZoneSetupsAPIService.PutSystemTimeZoneSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/timeZoneSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.timeZoneSetup == nil {
		return localVarReturnValue, nil, reportError("timeZoneSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.timeZoneSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
