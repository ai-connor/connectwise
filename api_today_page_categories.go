/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TodayPageCategoriesAPIService TodayPageCategoriesAPI service
type TodayPageCategoriesAPIService service

type ApiDeleteSystemTodayPageCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemTodayPageCategoriesByIdRequest) ClientId(clientId string) ApiDeleteSystemTodayPageCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemTodayPageCategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemTodayPageCategoriesByIdExecute(r)
}

/*
DeleteSystemTodayPageCategoriesById Delete TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id todayPageCategoryId
 @return ApiDeleteSystemTodayPageCategoriesByIdRequest
*/
func (a *TodayPageCategoriesAPIService) DeleteSystemTodayPageCategoriesById(ctx context.Context, id int32) ApiDeleteSystemTodayPageCategoriesByIdRequest {
	return ApiDeleteSystemTodayPageCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *TodayPageCategoriesAPIService) DeleteSystemTodayPageCategoriesByIdExecute(r ApiDeleteSystemTodayPageCategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.DeleteSystemTodayPageCategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemTodayPageCategoriesRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) Conditions(conditions string) ApiGetSystemTodayPageCategoriesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) ChildConditions(childConditions string) ApiGetSystemTodayPageCategoriesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTodayPageCategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) OrderBy(orderBy string) ApiGetSystemTodayPageCategoriesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) Fields(fields string) ApiGetSystemTodayPageCategoriesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) Page(page int32) ApiGetSystemTodayPageCategoriesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) PageSize(pageSize int32) ApiGetSystemTodayPageCategoriesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) PageId(pageId int32) ApiGetSystemTodayPageCategoriesRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesRequest) ClientId(clientId string) ApiGetSystemTodayPageCategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTodayPageCategoriesRequest) Execute() ([]TodayPageCategory, *http.Response, error) {
	return r.ApiService.GetSystemTodayPageCategoriesExecute(r)
}

/*
GetSystemTodayPageCategories Get List of TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemTodayPageCategoriesRequest
*/
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategories(ctx context.Context) ApiGetSystemTodayPageCategoriesRequest {
	return ApiGetSystemTodayPageCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []TodayPageCategory
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategoriesExecute(r ApiGetSystemTodayPageCategoriesRequest) ([]TodayPageCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TodayPageCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.GetSystemTodayPageCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemTodayPageCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) Conditions(conditions string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) ChildConditions(childConditions string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) OrderBy(orderBy string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) Fields(fields string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) Page(page int32) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) PageSize(pageSize int32) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) PageId(pageId int32) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesByIdRequest) ClientId(clientId string) ApiGetSystemTodayPageCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTodayPageCategoriesByIdRequest) Execute() (*TodayPageCategory, *http.Response, error) {
	return r.ApiService.GetSystemTodayPageCategoriesByIdExecute(r)
}

/*
GetSystemTodayPageCategoriesById Get TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id todayPageCategoryId
 @return ApiGetSystemTodayPageCategoriesByIdRequest
*/
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategoriesById(ctx context.Context, id int32) ApiGetSystemTodayPageCategoriesByIdRequest {
	return ApiGetSystemTodayPageCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TodayPageCategory
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategoriesByIdExecute(r ApiGetSystemTodayPageCategoriesByIdRequest) (*TodayPageCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TodayPageCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.GetSystemTodayPageCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemTodayPageCategoriesCountRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) Conditions(conditions string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) ChildConditions(childConditions string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) OrderBy(orderBy string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) Fields(fields string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) Page(page int32) ApiGetSystemTodayPageCategoriesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) PageSize(pageSize int32) ApiGetSystemTodayPageCategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) PageId(pageId int32) ApiGetSystemTodayPageCategoriesCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemTodayPageCategoriesCountRequest) ClientId(clientId string) ApiGetSystemTodayPageCategoriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemTodayPageCategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemTodayPageCategoriesCountExecute(r)
}

/*
GetSystemTodayPageCategoriesCount Get Count of TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemTodayPageCategoriesCountRequest
*/
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategoriesCount(ctx context.Context) ApiGetSystemTodayPageCategoriesCountRequest {
	return ApiGetSystemTodayPageCategoriesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *TodayPageCategoriesAPIService) GetSystemTodayPageCategoriesCountExecute(r ApiGetSystemTodayPageCategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.GetSystemTodayPageCategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemTodayPageCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemTodayPageCategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemTodayPageCategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemTodayPageCategoriesByIdRequest) ClientId(clientId string) ApiPatchSystemTodayPageCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemTodayPageCategoriesByIdRequest) Execute() (*TodayPageCategory, *http.Response, error) {
	return r.ApiService.PatchSystemTodayPageCategoriesByIdExecute(r)
}

/*
PatchSystemTodayPageCategoriesById Patch TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id todayPageCategoryId
 @return ApiPatchSystemTodayPageCategoriesByIdRequest
*/
func (a *TodayPageCategoriesAPIService) PatchSystemTodayPageCategoriesById(ctx context.Context, id int32) ApiPatchSystemTodayPageCategoriesByIdRequest {
	return ApiPatchSystemTodayPageCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TodayPageCategory
func (a *TodayPageCategoriesAPIService) PatchSystemTodayPageCategoriesByIdExecute(r ApiPatchSystemTodayPageCategoriesByIdRequest) (*TodayPageCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TodayPageCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.PatchSystemTodayPageCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemTodayPageCategoriesRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	todayPageCategory *TodayPageCategory
	clientId *string
}

// todayPageCategory
func (r ApiPostSystemTodayPageCategoriesRequest) TodayPageCategory(todayPageCategory TodayPageCategory) ApiPostSystemTodayPageCategoriesRequest {
	r.todayPageCategory = &todayPageCategory
	return r
}

// 
func (r ApiPostSystemTodayPageCategoriesRequest) ClientId(clientId string) ApiPostSystemTodayPageCategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemTodayPageCategoriesRequest) Execute() (*TodayPageCategory, *http.Response, error) {
	return r.ApiService.PostSystemTodayPageCategoriesExecute(r)
}

/*
PostSystemTodayPageCategories Post TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemTodayPageCategoriesRequest
*/
func (a *TodayPageCategoriesAPIService) PostSystemTodayPageCategories(ctx context.Context) ApiPostSystemTodayPageCategoriesRequest {
	return ApiPostSystemTodayPageCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TodayPageCategory
func (a *TodayPageCategoriesAPIService) PostSystemTodayPageCategoriesExecute(r ApiPostSystemTodayPageCategoriesRequest) (*TodayPageCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TodayPageCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.PostSystemTodayPageCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.todayPageCategory == nil {
		return localVarReturnValue, nil, reportError("todayPageCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.todayPageCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemTodayPageCategoriesByIdRequest struct {
	ctx context.Context
	ApiService *TodayPageCategoriesAPIService
	id int32
	todayPageCategory *TodayPageCategory
	clientId *string
}

// todayPageCategory
func (r ApiPutSystemTodayPageCategoriesByIdRequest) TodayPageCategory(todayPageCategory TodayPageCategory) ApiPutSystemTodayPageCategoriesByIdRequest {
	r.todayPageCategory = &todayPageCategory
	return r
}

// 
func (r ApiPutSystemTodayPageCategoriesByIdRequest) ClientId(clientId string) ApiPutSystemTodayPageCategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemTodayPageCategoriesByIdRequest) Execute() (*TodayPageCategory, *http.Response, error) {
	return r.ApiService.PutSystemTodayPageCategoriesByIdExecute(r)
}

/*
PutSystemTodayPageCategoriesById Put TodayPageCategory

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id todayPageCategoryId
 @return ApiPutSystemTodayPageCategoriesByIdRequest
*/
func (a *TodayPageCategoriesAPIService) PutSystemTodayPageCategoriesById(ctx context.Context, id int32) ApiPutSystemTodayPageCategoriesByIdRequest {
	return ApiPutSystemTodayPageCategoriesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return TodayPageCategory
func (a *TodayPageCategoriesAPIService) PutSystemTodayPageCategoriesByIdExecute(r ApiPutSystemTodayPageCategoriesByIdRequest) (*TodayPageCategory, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TodayPageCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TodayPageCategoriesAPIService.PutSystemTodayPageCategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/todayPageCategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.todayPageCategory == nil {
		return localVarReturnValue, nil, reportError("todayPageCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.todayPageCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
