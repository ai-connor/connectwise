/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TrackActionsAPIService TrackActionsAPI service
type TrackActionsAPIService service

type ApiDeleteCompanyTracksByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteCompanyTracksByParentIdActionsByIdRequest) ClientId(clientId string) ApiDeleteCompanyTracksByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyTracksByParentIdActionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyTracksByParentIdActionsByIdExecute(r)
}

/*
DeleteCompanyTracksByParentIdActionsById Delete TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId trackId
 @return ApiDeleteCompanyTracksByParentIdActionsByIdRequest
*/
func (a *TrackActionsAPIService) DeleteCompanyTracksByParentIdActionsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyTracksByParentIdActionsByIdRequest {
	return ApiDeleteCompanyTracksByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *TrackActionsAPIService) DeleteCompanyTracksByParentIdActionsByIdExecute(r ApiDeleteCompanyTracksByParentIdActionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.DeleteCompanyTracksByParentIdActionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyTracksByParentIdActionsRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) Conditions(conditions string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) ChildConditions(childConditions string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) OrderBy(orderBy string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) Fields(fields string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) Page(page int32) ApiGetCompanyTracksByParentIdActionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) PageSize(pageSize int32) ApiGetCompanyTracksByParentIdActionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) PageId(pageId int32) ApiGetCompanyTracksByParentIdActionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsRequest) ClientId(clientId string) ApiGetCompanyTracksByParentIdActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTracksByParentIdActionsRequest) Execute() ([]TrackAction, *http.Response, error) {
	return r.ApiService.GetCompanyTracksByParentIdActionsExecute(r)
}

/*
GetCompanyTracksByParentIdActions Get List of TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId trackId
 @return ApiGetCompanyTracksByParentIdActionsRequest
*/
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActions(ctx context.Context, parentId int32) ApiGetCompanyTracksByParentIdActionsRequest {
	return ApiGetCompanyTracksByParentIdActionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []TrackAction
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActionsExecute(r ApiGetCompanyTracksByParentIdActionsRequest) ([]TrackAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []TrackAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.GetCompanyTracksByParentIdActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTracksByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) Conditions(conditions string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) OrderBy(orderBy string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) Fields(fields string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) Page(page int32) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) PageSize(pageSize int32) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) PageId(pageId int32) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) ClientId(clientId string) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTracksByParentIdActionsByIdRequest) Execute() (*TrackAction, *http.Response, error) {
	return r.ApiService.GetCompanyTracksByParentIdActionsByIdExecute(r)
}

/*
GetCompanyTracksByParentIdActionsById Get TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId trackId
 @return ApiGetCompanyTracksByParentIdActionsByIdRequest
*/
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActionsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyTracksByParentIdActionsByIdRequest {
	return ApiGetCompanyTracksByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TrackAction
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActionsByIdExecute(r ApiGetCompanyTracksByParentIdActionsByIdRequest) (*TrackAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrackAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.GetCompanyTracksByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTracksByParentIdActionsCountRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) Conditions(conditions string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) ChildConditions(childConditions string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) OrderBy(orderBy string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) Fields(fields string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) Page(page int32) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) PageSize(pageSize int32) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) PageId(pageId int32) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetCompanyTracksByParentIdActionsCountRequest) ClientId(clientId string) ApiGetCompanyTracksByParentIdActionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTracksByParentIdActionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyTracksByParentIdActionsCountExecute(r)
}

/*
GetCompanyTracksByParentIdActionsCount Get Count of TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId trackId
 @return ApiGetCompanyTracksByParentIdActionsCountRequest
*/
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActionsCount(ctx context.Context, parentId int32) ApiGetCompanyTracksByParentIdActionsCountRequest {
	return ApiGetCompanyTracksByParentIdActionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *TrackActionsAPIService) GetCompanyTracksByParentIdActionsCountExecute(r ApiGetCompanyTracksByParentIdActionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.GetCompanyTracksByParentIdActionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyTracksByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiPatchCompanyTracksByParentIdActionsByIdRequest) ClientId(clientId string) ApiPatchCompanyTracksByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchCompanyTracksByParentIdActionsByIdRequest) Execute() (*TrackAction, *http.Response, error) {
	return r.ApiService.PatchCompanyTracksByParentIdActionsByIdExecute(r)
}

/*
PatchCompanyTracksByParentIdActionsById Patch TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId trackId
 @return ApiPatchCompanyTracksByParentIdActionsByIdRequest
*/
func (a *TrackActionsAPIService) PatchCompanyTracksByParentIdActionsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyTracksByParentIdActionsByIdRequest {
	return ApiPatchCompanyTracksByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TrackAction
func (a *TrackActionsAPIService) PatchCompanyTracksByParentIdActionsByIdExecute(r ApiPatchCompanyTracksByParentIdActionsByIdRequest) (*TrackAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrackAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.PatchCompanyTracksByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyTracksByParentIdActionsRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	parentId int32
	trackAction *TrackAction
	clientId *string
}

// trackAction
func (r ApiPostCompanyTracksByParentIdActionsRequest) TrackAction(trackAction TrackAction) ApiPostCompanyTracksByParentIdActionsRequest {
	r.trackAction = &trackAction
	return r
}

// 
func (r ApiPostCompanyTracksByParentIdActionsRequest) ClientId(clientId string) ApiPostCompanyTracksByParentIdActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyTracksByParentIdActionsRequest) Execute() (*TrackAction, *http.Response, error) {
	return r.ApiService.PostCompanyTracksByParentIdActionsExecute(r)
}

/*
PostCompanyTracksByParentIdActions Post TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId trackId
 @return ApiPostCompanyTracksByParentIdActionsRequest
*/
func (a *TrackActionsAPIService) PostCompanyTracksByParentIdActions(ctx context.Context, parentId int32) ApiPostCompanyTracksByParentIdActionsRequest {
	return ApiPostCompanyTracksByParentIdActionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TrackAction
func (a *TrackActionsAPIService) PostCompanyTracksByParentIdActionsExecute(r ApiPostCompanyTracksByParentIdActionsRequest) (*TrackAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrackAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.PostCompanyTracksByParentIdActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.trackAction == nil {
		return localVarReturnValue, nil, reportError("trackAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.trackAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyTracksByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *TrackActionsAPIService
	id int32
	parentId int32
	trackAction *TrackAction
	clientId *string
}

// trackAction
func (r ApiPutCompanyTracksByParentIdActionsByIdRequest) TrackAction(trackAction TrackAction) ApiPutCompanyTracksByParentIdActionsByIdRequest {
	r.trackAction = &trackAction
	return r
}

// 
func (r ApiPutCompanyTracksByParentIdActionsByIdRequest) ClientId(clientId string) ApiPutCompanyTracksByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutCompanyTracksByParentIdActionsByIdRequest) Execute() (*TrackAction, *http.Response, error) {
	return r.ApiService.PutCompanyTracksByParentIdActionsByIdExecute(r)
}

/*
PutCompanyTracksByParentIdActionsById Put TrackAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId trackId
 @return ApiPutCompanyTracksByParentIdActionsByIdRequest
*/
func (a *TrackActionsAPIService) PutCompanyTracksByParentIdActionsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyTracksByParentIdActionsByIdRequest {
	return ApiPutCompanyTracksByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return TrackAction
func (a *TrackActionsAPIService) PutCompanyTracksByParentIdActionsByIdExecute(r ApiPutCompanyTracksByParentIdActionsByIdRequest) (*TrackAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrackAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TrackActionsAPIService.PutCompanyTracksByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/tracks/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.trackAction == nil {
		return localVarReturnValue, nil, reportError("trackAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.trackAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
