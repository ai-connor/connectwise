/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UnitOfMeasuresAPIService UnitOfMeasuresAPI service
type UnitOfMeasuresAPIService service

type ApiDeleteProcurementUnitOfMeasuresByIdRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteProcurementUnitOfMeasuresByIdRequest) ClientId(clientId string) ApiDeleteProcurementUnitOfMeasuresByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementUnitOfMeasuresByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementUnitOfMeasuresByIdExecute(r)
}

/*
DeleteProcurementUnitOfMeasuresById Delete UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unitOfMeasureId
 @return ApiDeleteProcurementUnitOfMeasuresByIdRequest
*/
func (a *UnitOfMeasuresAPIService) DeleteProcurementUnitOfMeasuresById(ctx context.Context, id int32) ApiDeleteProcurementUnitOfMeasuresByIdRequest {
	return ApiDeleteProcurementUnitOfMeasuresByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UnitOfMeasuresAPIService) DeleteProcurementUnitOfMeasuresByIdExecute(r ApiDeleteProcurementUnitOfMeasuresByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.DeleteProcurementUnitOfMeasuresById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresRequest) Execute() ([]UnitOfMeasure, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresExecute(r)
}

/*
GetProcurementUnitOfMeasures Get List of UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementUnitOfMeasuresRequest
*/
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasures(ctx context.Context) ApiGetProcurementUnitOfMeasuresRequest {
	return ApiGetProcurementUnitOfMeasuresRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UnitOfMeasure
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasuresExecute(r ApiGetProcurementUnitOfMeasuresRequest) ([]UnitOfMeasure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UnitOfMeasure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.GetProcurementUnitOfMeasures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresByIdRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresByIdRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresByIdRequest) Execute() (*UnitOfMeasure, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresByIdExecute(r)
}

/*
GetProcurementUnitOfMeasuresById Get UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unitOfMeasureId
 @return ApiGetProcurementUnitOfMeasuresByIdRequest
*/
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasuresById(ctx context.Context, id int32) ApiGetProcurementUnitOfMeasuresByIdRequest {
	return ApiGetProcurementUnitOfMeasuresByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UnitOfMeasure
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasuresByIdExecute(r ApiGetProcurementUnitOfMeasuresByIdRequest) (*UnitOfMeasure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitOfMeasure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.GetProcurementUnitOfMeasuresById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementUnitOfMeasuresCountRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) Conditions(conditions string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) ChildConditions(childConditions string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) OrderBy(orderBy string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) Fields(fields string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) Page(page int32) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) PageSize(pageSize int32) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) PageId(pageId int32) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetProcurementUnitOfMeasuresCountRequest) ClientId(clientId string) ApiGetProcurementUnitOfMeasuresCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementUnitOfMeasuresCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementUnitOfMeasuresCountExecute(r)
}

/*
GetProcurementUnitOfMeasuresCount Get Count of UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetProcurementUnitOfMeasuresCountRequest
*/
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasuresCount(ctx context.Context) ApiGetProcurementUnitOfMeasuresCountRequest {
	return ApiGetProcurementUnitOfMeasuresCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *UnitOfMeasuresAPIService) GetProcurementUnitOfMeasuresCountExecute(r ApiGetProcurementUnitOfMeasuresCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.GetProcurementUnitOfMeasuresCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementUnitOfMeasuresByIdRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	id int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchProcurementUnitOfMeasuresByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementUnitOfMeasuresByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchProcurementUnitOfMeasuresByIdRequest) ClientId(clientId string) ApiPatchProcurementUnitOfMeasuresByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchProcurementUnitOfMeasuresByIdRequest) Execute() (*UnitOfMeasure, *http.Response, error) {
	return r.ApiService.PatchProcurementUnitOfMeasuresByIdExecute(r)
}

/*
PatchProcurementUnitOfMeasuresById Patch UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unitOfMeasureId
 @return ApiPatchProcurementUnitOfMeasuresByIdRequest
*/
func (a *UnitOfMeasuresAPIService) PatchProcurementUnitOfMeasuresById(ctx context.Context, id int32) ApiPatchProcurementUnitOfMeasuresByIdRequest {
	return ApiPatchProcurementUnitOfMeasuresByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UnitOfMeasure
func (a *UnitOfMeasuresAPIService) PatchProcurementUnitOfMeasuresByIdExecute(r ApiPatchProcurementUnitOfMeasuresByIdRequest) (*UnitOfMeasure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitOfMeasure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.PatchProcurementUnitOfMeasuresById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementUnitOfMeasuresRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	unitOfMeasure *UnitOfMeasure
	clientId *string
}

// unitOfMeasure
func (r ApiPostProcurementUnitOfMeasuresRequest) UnitOfMeasure(unitOfMeasure UnitOfMeasure) ApiPostProcurementUnitOfMeasuresRequest {
	r.unitOfMeasure = &unitOfMeasure
	return r
}

// 
func (r ApiPostProcurementUnitOfMeasuresRequest) ClientId(clientId string) ApiPostProcurementUnitOfMeasuresRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostProcurementUnitOfMeasuresRequest) Execute() (*UnitOfMeasure, *http.Response, error) {
	return r.ApiService.PostProcurementUnitOfMeasuresExecute(r)
}

/*
PostProcurementUnitOfMeasures Post UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostProcurementUnitOfMeasuresRequest
*/
func (a *UnitOfMeasuresAPIService) PostProcurementUnitOfMeasures(ctx context.Context) ApiPostProcurementUnitOfMeasuresRequest {
	return ApiPostProcurementUnitOfMeasuresRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UnitOfMeasure
func (a *UnitOfMeasuresAPIService) PostProcurementUnitOfMeasuresExecute(r ApiPostProcurementUnitOfMeasuresRequest) (*UnitOfMeasure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitOfMeasure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.PostProcurementUnitOfMeasures")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unitOfMeasure == nil {
		return localVarReturnValue, nil, reportError("unitOfMeasure is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.unitOfMeasure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementUnitOfMeasuresByIdRequest struct {
	ctx context.Context
	ApiService *UnitOfMeasuresAPIService
	id int32
	unitOfMeasure *UnitOfMeasure
	clientId *string
}

// unitOfMeasure
func (r ApiPutProcurementUnitOfMeasuresByIdRequest) UnitOfMeasure(unitOfMeasure UnitOfMeasure) ApiPutProcurementUnitOfMeasuresByIdRequest {
	r.unitOfMeasure = &unitOfMeasure
	return r
}

// 
func (r ApiPutProcurementUnitOfMeasuresByIdRequest) ClientId(clientId string) ApiPutProcurementUnitOfMeasuresByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutProcurementUnitOfMeasuresByIdRequest) Execute() (*UnitOfMeasure, *http.Response, error) {
	return r.ApiService.PutProcurementUnitOfMeasuresByIdExecute(r)
}

/*
PutProcurementUnitOfMeasuresById Put UnitOfMeasure

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id unitOfMeasureId
 @return ApiPutProcurementUnitOfMeasuresByIdRequest
*/
func (a *UnitOfMeasuresAPIService) PutProcurementUnitOfMeasuresById(ctx context.Context, id int32) ApiPutProcurementUnitOfMeasuresByIdRequest {
	return ApiPutProcurementUnitOfMeasuresByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UnitOfMeasure
func (a *UnitOfMeasuresAPIService) PutProcurementUnitOfMeasuresByIdExecute(r ApiPutProcurementUnitOfMeasuresByIdRequest) (*UnitOfMeasure, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnitOfMeasure
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UnitOfMeasuresAPIService.PutProcurementUnitOfMeasuresById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/unitOfMeasures/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.unitOfMeasure == nil {
		return localVarReturnValue, nil, reportError("unitOfMeasure is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.unitOfMeasure
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
