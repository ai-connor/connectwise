/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// UserDefinedFieldsAPIService UserDefinedFieldsAPI service
type UserDefinedFieldsAPIService service

type ApiDeleteSystemUserDefinedFieldsByIdRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteSystemUserDefinedFieldsByIdRequest) ClientId(clientId string) ApiDeleteSystemUserDefinedFieldsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemUserDefinedFieldsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemUserDefinedFieldsByIdExecute(r)
}

/*
DeleteSystemUserDefinedFieldsById Delete UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id userDefinedFieldId
 @return ApiDeleteSystemUserDefinedFieldsByIdRequest
*/
func (a *UserDefinedFieldsAPIService) DeleteSystemUserDefinedFieldsById(ctx context.Context, id int32) ApiDeleteSystemUserDefinedFieldsByIdRequest {
	return ApiDeleteSystemUserDefinedFieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *UserDefinedFieldsAPIService) DeleteSystemUserDefinedFieldsByIdExecute(r ApiDeleteSystemUserDefinedFieldsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.DeleteSystemUserDefinedFieldsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemUserDefinedFieldsRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) ClientId(clientId string) ApiGetSystemUserDefinedFieldsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) Conditions(conditions string) ApiGetSystemUserDefinedFieldsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) ChildConditions(childConditions string) ApiGetSystemUserDefinedFieldsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemUserDefinedFieldsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) OrderBy(orderBy string) ApiGetSystemUserDefinedFieldsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) Fields(fields string) ApiGetSystemUserDefinedFieldsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) Page(page int32) ApiGetSystemUserDefinedFieldsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) PageSize(pageSize int32) ApiGetSystemUserDefinedFieldsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsRequest) PageId(pageId int32) ApiGetSystemUserDefinedFieldsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemUserDefinedFieldsRequest) Execute() ([]UserDefinedField, *http.Response, error) {
	return r.ApiService.GetSystemUserDefinedFieldsExecute(r)
}

/*
GetSystemUserDefinedFields Get List of UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemUserDefinedFieldsRequest
*/
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFields(ctx context.Context) ApiGetSystemUserDefinedFieldsRequest {
	return ApiGetSystemUserDefinedFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []UserDefinedField
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFieldsExecute(r ApiGetSystemUserDefinedFieldsRequest) ([]UserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.GetSystemUserDefinedFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemUserDefinedFieldsByIdRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) ClientId(clientId string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) Conditions(conditions string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) ChildConditions(childConditions string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) OrderBy(orderBy string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) Fields(fields string) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) Page(page int32) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) PageSize(pageSize int32) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsByIdRequest) PageId(pageId int32) ApiGetSystemUserDefinedFieldsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemUserDefinedFieldsByIdRequest) Execute() (*UserDefinedField, *http.Response, error) {
	return r.ApiService.GetSystemUserDefinedFieldsByIdExecute(r)
}

/*
GetSystemUserDefinedFieldsById Get UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id userDefinedFieldId
 @return ApiGetSystemUserDefinedFieldsByIdRequest
*/
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFieldsById(ctx context.Context, id int32) ApiGetSystemUserDefinedFieldsByIdRequest {
	return ApiGetSystemUserDefinedFieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserDefinedField
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFieldsByIdExecute(r ApiGetSystemUserDefinedFieldsByIdRequest) (*UserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.GetSystemUserDefinedFieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemUserDefinedFieldsCountRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) ClientId(clientId string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) Conditions(conditions string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) ChildConditions(childConditions string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) OrderBy(orderBy string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) Fields(fields string) ApiGetSystemUserDefinedFieldsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) Page(page int32) ApiGetSystemUserDefinedFieldsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) PageSize(pageSize int32) ApiGetSystemUserDefinedFieldsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemUserDefinedFieldsCountRequest) PageId(pageId int32) ApiGetSystemUserDefinedFieldsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemUserDefinedFieldsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemUserDefinedFieldsCountExecute(r)
}

/*
GetSystemUserDefinedFieldsCount Get Count of UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemUserDefinedFieldsCountRequest
*/
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFieldsCount(ctx context.Context) ApiGetSystemUserDefinedFieldsCountRequest {
	return ApiGetSystemUserDefinedFieldsCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *UserDefinedFieldsAPIService) GetSystemUserDefinedFieldsCountExecute(r ApiGetSystemUserDefinedFieldsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.GetSystemUserDefinedFieldsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemUserDefinedFieldsByIdRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemUserDefinedFieldsByIdRequest) ClientId(clientId string) ApiPatchSystemUserDefinedFieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemUserDefinedFieldsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemUserDefinedFieldsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemUserDefinedFieldsByIdRequest) Execute() (*UserDefinedField, *http.Response, error) {
	return r.ApiService.PatchSystemUserDefinedFieldsByIdExecute(r)
}

/*
PatchSystemUserDefinedFieldsById Patch UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id userDefinedFieldId
 @return ApiPatchSystemUserDefinedFieldsByIdRequest
*/
func (a *UserDefinedFieldsAPIService) PatchSystemUserDefinedFieldsById(ctx context.Context, id int32) ApiPatchSystemUserDefinedFieldsByIdRequest {
	return ApiPatchSystemUserDefinedFieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserDefinedField
func (a *UserDefinedFieldsAPIService) PatchSystemUserDefinedFieldsByIdExecute(r ApiPatchSystemUserDefinedFieldsByIdRequest) (*UserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.PatchSystemUserDefinedFieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemUserDefinedFieldsRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	clientId *string
	userDefinedField *UserDefinedField
}

// 
func (r ApiPostSystemUserDefinedFieldsRequest) ClientId(clientId string) ApiPostSystemUserDefinedFieldsRequest {
	r.clientId = &clientId
	return r
}

// userDefinedField
func (r ApiPostSystemUserDefinedFieldsRequest) UserDefinedField(userDefinedField UserDefinedField) ApiPostSystemUserDefinedFieldsRequest {
	r.userDefinedField = &userDefinedField
	return r
}

func (r ApiPostSystemUserDefinedFieldsRequest) Execute() (*UserDefinedField, *http.Response, error) {
	return r.ApiService.PostSystemUserDefinedFieldsExecute(r)
}

/*
PostSystemUserDefinedFields Post UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostSystemUserDefinedFieldsRequest
*/
func (a *UserDefinedFieldsAPIService) PostSystemUserDefinedFields(ctx context.Context) ApiPostSystemUserDefinedFieldsRequest {
	return ApiPostSystemUserDefinedFieldsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserDefinedField
func (a *UserDefinedFieldsAPIService) PostSystemUserDefinedFieldsExecute(r ApiPostSystemUserDefinedFieldsRequest) (*UserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.PostSystemUserDefinedFields")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.userDefinedField == nil {
		return localVarReturnValue, nil, reportError("userDefinedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.userDefinedField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemUserDefinedFieldsByIdRequest struct {
	ctx context.Context
	ApiService *UserDefinedFieldsAPIService
	id int32
	clientId *string
	userDefinedField *UserDefinedField
}

// 
func (r ApiPutSystemUserDefinedFieldsByIdRequest) ClientId(clientId string) ApiPutSystemUserDefinedFieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// userDefinedField
func (r ApiPutSystemUserDefinedFieldsByIdRequest) UserDefinedField(userDefinedField UserDefinedField) ApiPutSystemUserDefinedFieldsByIdRequest {
	r.userDefinedField = &userDefinedField
	return r
}

func (r ApiPutSystemUserDefinedFieldsByIdRequest) Execute() (*UserDefinedField, *http.Response, error) {
	return r.ApiService.PutSystemUserDefinedFieldsByIdExecute(r)
}

/*
PutSystemUserDefinedFieldsById Put UserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id userDefinedFieldId
 @return ApiPutSystemUserDefinedFieldsByIdRequest
*/
func (a *UserDefinedFieldsAPIService) PutSystemUserDefinedFieldsById(ctx context.Context, id int32) ApiPutSystemUserDefinedFieldsByIdRequest {
	return ApiPutSystemUserDefinedFieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return UserDefinedField
func (a *UserDefinedFieldsAPIService) PutSystemUserDefinedFieldsByIdExecute(r ApiPutSystemUserDefinedFieldsByIdRequest) (*UserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UserDefinedFieldsAPIService.PutSystemUserDefinedFieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/userDefinedFields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.userDefinedField == nil {
		return localVarReturnValue, nil, reportError("userDefinedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.userDefinedField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
