/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkRoleLocationsAPIService WorkRoleLocationsAPI service
type WorkRoleLocationsAPIService service

type ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeWorkRolesByParentIdLocationsByIdExecute(r)
}

/*
DeleteTimeWorkRolesByParentIdLocationsById Delete WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId workRoleId
 @return ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest
*/
func (a *WorkRoleLocationsAPIService) DeleteTimeWorkRolesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest {
	return ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *WorkRoleLocationsAPIService) DeleteTimeWorkRolesByParentIdLocationsByIdExecute(r ApiDeleteTimeWorkRolesByParentIdLocationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.DeleteTimeWorkRolesByParentIdLocationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByParentIdLocationsRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) Conditions(conditions string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) Fields(fields string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) Page(page int32) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) PageId(pageId int32) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) ClientId(clientId string) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkRolesByParentIdLocationsRequest) Execute() ([]WorkRoleLocation, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByParentIdLocationsExecute(r)
}

/*
GetTimeWorkRolesByParentIdLocations Get List of WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workRoleId
 @return ApiGetTimeWorkRolesByParentIdLocationsRequest
*/
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocations(ctx context.Context, parentId int32) ApiGetTimeWorkRolesByParentIdLocationsRequest {
	return ApiGetTimeWorkRolesByParentIdLocationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []WorkRoleLocation
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocationsExecute(r ApiGetTimeWorkRolesByParentIdLocationsRequest) ([]WorkRoleLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkRoleLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.GetTimeWorkRolesByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) Conditions(conditions string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) Fields(fields string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) Page(page int32) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) PageId(pageId int32) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) Execute() (*WorkRoleLocation, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByParentIdLocationsByIdExecute(r)
}

/*
GetTimeWorkRolesByParentIdLocationsById Get WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId workRoleId
 @return ApiGetTimeWorkRolesByParentIdLocationsByIdRequest
*/
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiGetTimeWorkRolesByParentIdLocationsByIdRequest {
	return ApiGetTimeWorkRolesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkRoleLocation
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocationsByIdExecute(r ApiGetTimeWorkRolesByParentIdLocationsByIdRequest) (*WorkRoleLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRoleLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.GetTimeWorkRolesByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByParentIdLocationsCountRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) Conditions(conditions string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) Fields(fields string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) Page(page int32) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) PageId(pageId int32) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) ClientId(clientId string) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByParentIdLocationsCountExecute(r)
}

/*
GetTimeWorkRolesByParentIdLocationsCount Get Count of WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workRoleId
 @return ApiGetTimeWorkRolesByParentIdLocationsCountRequest
*/
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocationsCount(ctx context.Context, parentId int32) ApiGetTimeWorkRolesByParentIdLocationsCountRequest {
	return ApiGetTimeWorkRolesByParentIdLocationsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkRoleLocationsAPIService) GetTimeWorkRolesByParentIdLocationsCountExecute(r ApiGetTimeWorkRolesByParentIdLocationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.GetTimeWorkRolesByParentIdLocationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest) Execute() (*WorkRoleLocation, *http.Response, error) {
	return r.ApiService.PatchTimeWorkRolesByParentIdLocationsByIdExecute(r)
}

/*
PatchTimeWorkRolesByParentIdLocationsById Patch WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId workRoleId
 @return ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest
*/
func (a *WorkRoleLocationsAPIService) PatchTimeWorkRolesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest {
	return ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkRoleLocation
func (a *WorkRoleLocationsAPIService) PatchTimeWorkRolesByParentIdLocationsByIdExecute(r ApiPatchTimeWorkRolesByParentIdLocationsByIdRequest) (*WorkRoleLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRoleLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.PatchTimeWorkRolesByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeWorkRolesByParentIdLocationsRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	parentId int32
	workRoleLocation *WorkRoleLocation
	clientId *string
}

// workRoleLocation
func (r ApiPostTimeWorkRolesByParentIdLocationsRequest) WorkRoleLocation(workRoleLocation WorkRoleLocation) ApiPostTimeWorkRolesByParentIdLocationsRequest {
	r.workRoleLocation = &workRoleLocation
	return r
}

// 
func (r ApiPostTimeWorkRolesByParentIdLocationsRequest) ClientId(clientId string) ApiPostTimeWorkRolesByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostTimeWorkRolesByParentIdLocationsRequest) Execute() (*WorkRoleLocation, *http.Response, error) {
	return r.ApiService.PostTimeWorkRolesByParentIdLocationsExecute(r)
}

/*
PostTimeWorkRolesByParentIdLocations Post WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workRoleId
 @return ApiPostTimeWorkRolesByParentIdLocationsRequest
*/
func (a *WorkRoleLocationsAPIService) PostTimeWorkRolesByParentIdLocations(ctx context.Context, parentId int32) ApiPostTimeWorkRolesByParentIdLocationsRequest {
	return ApiPostTimeWorkRolesByParentIdLocationsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkRoleLocation
func (a *WorkRoleLocationsAPIService) PostTimeWorkRolesByParentIdLocationsExecute(r ApiPostTimeWorkRolesByParentIdLocationsRequest) (*WorkRoleLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRoleLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.PostTimeWorkRolesByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workRoleLocation == nil {
		return localVarReturnValue, nil, reportError("workRoleLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workRoleLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeWorkRolesByParentIdLocationsByIdRequest struct {
	ctx context.Context
	ApiService *WorkRoleLocationsAPIService
	id int32
	parentId int32
	workRoleLocation *WorkRoleLocation
	clientId *string
}

// workRoleLocation
func (r ApiPutTimeWorkRolesByParentIdLocationsByIdRequest) WorkRoleLocation(workRoleLocation WorkRoleLocation) ApiPutTimeWorkRolesByParentIdLocationsByIdRequest {
	r.workRoleLocation = &workRoleLocation
	return r
}

// 
func (r ApiPutTimeWorkRolesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiPutTimeWorkRolesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutTimeWorkRolesByParentIdLocationsByIdRequest) Execute() (*WorkRoleLocation, *http.Response, error) {
	return r.ApiService.PutTimeWorkRolesByParentIdLocationsByIdExecute(r)
}

/*
PutTimeWorkRolesByParentIdLocationsById Put WorkRoleLocation

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id locationId
 @param parentId workRoleId
 @return ApiPutTimeWorkRolesByParentIdLocationsByIdRequest
*/
func (a *WorkRoleLocationsAPIService) PutTimeWorkRolesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiPutTimeWorkRolesByParentIdLocationsByIdRequest {
	return ApiPutTimeWorkRolesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkRoleLocation
func (a *WorkRoleLocationsAPIService) PutTimeWorkRolesByParentIdLocationsByIdExecute(r ApiPutTimeWorkRolesByParentIdLocationsByIdRequest) (*WorkRoleLocation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRoleLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRoleLocationsAPIService.PutTimeWorkRolesByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workRoleLocation == nil {
		return localVarReturnValue, nil, reportError("workRoleLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workRoleLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
