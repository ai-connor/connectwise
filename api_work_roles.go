/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkRolesAPIService WorkRolesAPI service
type WorkRolesAPIService service

type ApiDeleteTimeWorkRolesByIdRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeWorkRolesByIdRequest) ClientId(clientId string) ApiDeleteTimeWorkRolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeWorkRolesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeWorkRolesByIdExecute(r)
}

/*
DeleteTimeWorkRolesById Delete Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiDeleteTimeWorkRolesByIdRequest
*/
func (a *WorkRolesAPIService) DeleteTimeWorkRolesById(ctx context.Context, id int32) ApiDeleteTimeWorkRolesByIdRequest {
	return ApiDeleteTimeWorkRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WorkRolesAPIService) DeleteTimeWorkRolesByIdExecute(r ApiDeleteTimeWorkRolesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.DeleteTimeWorkRolesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesRequest) ClientId(clientId string) ApiGetTimeWorkRolesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) Conditions(conditions string) ApiGetTimeWorkRolesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) Fields(fields string) ApiGetTimeWorkRolesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) Page(page int32) ApiGetTimeWorkRolesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesRequest) PageId(pageId int32) ApiGetTimeWorkRolesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesRequest) Execute() ([]WorkRole, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesExecute(r)
}

/*
GetTimeWorkRoles Get List of WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkRolesRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRoles(ctx context.Context) ApiGetTimeWorkRolesRequest {
	return ApiGetTimeWorkRolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkRole
func (a *WorkRolesAPIService) GetTimeWorkRolesExecute(r ApiGetTimeWorkRolesRequest) ([]WorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByIdRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) ClientId(clientId string) ApiGetTimeWorkRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) Conditions(conditions string) ApiGetTimeWorkRolesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) Fields(fields string) ApiGetTimeWorkRolesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) Page(page int32) ApiGetTimeWorkRolesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdRequest) PageId(pageId int32) ApiGetTimeWorkRolesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesByIdRequest) Execute() (*WorkRole, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByIdExecute(r)
}

/*
GetTimeWorkRolesById Get WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiGetTimeWorkRolesByIdRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesById(ctx context.Context, id int32) ApiGetTimeWorkRolesByIdRequest {
	return ApiGetTimeWorkRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkRole
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdExecute(r ApiGetTimeWorkRolesByIdRequest) (*WorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByIdInfoRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) ClientId(clientId string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) Conditions(conditions string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) Fields(fields string) ApiGetTimeWorkRolesByIdInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) Page(page int32) ApiGetTimeWorkRolesByIdInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdInfoRequest) PageId(pageId int32) ApiGetTimeWorkRolesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesByIdInfoRequest) Execute() (*WorkRoleInfo, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByIdInfoExecute(r)
}

/*
GetTimeWorkRolesByIdInfo Get WorkRoleInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiGetTimeWorkRolesByIdInfoRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdInfo(ctx context.Context, id int32) ApiGetTimeWorkRolesByIdInfoRequest {
	return ApiGetTimeWorkRolesByIdInfoRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkRoleInfo
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdInfoExecute(r ApiGetTimeWorkRolesByIdInfoRequest) (*WorkRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) ClientId(clientId string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) Conditions(conditions string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) Fields(fields string) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) Page(page int32) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesRequest) PageId(pageId int32) ApiGetTimeWorkRolesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByIdUsagesExecute(r)
}

/*
GetTimeWorkRolesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiGetTimeWorkRolesByIdUsagesRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdUsages(ctx context.Context, id int32) ApiGetTimeWorkRolesByIdUsagesRequest {
	return ApiGetTimeWorkRolesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdUsagesExecute(r ApiGetTimeWorkRolesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) ClientId(clientId string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) Conditions(conditions string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) Fields(fields string) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) Page(page int32) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesByIdUsagesListRequest) PageId(pageId int32) ApiGetTimeWorkRolesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesByIdUsagesListExecute(r)
}

/*
GetTimeWorkRolesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiGetTimeWorkRolesByIdUsagesListRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdUsagesList(ctx context.Context, id int32) ApiGetTimeWorkRolesByIdUsagesListRequest {
	return ApiGetTimeWorkRolesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *WorkRolesAPIService) GetTimeWorkRolesByIdUsagesListExecute(r ApiGetTimeWorkRolesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesCountRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesCountRequest) ClientId(clientId string) ApiGetTimeWorkRolesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) Conditions(conditions string) ApiGetTimeWorkRolesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) Fields(fields string) ApiGetTimeWorkRolesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) Page(page int32) ApiGetTimeWorkRolesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesCountRequest) PageId(pageId int32) ApiGetTimeWorkRolesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesCountExecute(r)
}

/*
GetTimeWorkRolesCount Get Count of WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkRolesCountRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesCount(ctx context.Context) ApiGetTimeWorkRolesCountRequest {
	return ApiGetTimeWorkRolesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkRolesAPIService) GetTimeWorkRolesCountExecute(r ApiGetTimeWorkRolesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesInfoRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) ClientId(clientId string) ApiGetTimeWorkRolesInfoRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) Conditions(conditions string) ApiGetTimeWorkRolesInfoRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesInfoRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesInfoRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) Fields(fields string) ApiGetTimeWorkRolesInfoRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) Page(page int32) ApiGetTimeWorkRolesInfoRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesInfoRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoRequest) PageId(pageId int32) ApiGetTimeWorkRolesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesInfoRequest) Execute() ([]WorkRoleInfo, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesInfoExecute(r)
}

/*
GetTimeWorkRolesInfo Get List of WorkRoleInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkRolesInfoRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesInfo(ctx context.Context) ApiGetTimeWorkRolesInfoRequest {
	return ApiGetTimeWorkRolesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkRoleInfo
func (a *WorkRolesAPIService) GetTimeWorkRolesInfoExecute(r ApiGetTimeWorkRolesInfoRequest) ([]WorkRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkRolesInfoCountRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) ClientId(clientId string) ApiGetTimeWorkRolesInfoCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) Conditions(conditions string) ApiGetTimeWorkRolesInfoCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) ChildConditions(childConditions string) ApiGetTimeWorkRolesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkRolesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) OrderBy(orderBy string) ApiGetTimeWorkRolesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) Fields(fields string) ApiGetTimeWorkRolesInfoCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) Page(page int32) ApiGetTimeWorkRolesInfoCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) PageSize(pageSize int32) ApiGetTimeWorkRolesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkRolesInfoCountRequest) PageId(pageId int32) ApiGetTimeWorkRolesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkRolesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeWorkRolesInfoCountExecute(r)
}

/*
GetTimeWorkRolesInfoCount Get Count of WorkRoleInfo

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkRolesInfoCountRequest
*/
func (a *WorkRolesAPIService) GetTimeWorkRolesInfoCount(ctx context.Context) ApiGetTimeWorkRolesInfoCountRequest {
	return ApiGetTimeWorkRolesInfoCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkRolesAPIService) GetTimeWorkRolesInfoCountExecute(r ApiGetTimeWorkRolesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.GetTimeWorkRolesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeWorkRolesByIdRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeWorkRolesByIdRequest) ClientId(clientId string) ApiPatchTimeWorkRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeWorkRolesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeWorkRolesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeWorkRolesByIdRequest) Execute() (*WorkRole, *http.Response, error) {
	return r.ApiService.PatchTimeWorkRolesByIdExecute(r)
}

/*
PatchTimeWorkRolesById Patch WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiPatchTimeWorkRolesByIdRequest
*/
func (a *WorkRolesAPIService) PatchTimeWorkRolesById(ctx context.Context, id int32) ApiPatchTimeWorkRolesByIdRequest {
	return ApiPatchTimeWorkRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkRole
func (a *WorkRolesAPIService) PatchTimeWorkRolesByIdExecute(r ApiPatchTimeWorkRolesByIdRequest) (*WorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.PatchTimeWorkRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeWorkRolesRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	clientId *string
	workRole *WorkRole
}

// 
func (r ApiPostTimeWorkRolesRequest) ClientId(clientId string) ApiPostTimeWorkRolesRequest {
	r.clientId = &clientId
	return r
}

// workRole
func (r ApiPostTimeWorkRolesRequest) WorkRole(workRole WorkRole) ApiPostTimeWorkRolesRequest {
	r.workRole = &workRole
	return r
}

func (r ApiPostTimeWorkRolesRequest) Execute() (*WorkRole, *http.Response, error) {
	return r.ApiService.PostTimeWorkRolesExecute(r)
}

/*
PostTimeWorkRoles Post WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeWorkRolesRequest
*/
func (a *WorkRolesAPIService) PostTimeWorkRoles(ctx context.Context) ApiPostTimeWorkRolesRequest {
	return ApiPostTimeWorkRolesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkRole
func (a *WorkRolesAPIService) PostTimeWorkRolesExecute(r ApiPostTimeWorkRolesRequest) (*WorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.PostTimeWorkRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workRole == nil {
		return localVarReturnValue, nil, reportError("workRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeWorkRolesByIdRequest struct {
	ctx context.Context
	ApiService *WorkRolesAPIService
	id int32
	clientId *string
	workRole *WorkRole
}

// 
func (r ApiPutTimeWorkRolesByIdRequest) ClientId(clientId string) ApiPutTimeWorkRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// workRole
func (r ApiPutTimeWorkRolesByIdRequest) WorkRole(workRole WorkRole) ApiPutTimeWorkRolesByIdRequest {
	r.workRole = &workRole
	return r
}

func (r ApiPutTimeWorkRolesByIdRequest) Execute() (*WorkRole, *http.Response, error) {
	return r.ApiService.PutTimeWorkRolesByIdExecute(r)
}

/*
PutTimeWorkRolesById Put WorkRole

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workRoleId
 @return ApiPutTimeWorkRolesByIdRequest
*/
func (a *WorkRolesAPIService) PutTimeWorkRolesById(ctx context.Context, id int32) ApiPutTimeWorkRolesByIdRequest {
	return ApiPutTimeWorkRolesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkRole
func (a *WorkRolesAPIService) PutTimeWorkRolesByIdExecute(r ApiPutTimeWorkRolesByIdRequest) (*WorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkRolesAPIService.PutTimeWorkRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workRole == nil {
		return localVarReturnValue, nil, reportError("workRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
