/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkTypesAPIService WorkTypesAPI service
type WorkTypesAPIService service

type ApiDeleteTimeWorkTypesByIdRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
}

// 
func (r ApiDeleteTimeWorkTypesByIdRequest) ClientId(clientId string) ApiDeleteTimeWorkTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteTimeWorkTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTimeWorkTypesByIdExecute(r)
}

/*
DeleteTimeWorkTypesById Delete WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiDeleteTimeWorkTypesByIdRequest
*/
func (a *WorkTypesAPIService) DeleteTimeWorkTypesById(ctx context.Context, id int32) ApiDeleteTimeWorkTypesByIdRequest {
	return ApiDeleteTimeWorkTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WorkTypesAPIService) DeleteTimeWorkTypesByIdExecute(r ApiDeleteTimeWorkTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.DeleteTimeWorkTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkTypesRequest) ClientId(clientId string) ApiGetTimeWorkTypesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) Conditions(conditions string) ApiGetTimeWorkTypesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) Fields(fields string) ApiGetTimeWorkTypesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) Page(page int32) ApiGetTimeWorkTypesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkTypesRequest) PageId(pageId int32) ApiGetTimeWorkTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesRequest) Execute() ([]WorkType, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesExecute(r)
}

/*
GetTimeWorkTypes Get List of WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkTypesRequest
*/
func (a *WorkTypesAPIService) GetTimeWorkTypes(ctx context.Context) ApiGetTimeWorkTypesRequest {
	return ApiGetTimeWorkTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkType
func (a *WorkTypesAPIService) GetTimeWorkTypesExecute(r ApiGetTimeWorkTypesRequest) ([]WorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.GetTimeWorkTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesByIdRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) ClientId(clientId string) ApiGetTimeWorkTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) Conditions(conditions string) ApiGetTimeWorkTypesByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) Fields(fields string) ApiGetTimeWorkTypesByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) Page(page int32) ApiGetTimeWorkTypesByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdRequest) PageId(pageId int32) ApiGetTimeWorkTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesByIdRequest) Execute() (*WorkType, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesByIdExecute(r)
}

/*
GetTimeWorkTypesById Get WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiGetTimeWorkTypesByIdRequest
*/
func (a *WorkTypesAPIService) GetTimeWorkTypesById(ctx context.Context, id int32) ApiGetTimeWorkTypesByIdRequest {
	return ApiGetTimeWorkTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkType
func (a *WorkTypesAPIService) GetTimeWorkTypesByIdExecute(r ApiGetTimeWorkTypesByIdRequest) (*WorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.GetTimeWorkTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesByIdUsagesRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) ClientId(clientId string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) Conditions(conditions string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) Fields(fields string) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) Page(page int32) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesRequest) PageId(pageId int32) ApiGetTimeWorkTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesByIdUsagesExecute(r)
}

/*
GetTimeWorkTypesByIdUsages Get List of Usage Count

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiGetTimeWorkTypesByIdUsagesRequest
*/
func (a *WorkTypesAPIService) GetTimeWorkTypesByIdUsages(ctx context.Context, id int32) ApiGetTimeWorkTypesByIdUsagesRequest {
	return ApiGetTimeWorkTypesByIdUsagesRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *WorkTypesAPIService) GetTimeWorkTypesByIdUsagesExecute(r ApiGetTimeWorkTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.GetTimeWorkTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesByIdUsagesListRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) Fields(fields string) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) Page(page int32) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetTimeWorkTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesByIdUsagesListExecute(r)
}

/*
GetTimeWorkTypesByIdUsagesList Get List of Usage

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiGetTimeWorkTypesByIdUsagesListRequest
*/
func (a *WorkTypesAPIService) GetTimeWorkTypesByIdUsagesList(ctx context.Context, id int32) ApiGetTimeWorkTypesByIdUsagesListRequest {
	return ApiGetTimeWorkTypesByIdUsagesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []Usage
func (a *WorkTypesAPIService) GetTimeWorkTypesByIdUsagesListExecute(r ApiGetTimeWorkTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.GetTimeWorkTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTimeWorkTypesCountRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetTimeWorkTypesCountRequest) ClientId(clientId string) ApiGetTimeWorkTypesCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) Conditions(conditions string) ApiGetTimeWorkTypesCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) ChildConditions(childConditions string) ApiGetTimeWorkTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetTimeWorkTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) OrderBy(orderBy string) ApiGetTimeWorkTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) Fields(fields string) ApiGetTimeWorkTypesCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) Page(page int32) ApiGetTimeWorkTypesCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) PageSize(pageSize int32) ApiGetTimeWorkTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetTimeWorkTypesCountRequest) PageId(pageId int32) ApiGetTimeWorkTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetTimeWorkTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetTimeWorkTypesCountExecute(r)
}

/*
GetTimeWorkTypesCount Get Count of WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimeWorkTypesCountRequest
*/
func (a *WorkTypesAPIService) GetTimeWorkTypesCount(ctx context.Context) ApiGetTimeWorkTypesCountRequest {
	return ApiGetTimeWorkTypesCountRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkTypesAPIService) GetTimeWorkTypesCountExecute(r ApiGetTimeWorkTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.GetTimeWorkTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTimeWorkTypesByIdRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchTimeWorkTypesByIdRequest) ClientId(clientId string) ApiPatchTimeWorkTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchTimeWorkTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchTimeWorkTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchTimeWorkTypesByIdRequest) Execute() (*WorkType, *http.Response, error) {
	return r.ApiService.PatchTimeWorkTypesByIdExecute(r)
}

/*
PatchTimeWorkTypesById Patch WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiPatchTimeWorkTypesByIdRequest
*/
func (a *WorkTypesAPIService) PatchTimeWorkTypesById(ctx context.Context, id int32) ApiPatchTimeWorkTypesByIdRequest {
	return ApiPatchTimeWorkTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkType
func (a *WorkTypesAPIService) PatchTimeWorkTypesByIdExecute(r ApiPatchTimeWorkTypesByIdRequest) (*WorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.PatchTimeWorkTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTimeWorkTypesRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	clientId *string
	workType *WorkType
}

// 
func (r ApiPostTimeWorkTypesRequest) ClientId(clientId string) ApiPostTimeWorkTypesRequest {
	r.clientId = &clientId
	return r
}

// workType
func (r ApiPostTimeWorkTypesRequest) WorkType(workType WorkType) ApiPostTimeWorkTypesRequest {
	r.workType = &workType
	return r
}

func (r ApiPostTimeWorkTypesRequest) Execute() (*WorkType, *http.Response, error) {
	return r.ApiService.PostTimeWorkTypesExecute(r)
}

/*
PostTimeWorkTypes Post WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTimeWorkTypesRequest
*/
func (a *WorkTypesAPIService) PostTimeWorkTypes(ctx context.Context) ApiPostTimeWorkTypesRequest {
	return ApiPostTimeWorkTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WorkType
func (a *WorkTypesAPIService) PostTimeWorkTypesExecute(r ApiPostTimeWorkTypesRequest) (*WorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.PostTimeWorkTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workType == nil {
		return localVarReturnValue, nil, reportError("workType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutTimeWorkTypesByIdRequest struct {
	ctx context.Context
	ApiService *WorkTypesAPIService
	id int32
	clientId *string
	workType *WorkType
}

// 
func (r ApiPutTimeWorkTypesByIdRequest) ClientId(clientId string) ApiPutTimeWorkTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// workType
func (r ApiPutTimeWorkTypesByIdRequest) WorkType(workType WorkType) ApiPutTimeWorkTypesByIdRequest {
	r.workType = &workType
	return r
}

func (r ApiPutTimeWorkTypesByIdRequest) Execute() (*WorkType, *http.Response, error) {
	return r.ApiService.PutTimeWorkTypesByIdExecute(r)
}

/*
PutTimeWorkTypesById Put WorkType

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workTypeId
 @return ApiPutTimeWorkTypesByIdRequest
*/
func (a *WorkTypesAPIService) PutTimeWorkTypesById(ctx context.Context, id int32) ApiPutTimeWorkTypesByIdRequest {
	return ApiPutTimeWorkTypesByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkType
func (a *WorkTypesAPIService) PutTimeWorkTypesByIdExecute(r ApiPutTimeWorkTypesByIdRequest) (*WorkType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkTypesAPIService.PutTimeWorkTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/time/workTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workType == nil {
		return localVarReturnValue, nil, reportError("workType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
