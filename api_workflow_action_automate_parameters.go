/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowActionAutomateParametersAPIService WorkflowActionAutomateParametersAPI service
type WorkflowActionAutomateParametersAPIService service

type ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) ClientId(clientId string) ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r)
}

/*
DeleteSystemWorkflowActionsByParentIdAutomateParametersById Delete WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id automateParameterId
 @param parentId workflowActionId
 @return ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) DeleteSystemWorkflowActionsByParentIdAutomateParametersById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	return ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *WorkflowActionAutomateParametersAPIService) DeleteSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r ApiDeleteSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.DeleteSystemWorkflowActionsByParentIdAutomateParametersById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowActionsAutomateParametersRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) Conditions(conditions string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) OrderBy(orderBy string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) Fields(fields string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) Page(page int32) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) PageSize(pageSize int32) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) PageId(pageId int32) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) ClientId(clientId string) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowActionsAutomateParametersRequest) Execute() ([]WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowActionsAutomateParametersExecute(r)
}

/*
GetSystemWorkflowActionsAutomateParameters Get List of WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemWorkflowActionsAutomateParametersRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsAutomateParameters(ctx context.Context) ApiGetSystemWorkflowActionsAutomateParametersRequest {
	return ApiGetSystemWorkflowActionsAutomateParametersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsAutomateParametersExecute(r ApiGetSystemWorkflowActionsAutomateParametersRequest) ([]WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.GetSystemWorkflowActionsAutomateParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/automateParameters"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowActionsAutomateParametersByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) Fields(fields string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) Page(page int32) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) Execute() (*WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowActionsAutomateParametersByIdExecute(r)
}

/*
GetSystemWorkflowActionsAutomateParametersById Get WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id automateParameterId
 @return ApiGetSystemWorkflowActionsAutomateParametersByIdRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsAutomateParametersById(ctx context.Context, id int32) ApiGetSystemWorkflowActionsAutomateParametersByIdRequest {
	return ApiGetSystemWorkflowActionsAutomateParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsAutomateParametersByIdExecute(r ApiGetSystemWorkflowActionsAutomateParametersByIdRequest) (*WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.GetSystemWorkflowActionsAutomateParametersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/automateParameters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) Conditions(conditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) OrderBy(orderBy string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) Fields(fields string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) Page(page int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) PageSize(pageSize int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) PageId(pageId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) ClientId(clientId string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) Execute() ([]WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowActionsByParentIdAutomateParametersExecute(r)
}

/*
GetSystemWorkflowActionsByParentIdAutomateParameters Get List of WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowActionId
 @return ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParameters(ctx context.Context, parentId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest {
	return ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParametersExecute(r ApiGetSystemWorkflowActionsByParentIdAutomateParametersRequest) ([]WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.GetSystemWorkflowActionsByParentIdAutomateParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	id int32
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Fields(fields string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Page(page int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Execute() (*WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r)
}

/*
GetSystemWorkflowActionsByParentIdAutomateParametersById Get WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id automateParameterId
 @param parentId workflowActionId
 @return ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParametersById(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	return ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r ApiGetSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) (*WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.GetSystemWorkflowActionsByParentIdAutomateParametersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	parentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) Conditions(conditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) Fields(fields string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) Page(page int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) PageId(pageId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) ClientId(clientId string) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowActionsByParentIdAutomateParametersCountExecute(r)
}

/*
GetSystemWorkflowActionsByParentIdAutomateParametersCount Get Count of WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowActionId
 @return ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParametersCount(ctx context.Context, parentId int32) ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest {
	return ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkflowActionAutomateParametersAPIService) GetSystemWorkflowActionsByParentIdAutomateParametersCountExecute(r ApiGetSystemWorkflowActionsByParentIdAutomateParametersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.GetSystemWorkflowActionsByParentIdAutomateParametersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	id int32
	parentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) ClientId(clientId string) ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Execute() (*WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.PatchSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r)
}

/*
PatchSystemWorkflowActionsByParentIdAutomateParametersById Patch WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id automateParameterId
 @param parentId workflowActionId
 @return ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) PatchSystemWorkflowActionsByParentIdAutomateParametersById(ctx context.Context, id int32, parentId int32) ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	return ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) PatchSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r ApiPatchSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) (*WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.PatchSystemWorkflowActionsByParentIdAutomateParametersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	parentId int32
	workflowActionAutomateParameter *WorkflowActionAutomateParameter
	clientId *string
}

// workflowActionAutomateParameter
func (r ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest) WorkflowActionAutomateParameter(workflowActionAutomateParameter WorkflowActionAutomateParameter) ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.workflowActionAutomateParameter = &workflowActionAutomateParameter
	return r
}

// 
func (r ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest) ClientId(clientId string) ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest) Execute() (*WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.PostSystemWorkflowActionsByParentIdAutomateParametersExecute(r)
}

/*
PostSystemWorkflowActionsByParentIdAutomateParameters Post WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowActionId
 @return ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) PostSystemWorkflowActionsByParentIdAutomateParameters(ctx context.Context, parentId int32) ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest {
	return ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) PostSystemWorkflowActionsByParentIdAutomateParametersExecute(r ApiPostSystemWorkflowActionsByParentIdAutomateParametersRequest) (*WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.PostSystemWorkflowActionsByParentIdAutomateParameters")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowActionAutomateParameter == nil {
		return localVarReturnValue, nil, reportError("workflowActionAutomateParameter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workflowActionAutomateParameter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionAutomateParametersAPIService
	id int32
	parentId int32
	workflowActionAutomateParameter *WorkflowActionAutomateParameter
	clientId *string
}

// workflowActionAutomateParameter
func (r ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) WorkflowActionAutomateParameter(workflowActionAutomateParameter WorkflowActionAutomateParameter) ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.workflowActionAutomateParameter = &workflowActionAutomateParameter
	return r
}

// 
func (r ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) ClientId(clientId string) ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) Execute() (*WorkflowActionAutomateParameter, *http.Response, error) {
	return r.ApiService.PutSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r)
}

/*
PutSystemWorkflowActionsByParentIdAutomateParametersById Put WorkflowActionAutomateParameter

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id automateParameterId
 @param parentId workflowActionId
 @return ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest
*/
func (a *WorkflowActionAutomateParametersAPIService) PutSystemWorkflowActionsByParentIdAutomateParametersById(ctx context.Context, id int32, parentId int32) ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest {
	return ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowActionAutomateParameter
func (a *WorkflowActionAutomateParametersAPIService) PutSystemWorkflowActionsByParentIdAutomateParametersByIdExecute(r ApiPutSystemWorkflowActionsByParentIdAutomateParametersByIdRequest) (*WorkflowActionAutomateParameter, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionAutomateParameter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionAutomateParametersAPIService.PutSystemWorkflowActionsByParentIdAutomateParametersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflowActions/{parentId}/automateParameters/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowActionAutomateParameter == nil {
		return localVarReturnValue, nil, reportError("workflowActionAutomateParameter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workflowActionAutomateParameter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
