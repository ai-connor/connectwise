/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowActionUserDefinedFieldsAPIService WorkflowActionUserDefinedFieldsAPI service
type WorkflowActionUserDefinedFieldsAPIService service

type ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest) ClientId(clientId string) ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdExecute(r)
}

/*
DeleteSystemWorkflowsUserdefinedfieldsActionsByParentId Delete WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId actionId
 @return ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) DeleteSystemWorkflowsUserdefinedfieldsActionsByParentId(ctx context.Context, parentId int32) ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest {
	return ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *WorkflowActionUserDefinedFieldsAPIService) DeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdExecute(r ApiDeleteSystemWorkflowsUserdefinedfieldsActionsByParentIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.DeleteSystemWorkflowsUserdefinedfieldsActionsByParentId")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/actions/{parentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) ClientId(clientId string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) Conditions(conditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) Fields(fields string) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) Page(page int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) PageId(pageId int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) Execute() ([]WorkflowActionUserDefinedField, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsUserdefinedfieldsEventsActionsExecute(r)
}

/*
GetSystemWorkflowsUserdefinedfieldsEventsActions Get List of WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) GetSystemWorkflowsUserdefinedfieldsEventsActions(ctx context.Context) ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest {
	return ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkflowActionUserDefinedField
func (a *WorkflowActionUserDefinedFieldsAPIService) GetSystemWorkflowsUserdefinedfieldsEventsActionsExecute(r ApiGetSystemWorkflowsUserdefinedfieldsEventsActionsRequest) ([]WorkflowActionUserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowActionUserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.GetSystemWorkflowsUserdefinedfieldsEventsActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/events/actions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	parentId int32
	grandparentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) Fields(fields string) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) Page(page int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) Execute() ([]WorkflowActionUserDefinedField, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdExecute(r)
}

/*
GetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentId Get List of WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId actionId
 @param grandparentId evnetId
 @return ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) GetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentId(ctx context.Context, parentId int32, grandparentId int32) ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest {
	return ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []WorkflowActionUserDefinedField
func (a *WorkflowActionUserDefinedFieldsAPIService) GetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdExecute(r ApiGetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentIdRequest) ([]WorkflowActionUserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowActionUserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.GetSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdActionsByParentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/events/{grandparentId}/actions/{parentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	id int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest) ClientId(clientId string) ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest) Execute() (*WorkflowActionUserDefinedField, *http.Response, error) {
	return r.ApiService.PatchSystemWorkflowsUserdefinedfieldsByIdExecute(r)
}

/*
PatchSystemWorkflowsUserdefinedfieldsById Patch WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workflowActionUserDefinedFieldId
 @return ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) PatchSystemWorkflowsUserdefinedfieldsById(ctx context.Context, id int32) ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest {
	return ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkflowActionUserDefinedField
func (a *WorkflowActionUserDefinedFieldsAPIService) PatchSystemWorkflowsUserdefinedfieldsByIdExecute(r ApiPatchSystemWorkflowsUserdefinedfieldsByIdRequest) (*WorkflowActionUserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionUserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.PatchSystemWorkflowsUserdefinedfieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	grandparentId int32
	clientId *string
	workflowActionUserDefinedField *WorkflowActionUserDefinedField
}

// 
func (r ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest) ClientId(clientId string) ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest {
	r.clientId = &clientId
	return r
}

// workflowActionUserDefinedField
func (r ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest) WorkflowActionUserDefinedField(workflowActionUserDefinedField WorkflowActionUserDefinedField) ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest {
	r.workflowActionUserDefinedField = &workflowActionUserDefinedField
	return r
}

func (r ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest) Execute() (*WorkflowActionUserDefinedField, *http.Response, error) {
	return r.ApiService.PostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdExecute(r)
}

/*
PostSystemWorkflowsUserdefinedfieldsEventsByGrandparentId Post WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param grandparentId eventId
 @return ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) PostSystemWorkflowsUserdefinedfieldsEventsByGrandparentId(ctx context.Context, grandparentId int32) ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest {
	return ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest{
		ApiService: a,
		ctx: ctx,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return WorkflowActionUserDefinedField
func (a *WorkflowActionUserDefinedFieldsAPIService) PostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdExecute(r ApiPostSystemWorkflowsUserdefinedfieldsEventsByGrandparentIdRequest) (*WorkflowActionUserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionUserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.PostSystemWorkflowsUserdefinedfieldsEventsByGrandparentId")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/events/{grandparentId}"
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workflowActionUserDefinedField == nil {
		return localVarReturnValue, nil, reportError("workflowActionUserDefinedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workflowActionUserDefinedField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionUserDefinedFieldsAPIService
	id int32
	clientId *string
	workflowActionUserDefinedField *WorkflowActionUserDefinedField
}

// 
func (r ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest) ClientId(clientId string) ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest {
	r.clientId = &clientId
	return r
}

// workflowActionUserDefinedField
func (r ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest) WorkflowActionUserDefinedField(workflowActionUserDefinedField WorkflowActionUserDefinedField) ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest {
	r.workflowActionUserDefinedField = &workflowActionUserDefinedField
	return r
}

func (r ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest) Execute() (*WorkflowActionUserDefinedField, *http.Response, error) {
	return r.ApiService.PutSystemWorkflowsUserdefinedfieldsByIdExecute(r)
}

/*
PutSystemWorkflowsUserdefinedfieldsById Put WorkflowActionUserDefinedField

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id workflowActionUserDefinedFieldId
 @return ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest
*/
func (a *WorkflowActionUserDefinedFieldsAPIService) PutSystemWorkflowsUserdefinedfieldsById(ctx context.Context, id int32) ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest {
	return ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkflowActionUserDefinedField
func (a *WorkflowActionUserDefinedFieldsAPIService) PutSystemWorkflowsUserdefinedfieldsByIdExecute(r ApiPutSystemWorkflowsUserdefinedfieldsByIdRequest) (*WorkflowActionUserDefinedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowActionUserDefinedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionUserDefinedFieldsAPIService.PutSystemWorkflowsUserdefinedfieldsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/userdefinedfields/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workflowActionUserDefinedField == nil {
		return localVarReturnValue, nil, reportError("workflowActionUserDefinedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workflowActionUserDefinedField
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
