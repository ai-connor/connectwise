/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowActionsAPIService WorkflowActionsAPI service
type WorkflowActionsAPIService service

type ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	id int32
	parentId int32
	grandparentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) ClientId(clientId string) ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r)
}

/*
DeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsById Delete WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest
*/
func (a *WorkflowActionsAPIService) DeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	return ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
func (a *WorkflowActionsAPIService) DeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r ApiDeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.DeleteSystemWorkflowsByGrandparentIdEventsByParentIdActionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) Conditions(conditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) Fields(fields string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) Page(page int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) PageId(pageId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) ClientId(clientId string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) Execute() ([]WorkflowAction, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsExecute(r)
}

/*
GetSystemWorkflowsByGrandparentIdEventsByParentIdActions Get List of WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest
*/
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActions(ctx context.Context, parentId int32, grandparentId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return []WorkflowAction
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsExecute(r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) ([]WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	id int32
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Page(page int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Execute() (*WorkflowAction, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r)
}

/*
GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsById Get WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest
*/
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return WorkflowAction
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) (*WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	parentId int32
	grandparentId int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) Conditions(conditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) Fields(fields string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) Page(page int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) PageId(pageId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) ClientId(clientId string) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountExecute(r)
}

/*
GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCount Get Count of WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest
*/
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCount(ctx context.Context, parentId int32, grandparentId int32) ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest {
	return ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkflowActionsAPIService) GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountExecute(r ApiGetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.GetSystemWorkflowsByGrandparentIdEventsByParentIdActionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsEventsActionsRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) Conditions(conditions string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) Fields(fields string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) Page(page int32) ApiGetSystemWorkflowsEventsActionsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsEventsActionsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) PageId(pageId int32) ApiGetSystemWorkflowsEventsActionsRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsRequest) ClientId(clientId string) ApiGetSystemWorkflowsEventsActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsEventsActionsRequest) Execute() ([]WorkflowAction, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsEventsActionsExecute(r)
}

/*
GetSystemWorkflowsEventsActions Get List of WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemWorkflowsEventsActionsRequest
*/
func (a *WorkflowActionsAPIService) GetSystemWorkflowsEventsActions(ctx context.Context) ApiGetSystemWorkflowsEventsActionsRequest {
	return ApiGetSystemWorkflowsEventsActionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkflowAction
func (a *WorkflowActionsAPIService) GetSystemWorkflowsEventsActionsExecute(r ApiGetSystemWorkflowsEventsActionsRequest) ([]WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.GetSystemWorkflowsEventsActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/events/actions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsEventsActionsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	id int32
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
	clientId *string
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) Page(page int32) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.pageId = &pageId
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemWorkflowsEventsActionsByIdRequest) Execute() (*WorkflowAction, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsEventsActionsByIdExecute(r)
}

/*
GetSystemWorkflowsEventsActionsById Get WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @return ApiGetSystemWorkflowsEventsActionsByIdRequest
*/
func (a *WorkflowActionsAPIService) GetSystemWorkflowsEventsActionsById(ctx context.Context, id int32) ApiGetSystemWorkflowsEventsActionsByIdRequest {
	return ApiGetSystemWorkflowsEventsActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkflowAction
func (a *WorkflowActionsAPIService) GetSystemWorkflowsEventsActionsByIdExecute(r ApiGetSystemWorkflowsEventsActionsByIdRequest) (*WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.GetSystemWorkflowsEventsActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/events/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	id int32
	parentId int32
	grandparentId int32
	patchOperation *[]PatchOperation
	clientId *string
}

// List of PatchOperation
func (r ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// 
func (r ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) ClientId(clientId string) ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Execute() (*WorkflowAction, *http.Response, error) {
	return r.ApiService.PatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r)
}

/*
PatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsById Patch WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest
*/
func (a *WorkflowActionsAPIService) PatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	return ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return WorkflowAction
func (a *WorkflowActionsAPIService) PatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r ApiPatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) (*WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.PatchSystemWorkflowsByGrandparentIdEventsByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	parentId int32
	grandparentId int32
	workflowAction *WorkflowAction
	clientId *string
}

// workflowAction
func (r ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) WorkflowAction(workflowAction WorkflowAction) ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.workflowAction = &workflowAction
	return r
}

// 
func (r ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) ClientId(clientId string) ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) Execute() (*WorkflowAction, *http.Response, error) {
	return r.ApiService.PostSystemWorkflowsByGrandparentIdEventsByParentIdActionsExecute(r)
}

/*
PostSystemWorkflowsByGrandparentIdEventsByParentIdActions Post WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest
*/
func (a *WorkflowActionsAPIService) PostSystemWorkflowsByGrandparentIdEventsByParentIdActions(ctx context.Context, parentId int32, grandparentId int32) ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest {
	return ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return WorkflowAction
func (a *WorkflowActionsAPIService) PostSystemWorkflowsByGrandparentIdEventsByParentIdActionsExecute(r ApiPostSystemWorkflowsByGrandparentIdEventsByParentIdActionsRequest) (*WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.PostSystemWorkflowsByGrandparentIdEventsByParentIdActions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowAction == nil {
		return localVarReturnValue, nil, reportError("workflowAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workflowAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowActionsAPIService
	id int32
	parentId int32
	grandparentId int32
	workflowAction *WorkflowAction
	clientId *string
}

// workflowAction
func (r ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) WorkflowAction(workflowAction WorkflowAction) ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.workflowAction = &workflowAction
	return r
}

// 
func (r ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) ClientId(clientId string) ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) Execute() (*WorkflowAction, *http.Response, error) {
	return r.ApiService.PutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r)
}

/*
PutSystemWorkflowsByGrandparentIdEventsByParentIdActionsById Put WorkflowAction

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id actionId
 @param parentId eventId
 @param grandparentId workflowId
 @return ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest
*/
func (a *WorkflowActionsAPIService) PutSystemWorkflowsByGrandparentIdEventsByParentIdActionsById(ctx context.Context, id int32, parentId int32, grandparentId int32) ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest {
	return ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
		grandparentId: grandparentId,
	}
}

// Execute executes the request
//  @return WorkflowAction
func (a *WorkflowActionsAPIService) PutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdExecute(r ApiPutSystemWorkflowsByGrandparentIdEventsByParentIdActionsByIdRequest) (*WorkflowAction, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAction
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowActionsAPIService.PutSystemWorkflowsByGrandparentIdEventsByParentIdActionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{grandparentId}/events/{parentId}/actions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"grandparentId"+"}", url.PathEscape(parameterValueToString(r.grandparentId, "grandparentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowAction == nil {
		return localVarReturnValue, nil, reportError("workflowAction is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.clientId != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	}
	// body params
	localVarPostBody = r.workflowAction
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
