/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowAttachmentsAPIService WorkflowAttachmentsAPI service
type WorkflowAttachmentsAPIService service

type ApiGetSystemWorkflowsAttachmentsRequest struct {
	ctx context.Context
	ApiService *WorkflowAttachmentsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) ClientId(clientId string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) Conditions(conditions string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) Fields(fields string) ApiGetSystemWorkflowsAttachmentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) Page(page int32) ApiGetSystemWorkflowsAttachmentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsAttachmentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsRequest) PageId(pageId int32) ApiGetSystemWorkflowsAttachmentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsAttachmentsRequest) Execute() ([]WorkflowAttachment, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsAttachmentsExecute(r)
}

/*
GetSystemWorkflowsAttachments Get List of WorkflowAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemWorkflowsAttachmentsRequest
*/
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsAttachments(ctx context.Context) ApiGetSystemWorkflowsAttachmentsRequest {
	return ApiGetSystemWorkflowsAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkflowAttachment
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsAttachmentsExecute(r ApiGetSystemWorkflowsAttachmentsRequest) ([]WorkflowAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowAttachmentsAPIService.GetSystemWorkflowsAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/attachments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsAttachmentsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowAttachmentsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) Page(page int32) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsAttachmentsByIdRequest) Execute() ([]WorkflowAttachment, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsAttachmentsByIdExecute(r)
}

/*
GetSystemWorkflowsAttachmentsById Get WorkflowAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id attachmentId
 @return ApiGetSystemWorkflowsAttachmentsByIdRequest
*/
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsAttachmentsById(ctx context.Context, id int32) ApiGetSystemWorkflowsAttachmentsByIdRequest {
	return ApiGetSystemWorkflowsAttachmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return []WorkflowAttachment
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsAttachmentsByIdExecute(r ApiGetSystemWorkflowsAttachmentsByIdRequest) ([]WorkflowAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowAttachmentsAPIService.GetSystemWorkflowsAttachmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/attachments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdAttachmentsRequest struct {
	ctx context.Context
	ApiService *WorkflowAttachmentsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) Execute() ([]WorkflowAttachment, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdAttachmentsExecute(r)
}

/*
GetSystemWorkflowsByParentIdAttachments Get List of WorkflowAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdAttachmentsRequest
*/
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachments(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdAttachmentsRequest {
	return ApiGetSystemWorkflowsByParentIdAttachmentsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []WorkflowAttachment
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachmentsExecute(r ApiGetSystemWorkflowsByParentIdAttachmentsRequest) ([]WorkflowAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowAttachmentsAPIService.GetSystemWorkflowsByParentIdAttachments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/attachments"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowAttachmentsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) Execute() (*WorkflowAttachment, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdAttachmentsByIdExecute(r)
}

/*
GetSystemWorkflowsByParentIdAttachmentsById Get WorkflowAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id attachmentId
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest
*/
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachmentsById(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest {
	return ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowAttachment
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachmentsByIdExecute(r ApiGetSystemWorkflowsByParentIdAttachmentsByIdRequest) (*WorkflowAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowAttachmentsAPIService.GetSystemWorkflowsByParentIdAttachmentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/attachments/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest struct {
	ctx context.Context
	ApiService *WorkflowAttachmentsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdAttachmentsCountExecute(r)
}

/*
GetSystemWorkflowsByParentIdAttachmentsCount Get Count of WorkflowAttachment

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest
*/
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachmentsCount(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest {
	return ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkflowAttachmentsAPIService) GetSystemWorkflowsByParentIdAttachmentsCountExecute(r ApiGetSystemWorkflowsByParentIdAttachmentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowAttachmentsAPIService.GetSystemWorkflowsByParentIdAttachmentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/attachments/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
