/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// WorkflowEventsAPIService WorkflowEventsAPI service
type WorkflowEventsAPIService service

type ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest) ClientId(clientId string) ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemWorkflowsByParentIdEventsByIdExecute(r)
}

/*
DeleteSystemWorkflowsByParentIdEventsById Delete WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest
*/
func (a *WorkflowEventsAPIService) DeleteSystemWorkflowsByParentIdEventsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest {
	return ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
func (a *WorkflowEventsAPIService) DeleteSystemWorkflowsByParentIdEventsByIdExecute(r ApiDeleteSystemWorkflowsByParentIdEventsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.DeleteSystemWorkflowsByParentIdEventsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdEventsRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdEventsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdEventsRequest) Execute() ([]WorkflowEvent, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdEventsExecute(r)
}

/*
GetSystemWorkflowsByParentIdEvents Get List of WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdEventsRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEvents(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdEventsRequest {
	return ApiGetSystemWorkflowsByParentIdEventsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []WorkflowEvent
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsExecute(r ApiGetSystemWorkflowsByParentIdEventsRequest) ([]WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsByParentIdEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdEventsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdEventsByIdExecute(r)
}

/*
GetSystemWorkflowsByParentIdEventsById Get WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdEventsByIdRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsById(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowsByParentIdEventsByIdRequest {
	return ApiGetSystemWorkflowsByParentIdEventsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsByIdExecute(r ApiGetSystemWorkflowsByParentIdEventsByIdRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsByParentIdEventsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) Execute() ([]map[string]map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdEventsByIdTestExecute(r)
}

/*
GetSystemWorkflowsByParentIdEventsByIdTest Get workflow test results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsByIdTest(ctx context.Context, id int32, parentId int32) ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest {
	return ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return []map[string]map[string]interface{}
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsByIdTestExecute(r ApiGetSystemWorkflowsByParentIdEventsByIdTestRequest) ([]map[string]map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []map[string]map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsByParentIdEventsByIdTest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}/test"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsByParentIdEventsCountRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	parentId int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) ClientId(clientId string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) Conditions(conditions string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) Fields(fields string) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) Page(page int32) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) PageId(pageId int32) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsByParentIdEventsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsByParentIdEventsCountExecute(r)
}

/*
GetSystemWorkflowsByParentIdEventsCount Get Count of WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowId
 @return ApiGetSystemWorkflowsByParentIdEventsCountRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsCount(ctx context.Context, parentId int32) ApiGetSystemWorkflowsByParentIdEventsCountRequest {
	return ApiGetSystemWorkflowsByParentIdEventsCountRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return Count
func (a *WorkflowEventsAPIService) GetSystemWorkflowsByParentIdEventsCountExecute(r ApiGetSystemWorkflowsByParentIdEventsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsByParentIdEventsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsEventsRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) ClientId(clientId string) ApiGetSystemWorkflowsEventsRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) Conditions(conditions string) ApiGetSystemWorkflowsEventsRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsEventsRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsEventsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsEventsRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) Fields(fields string) ApiGetSystemWorkflowsEventsRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) Page(page int32) ApiGetSystemWorkflowsEventsRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsEventsRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsRequest) PageId(pageId int32) ApiGetSystemWorkflowsEventsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsEventsRequest) Execute() ([]WorkflowEvent, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsEventsExecute(r)
}

/*
GetSystemWorkflowsEvents Get List of WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSystemWorkflowsEventsRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsEvents(ctx context.Context) ApiGetSystemWorkflowsEventsRequest {
	return ApiGetSystemWorkflowsEventsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WorkflowEvent
func (a *WorkflowEventsAPIService) GetSystemWorkflowsEventsExecute(r ApiGetSystemWorkflowsEventsRequest) ([]WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/events"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemWorkflowsEventsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	clientId *string
	conditions *string
	childConditions *string
	customFieldConditions *string
	orderBy *string
	fields *string
	page *int32
	pageSize *int32
	pageId *int32
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) ClientId(clientId string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.clientId = &clientId
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) Conditions(conditions string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.conditions = &conditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) ChildConditions(childConditions string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.childConditions = &childConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) OrderBy(orderBy string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.orderBy = &orderBy
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) Fields(fields string) ApiGetSystemWorkflowsEventsByIdRequest {
	r.fields = &fields
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) Page(page int32) ApiGetSystemWorkflowsEventsByIdRequest {
	r.page = &page
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) PageSize(pageSize int32) ApiGetSystemWorkflowsEventsByIdRequest {
	r.pageSize = &pageSize
	return r
}

// 
func (r ApiGetSystemWorkflowsEventsByIdRequest) PageId(pageId int32) ApiGetSystemWorkflowsEventsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemWorkflowsEventsByIdRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.GetSystemWorkflowsEventsByIdExecute(r)
}

/*
GetSystemWorkflowsEventsById Get WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @return ApiGetSystemWorkflowsEventsByIdRequest
*/
func (a *WorkflowEventsAPIService) GetSystemWorkflowsEventsById(ctx context.Context, id int32) ApiGetSystemWorkflowsEventsByIdRequest {
	return ApiGetSystemWorkflowsEventsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) GetSystemWorkflowsEventsByIdExecute(r ApiGetSystemWorkflowsEventsByIdRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.GetSystemWorkflowsEventsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/events/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemWorkflowsByParentIdEventsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
	patchOperation *[]PatchOperation
}

// 
func (r ApiPatchSystemWorkflowsByParentIdEventsByIdRequest) ClientId(clientId string) ApiPatchSystemWorkflowsByParentIdEventsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemWorkflowsByParentIdEventsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemWorkflowsByParentIdEventsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemWorkflowsByParentIdEventsByIdRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.PatchSystemWorkflowsByParentIdEventsByIdExecute(r)
}

/*
PatchSystemWorkflowsByParentIdEventsById Patch WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiPatchSystemWorkflowsByParentIdEventsByIdRequest
*/
func (a *WorkflowEventsAPIService) PatchSystemWorkflowsByParentIdEventsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemWorkflowsByParentIdEventsByIdRequest {
	return ApiPatchSystemWorkflowsByParentIdEventsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) PatchSystemWorkflowsByParentIdEventsByIdExecute(r ApiPatchSystemWorkflowsByParentIdEventsByIdRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.PatchSystemWorkflowsByParentIdEventsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemWorkflowsByParentIdEventsRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	parentId int32
	clientId *string
	workflowEvent *WorkflowEvent
}

// 
func (r ApiPostSystemWorkflowsByParentIdEventsRequest) ClientId(clientId string) ApiPostSystemWorkflowsByParentIdEventsRequest {
	r.clientId = &clientId
	return r
}

// workflowEvent
func (r ApiPostSystemWorkflowsByParentIdEventsRequest) WorkflowEvent(workflowEvent WorkflowEvent) ApiPostSystemWorkflowsByParentIdEventsRequest {
	r.workflowEvent = &workflowEvent
	return r
}

func (r ApiPostSystemWorkflowsByParentIdEventsRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.PostSystemWorkflowsByParentIdEventsExecute(r)
}

/*
PostSystemWorkflowsByParentIdEvents Post WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentId workflowId
 @return ApiPostSystemWorkflowsByParentIdEventsRequest
*/
func (a *WorkflowEventsAPIService) PostSystemWorkflowsByParentIdEvents(ctx context.Context, parentId int32) ApiPostSystemWorkflowsByParentIdEventsRequest {
	return ApiPostSystemWorkflowsByParentIdEventsRequest{
		ApiService: a,
		ctx: ctx,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) PostSystemWorkflowsByParentIdEventsExecute(r ApiPostSystemWorkflowsByParentIdEventsRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.PostSystemWorkflowsByParentIdEvents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workflowEvent == nil {
		return localVarReturnValue, nil, reportError("workflowEvent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workflowEvent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
}

// 
func (r ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest) ClientId(clientId string) ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.PostSystemWorkflowsByParentIdEventsByIdCopyExecute(r)
}

/*
PostSystemWorkflowsByParentIdEventsByIdCopy Post WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest
*/
func (a *WorkflowEventsAPIService) PostSystemWorkflowsByParentIdEventsByIdCopy(ctx context.Context, id int32, parentId int32) ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest {
	return ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) PostSystemWorkflowsByParentIdEventsByIdCopyExecute(r ApiPostSystemWorkflowsByParentIdEventsByIdCopyRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.PostSystemWorkflowsByParentIdEventsByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemWorkflowsByParentIdEventsByIdRequest struct {
	ctx context.Context
	ApiService *WorkflowEventsAPIService
	id int32
	parentId int32
	clientId *string
	workflowEvent *WorkflowEvent
}

// 
func (r ApiPutSystemWorkflowsByParentIdEventsByIdRequest) ClientId(clientId string) ApiPutSystemWorkflowsByParentIdEventsByIdRequest {
	r.clientId = &clientId
	return r
}

// workflowEvent
func (r ApiPutSystemWorkflowsByParentIdEventsByIdRequest) WorkflowEvent(workflowEvent WorkflowEvent) ApiPutSystemWorkflowsByParentIdEventsByIdRequest {
	r.workflowEvent = &workflowEvent
	return r
}

func (r ApiPutSystemWorkflowsByParentIdEventsByIdRequest) Execute() (*WorkflowEvent, *http.Response, error) {
	return r.ApiService.PutSystemWorkflowsByParentIdEventsByIdExecute(r)
}

/*
PutSystemWorkflowsByParentIdEventsById Put WorkflowEvent

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id eventId
 @param parentId workflowId
 @return ApiPutSystemWorkflowsByParentIdEventsByIdRequest
*/
func (a *WorkflowEventsAPIService) PutSystemWorkflowsByParentIdEventsById(ctx context.Context, id int32, parentId int32) ApiPutSystemWorkflowsByParentIdEventsByIdRequest {
	return ApiPutSystemWorkflowsByParentIdEventsByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
		parentId: parentId,
	}
}

// Execute executes the request
//  @return WorkflowEvent
func (a *WorkflowEventsAPIService) PutSystemWorkflowsByParentIdEventsByIdExecute(r ApiPutSystemWorkflowsByParentIdEventsByIdRequest) (*WorkflowEvent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WorkflowEvent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowEventsAPIService.PutSystemWorkflowsByParentIdEventsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/workflows/{parentId}/events/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.workflowEvent == nil {
		return localVarReturnValue, nil, reportError("workflowEvent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.workflowEvent
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
