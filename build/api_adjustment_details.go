/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AdjustmentDetailsAPIService AdjustmentDetailsAPI service
type AdjustmentDetailsAPIService service

type ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest struct {
	ctx        context.Context
	ApiService *AdjustmentDetailsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementAdjustmentsByParentIdDetailsByIdExecute(r)
}

/*
DeleteProcurementAdjustmentsByParentIdDetailsById Delete AdjustmentDetail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id detailId
	@param parentId adjustmentId
	@return ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest
*/
func (a *AdjustmentDetailsAPIService) DeleteProcurementAdjustmentsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest {
	return ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *AdjustmentDetailsAPIService) DeleteProcurementAdjustmentsByParentIdDetailsByIdExecute(r ApiDeleteProcurementAdjustmentsByParentIdDetailsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentDetailsAPIService.DeleteProcurementAdjustmentsByParentIdDetailsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsByParentIdDetailsRequest struct {
	ctx                   context.Context
	ApiService            *AdjustmentDetailsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) Fields(fields string) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) Page(page int32) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) Execute() ([]AdjustmentDetail, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsByParentIdDetailsExecute(r)
}

/*
GetProcurementAdjustmentsByParentIdDetails Get List of AdjustmentDetail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId adjustmentId
	@return ApiGetProcurementAdjustmentsByParentIdDetailsRequest
*/
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetails(ctx context.Context, parentId int32) ApiGetProcurementAdjustmentsByParentIdDetailsRequest {
	return ApiGetProcurementAdjustmentsByParentIdDetailsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []AdjustmentDetail
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetailsExecute(r ApiGetProcurementAdjustmentsByParentIdDetailsRequest) ([]AdjustmentDetail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AdjustmentDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentDetailsAPIService.GetProcurementAdjustmentsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest struct {
	ctx                   context.Context
	ApiService            *AdjustmentDetailsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) Fields(fields string) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) Page(page int32) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) Execute() (*AdjustmentDetail, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsByParentIdDetailsByIdExecute(r)
}

/*
GetProcurementAdjustmentsByParentIdDetailsById Get AdjustmentDetail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id detailId
	@param parentId adjustmentId
	@return ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest
*/
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetailsById(ctx context.Context, id int32, parentId int32) ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest {
	return ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AdjustmentDetail
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetailsByIdExecute(r ApiGetProcurementAdjustmentsByParentIdDetailsByIdRequest) (*AdjustmentDetail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdjustmentDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentDetailsAPIService.GetProcurementAdjustmentsByParentIdDetailsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{parentId}/details/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest struct {
	ctx                   context.Context
	ApiService            *AdjustmentDetailsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) ClientId(clientId string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) Conditions(conditions string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) ChildConditions(childConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) OrderBy(orderBy string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) Fields(fields string) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) Page(page int32) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) PageSize(pageSize int32) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) PageId(pageId int32) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementAdjustmentsByParentIdDetailsCountExecute(r)
}

/*
GetProcurementAdjustmentsByParentIdDetailsCount Get Count of AdjustmentDetail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId adjustmentId
	@return ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest
*/
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetailsCount(ctx context.Context, parentId int32) ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest {
	return ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *AdjustmentDetailsAPIService) GetProcurementAdjustmentsByParentIdDetailsCountExecute(r ApiGetProcurementAdjustmentsByParentIdDetailsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentDetailsAPIService.GetProcurementAdjustmentsByParentIdDetailsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{parentId}/details/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementAdjustmentsByParentIdDetailsRequest struct {
	ctx              context.Context
	ApiService       *AdjustmentDetailsAPIService
	parentId         int32
	clientId         *string
	adjustmentDetail *AdjustmentDetail
}

func (r ApiPostProcurementAdjustmentsByParentIdDetailsRequest) ClientId(clientId string) ApiPostProcurementAdjustmentsByParentIdDetailsRequest {
	r.clientId = &clientId
	return r
}

// adjustmentDetail
func (r ApiPostProcurementAdjustmentsByParentIdDetailsRequest) AdjustmentDetail(adjustmentDetail AdjustmentDetail) ApiPostProcurementAdjustmentsByParentIdDetailsRequest {
	r.adjustmentDetail = &adjustmentDetail
	return r
}

func (r ApiPostProcurementAdjustmentsByParentIdDetailsRequest) Execute() (*AdjustmentDetail, *http.Response, error) {
	return r.ApiService.PostProcurementAdjustmentsByParentIdDetailsExecute(r)
}

/*
PostProcurementAdjustmentsByParentIdDetails Post AdjustmentDetail

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId adjustmentId
	@return ApiPostProcurementAdjustmentsByParentIdDetailsRequest
*/
func (a *AdjustmentDetailsAPIService) PostProcurementAdjustmentsByParentIdDetails(ctx context.Context, parentId int32) ApiPostProcurementAdjustmentsByParentIdDetailsRequest {
	return ApiPostProcurementAdjustmentsByParentIdDetailsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AdjustmentDetail
func (a *AdjustmentDetailsAPIService) PostProcurementAdjustmentsByParentIdDetailsExecute(r ApiPostProcurementAdjustmentsByParentIdDetailsRequest) (*AdjustmentDetail, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdjustmentDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdjustmentDetailsAPIService.PostProcurementAdjustmentsByParentIdDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/adjustments/{parentId}/details"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.adjustmentDetail == nil {
		return localVarReturnValue, nil, reportError("adjustmentDetail is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.adjustmentDetail
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
