/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AgreementTypeWorkRolesAPIService AgreementTypeWorkRolesAPI service
type AgreementTypeWorkRolesAPIService service

type ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest struct {
	ctx        context.Context
	ApiService *AgreementTypeWorkRolesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r)
}

/*
DeleteFinanceAgreementTypesByParentIdWorkrolesById Delete AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workroleId
	@param parentId agreementTypeId
	@return ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest
*/
func (a *AgreementTypeWorkRolesAPIService) DeleteFinanceAgreementTypesByParentIdWorkrolesById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	return ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *AgreementTypeWorkRolesAPIService) DeleteFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r ApiDeleteFinanceAgreementTypesByParentIdWorkrolesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.DeleteFinanceAgreementTypesByParentIdWorkrolesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) Execute() ([]AgreementTypeWorkRole, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkroles Get List of AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkroles(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []AgreementTypeWorkRole
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesRequest) ([]AgreementTypeWorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AgreementTypeWorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkroles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Execute() (*AgreementTypeWorkRole, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkrolesById Get AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workroleId
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkRole
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesByIdRequest) (*AgreementTypeWorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkrolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesCountExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkrolesCount Get Count of AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesCountExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkrolesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) Execute() ([]AgreementTypeWorkRoleInfo, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesInfoExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkrolesInfo Get List of AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfo(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []AgreementTypeWorkRoleInfo
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfoExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoRequest) ([]AgreementTypeWorkRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AgreementTypeWorkRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkrolesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/info"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) Execute() (*AgreementTypeWorkRoleInfo, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesInfoByIdExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkrolesInfoById Get AgreementTypeWorkRoleInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workroleId
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfoById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkRoleInfo
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfoByIdExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoByIdRequest) (*AgreementTypeWorkRoleInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkRoleInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkrolesInfoById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/info/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkrolesInfoCountExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkrolesInfoCount Get Count of AgreementTypeWorkRoleInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest
*/
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfoCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *AgreementTypeWorkRolesAPIService) GetFinanceAgreementTypesByParentIdWorkrolesInfoCountExecute(r ApiGetFinanceAgreementTypesByParentIdWorkrolesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.GetFinanceAgreementTypesByParentIdWorkrolesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/info/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest struct {
	ctx            context.Context
	ApiService     *AgreementTypeWorkRolesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest) ClientId(clientId string) ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Execute() (*AgreementTypeWorkRole, *http.Response, error) {
	return r.ApiService.PatchFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r)
}

/*
PatchFinanceAgreementTypesByParentIdWorkrolesById Patch AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workroleId
	@param parentId agreementTypeId
	@return ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest
*/
func (a *AgreementTypeWorkRolesAPIService) PatchFinanceAgreementTypesByParentIdWorkrolesById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	return ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkRole
func (a *AgreementTypeWorkRolesAPIService) PatchFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r ApiPatchFinanceAgreementTypesByParentIdWorkrolesByIdRequest) (*AgreementTypeWorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.PatchFinanceAgreementTypesByParentIdWorkrolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	parentId              int32
	clientId              *string
	agreementTypeWorkRole *AgreementTypeWorkRole
}

func (r ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest) ClientId(clientId string) ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.clientId = &clientId
	return r
}

// workRole
func (r ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest) AgreementTypeWorkRole(agreementTypeWorkRole AgreementTypeWorkRole) ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest {
	r.agreementTypeWorkRole = &agreementTypeWorkRole
	return r
}

func (r ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest) Execute() (*AgreementTypeWorkRole, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementTypesByParentIdWorkrolesExecute(r)
}

/*
PostFinanceAgreementTypesByParentIdWorkroles Post AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest
*/
func (a *AgreementTypeWorkRolesAPIService) PostFinanceAgreementTypesByParentIdWorkroles(ctx context.Context, parentId int32) ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest {
	return ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkRole
func (a *AgreementTypeWorkRolesAPIService) PostFinanceAgreementTypesByParentIdWorkrolesExecute(r ApiPostFinanceAgreementTypesByParentIdWorkrolesRequest) (*AgreementTypeWorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.PostFinanceAgreementTypesByParentIdWorkroles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeWorkRole == nil {
		return localVarReturnValue, nil, reportError("agreementTypeWorkRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeWorkRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkRolesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	agreementTypeWorkRole *AgreementTypeWorkRole
}

func (r ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest) ClientId(clientId string) ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.clientId = &clientId
	return r
}

// workRole
func (r ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest) AgreementTypeWorkRole(agreementTypeWorkRole AgreementTypeWorkRole) ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	r.agreementTypeWorkRole = &agreementTypeWorkRole
	return r
}

func (r ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest) Execute() (*AgreementTypeWorkRole, *http.Response, error) {
	return r.ApiService.PutFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r)
}

/*
PutFinanceAgreementTypesByParentIdWorkrolesById Put AgreementTypeWorkRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workroleId
	@param parentId agreementTypeId
	@return ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest
*/
func (a *AgreementTypeWorkRolesAPIService) PutFinanceAgreementTypesByParentIdWorkrolesById(ctx context.Context, id int32, parentId int32) ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest {
	return ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkRole
func (a *AgreementTypeWorkRolesAPIService) PutFinanceAgreementTypesByParentIdWorkrolesByIdExecute(r ApiPutFinanceAgreementTypesByParentIdWorkrolesByIdRequest) (*AgreementTypeWorkRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkRolesAPIService.PutFinanceAgreementTypesByParentIdWorkrolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workroles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeWorkRole == nil {
		return localVarReturnValue, nil, reportError("agreementTypeWorkRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeWorkRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
