/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AgreementTypeWorkTypeExclusionsAPIService AgreementTypeWorkTypeExclusionsAPI service
type AgreementTypeWorkTypeExclusionsAPIService service

type ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest struct {
	ctx        context.Context
	ApiService *AgreementTypeWorkTypeExclusionsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) ClientId(clientId string) ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdExecute(r)
}

/*
DeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsById Delete AgreementTypeWorkTypeExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workTypeExclusionId
	@param parentId agreementTypeId
	@return ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest
*/
func (a *AgreementTypeWorkTypeExclusionsAPIService) DeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	return ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *AgreementTypeWorkTypeExclusionsAPIService) DeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdExecute(r ApiDeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypeExclusionsAPIService.DeleteFinanceAgreementTypesByParentIdWorkTypeExclusionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workTypeExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkTypeExclusionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) Execute() ([]AgreementTypeWorkTypeExclusion, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkTypeExclusionsExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkTypeExclusions Get List of AgreementTypeWorkTypeExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest
*/
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusions(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []AgreementTypeWorkTypeExclusion
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusionsExecute(r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) ([]AgreementTypeWorkTypeExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AgreementTypeWorkTypeExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypeExclusionsAPIService.GetFinanceAgreementTypesByParentIdWorkTypeExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workTypeExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkTypeExclusionsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) Execute() (*AgreementTypeWorkTypeExclusion, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkTypeExclusionsById Get AgreementTypeWorkTypeExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id workTypeExclusionId
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest
*/
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusionsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkTypeExclusion
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdExecute(r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsByIdRequest) (*AgreementTypeWorkTypeExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkTypeExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypeExclusionsAPIService.GetFinanceAgreementTypesByParentIdWorkTypeExclusionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workTypeExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest struct {
	ctx                   context.Context
	ApiService            *AgreementTypeWorkTypeExclusionsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) ClientId(clientId string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) Conditions(conditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) ChildConditions(childConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) OrderBy(orderBy string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) Fields(fields string) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) Page(page int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) PageSize(pageSize int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) PageId(pageId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountExecute(r)
}

/*
GetFinanceAgreementTypesByParentIdWorkTypeExclusionsCount Get Count of AgreementTypeWorkTypeExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest
*/
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusionsCount(ctx context.Context, parentId int32) ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest {
	return ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *AgreementTypeWorkTypeExclusionsAPIService) GetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountExecute(r ApiGetFinanceAgreementTypesByParentIdWorkTypeExclusionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypeExclusionsAPIService.GetFinanceAgreementTypesByParentIdWorkTypeExclusionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workTypeExclusions/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest struct {
	ctx                            context.Context
	ApiService                     *AgreementTypeWorkTypeExclusionsAPIService
	parentId                       int32
	clientId                       *string
	agreementTypeWorkTypeExclusion *AgreementTypeWorkTypeExclusion
}

func (r ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) ClientId(clientId string) ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.clientId = &clientId
	return r
}

// workTypeExclusion
func (r ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) AgreementTypeWorkTypeExclusion(agreementTypeWorkTypeExclusion AgreementTypeWorkTypeExclusion) ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	r.agreementTypeWorkTypeExclusion = &agreementTypeWorkTypeExclusion
	return r
}

func (r ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) Execute() (*AgreementTypeWorkTypeExclusion, *http.Response, error) {
	return r.ApiService.PostFinanceAgreementTypesByParentIdWorkTypeExclusionsExecute(r)
}

/*
PostFinanceAgreementTypesByParentIdWorkTypeExclusions Post AgreementTypeWorkTypeExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId agreementTypeId
	@return ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest
*/
func (a *AgreementTypeWorkTypeExclusionsAPIService) PostFinanceAgreementTypesByParentIdWorkTypeExclusions(ctx context.Context, parentId int32) ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest {
	return ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return AgreementTypeWorkTypeExclusion
func (a *AgreementTypeWorkTypeExclusionsAPIService) PostFinanceAgreementTypesByParentIdWorkTypeExclusionsExecute(r ApiPostFinanceAgreementTypesByParentIdWorkTypeExclusionsRequest) (*AgreementTypeWorkTypeExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AgreementTypeWorkTypeExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementTypeWorkTypeExclusionsAPIService.PostFinanceAgreementTypesByParentIdWorkTypeExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/agreementTypes/{parentId}/workTypeExclusions"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.agreementTypeWorkTypeExclusion == nil {
		return localVarReturnValue, nil, reportError("agreementTypeWorkTypeExclusion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.agreementTypeWorkTypeExclusion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
