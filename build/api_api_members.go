/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ApiMembersAPIService ApiMembersAPI service
type ApiMembersAPIService service

type ApiGetSystemApiMembersRequest struct {
	ctx                   context.Context
	ApiService            *ApiMembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemApiMembersRequest) ClientId(clientId string) ApiGetSystemApiMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemApiMembersRequest) Conditions(conditions string) ApiGetSystemApiMembersRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemApiMembersRequest) ChildConditions(childConditions string) ApiGetSystemApiMembersRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemApiMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemApiMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemApiMembersRequest) OrderBy(orderBy string) ApiGetSystemApiMembersRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemApiMembersRequest) Fields(fields string) ApiGetSystemApiMembersRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemApiMembersRequest) Page(page int32) ApiGetSystemApiMembersRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemApiMembersRequest) PageSize(pageSize int32) ApiGetSystemApiMembersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemApiMembersRequest) PageId(pageId int32) ApiGetSystemApiMembersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemApiMembersRequest) Execute() ([]ApiMember, *http.Response, error) {
	return r.ApiService.GetSystemApiMembersExecute(r)
}

/*
GetSystemApiMembers Get List of ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemApiMembersRequest
*/
func (a *ApiMembersAPIService) GetSystemApiMembers(ctx context.Context) ApiGetSystemApiMembersRequest {
	return ApiGetSystemApiMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ApiMember
func (a *ApiMembersAPIService) GetSystemApiMembersExecute(r ApiGetSystemApiMembersRequest) ([]ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.GetSystemApiMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemApiMembersByIdRequest struct {
	ctx                   context.Context
	ApiService            *ApiMembersAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemApiMembersByIdRequest) ClientId(clientId string) ApiGetSystemApiMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) Conditions(conditions string) ApiGetSystemApiMembersByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) ChildConditions(childConditions string) ApiGetSystemApiMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemApiMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) OrderBy(orderBy string) ApiGetSystemApiMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) Fields(fields string) ApiGetSystemApiMembersByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) Page(page int32) ApiGetSystemApiMembersByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) PageSize(pageSize int32) ApiGetSystemApiMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) PageId(pageId int32) ApiGetSystemApiMembersByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemApiMembersByIdRequest) Execute() (*ApiMember, *http.Response, error) {
	return r.ApiService.GetSystemApiMembersByIdExecute(r)
}

/*
GetSystemApiMembersById Get ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id apiMemberId
	@return ApiGetSystemApiMembersByIdRequest
*/
func (a *ApiMembersAPIService) GetSystemApiMembersById(ctx context.Context, id int32) ApiGetSystemApiMembersByIdRequest {
	return ApiGetSystemApiMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ApiMember
func (a *ApiMembersAPIService) GetSystemApiMembersByIdExecute(r ApiGetSystemApiMembersByIdRequest) (*ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.GetSystemApiMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemApiMembersCountRequest struct {
	ctx                   context.Context
	ApiService            *ApiMembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemApiMembersCountRequest) ClientId(clientId string) ApiGetSystemApiMembersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemApiMembersCountRequest) Conditions(conditions string) ApiGetSystemApiMembersCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemApiMembersCountRequest) ChildConditions(childConditions string) ApiGetSystemApiMembersCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemApiMembersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemApiMembersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemApiMembersCountRequest) OrderBy(orderBy string) ApiGetSystemApiMembersCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemApiMembersCountRequest) Fields(fields string) ApiGetSystemApiMembersCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemApiMembersCountRequest) Page(page int32) ApiGetSystemApiMembersCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemApiMembersCountRequest) PageSize(pageSize int32) ApiGetSystemApiMembersCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemApiMembersCountRequest) PageId(pageId int32) ApiGetSystemApiMembersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemApiMembersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemApiMembersCountExecute(r)
}

/*
GetSystemApiMembersCount Get Count of

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemApiMembersCountRequest
*/
func (a *ApiMembersAPIService) GetSystemApiMembersCount(ctx context.Context) ApiGetSystemApiMembersCountRequest {
	return ApiGetSystemApiMembersCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ApiMembersAPIService) GetSystemApiMembersCountExecute(r ApiGetSystemApiMembersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.GetSystemApiMembersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemApiMembersDefaultRequest struct {
	ctx                   context.Context
	ApiService            *ApiMembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemApiMembersDefaultRequest) ClientId(clientId string) ApiGetSystemApiMembersDefaultRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) Conditions(conditions string) ApiGetSystemApiMembersDefaultRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) ChildConditions(childConditions string) ApiGetSystemApiMembersDefaultRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemApiMembersDefaultRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) OrderBy(orderBy string) ApiGetSystemApiMembersDefaultRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) Fields(fields string) ApiGetSystemApiMembersDefaultRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) Page(page int32) ApiGetSystemApiMembersDefaultRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) PageSize(pageSize int32) ApiGetSystemApiMembersDefaultRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) PageId(pageId int32) ApiGetSystemApiMembersDefaultRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemApiMembersDefaultRequest) Execute() (*ApiMember, *http.Response, error) {
	return r.ApiService.GetSystemApiMembersDefaultExecute(r)
}

/*
GetSystemApiMembersDefault Get ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemApiMembersDefaultRequest
*/
func (a *ApiMembersAPIService) GetSystemApiMembersDefault(ctx context.Context) ApiGetSystemApiMembersDefaultRequest {
	return ApiGetSystemApiMembersDefaultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiMember
func (a *ApiMembersAPIService) GetSystemApiMembersDefaultExecute(r ApiGetSystemApiMembersDefaultRequest) (*ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.GetSystemApiMembersDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers/default"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemApiMembersByIdRequest struct {
	ctx            context.Context
	ApiService     *ApiMembersAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemApiMembersByIdRequest) ClientId(clientId string) ApiPatchSystemApiMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemApiMembersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemApiMembersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemApiMembersByIdRequest) Execute() (*ApiMember, *http.Response, error) {
	return r.ApiService.PatchSystemApiMembersByIdExecute(r)
}

/*
PatchSystemApiMembersById Patch ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id apiMemberId
	@return ApiPatchSystemApiMembersByIdRequest
*/
func (a *ApiMembersAPIService) PatchSystemApiMembersById(ctx context.Context, id int32) ApiPatchSystemApiMembersByIdRequest {
	return ApiPatchSystemApiMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ApiMember
func (a *ApiMembersAPIService) PatchSystemApiMembersByIdExecute(r ApiPatchSystemApiMembersByIdRequest) (*ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.PatchSystemApiMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemApiMembersRequest struct {
	ctx        context.Context
	ApiService *ApiMembersAPIService
	clientId   *string
	apiMember  *ApiMember
}

func (r ApiPostSystemApiMembersRequest) ClientId(clientId string) ApiPostSystemApiMembersRequest {
	r.clientId = &clientId
	return r
}

// apiMember
func (r ApiPostSystemApiMembersRequest) ApiMember(apiMember ApiMember) ApiPostSystemApiMembersRequest {
	r.apiMember = &apiMember
	return r
}

func (r ApiPostSystemApiMembersRequest) Execute() (*ApiMember, *http.Response, error) {
	return r.ApiService.PostSystemApiMembersExecute(r)
}

/*
PostSystemApiMembers Post ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemApiMembersRequest
*/
func (a *ApiMembersAPIService) PostSystemApiMembers(ctx context.Context) ApiPostSystemApiMembersRequest {
	return ApiPostSystemApiMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ApiMember
func (a *ApiMembersAPIService) PostSystemApiMembersExecute(r ApiPostSystemApiMembersRequest) (*ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.PostSystemApiMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.apiMember == nil {
		return localVarReturnValue, nil, reportError("apiMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.apiMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemApiMembersByIdRequest struct {
	ctx        context.Context
	ApiService *ApiMembersAPIService
	id         int32
	clientId   *string
	apiMember  *ApiMember
}

func (r ApiPutSystemApiMembersByIdRequest) ClientId(clientId string) ApiPutSystemApiMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// apiMember
func (r ApiPutSystemApiMembersByIdRequest) ApiMember(apiMember ApiMember) ApiPutSystemApiMembersByIdRequest {
	r.apiMember = &apiMember
	return r
}

func (r ApiPutSystemApiMembersByIdRequest) Execute() (*ApiMember, *http.Response, error) {
	return r.ApiService.PutSystemApiMembersByIdExecute(r)
}

/*
PutSystemApiMembersById Put ApiMember

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id apiMemberId
	@return ApiPutSystemApiMembersByIdRequest
*/
func (a *ApiMembersAPIService) PutSystemApiMembersById(ctx context.Context, id int32) ApiPutSystemApiMembersByIdRequest {
	return ApiPutSystemApiMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ApiMember
func (a *ApiMembersAPIService) PutSystemApiMembersByIdExecute(r ApiPutSystemApiMembersByIdRequest) (*ApiMember, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ApiMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiMembersAPIService.PutSystemApiMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/apiMembers/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.apiMember == nil {
		return localVarReturnValue, nil, reportError("apiMember is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.apiMember
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
