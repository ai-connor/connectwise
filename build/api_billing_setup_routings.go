/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BillingSetupRoutingsAPIService BillingSetupRoutingsAPI service
type BillingSetupRoutingsAPIService service

type ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest struct {
	ctx        context.Context
	ApiService *BillingSetupRoutingsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceBillingSetupsByParentIdRoutingsByIdExecute(r)
}

/*
DeleteFinanceBillingSetupsByParentIdRoutingsById Delete BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id routingId
	@param parentId billingSetupId
	@return ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest
*/
func (a *BillingSetupRoutingsAPIService) DeleteFinanceBillingSetupsByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	return ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *BillingSetupRoutingsAPIService) DeleteFinanceBillingSetupsByParentIdRoutingsByIdExecute(r ApiDeleteFinanceBillingSetupsByParentIdRoutingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.DeleteFinanceBillingSetupsByParentIdRoutingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsByParentIdRoutingsRequest struct {
	ctx                   context.Context
	ApiService            *BillingSetupRoutingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) Fields(fields string) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) Page(page int32) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) Execute() ([]BillingSetupRouting, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsByParentIdRoutingsExecute(r)
}

/*
GetFinanceBillingSetupsByParentIdRoutings Get List of BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId billingSetupId
	@return ApiGetFinanceBillingSetupsByParentIdRoutingsRequest
*/
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutings(ctx context.Context, parentId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsRequest {
	return ApiGetFinanceBillingSetupsByParentIdRoutingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []BillingSetupRouting
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutingsExecute(r ApiGetFinanceBillingSetupsByParentIdRoutingsRequest) ([]BillingSetupRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BillingSetupRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.GetFinanceBillingSetupsByParentIdRoutings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest struct {
	ctx                   context.Context
	ApiService            *BillingSetupRoutingsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) Fields(fields string) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) Page(page int32) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) Execute() (*BillingSetupRouting, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsByParentIdRoutingsByIdExecute(r)
}

/*
GetFinanceBillingSetupsByParentIdRoutingsById Get BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id routingId
	@param parentId billingSetupId
	@return ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest
*/
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	return ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BillingSetupRouting
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutingsByIdExecute(r ApiGetFinanceBillingSetupsByParentIdRoutingsByIdRequest) (*BillingSetupRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingSetupRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.GetFinanceBillingSetupsByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest struct {
	ctx                   context.Context
	ApiService            *BillingSetupRoutingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) ClientId(clientId string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) Conditions(conditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) Fields(fields string) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) Page(page int32) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) PageId(pageId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingSetupsByParentIdRoutingsCountExecute(r)
}

/*
GetFinanceBillingSetupsByParentIdRoutingsCount Get Count of BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId billingSetupId
	@return ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest
*/
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutingsCount(ctx context.Context, parentId int32) ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest {
	return ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BillingSetupRoutingsAPIService) GetFinanceBillingSetupsByParentIdRoutingsCountExecute(r ApiGetFinanceBillingSetupsByParentIdRoutingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.GetFinanceBillingSetupsByParentIdRoutingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest struct {
	ctx            context.Context
	ApiService     *BillingSetupRoutingsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest) Execute() (*BillingSetupRouting, *http.Response, error) {
	return r.ApiService.PatchFinanceBillingSetupsByParentIdRoutingsByIdExecute(r)
}

/*
PatchFinanceBillingSetupsByParentIdRoutingsById Patch BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id routingId
	@param parentId billingSetupId
	@return ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest
*/
func (a *BillingSetupRoutingsAPIService) PatchFinanceBillingSetupsByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	return ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BillingSetupRouting
func (a *BillingSetupRoutingsAPIService) PatchFinanceBillingSetupsByParentIdRoutingsByIdExecute(r ApiPatchFinanceBillingSetupsByParentIdRoutingsByIdRequest) (*BillingSetupRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingSetupRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.PatchFinanceBillingSetupsByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceBillingSetupsByParentIdRoutingsRequest struct {
	ctx                 context.Context
	ApiService          *BillingSetupRoutingsAPIService
	parentId            int32
	clientId            *string
	billingSetupRouting *BillingSetupRouting
}

func (r ApiPostFinanceBillingSetupsByParentIdRoutingsRequest) ClientId(clientId string) ApiPostFinanceBillingSetupsByParentIdRoutingsRequest {
	r.clientId = &clientId
	return r
}

// billingSetupRouting
func (r ApiPostFinanceBillingSetupsByParentIdRoutingsRequest) BillingSetupRouting(billingSetupRouting BillingSetupRouting) ApiPostFinanceBillingSetupsByParentIdRoutingsRequest {
	r.billingSetupRouting = &billingSetupRouting
	return r
}

func (r ApiPostFinanceBillingSetupsByParentIdRoutingsRequest) Execute() (*BillingSetupRouting, *http.Response, error) {
	return r.ApiService.PostFinanceBillingSetupsByParentIdRoutingsExecute(r)
}

/*
PostFinanceBillingSetupsByParentIdRoutings Post BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId billingSetupId
	@return ApiPostFinanceBillingSetupsByParentIdRoutingsRequest
*/
func (a *BillingSetupRoutingsAPIService) PostFinanceBillingSetupsByParentIdRoutings(ctx context.Context, parentId int32) ApiPostFinanceBillingSetupsByParentIdRoutingsRequest {
	return ApiPostFinanceBillingSetupsByParentIdRoutingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BillingSetupRouting
func (a *BillingSetupRoutingsAPIService) PostFinanceBillingSetupsByParentIdRoutingsExecute(r ApiPostFinanceBillingSetupsByParentIdRoutingsRequest) (*BillingSetupRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingSetupRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.PostFinanceBillingSetupsByParentIdRoutings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingSetupRouting == nil {
		return localVarReturnValue, nil, reportError("billingSetupRouting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingSetupRouting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest struct {
	ctx                 context.Context
	ApiService          *BillingSetupRoutingsAPIService
	id                  int32
	parentId            int32
	clientId            *string
	billingSetupRouting *BillingSetupRouting
}

func (r ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

// billingSetupRouting
func (r ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest) BillingSetupRouting(billingSetupRouting BillingSetupRouting) ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	r.billingSetupRouting = &billingSetupRouting
	return r
}

func (r ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest) Execute() (*BillingSetupRouting, *http.Response, error) {
	return r.ApiService.PutFinanceBillingSetupsByParentIdRoutingsByIdExecute(r)
}

/*
PutFinanceBillingSetupsByParentIdRoutingsById Put BillingSetupRouting

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id routingId
	@param parentId billingSetupId
	@return ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest
*/
func (a *BillingSetupRoutingsAPIService) PutFinanceBillingSetupsByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest {
	return ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BillingSetupRouting
func (a *BillingSetupRoutingsAPIService) PutFinanceBillingSetupsByParentIdRoutingsByIdExecute(r ApiPutFinanceBillingSetupsByParentIdRoutingsByIdRequest) (*BillingSetupRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingSetupRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingSetupRoutingsAPIService.PutFinanceBillingSetupsByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingSetups/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingSetupRouting == nil {
		return localVarReturnValue, nil, reportError("billingSetupRouting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingSetupRouting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
