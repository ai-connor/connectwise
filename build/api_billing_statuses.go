/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BillingStatusesAPIService BillingStatusesAPI service
type BillingStatusesAPIService service

type ApiDeleteFinanceBillingStatusesByIdRequest struct {
	ctx        context.Context
	ApiService *BillingStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteFinanceBillingStatusesByIdRequest) ClientId(clientId string) ApiDeleteFinanceBillingStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceBillingStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceBillingStatusesByIdExecute(r)
}

/*
DeleteFinanceBillingStatusesById Delete BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiDeleteFinanceBillingStatusesByIdRequest
*/
func (a *BillingStatusesAPIService) DeleteFinanceBillingStatusesById(ctx context.Context, id int32) ApiDeleteFinanceBillingStatusesByIdRequest {
	return ApiDeleteFinanceBillingStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BillingStatusesAPIService) DeleteFinanceBillingStatusesByIdExecute(r ApiDeleteFinanceBillingStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.DeleteFinanceBillingStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceBillingStatusesRequest struct {
	ctx                   context.Context
	ApiService            *BillingStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingStatusesRequest) ClientId(clientId string) ApiGetFinanceBillingStatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) Conditions(conditions string) ApiGetFinanceBillingStatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) ChildConditions(childConditions string) ApiGetFinanceBillingStatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) OrderBy(orderBy string) ApiGetFinanceBillingStatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) Fields(fields string) ApiGetFinanceBillingStatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) Page(page int32) ApiGetFinanceBillingStatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) PageSize(pageSize int32) ApiGetFinanceBillingStatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) PageId(pageId int32) ApiGetFinanceBillingStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingStatusesRequest) Execute() ([]BillingStatus, *http.Response, error) {
	return r.ApiService.GetFinanceBillingStatusesExecute(r)
}

/*
GetFinanceBillingStatuses Get List of BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceBillingStatusesRequest
*/
func (a *BillingStatusesAPIService) GetFinanceBillingStatuses(ctx context.Context) ApiGetFinanceBillingStatusesRequest {
	return ApiGetFinanceBillingStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BillingStatus
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesExecute(r ApiGetFinanceBillingStatusesRequest) ([]BillingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BillingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.GetFinanceBillingStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingStatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *BillingStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingStatusesByIdRequest) ClientId(clientId string) ApiGetFinanceBillingStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) Conditions(conditions string) ApiGetFinanceBillingStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceBillingStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) OrderBy(orderBy string) ApiGetFinanceBillingStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) Fields(fields string) ApiGetFinanceBillingStatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) Page(page int32) ApiGetFinanceBillingStatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) PageSize(pageSize int32) ApiGetFinanceBillingStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) PageId(pageId int32) ApiGetFinanceBillingStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdRequest) Execute() (*BillingStatus, *http.Response, error) {
	return r.ApiService.GetFinanceBillingStatusesByIdExecute(r)
}

/*
GetFinanceBillingStatusesById Get BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiGetFinanceBillingStatusesByIdRequest
*/
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesById(ctx context.Context, id int32) ApiGetFinanceBillingStatusesByIdRequest {
	return ApiGetFinanceBillingStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BillingStatus
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesByIdExecute(r ApiGetFinanceBillingStatusesByIdRequest) (*BillingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.GetFinanceBillingStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingStatusesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *BillingStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) Fields(fields string) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) Page(page int32) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingStatusesByIdUsagesExecute(r)
}

/*
GetFinanceBillingStatusesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiGetFinanceBillingStatusesByIdUsagesRequest
*/
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesByIdUsages(ctx context.Context, id int32) ApiGetFinanceBillingStatusesByIdUsagesRequest {
	return ApiGetFinanceBillingStatusesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesByIdUsagesExecute(r ApiGetFinanceBillingStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.GetFinanceBillingStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingStatusesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *BillingStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) Fields(fields string) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) Page(page int32) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceBillingStatusesByIdUsagesListExecute(r)
}

/*
GetFinanceBillingStatusesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiGetFinanceBillingStatusesByIdUsagesListRequest
*/
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceBillingStatusesByIdUsagesListRequest {
	return ApiGetFinanceBillingStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesByIdUsagesListExecute(r ApiGetFinanceBillingStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.GetFinanceBillingStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceBillingStatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *BillingStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceBillingStatusesCountRequest) ClientId(clientId string) ApiGetFinanceBillingStatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) Conditions(conditions string) ApiGetFinanceBillingStatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) ChildConditions(childConditions string) ApiGetFinanceBillingStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceBillingStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) OrderBy(orderBy string) ApiGetFinanceBillingStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) Fields(fields string) ApiGetFinanceBillingStatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) Page(page int32) ApiGetFinanceBillingStatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) PageSize(pageSize int32) ApiGetFinanceBillingStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) PageId(pageId int32) ApiGetFinanceBillingStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceBillingStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceBillingStatusesCountExecute(r)
}

/*
GetFinanceBillingStatusesCount Get Count of BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceBillingStatusesCountRequest
*/
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesCount(ctx context.Context) ApiGetFinanceBillingStatusesCountRequest {
	return ApiGetFinanceBillingStatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BillingStatusesAPIService) GetFinanceBillingStatusesCountExecute(r ApiGetFinanceBillingStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.GetFinanceBillingStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceBillingStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *BillingStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceBillingStatusesByIdRequest) ClientId(clientId string) ApiPatchFinanceBillingStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceBillingStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceBillingStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceBillingStatusesByIdRequest) Execute() (*BillingStatus, *http.Response, error) {
	return r.ApiService.PatchFinanceBillingStatusesByIdExecute(r)
}

/*
PatchFinanceBillingStatusesById Patch BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiPatchFinanceBillingStatusesByIdRequest
*/
func (a *BillingStatusesAPIService) PatchFinanceBillingStatusesById(ctx context.Context, id int32) ApiPatchFinanceBillingStatusesByIdRequest {
	return ApiPatchFinanceBillingStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BillingStatus
func (a *BillingStatusesAPIService) PatchFinanceBillingStatusesByIdExecute(r ApiPatchFinanceBillingStatusesByIdRequest) (*BillingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.PatchFinanceBillingStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceBillingStatusesRequest struct {
	ctx           context.Context
	ApiService    *BillingStatusesAPIService
	clientId      *string
	billingStatus *BillingStatus
}

func (r ApiPostFinanceBillingStatusesRequest) ClientId(clientId string) ApiPostFinanceBillingStatusesRequest {
	r.clientId = &clientId
	return r
}

// billingStatus
func (r ApiPostFinanceBillingStatusesRequest) BillingStatus(billingStatus BillingStatus) ApiPostFinanceBillingStatusesRequest {
	r.billingStatus = &billingStatus
	return r
}

func (r ApiPostFinanceBillingStatusesRequest) Execute() (*BillingStatus, *http.Response, error) {
	return r.ApiService.PostFinanceBillingStatusesExecute(r)
}

/*
PostFinanceBillingStatuses Post BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostFinanceBillingStatusesRequest
*/
func (a *BillingStatusesAPIService) PostFinanceBillingStatuses(ctx context.Context) ApiPostFinanceBillingStatusesRequest {
	return ApiPostFinanceBillingStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BillingStatus
func (a *BillingStatusesAPIService) PostFinanceBillingStatusesExecute(r ApiPostFinanceBillingStatusesRequest) (*BillingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.PostFinanceBillingStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingStatus == nil {
		return localVarReturnValue, nil, reportError("billingStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceBillingStatusesByIdRequest struct {
	ctx           context.Context
	ApiService    *BillingStatusesAPIService
	id            int32
	clientId      *string
	billingStatus *BillingStatus
}

func (r ApiPutFinanceBillingStatusesByIdRequest) ClientId(clientId string) ApiPutFinanceBillingStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// billingStatus
func (r ApiPutFinanceBillingStatusesByIdRequest) BillingStatus(billingStatus BillingStatus) ApiPutFinanceBillingStatusesByIdRequest {
	r.billingStatus = &billingStatus
	return r
}

func (r ApiPutFinanceBillingStatusesByIdRequest) Execute() (*BillingStatus, *http.Response, error) {
	return r.ApiService.PutFinanceBillingStatusesByIdExecute(r)
}

/*
PutFinanceBillingStatusesById Put BillingStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id billingStatusId
	@return ApiPutFinanceBillingStatusesByIdRequest
*/
func (a *BillingStatusesAPIService) PutFinanceBillingStatusesById(ctx context.Context, id int32) ApiPutFinanceBillingStatusesByIdRequest {
	return ApiPutFinanceBillingStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BillingStatus
func (a *BillingStatusesAPIService) PutFinanceBillingStatusesByIdExecute(r ApiPutFinanceBillingStatusesByIdRequest) (*BillingStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BillingStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingStatusesAPIService.PutFinanceBillingStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/billingStatuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.billingStatus == nil {
		return localVarReturnValue, nil, reportError("billingStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.billingStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
