/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardAutoAssignResourcesAPIService BoardAutoAssignResourcesAPI service
type BoardAutoAssignResourcesAPIService service

type ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest struct {
	ctx        context.Context
	ApiService *BoardAutoAssignResourcesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdAutoAssignResourcesById Delete BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id autoAssignResourceId
	@param parentId boardId
	@return ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest
*/
func (a *BoardAutoAssignResourcesAPIService) DeleteServiceBoardsByParentIdAutoAssignResourcesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	return ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *BoardAutoAssignResourcesAPIService) DeleteServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r ApiDeleteServiceBoardsByParentIdAutoAssignResourcesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.DeleteServiceBoardsByParentIdAutoAssignResourcesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest struct {
	ctx                   context.Context
	ApiService            *BoardAutoAssignResourcesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) Execute() ([]BoardAutoAssignResource, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoAssignResourcesExecute(r)
}

/*
GetServiceBoardsByParentIdAutoAssignResources Get List of BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest
*/
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResources(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest {
	return ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []BoardAutoAssignResource
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResourcesExecute(r ApiGetServiceBoardsByParentIdAutoAssignResourcesRequest) ([]BoardAutoAssignResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardAutoAssignResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.GetServiceBoardsByParentIdAutoAssignResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardAutoAssignResourcesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Execute() (*BoardAutoAssignResource, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r)
}

/*
GetServiceBoardsByParentIdAutoAssignResourcesById Get BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id autoAssignResourceId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest
*/
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResourcesById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	return ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardAutoAssignResource
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r ApiGetServiceBoardsByParentIdAutoAssignResourcesByIdRequest) (*BoardAutoAssignResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardAutoAssignResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.GetServiceBoardsByParentIdAutoAssignResourcesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardAutoAssignResourcesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdAutoAssignResourcesCountExecute(r)
}

/*
GetServiceBoardsByParentIdAutoAssignResourcesCount Get Count of BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest
*/
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResourcesCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest {
	return ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardAutoAssignResourcesAPIService) GetServiceBoardsByParentIdAutoAssignResourcesCountExecute(r ApiGetServiceBoardsByParentIdAutoAssignResourcesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.GetServiceBoardsByParentIdAutoAssignResourcesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest struct {
	ctx            context.Context
	ApiService     *BoardAutoAssignResourcesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Execute() (*BoardAutoAssignResource, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdAutoAssignResourcesById Patch BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id autoAssignResourceId
	@param parentId boardId
	@return ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest
*/
func (a *BoardAutoAssignResourcesAPIService) PatchServiceBoardsByParentIdAutoAssignResourcesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	return ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardAutoAssignResource
func (a *BoardAutoAssignResourcesAPIService) PatchServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r ApiPatchServiceBoardsByParentIdAutoAssignResourcesByIdRequest) (*BoardAutoAssignResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardAutoAssignResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.PatchServiceBoardsByParentIdAutoAssignResourcesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest struct {
	ctx                     context.Context
	ApiService              *BoardAutoAssignResourcesAPIService
	parentId                int32
	clientId                *string
	boardAutoAssignResource *BoardAutoAssignResource
}

func (r ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.clientId = &clientId
	return r
}

// boardAutoAssignResource
func (r ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest) BoardAutoAssignResource(boardAutoAssignResource BoardAutoAssignResource) ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest {
	r.boardAutoAssignResource = &boardAutoAssignResource
	return r
}

func (r ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest) Execute() (*BoardAutoAssignResource, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdAutoAssignResourcesExecute(r)
}

/*
PostServiceBoardsByParentIdAutoAssignResources Post BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest
*/
func (a *BoardAutoAssignResourcesAPIService) PostServiceBoardsByParentIdAutoAssignResources(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest {
	return ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardAutoAssignResource
func (a *BoardAutoAssignResourcesAPIService) PostServiceBoardsByParentIdAutoAssignResourcesExecute(r ApiPostServiceBoardsByParentIdAutoAssignResourcesRequest) (*BoardAutoAssignResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardAutoAssignResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.PostServiceBoardsByParentIdAutoAssignResources")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardAutoAssignResource == nil {
		return localVarReturnValue, nil, reportError("boardAutoAssignResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardAutoAssignResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest struct {
	ctx                     context.Context
	ApiService              *BoardAutoAssignResourcesAPIService
	id                      int32
	parentId                int32
	clientId                *string
	boardAutoAssignResource *BoardAutoAssignResource
}

func (r ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.clientId = &clientId
	return r
}

// boardAutoAssignResource
func (r ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest) BoardAutoAssignResource(boardAutoAssignResource BoardAutoAssignResource) ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	r.boardAutoAssignResource = &boardAutoAssignResource
	return r
}

func (r ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest) Execute() (*BoardAutoAssignResource, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r)
}

/*
PutServiceBoardsByParentIdAutoAssignResourcesById Put BoardAutoAssignResource

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id autoAssignResourceId
	@param parentId boardId
	@return ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest
*/
func (a *BoardAutoAssignResourcesAPIService) PutServiceBoardsByParentIdAutoAssignResourcesById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest {
	return ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardAutoAssignResource
func (a *BoardAutoAssignResourcesAPIService) PutServiceBoardsByParentIdAutoAssignResourcesByIdExecute(r ApiPutServiceBoardsByParentIdAutoAssignResourcesByIdRequest) (*BoardAutoAssignResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardAutoAssignResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardAutoAssignResourcesAPIService.PutServiceBoardsByParentIdAutoAssignResourcesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/autoAssignResources/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardAutoAssignResource == nil {
		return localVarReturnValue, nil, reportError("boardAutoAssignResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardAutoAssignResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
