/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardInfosAPIService BoardInfosAPI service
type BoardInfosAPIService service

type ApiGetServiceInfoBoardsRequest struct {
	ctx                   context.Context
	ApiService            *BoardInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceInfoBoardsRequest) ClientId(clientId string) ApiGetServiceInfoBoardsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardsRequest) Conditions(conditions string) ApiGetServiceInfoBoardsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceInfoBoardsRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceInfoBoardsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceInfoBoardsRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceInfoBoardsRequest) Fields(fields string) ApiGetServiceInfoBoardsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceInfoBoardsRequest) Page(page int32) ApiGetServiceInfoBoardsRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceInfoBoardsRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceInfoBoardsRequest) PageId(pageId int32) ApiGetServiceInfoBoardsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceInfoBoardsRequest) Execute() ([]BoardInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardsExecute(r)
}

/*
GetServiceInfoBoards Get List of BoardInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceInfoBoardsRequest
*/
func (a *BoardInfosAPIService) GetServiceInfoBoards(ctx context.Context) ApiGetServiceInfoBoardsRequest {
	return ApiGetServiceInfoBoardsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BoardInfo
func (a *BoardInfosAPIService) GetServiceInfoBoardsExecute(r ApiGetServiceInfoBoardsRequest) ([]BoardInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardInfosAPIService.GetServiceInfoBoards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoBoardsActiveRequest struct {
	ctx                   context.Context
	ApiService            *BoardInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceInfoBoardsActiveRequest) ClientId(clientId string) ApiGetServiceInfoBoardsActiveRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) Conditions(conditions string) ApiGetServiceInfoBoardsActiveRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardsActiveRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardsActiveRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardsActiveRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) Fields(fields string) ApiGetServiceInfoBoardsActiveRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) Page(page int32) ApiGetServiceInfoBoardsActiveRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardsActiveRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) PageId(pageId int32) ApiGetServiceInfoBoardsActiveRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceInfoBoardsActiveRequest) Execute() ([]BoardInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardsActiveExecute(r)
}

/*
GetServiceInfoBoardsActive Get List of active BoardInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceInfoBoardsActiveRequest
*/
func (a *BoardInfosAPIService) GetServiceInfoBoardsActive(ctx context.Context) ApiGetServiceInfoBoardsActiveRequest {
	return ApiGetServiceInfoBoardsActiveRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []BoardInfo
func (a *BoardInfosAPIService) GetServiceInfoBoardsActiveExecute(r ApiGetServiceInfoBoardsActiveRequest) ([]BoardInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardInfosAPIService.GetServiceInfoBoardsActive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boards/active"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoBoardsByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardInfosAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceInfoBoardsByIdRequest) ClientId(clientId string) ApiGetServiceInfoBoardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) Conditions(conditions string) ApiGetServiceInfoBoardsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) Fields(fields string) ApiGetServiceInfoBoardsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) Page(page int32) ApiGetServiceInfoBoardsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) PageId(pageId int32) ApiGetServiceInfoBoardsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceInfoBoardsByIdRequest) Execute() (*BoardInfo, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardsByIdExecute(r)
}

/*
GetServiceInfoBoardsById Get BoardInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiGetServiceInfoBoardsByIdRequest
*/
func (a *BoardInfosAPIService) GetServiceInfoBoardsById(ctx context.Context, id int32) ApiGetServiceInfoBoardsByIdRequest {
	return ApiGetServiceInfoBoardsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BoardInfo
func (a *BoardInfosAPIService) GetServiceInfoBoardsByIdExecute(r ApiGetServiceInfoBoardsByIdRequest) (*BoardInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardInfosAPIService.GetServiceInfoBoardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceInfoBoardsCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardInfosAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceInfoBoardsCountRequest) ClientId(clientId string) ApiGetServiceInfoBoardsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) Conditions(conditions string) ApiGetServiceInfoBoardsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) ChildConditions(childConditions string) ApiGetServiceInfoBoardsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceInfoBoardsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) OrderBy(orderBy string) ApiGetServiceInfoBoardsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) Fields(fields string) ApiGetServiceInfoBoardsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) Page(page int32) ApiGetServiceInfoBoardsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) PageSize(pageSize int32) ApiGetServiceInfoBoardsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) PageId(pageId int32) ApiGetServiceInfoBoardsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceInfoBoardsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceInfoBoardsCountExecute(r)
}

/*
GetServiceInfoBoardsCount Get Count of BoardInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceInfoBoardsCountRequest
*/
func (a *BoardInfosAPIService) GetServiceInfoBoardsCount(ctx context.Context) ApiGetServiceInfoBoardsCountRequest {
	return ApiGetServiceInfoBoardsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardInfosAPIService) GetServiceInfoBoardsCountExecute(r ApiGetServiceInfoBoardsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardInfosAPIService.GetServiceInfoBoardsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/info/boards/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
