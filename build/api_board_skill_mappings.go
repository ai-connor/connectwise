/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardSkillMappingsAPIService BoardSkillMappingsAPI service
type BoardSkillMappingsAPIService service

type ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest struct {
	ctx        context.Context
	ApiService *BoardSkillMappingsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdSkillMappingsByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdSkillMappingsById Delete BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id BoardSkillMappingId
	@param parentId boardId
	@return ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest
*/
func (a *BoardSkillMappingsAPIService) DeleteServiceBoardsByParentIdSkillMappingsById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest {
	return ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *BoardSkillMappingsAPIService) DeleteServiceBoardsByParentIdSkillMappingsByIdExecute(r ApiDeleteServiceBoardsByParentIdSkillMappingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.DeleteServiceBoardsByParentIdSkillMappingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSkillMappingsRequest struct {
	ctx                   context.Context
	ApiService            *BoardSkillMappingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) Page(page int32) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsRequest) Execute() ([]BoardSkillMapping, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSkillMappingsExecute(r)
}

/*
GetServiceBoardsByParentIdSkillMappings Get List of BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSkillMappingsRequest
*/
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappings(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSkillMappingsRequest {
	return ApiGetServiceBoardsByParentIdSkillMappingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []BoardSkillMapping
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappingsExecute(r ApiGetServiceBoardsByParentIdSkillMappingsRequest) ([]BoardSkillMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardSkillMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.GetServiceBoardsByParentIdSkillMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardSkillMappingsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) Execute() (*BoardSkillMapping, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSkillMappingsByIdExecute(r)
}

/*
GetServiceBoardsByParentIdSkillMappingsById Get BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id BoardSkillMappingId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest
*/
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappingsById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest {
	return ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSkillMapping
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappingsByIdExecute(r ApiGetServiceBoardsByParentIdSkillMappingsByIdRequest) (*BoardSkillMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSkillMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.GetServiceBoardsByParentIdSkillMappingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSkillMappingsCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardSkillMappingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSkillMappingsCountExecute(r)
}

/*
GetServiceBoardsByParentIdSkillMappingsCount Get Count of BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSkillMappingsCountRequest
*/
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappingsCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSkillMappingsCountRequest {
	return ApiGetServiceBoardsByParentIdSkillMappingsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardSkillMappingsAPIService) GetServiceBoardsByParentIdSkillMappingsCountExecute(r ApiGetServiceBoardsByParentIdSkillMappingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.GetServiceBoardsByParentIdSkillMappingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest struct {
	ctx            context.Context
	ApiService     *BoardSkillMappingsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest) Execute() (*BoardSkillMapping, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdSkillMappingsByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdSkillMappingsById Patch BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id BoardSkillMappingId
	@param parentId boardId
	@return ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest
*/
func (a *BoardSkillMappingsAPIService) PatchServiceBoardsByParentIdSkillMappingsById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest {
	return ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSkillMapping
func (a *BoardSkillMappingsAPIService) PatchServiceBoardsByParentIdSkillMappingsByIdExecute(r ApiPatchServiceBoardsByParentIdSkillMappingsByIdRequest) (*BoardSkillMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSkillMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.PatchServiceBoardsByParentIdSkillMappingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdSkillMappingsRequest struct {
	ctx               context.Context
	ApiService        *BoardSkillMappingsAPIService
	parentId          int32
	clientId          *string
	boardSkillMapping *BoardSkillMapping
}

func (r ApiPostServiceBoardsByParentIdSkillMappingsRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdSkillMappingsRequest {
	r.clientId = &clientId
	return r
}

// BoardSkillMapping
func (r ApiPostServiceBoardsByParentIdSkillMappingsRequest) BoardSkillMapping(boardSkillMapping BoardSkillMapping) ApiPostServiceBoardsByParentIdSkillMappingsRequest {
	r.boardSkillMapping = &boardSkillMapping
	return r
}

func (r ApiPostServiceBoardsByParentIdSkillMappingsRequest) Execute() (*BoardSkillMapping, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdSkillMappingsExecute(r)
}

/*
PostServiceBoardsByParentIdSkillMappings Post BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiPostServiceBoardsByParentIdSkillMappingsRequest
*/
func (a *BoardSkillMappingsAPIService) PostServiceBoardsByParentIdSkillMappings(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdSkillMappingsRequest {
	return ApiPostServiceBoardsByParentIdSkillMappingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSkillMapping
func (a *BoardSkillMappingsAPIService) PostServiceBoardsByParentIdSkillMappingsExecute(r ApiPostServiceBoardsByParentIdSkillMappingsRequest) (*BoardSkillMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSkillMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.PostServiceBoardsByParentIdSkillMappings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardSkillMapping == nil {
		return localVarReturnValue, nil, reportError("boardSkillMapping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardSkillMapping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest struct {
	ctx               context.Context
	ApiService        *BoardSkillMappingsAPIService
	id                int32
	parentId          int32
	clientId          *string
	boardSkillMapping *BoardSkillMapping
}

func (r ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.clientId = &clientId
	return r
}

// boardSkillMapping
func (r ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest) BoardSkillMapping(boardSkillMapping BoardSkillMapping) ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest {
	r.boardSkillMapping = &boardSkillMapping
	return r
}

func (r ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest) Execute() (*BoardSkillMapping, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdSkillMappingsByIdExecute(r)
}

/*
PutServiceBoardsByParentIdSkillMappingsById Put BoardSkillMappings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id BoardSkillMappingId
	@param parentId boardId
	@return ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest
*/
func (a *BoardSkillMappingsAPIService) PutServiceBoardsByParentIdSkillMappingsById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest {
	return ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSkillMapping
func (a *BoardSkillMappingsAPIService) PutServiceBoardsByParentIdSkillMappingsByIdExecute(r ApiPutServiceBoardsByParentIdSkillMappingsByIdRequest) (*BoardSkillMapping, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSkillMapping
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSkillMappingsAPIService.PutServiceBoardsByParentIdSkillMappingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/skillMappings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardSkillMapping == nil {
		return localVarReturnValue, nil, reportError("boardSkillMapping is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardSkillMapping
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
