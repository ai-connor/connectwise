/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardSubTypesAPIService BoardSubTypesAPI service
type BoardSubTypesAPIService service

type ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest struct {
	ctx        context.Context
	ApiService *BoardSubTypesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdSubtypesByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdSubtypesById Delete Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest
*/
func (a *BoardSubTypesAPIService) DeleteServiceBoardsByParentIdSubtypesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest {
	return ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *BoardSubTypesAPIService) DeleteServiceBoardsByParentIdSubtypesByIdExecute(r ApiDeleteServiceBoardsByParentIdSubtypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.DeleteServiceBoardsByParentIdSubtypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesRequest struct {
	ctx                   context.Context
	ApiService            *BoardSubTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesRequest) Execute() ([]BoardSubType, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypes Get List of BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSubtypesRequest
*/
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypes(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSubtypesRequest {
	return ApiGetServiceBoardsByParentIdSubtypesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []BoardSubType
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesExecute(r ApiGetServiceBoardsByParentIdSubtypesRequest) ([]BoardSubType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.GetServiceBoardsByParentIdSubtypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardSubTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) Execute() (*BoardSubType, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesByIdExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesById Get BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSubtypesByIdRequest
*/
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdSubtypesByIdRequest {
	return ApiGetServiceBoardsByParentIdSubtypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSubType
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesByIdExecute(r ApiGetServiceBoardsByParentIdSubtypesByIdRequest) (*BoardSubType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.GetServiceBoardsByParentIdSubtypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *BoardSubTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesByIdUsagesExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest
*/
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesByIdUsages(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest {
	return ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesByIdUsagesExecute(r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.GetServiceBoardsByParentIdSubtypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *BoardSubTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesByIdUsagesListExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest
*/
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesByIdUsagesList(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest {
	return ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesByIdUsagesListExecute(r ApiGetServiceBoardsByParentIdSubtypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.GetServiceBoardsByParentIdSubtypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdSubtypesCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardSubTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdSubtypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdSubtypesCountExecute(r)
}

/*
GetServiceBoardsByParentIdSubtypesCount Get Count of BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdSubtypesCountRequest
*/
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdSubtypesCountRequest {
	return ApiGetServiceBoardsByParentIdSubtypesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardSubTypesAPIService) GetServiceBoardsByParentIdSubtypesCountExecute(r ApiGetServiceBoardsByParentIdSubtypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.GetServiceBoardsByParentIdSubtypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdSubtypesByIdRequest struct {
	ctx            context.Context
	ApiService     *BoardSubTypesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceBoardsByParentIdSubtypesByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdSubtypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdSubtypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdSubtypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdSubtypesByIdRequest) Execute() (*BoardSubType, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdSubtypesByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdSubtypesById Patch BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiPatchServiceBoardsByParentIdSubtypesByIdRequest
*/
func (a *BoardSubTypesAPIService) PatchServiceBoardsByParentIdSubtypesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdSubtypesByIdRequest {
	return ApiPatchServiceBoardsByParentIdSubtypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSubType
func (a *BoardSubTypesAPIService) PatchServiceBoardsByParentIdSubtypesByIdExecute(r ApiPatchServiceBoardsByParentIdSubtypesByIdRequest) (*BoardSubType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.PatchServiceBoardsByParentIdSubtypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdSubtypesRequest struct {
	ctx          context.Context
	ApiService   *BoardSubTypesAPIService
	parentId     int32
	clientId     *string
	boardSubType *BoardSubType
}

func (r ApiPostServiceBoardsByParentIdSubtypesRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdSubtypesRequest {
	r.clientId = &clientId
	return r
}

// boardSubType
func (r ApiPostServiceBoardsByParentIdSubtypesRequest) BoardSubType(boardSubType BoardSubType) ApiPostServiceBoardsByParentIdSubtypesRequest {
	r.boardSubType = &boardSubType
	return r
}

func (r ApiPostServiceBoardsByParentIdSubtypesRequest) Execute() (*BoardSubType, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdSubtypesExecute(r)
}

/*
PostServiceBoardsByParentIdSubtypes Post BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiPostServiceBoardsByParentIdSubtypesRequest
*/
func (a *BoardSubTypesAPIService) PostServiceBoardsByParentIdSubtypes(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdSubtypesRequest {
	return ApiPostServiceBoardsByParentIdSubtypesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSubType
func (a *BoardSubTypesAPIService) PostServiceBoardsByParentIdSubtypesExecute(r ApiPostServiceBoardsByParentIdSubtypesRequest) (*BoardSubType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.PostServiceBoardsByParentIdSubtypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardSubType == nil {
		return localVarReturnValue, nil, reportError("boardSubType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardSubType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdSubtypesByIdRequest struct {
	ctx          context.Context
	ApiService   *BoardSubTypesAPIService
	id           int32
	parentId     int32
	clientId     *string
	boardSubType *BoardSubType
}

func (r ApiPutServiceBoardsByParentIdSubtypesByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdSubtypesByIdRequest {
	r.clientId = &clientId
	return r
}

// boardSubType
func (r ApiPutServiceBoardsByParentIdSubtypesByIdRequest) BoardSubType(boardSubType BoardSubType) ApiPutServiceBoardsByParentIdSubtypesByIdRequest {
	r.boardSubType = &boardSubType
	return r
}

func (r ApiPutServiceBoardsByParentIdSubtypesByIdRequest) Execute() (*BoardSubType, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdSubtypesByIdExecute(r)
}

/*
PutServiceBoardsByParentIdSubtypesById Put BoardSubType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subtypeId
	@param parentId boardId
	@return ApiPutServiceBoardsByParentIdSubtypesByIdRequest
*/
func (a *BoardSubTypesAPIService) PutServiceBoardsByParentIdSubtypesById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdSubtypesByIdRequest {
	return ApiPutServiceBoardsByParentIdSubtypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardSubType
func (a *BoardSubTypesAPIService) PutServiceBoardsByParentIdSubtypesByIdExecute(r ApiPutServiceBoardsByParentIdSubtypesByIdRequest) (*BoardSubType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardSubType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardSubTypesAPIService.PutServiceBoardsByParentIdSubtypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/subtypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardSubType == nil {
		return localVarReturnValue, nil, reportError("boardSubType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardSubType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
