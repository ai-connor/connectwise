/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardTypesAPIService BoardTypesAPI service
type BoardTypesAPIService service

type ApiDeleteServiceBoardsByParentIdTypesByIdRequest struct {
	ctx        context.Context
	ApiService *BoardTypesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteServiceBoardsByParentIdTypesByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByParentIdTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByParentIdTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByParentIdTypesByIdExecute(r)
}

/*
DeleteServiceBoardsByParentIdTypesById Delete BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiDeleteServiceBoardsByParentIdTypesByIdRequest
*/
func (a *BoardTypesAPIService) DeleteServiceBoardsByParentIdTypesById(ctx context.Context, id int32, parentId int32) ApiDeleteServiceBoardsByParentIdTypesByIdRequest {
	return ApiDeleteServiceBoardsByParentIdTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *BoardTypesAPIService) DeleteServiceBoardsByParentIdTypesByIdExecute(r ApiDeleteServiceBoardsByParentIdTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.DeleteServiceBoardsByParentIdTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdTypesRequest struct {
	ctx                   context.Context
	ApiService            *BoardTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) Page(page int32) ApiGetServiceBoardsByParentIdTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesRequest) Execute() ([]BoardType, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdTypesExecute(r)
}

/*
GetServiceBoardsByParentIdTypes Get List of BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdTypesRequest
*/
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypes(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdTypesRequest {
	return ApiGetServiceBoardsByParentIdTypesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []BoardType
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesExecute(r ApiGetServiceBoardsByParentIdTypesRequest) ([]BoardType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []BoardType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.GetServiceBoardsByParentIdTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) Fields(fields string) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) Page(page int32) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdRequest) Execute() (*BoardType, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdTypesByIdExecute(r)
}

/*
GetServiceBoardsByParentIdTypesById Get BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdTypesByIdRequest
*/
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesById(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdTypesByIdRequest {
	return ApiGetServiceBoardsByParentIdTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardType
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesByIdExecute(r ApiGetServiceBoardsByParentIdTypesByIdRequest) (*BoardType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.GetServiceBoardsByParentIdTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *BoardTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) Fields(fields string) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) Page(page int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdTypesByIdUsagesExecute(r)
}

/*
GetServiceBoardsByParentIdTypesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest
*/
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesByIdUsages(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest {
	return ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesByIdUsagesExecute(r ApiGetServiceBoardsByParentIdTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.GetServiceBoardsByParentIdTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *BoardTypesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) Fields(fields string) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) Page(page int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdTypesByIdUsagesListExecute(r)
}

/*
GetServiceBoardsByParentIdTypesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest
*/
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesByIdUsagesList(ctx context.Context, id int32, parentId int32) ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest {
	return ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesByIdUsagesListExecute(r ApiGetServiceBoardsByParentIdTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.GetServiceBoardsByParentIdTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByParentIdTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardTypesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) ClientId(clientId string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) Conditions(conditions string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) Fields(fields string) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) Page(page int32) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) PageId(pageId int32) ApiGetServiceBoardsByParentIdTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByParentIdTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByParentIdTypesCountExecute(r)
}

/*
GetServiceBoardsByParentIdTypesCount Get Count of BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiGetServiceBoardsByParentIdTypesCountRequest
*/
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesCount(ctx context.Context, parentId int32) ApiGetServiceBoardsByParentIdTypesCountRequest {
	return ApiGetServiceBoardsByParentIdTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardTypesAPIService) GetServiceBoardsByParentIdTypesCountExecute(r ApiGetServiceBoardsByParentIdTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.GetServiceBoardsByParentIdTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByParentIdTypesByIdRequest struct {
	ctx            context.Context
	ApiService     *BoardTypesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceBoardsByParentIdTypesByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByParentIdTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByParentIdTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByParentIdTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByParentIdTypesByIdRequest) Execute() (*BoardType, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByParentIdTypesByIdExecute(r)
}

/*
PatchServiceBoardsByParentIdTypesById Patch BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiPatchServiceBoardsByParentIdTypesByIdRequest
*/
func (a *BoardTypesAPIService) PatchServiceBoardsByParentIdTypesById(ctx context.Context, id int32, parentId int32) ApiPatchServiceBoardsByParentIdTypesByIdRequest {
	return ApiPatchServiceBoardsByParentIdTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardType
func (a *BoardTypesAPIService) PatchServiceBoardsByParentIdTypesByIdExecute(r ApiPatchServiceBoardsByParentIdTypesByIdRequest) (*BoardType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.PatchServiceBoardsByParentIdTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsByParentIdTypesRequest struct {
	ctx        context.Context
	ApiService *BoardTypesAPIService
	parentId   int32
	clientId   *string
	boardType  *BoardType
}

func (r ApiPostServiceBoardsByParentIdTypesRequest) ClientId(clientId string) ApiPostServiceBoardsByParentIdTypesRequest {
	r.clientId = &clientId
	return r
}

// boardType
func (r ApiPostServiceBoardsByParentIdTypesRequest) BoardType(boardType BoardType) ApiPostServiceBoardsByParentIdTypesRequest {
	r.boardType = &boardType
	return r
}

func (r ApiPostServiceBoardsByParentIdTypesRequest) Execute() (*BoardType, *http.Response, error) {
	return r.ApiService.PostServiceBoardsByParentIdTypesExecute(r)
}

/*
PostServiceBoardsByParentIdTypes Post BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId boardId
	@return ApiPostServiceBoardsByParentIdTypesRequest
*/
func (a *BoardTypesAPIService) PostServiceBoardsByParentIdTypes(ctx context.Context, parentId int32) ApiPostServiceBoardsByParentIdTypesRequest {
	return ApiPostServiceBoardsByParentIdTypesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardType
func (a *BoardTypesAPIService) PostServiceBoardsByParentIdTypesExecute(r ApiPostServiceBoardsByParentIdTypesRequest) (*BoardType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.PostServiceBoardsByParentIdTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardType == nil {
		return localVarReturnValue, nil, reportError("boardType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByParentIdTypesByIdRequest struct {
	ctx        context.Context
	ApiService *BoardTypesAPIService
	id         int32
	parentId   int32
	clientId   *string
	boardType  *BoardType
}

func (r ApiPutServiceBoardsByParentIdTypesByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByParentIdTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// boardType
func (r ApiPutServiceBoardsByParentIdTypesByIdRequest) BoardType(boardType BoardType) ApiPutServiceBoardsByParentIdTypesByIdRequest {
	r.boardType = &boardType
	return r
}

func (r ApiPutServiceBoardsByParentIdTypesByIdRequest) Execute() (*BoardType, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByParentIdTypesByIdExecute(r)
}

/*
PutServiceBoardsByParentIdTypesById Put BoardType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@param parentId boardId
	@return ApiPutServiceBoardsByParentIdTypesByIdRequest
*/
func (a *BoardTypesAPIService) PutServiceBoardsByParentIdTypesById(ctx context.Context, id int32, parentId int32) ApiPutServiceBoardsByParentIdTypesByIdRequest {
	return ApiPutServiceBoardsByParentIdTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return BoardType
func (a *BoardTypesAPIService) PutServiceBoardsByParentIdTypesByIdExecute(r ApiPutServiceBoardsByParentIdTypesByIdRequest) (*BoardType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BoardType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardTypesAPIService.PutServiceBoardsByParentIdTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{parentId}/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardType == nil {
		return localVarReturnValue, nil, reportError("boardType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
