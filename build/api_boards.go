/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BoardsAPIService BoardsAPI service
type BoardsAPIService service

type ApiDeleteServiceBoardsByIdRequest struct {
	ctx        context.Context
	ApiService *BoardsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteServiceBoardsByIdRequest) ClientId(clientId string) ApiDeleteServiceBoardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceBoardsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceBoardsByIdExecute(r)
}

/*
DeleteServiceBoardsById Delete Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiDeleteServiceBoardsByIdRequest
*/
func (a *BoardsAPIService) DeleteServiceBoardsById(ctx context.Context, id int32) ApiDeleteServiceBoardsByIdRequest {
	return ApiDeleteServiceBoardsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BoardsAPIService) DeleteServiceBoardsByIdExecute(r ApiDeleteServiceBoardsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.DeleteServiceBoardsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceBoardsRequest struct {
	ctx                   context.Context
	ApiService            *BoardsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsRequest) ClientId(clientId string) ApiGetServiceBoardsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsRequest) Conditions(conditions string) ApiGetServiceBoardsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsRequest) ChildConditions(childConditions string) ApiGetServiceBoardsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsRequest) OrderBy(orderBy string) ApiGetServiceBoardsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsRequest) Fields(fields string) ApiGetServiceBoardsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsRequest) Page(page int32) ApiGetServiceBoardsRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsRequest) PageSize(pageSize int32) ApiGetServiceBoardsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsRequest) PageId(pageId int32) ApiGetServiceBoardsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsRequest) Execute() ([]Board, *http.Response, error) {
	return r.ApiService.GetServiceBoardsExecute(r)
}

/*
GetServiceBoards Get List of Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceBoardsRequest
*/
func (a *BoardsAPIService) GetServiceBoards(ctx context.Context) ApiGetServiceBoardsRequest {
	return ApiGetServiceBoardsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Board
func (a *BoardsAPIService) GetServiceBoardsExecute(r ApiGetServiceBoardsRequest) ([]Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.GetServiceBoards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByIdRequest struct {
	ctx                   context.Context
	ApiService            *BoardsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByIdRequest) ClientId(clientId string) ApiGetServiceBoardsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByIdRequest) Conditions(conditions string) ApiGetServiceBoardsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByIdRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByIdRequest) OrderBy(orderBy string) ApiGetServiceBoardsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByIdRequest) Fields(fields string) ApiGetServiceBoardsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByIdRequest) Page(page int32) ApiGetServiceBoardsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByIdRequest) PageSize(pageSize int32) ApiGetServiceBoardsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByIdRequest) PageId(pageId int32) ApiGetServiceBoardsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByIdRequest) Execute() (*Board, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByIdExecute(r)
}

/*
GetServiceBoardsById Get Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiGetServiceBoardsByIdRequest
*/
func (a *BoardsAPIService) GetServiceBoardsById(ctx context.Context, id int32) ApiGetServiceBoardsByIdRequest {
	return ApiGetServiceBoardsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Board
func (a *BoardsAPIService) GetServiceBoardsByIdExecute(r ApiGetServiceBoardsByIdRequest) (*Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.GetServiceBoardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *BoardsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByIdUsagesRequest) ClientId(clientId string) ApiGetServiceBoardsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) Conditions(conditions string) ApiGetServiceBoardsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) OrderBy(orderBy string) ApiGetServiceBoardsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) Fields(fields string) ApiGetServiceBoardsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) Page(page int32) ApiGetServiceBoardsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) PageSize(pageSize int32) ApiGetServiceBoardsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) PageId(pageId int32) ApiGetServiceBoardsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByIdUsagesExecute(r)
}

/*
GetServiceBoardsByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiGetServiceBoardsByIdUsagesRequest
*/
func (a *BoardsAPIService) GetServiceBoardsByIdUsages(ctx context.Context, id int32) ApiGetServiceBoardsByIdUsagesRequest {
	return ApiGetServiceBoardsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardsAPIService) GetServiceBoardsByIdUsagesExecute(r ApiGetServiceBoardsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.GetServiceBoardsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *BoardsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) ClientId(clientId string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) Conditions(conditions string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) Fields(fields string) ApiGetServiceBoardsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) Page(page int32) ApiGetServiceBoardsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetServiceBoardsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) PageId(pageId int32) ApiGetServiceBoardsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetServiceBoardsByIdUsagesListExecute(r)
}

/*
GetServiceBoardsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiGetServiceBoardsByIdUsagesListRequest
*/
func (a *BoardsAPIService) GetServiceBoardsByIdUsagesList(ctx context.Context, id int32) ApiGetServiceBoardsByIdUsagesListRequest {
	return ApiGetServiceBoardsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *BoardsAPIService) GetServiceBoardsByIdUsagesListExecute(r ApiGetServiceBoardsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.GetServiceBoardsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceBoardsCountRequest struct {
	ctx                   context.Context
	ApiService            *BoardsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceBoardsCountRequest) ClientId(clientId string) ApiGetServiceBoardsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceBoardsCountRequest) Conditions(conditions string) ApiGetServiceBoardsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceBoardsCountRequest) ChildConditions(childConditions string) ApiGetServiceBoardsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceBoardsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceBoardsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceBoardsCountRequest) OrderBy(orderBy string) ApiGetServiceBoardsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceBoardsCountRequest) Fields(fields string) ApiGetServiceBoardsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceBoardsCountRequest) Page(page int32) ApiGetServiceBoardsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceBoardsCountRequest) PageSize(pageSize int32) ApiGetServiceBoardsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceBoardsCountRequest) PageId(pageId int32) ApiGetServiceBoardsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceBoardsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceBoardsCountExecute(r)
}

/*
GetServiceBoardsCount Get Count of Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceBoardsCountRequest
*/
func (a *BoardsAPIService) GetServiceBoardsCount(ctx context.Context) ApiGetServiceBoardsCountRequest {
	return ApiGetServiceBoardsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *BoardsAPIService) GetServiceBoardsCountExecute(r ApiGetServiceBoardsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.GetServiceBoardsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceBoardsByIdRequest struct {
	ctx            context.Context
	ApiService     *BoardsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceBoardsByIdRequest) ClientId(clientId string) ApiPatchServiceBoardsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceBoardsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceBoardsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceBoardsByIdRequest) Execute() (*Board, *http.Response, error) {
	return r.ApiService.PatchServiceBoardsByIdExecute(r)
}

/*
PatchServiceBoardsById Patch Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiPatchServiceBoardsByIdRequest
*/
func (a *BoardsAPIService) PatchServiceBoardsById(ctx context.Context, id int32) ApiPatchServiceBoardsByIdRequest {
	return ApiPatchServiceBoardsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Board
func (a *BoardsAPIService) PatchServiceBoardsByIdExecute(r ApiPatchServiceBoardsByIdRequest) (*Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.PatchServiceBoardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsRequest struct {
	ctx        context.Context
	ApiService *BoardsAPIService
	clientId   *string
	board      *Board
}

func (r ApiPostServiceBoardsRequest) ClientId(clientId string) ApiPostServiceBoardsRequest {
	r.clientId = &clientId
	return r
}

// board
func (r ApiPostServiceBoardsRequest) Board(board Board) ApiPostServiceBoardsRequest {
	r.board = &board
	return r
}

func (r ApiPostServiceBoardsRequest) Execute() (*Board, *http.Response, error) {
	return r.ApiService.PostServiceBoardsExecute(r)
}

/*
PostServiceBoards Post Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostServiceBoardsRequest
*/
func (a *BoardsAPIService) PostServiceBoards(ctx context.Context) ApiPostServiceBoardsRequest {
	return ApiPostServiceBoardsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Board
func (a *BoardsAPIService) PostServiceBoardsExecute(r ApiPostServiceBoardsRequest) (*Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.PostServiceBoards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.board == nil {
		return localVarReturnValue, nil, reportError("board is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.board
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceBoardsCopyRequest struct {
	ctx        context.Context
	ApiService *BoardsAPIService
	clientId   *string
	boardCopy  *BoardCopy
}

func (r ApiPostServiceBoardsCopyRequest) ClientId(clientId string) ApiPostServiceBoardsCopyRequest {
	r.clientId = &clientId
	return r
}

// copy
func (r ApiPostServiceBoardsCopyRequest) BoardCopy(boardCopy BoardCopy) ApiPostServiceBoardsCopyRequest {
	r.boardCopy = &boardCopy
	return r
}

func (r ApiPostServiceBoardsCopyRequest) Execute() (*Board, *http.Response, error) {
	return r.ApiService.PostServiceBoardsCopyExecute(r)
}

/*
PostServiceBoardsCopy Post Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostServiceBoardsCopyRequest
*/
func (a *BoardsAPIService) PostServiceBoardsCopy(ctx context.Context) ApiPostServiceBoardsCopyRequest {
	return ApiPostServiceBoardsCopyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Board
func (a *BoardsAPIService) PostServiceBoardsCopyExecute(r ApiPostServiceBoardsCopyRequest) (*Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.PostServiceBoardsCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.boardCopy == nil {
		return localVarReturnValue, nil, reportError("boardCopy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.boardCopy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceBoardsByIdRequest struct {
	ctx        context.Context
	ApiService *BoardsAPIService
	id         int32
	clientId   *string
	board      *Board
}

func (r ApiPutServiceBoardsByIdRequest) ClientId(clientId string) ApiPutServiceBoardsByIdRequest {
	r.clientId = &clientId
	return r
}

// board
func (r ApiPutServiceBoardsByIdRequest) Board(board Board) ApiPutServiceBoardsByIdRequest {
	r.board = &board
	return r
}

func (r ApiPutServiceBoardsByIdRequest) Execute() (*Board, *http.Response, error) {
	return r.ApiService.PutServiceBoardsByIdExecute(r)
}

/*
PutServiceBoardsById Put Board

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id boardId
	@return ApiPutServiceBoardsByIdRequest
*/
func (a *BoardsAPIService) PutServiceBoardsById(ctx context.Context, id int32) ApiPutServiceBoardsByIdRequest {
	return ApiPutServiceBoardsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Board
func (a *BoardsAPIService) PutServiceBoardsByIdExecute(r ApiPutServiceBoardsByIdRequest) (*Board, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Board
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BoardsAPIService.PutServiceBoardsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/boards/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.board == nil {
		return localVarReturnValue, nil, reportError("board is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.board
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
