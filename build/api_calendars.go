/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CalendarsAPIService CalendarsAPI service
type CalendarsAPIService service

type ApiDeleteScheduleCalendarsByIdRequest struct {
	ctx        context.Context
	ApiService *CalendarsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteScheduleCalendarsByIdRequest) ClientId(clientId string) ApiDeleteScheduleCalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteScheduleCalendarsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteScheduleCalendarsByIdExecute(r)
}

/*
DeleteScheduleCalendarsById Delete Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiDeleteScheduleCalendarsByIdRequest
*/
func (a *CalendarsAPIService) DeleteScheduleCalendarsById(ctx context.Context, id int32) ApiDeleteScheduleCalendarsByIdRequest {
	return ApiDeleteScheduleCalendarsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CalendarsAPIService) DeleteScheduleCalendarsByIdExecute(r ApiDeleteScheduleCalendarsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.DeleteScheduleCalendarsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetScheduleCalendarsRequest struct {
	ctx                   context.Context
	ApiService            *CalendarsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetScheduleCalendarsRequest) ClientId(clientId string) ApiGetScheduleCalendarsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleCalendarsRequest) Conditions(conditions string) ApiGetScheduleCalendarsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetScheduleCalendarsRequest) ChildConditions(childConditions string) ApiGetScheduleCalendarsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetScheduleCalendarsRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleCalendarsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetScheduleCalendarsRequest) OrderBy(orderBy string) ApiGetScheduleCalendarsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetScheduleCalendarsRequest) Fields(fields string) ApiGetScheduleCalendarsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetScheduleCalendarsRequest) Page(page int32) ApiGetScheduleCalendarsRequest {
	r.page = &page
	return r
}

func (r ApiGetScheduleCalendarsRequest) PageSize(pageSize int32) ApiGetScheduleCalendarsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetScheduleCalendarsRequest) PageId(pageId int32) ApiGetScheduleCalendarsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleCalendarsRequest) Execute() ([]Calendar, *http.Response, error) {
	return r.ApiService.GetScheduleCalendarsExecute(r)
}

/*
GetScheduleCalendars Get List of Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetScheduleCalendarsRequest
*/
func (a *CalendarsAPIService) GetScheduleCalendars(ctx context.Context) ApiGetScheduleCalendarsRequest {
	return ApiGetScheduleCalendarsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Calendar
func (a *CalendarsAPIService) GetScheduleCalendarsExecute(r ApiGetScheduleCalendarsRequest) ([]Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.GetScheduleCalendars")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleCalendarsByIdRequest struct {
	ctx                   context.Context
	ApiService            *CalendarsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetScheduleCalendarsByIdRequest) ClientId(clientId string) ApiGetScheduleCalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) Conditions(conditions string) ApiGetScheduleCalendarsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) ChildConditions(childConditions string) ApiGetScheduleCalendarsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleCalendarsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) OrderBy(orderBy string) ApiGetScheduleCalendarsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) Fields(fields string) ApiGetScheduleCalendarsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) Page(page int32) ApiGetScheduleCalendarsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) PageSize(pageSize int32) ApiGetScheduleCalendarsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) PageId(pageId int32) ApiGetScheduleCalendarsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleCalendarsByIdRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.GetScheduleCalendarsByIdExecute(r)
}

/*
GetScheduleCalendarsById Get Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiGetScheduleCalendarsByIdRequest
*/
func (a *CalendarsAPIService) GetScheduleCalendarsById(ctx context.Context, id int32) ApiGetScheduleCalendarsByIdRequest {
	return ApiGetScheduleCalendarsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) GetScheduleCalendarsByIdExecute(r ApiGetScheduleCalendarsByIdRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.GetScheduleCalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleCalendarsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *CalendarsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) ClientId(clientId string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) Conditions(conditions string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) OrderBy(orderBy string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) Fields(fields string) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) Page(page int32) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) PageSize(pageSize int32) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) PageId(pageId int32) ApiGetScheduleCalendarsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetScheduleCalendarsByIdUsagesExecute(r)
}

/*
GetScheduleCalendarsByIdUsages Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiGetScheduleCalendarsByIdUsagesRequest
*/
func (a *CalendarsAPIService) GetScheduleCalendarsByIdUsages(ctx context.Context, id int32) ApiGetScheduleCalendarsByIdUsagesRequest {
	return ApiGetScheduleCalendarsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CalendarsAPIService) GetScheduleCalendarsByIdUsagesExecute(r ApiGetScheduleCalendarsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.GetScheduleCalendarsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleCalendarsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *CalendarsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) ClientId(clientId string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) Conditions(conditions string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) Fields(fields string) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) Page(page int32) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) PageId(pageId int32) ApiGetScheduleCalendarsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleCalendarsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetScheduleCalendarsByIdUsagesListExecute(r)
}

/*
GetScheduleCalendarsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiGetScheduleCalendarsByIdUsagesListRequest
*/
func (a *CalendarsAPIService) GetScheduleCalendarsByIdUsagesList(ctx context.Context, id int32) ApiGetScheduleCalendarsByIdUsagesListRequest {
	return ApiGetScheduleCalendarsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CalendarsAPIService) GetScheduleCalendarsByIdUsagesListExecute(r ApiGetScheduleCalendarsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.GetScheduleCalendarsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetScheduleCalendarsCountRequest struct {
	ctx                   context.Context
	ApiService            *CalendarsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetScheduleCalendarsCountRequest) ClientId(clientId string) ApiGetScheduleCalendarsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) Conditions(conditions string) ApiGetScheduleCalendarsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) ChildConditions(childConditions string) ApiGetScheduleCalendarsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetScheduleCalendarsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) OrderBy(orderBy string) ApiGetScheduleCalendarsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) Fields(fields string) ApiGetScheduleCalendarsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) Page(page int32) ApiGetScheduleCalendarsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) PageSize(pageSize int32) ApiGetScheduleCalendarsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) PageId(pageId int32) ApiGetScheduleCalendarsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetScheduleCalendarsCountRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.GetScheduleCalendarsCountExecute(r)
}

/*
GetScheduleCalendarsCount Get Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetScheduleCalendarsCountRequest
*/
func (a *CalendarsAPIService) GetScheduleCalendarsCount(ctx context.Context) ApiGetScheduleCalendarsCountRequest {
	return ApiGetScheduleCalendarsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) GetScheduleCalendarsCountExecute(r ApiGetScheduleCalendarsCountRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.GetScheduleCalendarsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchScheduleCalendarsByIdRequest struct {
	ctx            context.Context
	ApiService     *CalendarsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchScheduleCalendarsByIdRequest) ClientId(clientId string) ApiPatchScheduleCalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchScheduleCalendarsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchScheduleCalendarsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchScheduleCalendarsByIdRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.PatchScheduleCalendarsByIdExecute(r)
}

/*
PatchScheduleCalendarsById Patch Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiPatchScheduleCalendarsByIdRequest
*/
func (a *CalendarsAPIService) PatchScheduleCalendarsById(ctx context.Context, id int32) ApiPatchScheduleCalendarsByIdRequest {
	return ApiPatchScheduleCalendarsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) PatchScheduleCalendarsByIdExecute(r ApiPatchScheduleCalendarsByIdRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.PatchScheduleCalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleCalendarsRequest struct {
	ctx        context.Context
	ApiService *CalendarsAPIService
	clientId   *string
	calendar   *Calendar
}

func (r ApiPostScheduleCalendarsRequest) ClientId(clientId string) ApiPostScheduleCalendarsRequest {
	r.clientId = &clientId
	return r
}

// calendar
func (r ApiPostScheduleCalendarsRequest) Calendar(calendar Calendar) ApiPostScheduleCalendarsRequest {
	r.calendar = &calendar
	return r
}

func (r ApiPostScheduleCalendarsRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.PostScheduleCalendarsExecute(r)
}

/*
PostScheduleCalendars Post Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostScheduleCalendarsRequest
*/
func (a *CalendarsAPIService) PostScheduleCalendars(ctx context.Context) ApiPostScheduleCalendarsRequest {
	return ApiPostScheduleCalendarsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) PostScheduleCalendarsExecute(r ApiPostScheduleCalendarsRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.PostScheduleCalendars")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.calendar == nil {
		return localVarReturnValue, nil, reportError("calendar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.calendar
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostScheduleCalendarsByIdCopyRequest struct {
	ctx        context.Context
	ApiService *CalendarsAPIService
	id         int32
	clientId   *string
}

func (r ApiPostScheduleCalendarsByIdCopyRequest) ClientId(clientId string) ApiPostScheduleCalendarsByIdCopyRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostScheduleCalendarsByIdCopyRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.PostScheduleCalendarsByIdCopyExecute(r)
}

/*
PostScheduleCalendarsByIdCopy Post Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiPostScheduleCalendarsByIdCopyRequest
*/
func (a *CalendarsAPIService) PostScheduleCalendarsByIdCopy(ctx context.Context, id int32) ApiPostScheduleCalendarsByIdCopyRequest {
	return ApiPostScheduleCalendarsByIdCopyRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) PostScheduleCalendarsByIdCopyExecute(r ApiPostScheduleCalendarsByIdCopyRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.PostScheduleCalendarsByIdCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}/copy"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutScheduleCalendarsByIdRequest struct {
	ctx        context.Context
	ApiService *CalendarsAPIService
	id         int32
	clientId   *string
	calendar   *Calendar
}

func (r ApiPutScheduleCalendarsByIdRequest) ClientId(clientId string) ApiPutScheduleCalendarsByIdRequest {
	r.clientId = &clientId
	return r
}

// calendar
func (r ApiPutScheduleCalendarsByIdRequest) Calendar(calendar Calendar) ApiPutScheduleCalendarsByIdRequest {
	r.calendar = &calendar
	return r
}

func (r ApiPutScheduleCalendarsByIdRequest) Execute() (*Calendar, *http.Response, error) {
	return r.ApiService.PutScheduleCalendarsByIdExecute(r)
}

/*
PutScheduleCalendarsById Put Calendar

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id calendarId
	@return ApiPutScheduleCalendarsByIdRequest
*/
func (a *CalendarsAPIService) PutScheduleCalendarsById(ctx context.Context, id int32) ApiPutScheduleCalendarsByIdRequest {
	return ApiPutScheduleCalendarsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Calendar
func (a *CalendarsAPIService) PutScheduleCalendarsByIdExecute(r ApiPutScheduleCalendarsByIdRequest) (*Calendar, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Calendar
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalendarsAPIService.PutScheduleCalendarsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/schedule/calendars/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.calendar == nil {
		return localVarReturnValue, nil, reportError("calendar is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.calendar
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
