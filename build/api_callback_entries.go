/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CallbackEntriesAPIService CallbackEntriesAPI service
type CallbackEntriesAPIService service

type ApiDeleteSystemCallbacksByIdRequest struct {
	ctx        context.Context
	ApiService *CallbackEntriesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemCallbacksByIdRequest) ClientId(clientId string) ApiDeleteSystemCallbacksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemCallbacksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemCallbacksByIdExecute(r)
}

/*
DeleteSystemCallbacksById Delete CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id callbackId
	@return ApiDeleteSystemCallbacksByIdRequest
*/
func (a *CallbackEntriesAPIService) DeleteSystemCallbacksById(ctx context.Context, id int32) ApiDeleteSystemCallbacksByIdRequest {
	return ApiDeleteSystemCallbacksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CallbackEntriesAPIService) DeleteSystemCallbacksByIdExecute(r ApiDeleteSystemCallbacksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.DeleteSystemCallbacksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemCallbacksRequest struct {
	ctx                   context.Context
	ApiService            *CallbackEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemCallbacksRequest) ClientId(clientId string) ApiGetSystemCallbacksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemCallbacksRequest) Conditions(conditions string) ApiGetSystemCallbacksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemCallbacksRequest) ChildConditions(childConditions string) ApiGetSystemCallbacksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemCallbacksRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCallbacksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemCallbacksRequest) OrderBy(orderBy string) ApiGetSystemCallbacksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemCallbacksRequest) Fields(fields string) ApiGetSystemCallbacksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemCallbacksRequest) Page(page int32) ApiGetSystemCallbacksRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemCallbacksRequest) PageSize(pageSize int32) ApiGetSystemCallbacksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemCallbacksRequest) PageId(pageId int32) ApiGetSystemCallbacksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCallbacksRequest) Execute() ([]CallbackEntry, *http.Response, error) {
	return r.ApiService.GetSystemCallbacksExecute(r)
}

/*
GetSystemCallbacks Get List of CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemCallbacksRequest
*/
func (a *CallbackEntriesAPIService) GetSystemCallbacks(ctx context.Context) ApiGetSystemCallbacksRequest {
	return ApiGetSystemCallbacksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CallbackEntry
func (a *CallbackEntriesAPIService) GetSystemCallbacksExecute(r ApiGetSystemCallbacksRequest) ([]CallbackEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CallbackEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.GetSystemCallbacks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemCallbacksByIdRequest struct {
	ctx                   context.Context
	ApiService            *CallbackEntriesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemCallbacksByIdRequest) ClientId(clientId string) ApiGetSystemCallbacksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) Conditions(conditions string) ApiGetSystemCallbacksByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) ChildConditions(childConditions string) ApiGetSystemCallbacksByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCallbacksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) OrderBy(orderBy string) ApiGetSystemCallbacksByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) Fields(fields string) ApiGetSystemCallbacksByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) Page(page int32) ApiGetSystemCallbacksByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) PageSize(pageSize int32) ApiGetSystemCallbacksByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) PageId(pageId int32) ApiGetSystemCallbacksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCallbacksByIdRequest) Execute() (*CallbackEntry, *http.Response, error) {
	return r.ApiService.GetSystemCallbacksByIdExecute(r)
}

/*
GetSystemCallbacksById Get CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id callbackId
	@return ApiGetSystemCallbacksByIdRequest
*/
func (a *CallbackEntriesAPIService) GetSystemCallbacksById(ctx context.Context, id int32) ApiGetSystemCallbacksByIdRequest {
	return ApiGetSystemCallbacksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CallbackEntry
func (a *CallbackEntriesAPIService) GetSystemCallbacksByIdExecute(r ApiGetSystemCallbacksByIdRequest) (*CallbackEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallbackEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.GetSystemCallbacksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemCallbacksCountRequest struct {
	ctx                   context.Context
	ApiService            *CallbackEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemCallbacksCountRequest) ClientId(clientId string) ApiGetSystemCallbacksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemCallbacksCountRequest) Conditions(conditions string) ApiGetSystemCallbacksCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemCallbacksCountRequest) ChildConditions(childConditions string) ApiGetSystemCallbacksCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemCallbacksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemCallbacksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemCallbacksCountRequest) OrderBy(orderBy string) ApiGetSystemCallbacksCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemCallbacksCountRequest) Fields(fields string) ApiGetSystemCallbacksCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemCallbacksCountRequest) Page(page int32) ApiGetSystemCallbacksCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemCallbacksCountRequest) PageSize(pageSize int32) ApiGetSystemCallbacksCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemCallbacksCountRequest) PageId(pageId int32) ApiGetSystemCallbacksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemCallbacksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemCallbacksCountExecute(r)
}

/*
GetSystemCallbacksCount Get Count of CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemCallbacksCountRequest
*/
func (a *CallbackEntriesAPIService) GetSystemCallbacksCount(ctx context.Context) ApiGetSystemCallbacksCountRequest {
	return ApiGetSystemCallbacksCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CallbackEntriesAPIService) GetSystemCallbacksCountExecute(r ApiGetSystemCallbacksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.GetSystemCallbacksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemCallbacksByIdRequest struct {
	ctx            context.Context
	ApiService     *CallbackEntriesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemCallbacksByIdRequest) ClientId(clientId string) ApiPatchSystemCallbacksByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemCallbacksByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemCallbacksByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemCallbacksByIdRequest) Execute() (*CallbackEntry, *http.Response, error) {
	return r.ApiService.PatchSystemCallbacksByIdExecute(r)
}

/*
PatchSystemCallbacksById Patch CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id callbackId
	@return ApiPatchSystemCallbacksByIdRequest
*/
func (a *CallbackEntriesAPIService) PatchSystemCallbacksById(ctx context.Context, id int32) ApiPatchSystemCallbacksByIdRequest {
	return ApiPatchSystemCallbacksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CallbackEntry
func (a *CallbackEntriesAPIService) PatchSystemCallbacksByIdExecute(r ApiPatchSystemCallbacksByIdRequest) (*CallbackEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallbackEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.PatchSystemCallbacksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemCallbacksRequest struct {
	ctx           context.Context
	ApiService    *CallbackEntriesAPIService
	clientId      *string
	callbackEntry *CallbackEntry
}

func (r ApiPostSystemCallbacksRequest) ClientId(clientId string) ApiPostSystemCallbacksRequest {
	r.clientId = &clientId
	return r
}

// callbackEntry
func (r ApiPostSystemCallbacksRequest) CallbackEntry(callbackEntry CallbackEntry) ApiPostSystemCallbacksRequest {
	r.callbackEntry = &callbackEntry
	return r
}

func (r ApiPostSystemCallbacksRequest) Execute() (*CallbackEntry, *http.Response, error) {
	return r.ApiService.PostSystemCallbacksExecute(r)
}

/*
PostSystemCallbacks Post CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemCallbacksRequest
*/
func (a *CallbackEntriesAPIService) PostSystemCallbacks(ctx context.Context) ApiPostSystemCallbacksRequest {
	return ApiPostSystemCallbacksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CallbackEntry
func (a *CallbackEntriesAPIService) PostSystemCallbacksExecute(r ApiPostSystemCallbacksRequest) (*CallbackEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallbackEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.PostSystemCallbacks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.callbackEntry == nil {
		return localVarReturnValue, nil, reportError("callbackEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.callbackEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemCallbacksByIdRequest struct {
	ctx           context.Context
	ApiService    *CallbackEntriesAPIService
	id            int32
	clientId      *string
	callbackEntry *CallbackEntry
}

func (r ApiPutSystemCallbacksByIdRequest) ClientId(clientId string) ApiPutSystemCallbacksByIdRequest {
	r.clientId = &clientId
	return r
}

// callbackEntry
func (r ApiPutSystemCallbacksByIdRequest) CallbackEntry(callbackEntry CallbackEntry) ApiPutSystemCallbacksByIdRequest {
	r.callbackEntry = &callbackEntry
	return r
}

func (r ApiPutSystemCallbacksByIdRequest) Execute() (*CallbackEntry, *http.Response, error) {
	return r.ApiService.PutSystemCallbacksByIdExecute(r)
}

/*
PutSystemCallbacksById Put CallbackEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id callbackId
	@return ApiPutSystemCallbacksByIdRequest
*/
func (a *CallbackEntriesAPIService) PutSystemCallbacksById(ctx context.Context, id int32) ApiPutSystemCallbacksByIdRequest {
	return ApiPutSystemCallbacksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CallbackEntry
func (a *CallbackEntriesAPIService) PutSystemCallbacksByIdExecute(r ApiPutSystemCallbacksByIdRequest) (*CallbackEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CallbackEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallbackEntriesAPIService.PutSystemCallbacksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/callbacks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.callbackEntry == nil {
		return localVarReturnValue, nil, reportError("callbackEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.callbackEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
