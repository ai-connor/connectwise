/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CampaignAuditsAPIService CampaignAuditsAPI service
type CampaignAuditsAPIService service

type ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest struct {
	ctx        context.Context
	ApiService *CampaignAuditsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsByParentIdAuditsByIdExecute(r)
}

/*
DeleteMarketingCampaignsByParentIdAuditsById Delete CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id auditId
	@param parentId campaignId
	@return ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest
*/
func (a *CampaignAuditsAPIService) DeleteMarketingCampaignsByParentIdAuditsById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest {
	return ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *CampaignAuditsAPIService) DeleteMarketingCampaignsByParentIdAuditsByIdExecute(r ApiDeleteMarketingCampaignsByParentIdAuditsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.DeleteMarketingCampaignsByParentIdAuditsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdAuditsRequest struct {
	ctx                   context.Context
	ApiService            *CampaignAuditsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsRequest) Execute() ([]CampaignAudit, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdAuditsExecute(r)
}

/*
GetMarketingCampaignsByParentIdAudits Get List of CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId campaignId
	@return ApiGetMarketingCampaignsByParentIdAuditsRequest
*/
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAudits(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdAuditsRequest {
	return ApiGetMarketingCampaignsByParentIdAuditsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []CampaignAudit
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAuditsExecute(r ApiGetMarketingCampaignsByParentIdAuditsRequest) ([]CampaignAudit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CampaignAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.GetMarketingCampaignsByParentIdAudits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdAuditsByIdRequest struct {
	ctx                   context.Context
	ApiService            *CampaignAuditsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) Execute() (*CampaignAudit, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdAuditsByIdExecute(r)
}

/*
GetMarketingCampaignsByParentIdAuditsById Get CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id auditId
	@param parentId campaignId
	@return ApiGetMarketingCampaignsByParentIdAuditsByIdRequest
*/
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAuditsById(ctx context.Context, id int32, parentId int32) ApiGetMarketingCampaignsByParentIdAuditsByIdRequest {
	return ApiGetMarketingCampaignsByParentIdAuditsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return CampaignAudit
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAuditsByIdExecute(r ApiGetMarketingCampaignsByParentIdAuditsByIdRequest) (*CampaignAudit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.GetMarketingCampaignsByParentIdAuditsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsByParentIdAuditsCountRequest struct {
	ctx                   context.Context
	ApiService            *CampaignAuditsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) Fields(fields string) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) Page(page int32) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsByParentIdAuditsCountExecute(r)
}

/*
GetMarketingCampaignsByParentIdAuditsCount Get Count of CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId campaignId
	@return ApiGetMarketingCampaignsByParentIdAuditsCountRequest
*/
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAuditsCount(ctx context.Context, parentId int32) ApiGetMarketingCampaignsByParentIdAuditsCountRequest {
	return ApiGetMarketingCampaignsByParentIdAuditsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CampaignAuditsAPIService) GetMarketingCampaignsByParentIdAuditsCountExecute(r ApiGetMarketingCampaignsByParentIdAuditsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.GetMarketingCampaignsByParentIdAuditsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest struct {
	ctx            context.Context
	ApiService     *CampaignAuditsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest) Execute() (*CampaignAudit, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsByParentIdAuditsByIdExecute(r)
}

/*
PatchMarketingCampaignsByParentIdAuditsById Patch CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id auditId
	@param parentId campaignId
	@return ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest
*/
func (a *CampaignAuditsAPIService) PatchMarketingCampaignsByParentIdAuditsById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest {
	return ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return CampaignAudit
func (a *CampaignAuditsAPIService) PatchMarketingCampaignsByParentIdAuditsByIdExecute(r ApiPatchMarketingCampaignsByParentIdAuditsByIdRequest) (*CampaignAudit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.PatchMarketingCampaignsByParentIdAuditsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsByParentIdAuditsRequest struct {
	ctx           context.Context
	ApiService    *CampaignAuditsAPIService
	parentId      int32
	clientId      *string
	campaignAudit *CampaignAudit
}

func (r ApiPostMarketingCampaignsByParentIdAuditsRequest) ClientId(clientId string) ApiPostMarketingCampaignsByParentIdAuditsRequest {
	r.clientId = &clientId
	return r
}

// campaignAudit
func (r ApiPostMarketingCampaignsByParentIdAuditsRequest) CampaignAudit(campaignAudit CampaignAudit) ApiPostMarketingCampaignsByParentIdAuditsRequest {
	r.campaignAudit = &campaignAudit
	return r
}

func (r ApiPostMarketingCampaignsByParentIdAuditsRequest) Execute() (*CampaignAudit, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsByParentIdAuditsExecute(r)
}

/*
PostMarketingCampaignsByParentIdAudits Post CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId campaignId
	@return ApiPostMarketingCampaignsByParentIdAuditsRequest
*/
func (a *CampaignAuditsAPIService) PostMarketingCampaignsByParentIdAudits(ctx context.Context, parentId int32) ApiPostMarketingCampaignsByParentIdAuditsRequest {
	return ApiPostMarketingCampaignsByParentIdAuditsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return CampaignAudit
func (a *CampaignAuditsAPIService) PostMarketingCampaignsByParentIdAuditsExecute(r ApiPostMarketingCampaignsByParentIdAuditsRequest) (*CampaignAudit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.PostMarketingCampaignsByParentIdAudits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignAudit == nil {
		return localVarReturnValue, nil, reportError("campaignAudit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignAudit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsByParentIdAuditsByIdRequest struct {
	ctx           context.Context
	ApiService    *CampaignAuditsAPIService
	id            int32
	parentId      int32
	clientId      *string
	campaignAudit *CampaignAudit
}

func (r ApiPutMarketingCampaignsByParentIdAuditsByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsByParentIdAuditsByIdRequest {
	r.clientId = &clientId
	return r
}

// campaignAudit
func (r ApiPutMarketingCampaignsByParentIdAuditsByIdRequest) CampaignAudit(campaignAudit CampaignAudit) ApiPutMarketingCampaignsByParentIdAuditsByIdRequest {
	r.campaignAudit = &campaignAudit
	return r
}

func (r ApiPutMarketingCampaignsByParentIdAuditsByIdRequest) Execute() (*CampaignAudit, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsByParentIdAuditsByIdExecute(r)
}

/*
PutMarketingCampaignsByParentIdAuditsById Put CampaignAudit

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id auditId
	@param parentId campaignId
	@return ApiPutMarketingCampaignsByParentIdAuditsByIdRequest
*/
func (a *CampaignAuditsAPIService) PutMarketingCampaignsByParentIdAuditsById(ctx context.Context, id int32, parentId int32) ApiPutMarketingCampaignsByParentIdAuditsByIdRequest {
	return ApiPutMarketingCampaignsByParentIdAuditsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return CampaignAudit
func (a *CampaignAuditsAPIService) PutMarketingCampaignsByParentIdAuditsByIdExecute(r ApiPutMarketingCampaignsByParentIdAuditsByIdRequest) (*CampaignAudit, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignAudit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignAuditsAPIService.PutMarketingCampaignsByParentIdAuditsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/{parentId}/audits/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignAudit == nil {
		return localVarReturnValue, nil, reportError("campaignAudit is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignAudit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
