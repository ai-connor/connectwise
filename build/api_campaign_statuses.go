/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CampaignStatusesAPIService CampaignStatusesAPI service
type CampaignStatusesAPIService service

type ApiDeleteMarketingCampaignsStatusesByIdRequest struct {
	ctx        context.Context
	ApiService *CampaignStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteMarketingCampaignsStatusesByIdRequest) ClientId(clientId string) ApiDeleteMarketingCampaignsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingCampaignsStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingCampaignsStatusesByIdExecute(r)
}

/*
DeleteMarketingCampaignsStatusesById Delete CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiDeleteMarketingCampaignsStatusesByIdRequest
*/
func (a *CampaignStatusesAPIService) DeleteMarketingCampaignsStatusesById(ctx context.Context, id int32) ApiDeleteMarketingCampaignsStatusesByIdRequest {
	return ApiDeleteMarketingCampaignsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CampaignStatusesAPIService) DeleteMarketingCampaignsStatusesByIdExecute(r ApiDeleteMarketingCampaignsStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.DeleteMarketingCampaignsStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsStatusesRequest struct {
	ctx                   context.Context
	ApiService            *CampaignStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsStatusesRequest) ClientId(clientId string) ApiGetMarketingCampaignsStatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) Conditions(conditions string) ApiGetMarketingCampaignsStatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsStatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsStatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) Fields(fields string) ApiGetMarketingCampaignsStatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) Page(page int32) ApiGetMarketingCampaignsStatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsStatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) PageId(pageId int32) ApiGetMarketingCampaignsStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsStatusesRequest) Execute() ([]CampaignStatus, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsStatusesExecute(r)
}

/*
GetMarketingCampaignsStatuses Get List of CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetMarketingCampaignsStatusesRequest
*/
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatuses(ctx context.Context) ApiGetMarketingCampaignsStatusesRequest {
	return ApiGetMarketingCampaignsStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CampaignStatus
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatusesExecute(r ApiGetMarketingCampaignsStatusesRequest) ([]CampaignStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CampaignStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.GetMarketingCampaignsStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsStatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *CampaignStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) ClientId(clientId string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) Conditions(conditions string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) Fields(fields string) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) Page(page int32) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) PageId(pageId int32) ApiGetMarketingCampaignsStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsStatusesByIdRequest) Execute() (*CampaignStatus, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsStatusesByIdExecute(r)
}

/*
GetMarketingCampaignsStatusesById Get CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetMarketingCampaignsStatusesByIdRequest
*/
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatusesById(ctx context.Context, id int32) ApiGetMarketingCampaignsStatusesByIdRequest {
	return ApiGetMarketingCampaignsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CampaignStatus
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatusesByIdExecute(r ApiGetMarketingCampaignsStatusesByIdRequest) (*CampaignStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.GetMarketingCampaignsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingCampaignsStatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *CampaignStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) ClientId(clientId string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) Conditions(conditions string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) ChildConditions(childConditions string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) OrderBy(orderBy string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) Fields(fields string) ApiGetMarketingCampaignsStatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) Page(page int32) ApiGetMarketingCampaignsStatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) PageSize(pageSize int32) ApiGetMarketingCampaignsStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) PageId(pageId int32) ApiGetMarketingCampaignsStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingCampaignsStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingCampaignsStatusesCountExecute(r)
}

/*
GetMarketingCampaignsStatusesCount Get Count of CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetMarketingCampaignsStatusesCountRequest
*/
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatusesCount(ctx context.Context) ApiGetMarketingCampaignsStatusesCountRequest {
	return ApiGetMarketingCampaignsStatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CampaignStatusesAPIService) GetMarketingCampaignsStatusesCountExecute(r ApiGetMarketingCampaignsStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.GetMarketingCampaignsStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingCampaignsStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *CampaignStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchMarketingCampaignsStatusesByIdRequest) ClientId(clientId string) ApiPatchMarketingCampaignsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingCampaignsStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingCampaignsStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingCampaignsStatusesByIdRequest) Execute() (*CampaignStatus, *http.Response, error) {
	return r.ApiService.PatchMarketingCampaignsStatusesByIdExecute(r)
}

/*
PatchMarketingCampaignsStatusesById Patch CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPatchMarketingCampaignsStatusesByIdRequest
*/
func (a *CampaignStatusesAPIService) PatchMarketingCampaignsStatusesById(ctx context.Context, id int32) ApiPatchMarketingCampaignsStatusesByIdRequest {
	return ApiPatchMarketingCampaignsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CampaignStatus
func (a *CampaignStatusesAPIService) PatchMarketingCampaignsStatusesByIdExecute(r ApiPatchMarketingCampaignsStatusesByIdRequest) (*CampaignStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.PatchMarketingCampaignsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingCampaignsStatusesRequest struct {
	ctx            context.Context
	ApiService     *CampaignStatusesAPIService
	clientId       *string
	campaignStatus *CampaignStatus
}

func (r ApiPostMarketingCampaignsStatusesRequest) ClientId(clientId string) ApiPostMarketingCampaignsStatusesRequest {
	r.clientId = &clientId
	return r
}

// campaignStatus
func (r ApiPostMarketingCampaignsStatusesRequest) CampaignStatus(campaignStatus CampaignStatus) ApiPostMarketingCampaignsStatusesRequest {
	r.campaignStatus = &campaignStatus
	return r
}

func (r ApiPostMarketingCampaignsStatusesRequest) Execute() (*CampaignStatus, *http.Response, error) {
	return r.ApiService.PostMarketingCampaignsStatusesExecute(r)
}

/*
PostMarketingCampaignsStatuses Post CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostMarketingCampaignsStatusesRequest
*/
func (a *CampaignStatusesAPIService) PostMarketingCampaignsStatuses(ctx context.Context) ApiPostMarketingCampaignsStatusesRequest {
	return ApiPostMarketingCampaignsStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CampaignStatus
func (a *CampaignStatusesAPIService) PostMarketingCampaignsStatusesExecute(r ApiPostMarketingCampaignsStatusesRequest) (*CampaignStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.PostMarketingCampaignsStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignStatus == nil {
		return localVarReturnValue, nil, reportError("campaignStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingCampaignsStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *CampaignStatusesAPIService
	id             int32
	clientId       *string
	campaignStatus *CampaignStatus
}

func (r ApiPutMarketingCampaignsStatusesByIdRequest) ClientId(clientId string) ApiPutMarketingCampaignsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// campaignStatus
func (r ApiPutMarketingCampaignsStatusesByIdRequest) CampaignStatus(campaignStatus CampaignStatus) ApiPutMarketingCampaignsStatusesByIdRequest {
	r.campaignStatus = &campaignStatus
	return r
}

func (r ApiPutMarketingCampaignsStatusesByIdRequest) Execute() (*CampaignStatus, *http.Response, error) {
	return r.ApiService.PutMarketingCampaignsStatusesByIdExecute(r)
}

/*
PutMarketingCampaignsStatusesById Put CampaignStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPutMarketingCampaignsStatusesByIdRequest
*/
func (a *CampaignStatusesAPIService) PutMarketingCampaignsStatusesById(ctx context.Context, id int32) ApiPutMarketingCampaignsStatusesByIdRequest {
	return ApiPutMarketingCampaignsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CampaignStatus
func (a *CampaignStatusesAPIService) PutMarketingCampaignsStatusesByIdExecute(r ApiPutMarketingCampaignsStatusesByIdRequest) (*CampaignStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CampaignStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CampaignStatusesAPIService.PutMarketingCampaignsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/campaigns/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.campaignStatus == nil {
		return localVarReturnValue, nil, reportError("campaignStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.campaignStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
