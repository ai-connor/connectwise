/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CommissionsAPIService CommissionsAPI service
type CommissionsAPIService service

type ApiDeleteSalesCommissionsByIdRequest struct {
	ctx        context.Context
	ApiService *CommissionsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSalesCommissionsByIdRequest) ClientId(clientId string) ApiDeleteSalesCommissionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesCommissionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesCommissionsByIdExecute(r)
}

/*
DeleteSalesCommissionsById Delete Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiDeleteSalesCommissionsByIdRequest
*/
func (a *CommissionsAPIService) DeleteSalesCommissionsById(ctx context.Context, id int32) ApiDeleteSalesCommissionsByIdRequest {
	return ApiDeleteSalesCommissionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CommissionsAPIService) DeleteSalesCommissionsByIdExecute(r ApiDeleteSalesCommissionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.DeleteSalesCommissionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesCommissionsRequest struct {
	ctx                   context.Context
	ApiService            *CommissionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesCommissionsRequest) ClientId(clientId string) ApiGetSalesCommissionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesCommissionsRequest) Conditions(conditions string) ApiGetSalesCommissionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesCommissionsRequest) ChildConditions(childConditions string) ApiGetSalesCommissionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesCommissionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesCommissionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesCommissionsRequest) OrderBy(orderBy string) ApiGetSalesCommissionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesCommissionsRequest) Fields(fields string) ApiGetSalesCommissionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesCommissionsRequest) Page(page int32) ApiGetSalesCommissionsRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesCommissionsRequest) PageSize(pageSize int32) ApiGetSalesCommissionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesCommissionsRequest) PageId(pageId int32) ApiGetSalesCommissionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesCommissionsRequest) Execute() ([]Commission, *http.Response, error) {
	return r.ApiService.GetSalesCommissionsExecute(r)
}

/*
GetSalesCommissions Get List of Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesCommissionsRequest
*/
func (a *CommissionsAPIService) GetSalesCommissions(ctx context.Context) ApiGetSalesCommissionsRequest {
	return ApiGetSalesCommissionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Commission
func (a *CommissionsAPIService) GetSalesCommissionsExecute(r ApiGetSalesCommissionsRequest) ([]Commission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Commission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.GetSalesCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesCommissionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *CommissionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesCommissionsByIdRequest) ClientId(clientId string) ApiGetSalesCommissionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) Conditions(conditions string) ApiGetSalesCommissionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) ChildConditions(childConditions string) ApiGetSalesCommissionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesCommissionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) OrderBy(orderBy string) ApiGetSalesCommissionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) Fields(fields string) ApiGetSalesCommissionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) Page(page int32) ApiGetSalesCommissionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) PageSize(pageSize int32) ApiGetSalesCommissionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) PageId(pageId int32) ApiGetSalesCommissionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesCommissionsByIdRequest) Execute() (*Commission, *http.Response, error) {
	return r.ApiService.GetSalesCommissionsByIdExecute(r)
}

/*
GetSalesCommissionsById Get Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiGetSalesCommissionsByIdRequest
*/
func (a *CommissionsAPIService) GetSalesCommissionsById(ctx context.Context, id int32) ApiGetSalesCommissionsByIdRequest {
	return ApiGetSalesCommissionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Commission
func (a *CommissionsAPIService) GetSalesCommissionsByIdExecute(r ApiGetSalesCommissionsByIdRequest) (*Commission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Commission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.GetSalesCommissionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesCommissionsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *CommissionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) ClientId(clientId string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) Conditions(conditions string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) OrderBy(orderBy string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) Fields(fields string) ApiGetSalesCommissionsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) Page(page int32) ApiGetSalesCommissionsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) PageSize(pageSize int32) ApiGetSalesCommissionsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) PageId(pageId int32) ApiGetSalesCommissionsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesCommissionsByIdUsagesExecute(r)
}

/*
GetSalesCommissionsByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiGetSalesCommissionsByIdUsagesRequest
*/
func (a *CommissionsAPIService) GetSalesCommissionsByIdUsages(ctx context.Context, id int32) ApiGetSalesCommissionsByIdUsagesRequest {
	return ApiGetSalesCommissionsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CommissionsAPIService) GetSalesCommissionsByIdUsagesExecute(r ApiGetSalesCommissionsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.GetSalesCommissionsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesCommissionsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *CommissionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) ClientId(clientId string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) Conditions(conditions string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) Fields(fields string) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) Page(page int32) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) PageId(pageId int32) ApiGetSalesCommissionsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesCommissionsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesCommissionsByIdUsagesListExecute(r)
}

/*
GetSalesCommissionsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiGetSalesCommissionsByIdUsagesListRequest
*/
func (a *CommissionsAPIService) GetSalesCommissionsByIdUsagesList(ctx context.Context, id int32) ApiGetSalesCommissionsByIdUsagesListRequest {
	return ApiGetSalesCommissionsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CommissionsAPIService) GetSalesCommissionsByIdUsagesListExecute(r ApiGetSalesCommissionsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.GetSalesCommissionsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesCommissionsCountRequest struct {
	ctx                   context.Context
	ApiService            *CommissionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesCommissionsCountRequest) ClientId(clientId string) ApiGetSalesCommissionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesCommissionsCountRequest) Conditions(conditions string) ApiGetSalesCommissionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesCommissionsCountRequest) ChildConditions(childConditions string) ApiGetSalesCommissionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesCommissionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesCommissionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesCommissionsCountRequest) OrderBy(orderBy string) ApiGetSalesCommissionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesCommissionsCountRequest) Fields(fields string) ApiGetSalesCommissionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesCommissionsCountRequest) Page(page int32) ApiGetSalesCommissionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesCommissionsCountRequest) PageSize(pageSize int32) ApiGetSalesCommissionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesCommissionsCountRequest) PageId(pageId int32) ApiGetSalesCommissionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesCommissionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesCommissionsCountExecute(r)
}

/*
GetSalesCommissionsCount Get Count of Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesCommissionsCountRequest
*/
func (a *CommissionsAPIService) GetSalesCommissionsCount(ctx context.Context) ApiGetSalesCommissionsCountRequest {
	return ApiGetSalesCommissionsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CommissionsAPIService) GetSalesCommissionsCountExecute(r ApiGetSalesCommissionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.GetSalesCommissionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesCommissionsByIdRequest struct {
	ctx            context.Context
	ApiService     *CommissionsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesCommissionsByIdRequest) ClientId(clientId string) ApiPatchSalesCommissionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesCommissionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesCommissionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesCommissionsByIdRequest) Execute() (*Commission, *http.Response, error) {
	return r.ApiService.PatchSalesCommissionsByIdExecute(r)
}

/*
PatchSalesCommissionsById Patch Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiPatchSalesCommissionsByIdRequest
*/
func (a *CommissionsAPIService) PatchSalesCommissionsById(ctx context.Context, id int32) ApiPatchSalesCommissionsByIdRequest {
	return ApiPatchSalesCommissionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Commission
func (a *CommissionsAPIService) PatchSalesCommissionsByIdExecute(r ApiPatchSalesCommissionsByIdRequest) (*Commission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Commission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.PatchSalesCommissionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesCommissionsRequest struct {
	ctx        context.Context
	ApiService *CommissionsAPIService
	clientId   *string
	commission *Commission
}

func (r ApiPostSalesCommissionsRequest) ClientId(clientId string) ApiPostSalesCommissionsRequest {
	r.clientId = &clientId
	return r
}

// commission
func (r ApiPostSalesCommissionsRequest) Commission(commission Commission) ApiPostSalesCommissionsRequest {
	r.commission = &commission
	return r
}

func (r ApiPostSalesCommissionsRequest) Execute() (*Commission, *http.Response, error) {
	return r.ApiService.PostSalesCommissionsExecute(r)
}

/*
PostSalesCommissions Post Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSalesCommissionsRequest
*/
func (a *CommissionsAPIService) PostSalesCommissions(ctx context.Context) ApiPostSalesCommissionsRequest {
	return ApiPostSalesCommissionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Commission
func (a *CommissionsAPIService) PostSalesCommissionsExecute(r ApiPostSalesCommissionsRequest) (*Commission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Commission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.PostSalesCommissions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.commission == nil {
		return localVarReturnValue, nil, reportError("commission is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.commission
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesCommissionsByIdRequest struct {
	ctx        context.Context
	ApiService *CommissionsAPIService
	id         int32
	clientId   *string
	commission *Commission
}

func (r ApiPutSalesCommissionsByIdRequest) ClientId(clientId string) ApiPutSalesCommissionsByIdRequest {
	r.clientId = &clientId
	return r
}

// commission
func (r ApiPutSalesCommissionsByIdRequest) Commission(commission Commission) ApiPutSalesCommissionsByIdRequest {
	r.commission = &commission
	return r
}

func (r ApiPutSalesCommissionsByIdRequest) Execute() (*Commission, *http.Response, error) {
	return r.ApiService.PutSalesCommissionsByIdExecute(r)
}

/*
PutSalesCommissionsById Put Commission

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id commissionId
	@return ApiPutSalesCommissionsByIdRequest
*/
func (a *CommissionsAPIService) PutSalesCommissionsById(ctx context.Context, id int32) ApiPutSalesCommissionsByIdRequest {
	return ApiPutSalesCommissionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Commission
func (a *CommissionsAPIService) PutSalesCommissionsByIdExecute(r ApiPutSalesCommissionsByIdRequest) (*Commission, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Commission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CommissionsAPIService.PutSalesCommissionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/commissions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.commission == nil {
		return localVarReturnValue, nil, reportError("commission is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.commission
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
