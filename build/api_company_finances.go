/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyFinancesAPIService CompanyFinancesAPI service
type CompanyFinancesAPIService service

type ApiGetFinanceCompanyFinanceRequest struct {
	ctx                   context.Context
	ApiService            *CompanyFinancesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceCompanyFinanceRequest) ClientId(clientId string) ApiGetFinanceCompanyFinanceRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) Conditions(conditions string) ApiGetFinanceCompanyFinanceRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) ChildConditions(childConditions string) ApiGetFinanceCompanyFinanceRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCompanyFinanceRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) OrderBy(orderBy string) ApiGetFinanceCompanyFinanceRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) Fields(fields string) ApiGetFinanceCompanyFinanceRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) Page(page int32) ApiGetFinanceCompanyFinanceRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) PageSize(pageSize int32) ApiGetFinanceCompanyFinanceRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) PageId(pageId int32) ApiGetFinanceCompanyFinanceRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceCompanyFinanceRequest) Execute() ([]CompanyFinance, *http.Response, error) {
	return r.ApiService.GetFinanceCompanyFinanceExecute(r)
}

/*
GetFinanceCompanyFinance Get List of CompanyFinances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceCompanyFinanceRequest
*/
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinance(ctx context.Context) ApiGetFinanceCompanyFinanceRequest {
	return ApiGetFinanceCompanyFinanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyFinance
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinanceExecute(r ApiGetFinanceCompanyFinanceRequest) ([]CompanyFinance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyFinance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyFinancesAPIService.GetFinanceCompanyFinance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/companyFinance/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCompanyFinanceByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyFinancesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) ClientId(clientId string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) Conditions(conditions string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) ChildConditions(childConditions string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) OrderBy(orderBy string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) Fields(fields string) ApiGetFinanceCompanyFinanceByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) Page(page int32) ApiGetFinanceCompanyFinanceByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) PageSize(pageSize int32) ApiGetFinanceCompanyFinanceByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) PageId(pageId int32) ApiGetFinanceCompanyFinanceByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceCompanyFinanceByIdRequest) Execute() (*CompanyFinance, *http.Response, error) {
	return r.ApiService.GetFinanceCompanyFinanceByIdExecute(r)
}

/*
GetFinanceCompanyFinanceById Get CompanyFinances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@return ApiGetFinanceCompanyFinanceByIdRequest
*/
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinanceById(ctx context.Context, id int32) ApiGetFinanceCompanyFinanceByIdRequest {
	return ApiGetFinanceCompanyFinanceByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyFinance
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinanceByIdExecute(r ApiGetFinanceCompanyFinanceByIdRequest) (*CompanyFinance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyFinance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyFinancesAPIService.GetFinanceCompanyFinanceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/companyFinance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceCompanyFinanceCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyFinancesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceCompanyFinanceCountRequest) ClientId(clientId string) ApiGetFinanceCompanyFinanceCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) Conditions(conditions string) ApiGetFinanceCompanyFinanceCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) ChildConditions(childConditions string) ApiGetFinanceCompanyFinanceCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceCompanyFinanceCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) OrderBy(orderBy string) ApiGetFinanceCompanyFinanceCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) Fields(fields string) ApiGetFinanceCompanyFinanceCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) Page(page int32) ApiGetFinanceCompanyFinanceCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) PageSize(pageSize int32) ApiGetFinanceCompanyFinanceCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) PageId(pageId int32) ApiGetFinanceCompanyFinanceCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceCompanyFinanceCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceCompanyFinanceCountExecute(r)
}

/*
GetFinanceCompanyFinanceCount Get Count of CompanyFinances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceCompanyFinanceCountRequest
*/
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinanceCount(ctx context.Context) ApiGetFinanceCompanyFinanceCountRequest {
	return ApiGetFinanceCompanyFinanceCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyFinancesAPIService) GetFinanceCompanyFinanceCountExecute(r ApiGetFinanceCompanyFinanceCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyFinancesAPIService.GetFinanceCompanyFinanceCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/companyFinance/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceCompanyFinanceByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyFinancesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceCompanyFinanceByIdRequest) ClientId(clientId string) ApiPatchFinanceCompanyFinanceByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceCompanyFinanceByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceCompanyFinanceByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceCompanyFinanceByIdRequest) Execute() (*CompanyFinance, *http.Response, error) {
	return r.ApiService.PatchFinanceCompanyFinanceByIdExecute(r)
}

/*
PatchFinanceCompanyFinanceById Patch CompanyFinances

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@return ApiPatchFinanceCompanyFinanceByIdRequest
*/
func (a *CompanyFinancesAPIService) PatchFinanceCompanyFinanceById(ctx context.Context, id int32) ApiPatchFinanceCompanyFinanceByIdRequest {
	return ApiPatchFinanceCompanyFinanceByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyFinance
func (a *CompanyFinancesAPIService) PatchFinanceCompanyFinanceByIdExecute(r ApiPatchFinanceCompanyFinanceByIdRequest) (*CompanyFinance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyFinance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyFinancesAPIService.PatchFinanceCompanyFinanceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/companyFinance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceCompanyFinanceByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyFinancesAPIService
	id             int32
	clientId       *string
	companyFinance *CompanyFinance
}

func (r ApiPutFinanceCompanyFinanceByIdRequest) ClientId(clientId string) ApiPutFinanceCompanyFinanceByIdRequest {
	r.clientId = &clientId
	return r
}

// CompanyFinance
func (r ApiPutFinanceCompanyFinanceByIdRequest) CompanyFinance(companyFinance CompanyFinance) ApiPutFinanceCompanyFinanceByIdRequest {
	r.companyFinance = &companyFinance
	return r
}

func (r ApiPutFinanceCompanyFinanceByIdRequest) Execute() (*CompanyFinance, *http.Response, error) {
	return r.ApiService.PutFinanceCompanyFinanceByIdExecute(r)
}

/*
PutFinanceCompanyFinanceById Put CompanyFinance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@return ApiPutFinanceCompanyFinanceByIdRequest
*/
func (a *CompanyFinancesAPIService) PutFinanceCompanyFinanceById(ctx context.Context, id int32) ApiPutFinanceCompanyFinanceByIdRequest {
	return ApiPutFinanceCompanyFinanceByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyFinance
func (a *CompanyFinancesAPIService) PutFinanceCompanyFinanceByIdExecute(r ApiPutFinanceCompanyFinanceByIdRequest) (*CompanyFinance, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyFinance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyFinancesAPIService.PutFinanceCompanyFinanceById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/companyFinance/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyFinance == nil {
		return localVarReturnValue, nil, reportError("companyFinance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyFinance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
