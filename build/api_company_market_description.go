/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyMarketDescriptionAPIService CompanyMarketDescriptionAPI service
type CompanyMarketDescriptionAPIService service

type ApiDeleteCompanyMarketDescriptionsByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyMarketDescriptionAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyMarketDescriptionsByIdRequest) ClientId(clientId string) ApiDeleteCompanyMarketDescriptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyMarketDescriptionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyMarketDescriptionsByIdExecute(r)
}

/*
DeleteCompanyMarketDescriptionsById Delete MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiDeleteCompanyMarketDescriptionsByIdRequest
*/
func (a *CompanyMarketDescriptionAPIService) DeleteCompanyMarketDescriptionsById(ctx context.Context, id int32) ApiDeleteCompanyMarketDescriptionsByIdRequest {
	return ApiDeleteCompanyMarketDescriptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CompanyMarketDescriptionAPIService) DeleteCompanyMarketDescriptionsByIdExecute(r ApiDeleteCompanyMarketDescriptionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.DeleteCompanyMarketDescriptionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyMarketDescriptionsRequest struct {
	ctx                   context.Context
	ApiService            *CompanyMarketDescriptionAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyMarketDescriptionsRequest) ClientId(clientId string) ApiGetCompanyMarketDescriptionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) Conditions(conditions string) ApiGetCompanyMarketDescriptionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) ChildConditions(childConditions string) ApiGetCompanyMarketDescriptionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyMarketDescriptionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) OrderBy(orderBy string) ApiGetCompanyMarketDescriptionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) Fields(fields string) ApiGetCompanyMarketDescriptionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) Page(page int32) ApiGetCompanyMarketDescriptionsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) PageSize(pageSize int32) ApiGetCompanyMarketDescriptionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) PageId(pageId int32) ApiGetCompanyMarketDescriptionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyMarketDescriptionsRequest) Execute() ([]MarketDescription, *http.Response, error) {
	return r.ApiService.GetCompanyMarketDescriptionsExecute(r)
}

/*
GetCompanyMarketDescriptions Get List of MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyMarketDescriptionsRequest
*/
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptions(ctx context.Context) ApiGetCompanyMarketDescriptionsRequest {
	return ApiGetCompanyMarketDescriptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MarketDescription
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsExecute(r ApiGetCompanyMarketDescriptionsRequest) ([]MarketDescription, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MarketDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.GetCompanyMarketDescriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyMarketDescriptionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyMarketDescriptionAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) ClientId(clientId string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) Conditions(conditions string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) OrderBy(orderBy string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) Fields(fields string) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) Page(page int32) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) PageSize(pageSize int32) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) PageId(pageId int32) ApiGetCompanyMarketDescriptionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdRequest) Execute() (*MarketDescription, *http.Response, error) {
	return r.ApiService.GetCompanyMarketDescriptionsByIdExecute(r)
}

/*
GetCompanyMarketDescriptionsById Get MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiGetCompanyMarketDescriptionsByIdRequest
*/
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsById(ctx context.Context, id int32) ApiGetCompanyMarketDescriptionsByIdRequest {
	return ApiGetCompanyMarketDescriptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MarketDescription
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsByIdExecute(r ApiGetCompanyMarketDescriptionsByIdRequest) (*MarketDescription, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.GetCompanyMarketDescriptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyMarketDescriptionsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyMarketDescriptionAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) Fields(fields string) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) Page(page int32) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyMarketDescriptionsByIdUsagesExecute(r)
}

/*
GetCompanyMarketDescriptionsByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiGetCompanyMarketDescriptionsByIdUsagesRequest
*/
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsByIdUsages(ctx context.Context, id int32) ApiGetCompanyMarketDescriptionsByIdUsagesRequest {
	return ApiGetCompanyMarketDescriptionsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsByIdUsagesExecute(r ApiGetCompanyMarketDescriptionsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.GetCompanyMarketDescriptionsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyMarketDescriptionsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *CompanyMarketDescriptionAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) Fields(fields string) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) Page(page int32) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyMarketDescriptionsByIdUsagesListExecute(r)
}

/*
GetCompanyMarketDescriptionsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiGetCompanyMarketDescriptionsByIdUsagesListRequest
*/
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyMarketDescriptionsByIdUsagesListRequest {
	return ApiGetCompanyMarketDescriptionsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsByIdUsagesListExecute(r ApiGetCompanyMarketDescriptionsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.GetCompanyMarketDescriptionsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyMarketDescriptionsCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyMarketDescriptionAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) ClientId(clientId string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) Conditions(conditions string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) ChildConditions(childConditions string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) OrderBy(orderBy string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) Fields(fields string) ApiGetCompanyMarketDescriptionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) Page(page int32) ApiGetCompanyMarketDescriptionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) PageSize(pageSize int32) ApiGetCompanyMarketDescriptionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) PageId(pageId int32) ApiGetCompanyMarketDescriptionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyMarketDescriptionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyMarketDescriptionsCountExecute(r)
}

/*
GetCompanyMarketDescriptionsCount Get Count of MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyMarketDescriptionsCountRequest
*/
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsCount(ctx context.Context) ApiGetCompanyMarketDescriptionsCountRequest {
	return ApiGetCompanyMarketDescriptionsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyMarketDescriptionAPIService) GetCompanyMarketDescriptionsCountExecute(r ApiGetCompanyMarketDescriptionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.GetCompanyMarketDescriptionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyMarketDescriptionsByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyMarketDescriptionAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyMarketDescriptionsByIdRequest) ClientId(clientId string) ApiPatchCompanyMarketDescriptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyMarketDescriptionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyMarketDescriptionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyMarketDescriptionsByIdRequest) Execute() (*MarketDescription, *http.Response, error) {
	return r.ApiService.PatchCompanyMarketDescriptionsByIdExecute(r)
}

/*
PatchCompanyMarketDescriptionsById Patch MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiPatchCompanyMarketDescriptionsByIdRequest
*/
func (a *CompanyMarketDescriptionAPIService) PatchCompanyMarketDescriptionsById(ctx context.Context, id int32) ApiPatchCompanyMarketDescriptionsByIdRequest {
	return ApiPatchCompanyMarketDescriptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MarketDescription
func (a *CompanyMarketDescriptionAPIService) PatchCompanyMarketDescriptionsByIdExecute(r ApiPatchCompanyMarketDescriptionsByIdRequest) (*MarketDescription, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.PatchCompanyMarketDescriptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyMarketDescriptionsRequest struct {
	ctx               context.Context
	ApiService        *CompanyMarketDescriptionAPIService
	clientId          *string
	marketDescription *MarketDescription
}

func (r ApiPostCompanyMarketDescriptionsRequest) ClientId(clientId string) ApiPostCompanyMarketDescriptionsRequest {
	r.clientId = &clientId
	return r
}

// marketDescription
func (r ApiPostCompanyMarketDescriptionsRequest) MarketDescription(marketDescription MarketDescription) ApiPostCompanyMarketDescriptionsRequest {
	r.marketDescription = &marketDescription
	return r
}

func (r ApiPostCompanyMarketDescriptionsRequest) Execute() (*MarketDescription, *http.Response, error) {
	return r.ApiService.PostCompanyMarketDescriptionsExecute(r)
}

/*
PostCompanyMarketDescriptions Post MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyMarketDescriptionsRequest
*/
func (a *CompanyMarketDescriptionAPIService) PostCompanyMarketDescriptions(ctx context.Context) ApiPostCompanyMarketDescriptionsRequest {
	return ApiPostCompanyMarketDescriptionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MarketDescription
func (a *CompanyMarketDescriptionAPIService) PostCompanyMarketDescriptionsExecute(r ApiPostCompanyMarketDescriptionsRequest) (*MarketDescription, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.PostCompanyMarketDescriptions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.marketDescription == nil {
		return localVarReturnValue, nil, reportError("marketDescription is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.marketDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyMarketDescriptionsByIdRequest struct {
	ctx               context.Context
	ApiService        *CompanyMarketDescriptionAPIService
	id                int32
	clientId          *string
	marketDescription *MarketDescription
}

func (r ApiPutCompanyMarketDescriptionsByIdRequest) ClientId(clientId string) ApiPutCompanyMarketDescriptionsByIdRequest {
	r.clientId = &clientId
	return r
}

// marketDescription
func (r ApiPutCompanyMarketDescriptionsByIdRequest) MarketDescription(marketDescription MarketDescription) ApiPutCompanyMarketDescriptionsByIdRequest {
	r.marketDescription = &marketDescription
	return r
}

func (r ApiPutCompanyMarketDescriptionsByIdRequest) Execute() (*MarketDescription, *http.Response, error) {
	return r.ApiService.PutCompanyMarketDescriptionsByIdExecute(r)
}

/*
PutCompanyMarketDescriptionsById Put MarketDescription

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id marketDescriptionId
	@return ApiPutCompanyMarketDescriptionsByIdRequest
*/
func (a *CompanyMarketDescriptionAPIService) PutCompanyMarketDescriptionsById(ctx context.Context, id int32) ApiPutCompanyMarketDescriptionsByIdRequest {
	return ApiPutCompanyMarketDescriptionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MarketDescription
func (a *CompanyMarketDescriptionAPIService) PutCompanyMarketDescriptionsByIdExecute(r ApiPutCompanyMarketDescriptionsByIdRequest) (*MarketDescription, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketDescription
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyMarketDescriptionAPIService.PutCompanyMarketDescriptionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/marketDescriptions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.marketDescription == nil {
		return localVarReturnValue, nil, reportError("marketDescription is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.marketDescription
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
