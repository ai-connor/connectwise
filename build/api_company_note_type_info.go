/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyNoteTypeInfoAPIService CompanyNoteTypeInfoAPI service
type CompanyNoteTypeInfoAPIService service

type ApiGetCompanyNoteTypesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypeInfoAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) ClientId(clientId string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) Conditions(conditions string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) Fields(fields string) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) Page(page int32) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) PageId(pageId int32) ApiGetCompanyNoteTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesByIdInfoRequest) Execute() (*CompanyNoteTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesByIdInfoExecute(r)
}

/*
GetCompanyNoteTypesByIdInfo Get CompanyNoteTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteTypeId
	@return ApiGetCompanyNoteTypesByIdInfoRequest
*/
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesByIdInfo(ctx context.Context, id int32) ApiGetCompanyNoteTypesByIdInfoRequest {
	return ApiGetCompanyNoteTypesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyNoteTypeInfo
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesByIdInfoExecute(r ApiGetCompanyNoteTypesByIdInfoRequest) (*CompanyNoteTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyNoteTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypeInfoAPIService.GetCompanyNoteTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyNoteTypesCountInfoRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypeInfoAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) ClientId(clientId string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) Conditions(conditions string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) Fields(fields string) ApiGetCompanyNoteTypesCountInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) Page(page int32) ApiGetCompanyNoteTypesCountInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesCountInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) PageId(pageId int32) ApiGetCompanyNoteTypesCountInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesCountInfoRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesCountInfoExecute(r)
}

/*
GetCompanyNoteTypesCountInfo Get Count of CompanyNoteTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyNoteTypesCountInfoRequest
*/
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesCountInfo(ctx context.Context) ApiGetCompanyNoteTypesCountInfoRequest {
	return ApiGetCompanyNoteTypesCountInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesCountInfoExecute(r ApiGetCompanyNoteTypesCountInfoRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypeInfoAPIService.GetCompanyNoteTypesCountInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/count/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyNoteTypesInfoRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypeInfoAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesInfoRequest) ClientId(clientId string) ApiGetCompanyNoteTypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) Conditions(conditions string) ApiGetCompanyNoteTypesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) Fields(fields string) ApiGetCompanyNoteTypesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) Page(page int32) ApiGetCompanyNoteTypesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) PageId(pageId int32) ApiGetCompanyNoteTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesInfoRequest) Execute() ([]CompanyNoteTypeInfo, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesInfoExecute(r)
}

/*
GetCompanyNoteTypesInfo Get List of CompanyNoteTypeInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyNoteTypesInfoRequest
*/
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesInfo(ctx context.Context) ApiGetCompanyNoteTypesInfoRequest {
	return ApiGetCompanyNoteTypesInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyNoteTypeInfo
func (a *CompanyNoteTypeInfoAPIService) GetCompanyNoteTypesInfoExecute(r ApiGetCompanyNoteTypesInfoRequest) ([]CompanyNoteTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyNoteTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypeInfoAPIService.GetCompanyNoteTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
