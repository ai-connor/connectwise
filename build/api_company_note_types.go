/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyNoteTypesAPIService CompanyNoteTypesAPI service
type CompanyNoteTypesAPIService service

type ApiDeleteCompanyNoteTypesByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyNoteTypesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyNoteTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyNoteTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyNoteTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyNoteTypesByIdExecute(r)
}

/*
DeleteCompanyNoteTypesById Delete CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteTypeId
	@return ApiDeleteCompanyNoteTypesByIdRequest
*/
func (a *CompanyNoteTypesAPIService) DeleteCompanyNoteTypesById(ctx context.Context, id int32) ApiDeleteCompanyNoteTypesByIdRequest {
	return ApiDeleteCompanyNoteTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CompanyNoteTypesAPIService) DeleteCompanyNoteTypesByIdExecute(r ApiDeleteCompanyNoteTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.DeleteCompanyNoteTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyNoteTypesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesRequest) ClientId(clientId string) ApiGetCompanyNoteTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesRequest) Conditions(conditions string) ApiGetCompanyNoteTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesRequest) Fields(fields string) ApiGetCompanyNoteTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesRequest) Page(page int32) ApiGetCompanyNoteTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesRequest) PageId(pageId int32) ApiGetCompanyNoteTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesRequest) Execute() ([]CompanyNoteType, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesExecute(r)
}

/*
GetCompanyNoteTypes Get List of CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyNoteTypesRequest
*/
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypes(ctx context.Context) ApiGetCompanyNoteTypesRequest {
	return ApiGetCompanyNoteTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyNoteType
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypesExecute(r ApiGetCompanyNoteTypesRequest) ([]CompanyNoteType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyNoteType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.GetCompanyNoteTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyNoteTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesByIdRequest) ClientId(clientId string) ApiGetCompanyNoteTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) Conditions(conditions string) ApiGetCompanyNoteTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) Fields(fields string) ApiGetCompanyNoteTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) Page(page int32) ApiGetCompanyNoteTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) PageId(pageId int32) ApiGetCompanyNoteTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesByIdRequest) Execute() (*CompanyNoteType, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesByIdExecute(r)
}

/*
GetCompanyNoteTypesById Get CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteTypeId
	@return ApiGetCompanyNoteTypesByIdRequest
*/
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypesById(ctx context.Context, id int32) ApiGetCompanyNoteTypesByIdRequest {
	return ApiGetCompanyNoteTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyNoteType
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypesByIdExecute(r ApiGetCompanyNoteTypesByIdRequest) (*CompanyNoteType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyNoteType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.GetCompanyNoteTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyNoteTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyNoteTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyNoteTypesCountRequest) ClientId(clientId string) ApiGetCompanyNoteTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) Conditions(conditions string) ApiGetCompanyNoteTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyNoteTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyNoteTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyNoteTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) Fields(fields string) ApiGetCompanyNoteTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) Page(page int32) ApiGetCompanyNoteTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyNoteTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) PageId(pageId int32) ApiGetCompanyNoteTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyNoteTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyNoteTypesCountExecute(r)
}

/*
GetCompanyNoteTypesCount Get Count of CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyNoteTypesCountRequest
*/
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypesCount(ctx context.Context) ApiGetCompanyNoteTypesCountRequest {
	return ApiGetCompanyNoteTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyNoteTypesAPIService) GetCompanyNoteTypesCountExecute(r ApiGetCompanyNoteTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.GetCompanyNoteTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyNoteTypesByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyNoteTypesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyNoteTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyNoteTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyNoteTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyNoteTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyNoteTypesByIdRequest) Execute() (*CompanyNoteType, *http.Response, error) {
	return r.ApiService.PatchCompanyNoteTypesByIdExecute(r)
}

/*
PatchCompanyNoteTypesById Patch CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteTypeId
	@return ApiPatchCompanyNoteTypesByIdRequest
*/
func (a *CompanyNoteTypesAPIService) PatchCompanyNoteTypesById(ctx context.Context, id int32) ApiPatchCompanyNoteTypesByIdRequest {
	return ApiPatchCompanyNoteTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyNoteType
func (a *CompanyNoteTypesAPIService) PatchCompanyNoteTypesByIdExecute(r ApiPatchCompanyNoteTypesByIdRequest) (*CompanyNoteType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyNoteType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.PatchCompanyNoteTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyNoteTypesRequest struct {
	ctx             context.Context
	ApiService      *CompanyNoteTypesAPIService
	clientId        *string
	companyNoteType *CompanyNoteType
}

func (r ApiPostCompanyNoteTypesRequest) ClientId(clientId string) ApiPostCompanyNoteTypesRequest {
	r.clientId = &clientId
	return r
}

// noteType
func (r ApiPostCompanyNoteTypesRequest) CompanyNoteType(companyNoteType CompanyNoteType) ApiPostCompanyNoteTypesRequest {
	r.companyNoteType = &companyNoteType
	return r
}

func (r ApiPostCompanyNoteTypesRequest) Execute() (*CompanyNoteType, *http.Response, error) {
	return r.ApiService.PostCompanyNoteTypesExecute(r)
}

/*
PostCompanyNoteTypes Post CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyNoteTypesRequest
*/
func (a *CompanyNoteTypesAPIService) PostCompanyNoteTypes(ctx context.Context) ApiPostCompanyNoteTypesRequest {
	return ApiPostCompanyNoteTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyNoteType
func (a *CompanyNoteTypesAPIService) PostCompanyNoteTypesExecute(r ApiPostCompanyNoteTypesRequest) (*CompanyNoteType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyNoteType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.PostCompanyNoteTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyNoteType == nil {
		return localVarReturnValue, nil, reportError("companyNoteType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyNoteType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyNoteTypesByIdRequest struct {
	ctx             context.Context
	ApiService      *CompanyNoteTypesAPIService
	id              int32
	clientId        *string
	companyNoteType *CompanyNoteType
}

func (r ApiPutCompanyNoteTypesByIdRequest) ClientId(clientId string) ApiPutCompanyNoteTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// noteType
func (r ApiPutCompanyNoteTypesByIdRequest) CompanyNoteType(companyNoteType CompanyNoteType) ApiPutCompanyNoteTypesByIdRequest {
	r.companyNoteType = &companyNoteType
	return r
}

func (r ApiPutCompanyNoteTypesByIdRequest) Execute() (*CompanyNoteType, *http.Response, error) {
	return r.ApiService.PutCompanyNoteTypesByIdExecute(r)
}

/*
PutCompanyNoteTypesById Put CompanyNoteType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id noteTypeId
	@return ApiPutCompanyNoteTypesByIdRequest
*/
func (a *CompanyNoteTypesAPIService) PutCompanyNoteTypesById(ctx context.Context, id int32) ApiPutCompanyNoteTypesByIdRequest {
	return ApiPutCompanyNoteTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyNoteType
func (a *CompanyNoteTypesAPIService) PutCompanyNoteTypesByIdExecute(r ApiPutCompanyNoteTypesByIdRequest) (*CompanyNoteType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyNoteType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyNoteTypesAPIService.PutCompanyNoteTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/noteTypes/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyNoteType == nil {
		return localVarReturnValue, nil, reportError("companyNoteType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyNoteType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
