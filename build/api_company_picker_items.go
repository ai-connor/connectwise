/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyPickerItemsAPIService CompanyPickerItemsAPI service
type CompanyPickerItemsAPIService service

type ApiDeleteCompanyCompanyPickerItemsByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyPickerItemsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyCompanyPickerItemsByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompanyPickerItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompanyPickerItemsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompanyPickerItemsByIdExecute(r)
}

/*
DeleteCompanyCompanyPickerItemsById Delete CompanyPickerItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyPickerItemId
	@return ApiDeleteCompanyCompanyPickerItemsByIdRequest
*/
func (a *CompanyPickerItemsAPIService) DeleteCompanyCompanyPickerItemsById(ctx context.Context, id int32) ApiDeleteCompanyCompanyPickerItemsByIdRequest {
	return ApiDeleteCompanyCompanyPickerItemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CompanyPickerItemsAPIService) DeleteCompanyCompanyPickerItemsByIdExecute(r ApiDeleteCompanyCompanyPickerItemsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.DeleteCompanyCompanyPickerItemsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyPickerItemsRequest struct {
	ctx                   context.Context
	ApiService            *CompanyPickerItemsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompanyPickerItemsRequest) ClientId(clientId string) ApiGetCompanyCompanyPickerItemsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) Conditions(conditions string) ApiGetCompanyCompanyPickerItemsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyPickerItemsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyPickerItemsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) OrderBy(orderBy string) ApiGetCompanyCompanyPickerItemsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) Fields(fields string) ApiGetCompanyCompanyPickerItemsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) Page(page int32) ApiGetCompanyCompanyPickerItemsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) PageSize(pageSize int32) ApiGetCompanyCompanyPickerItemsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) PageId(pageId int32) ApiGetCompanyCompanyPickerItemsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsRequest) Execute() ([]CompanyPickerItem, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyPickerItemsExecute(r)
}

/*
GetCompanyCompanyPickerItems Get List of CompanyPickerItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyCompanyPickerItemsRequest
*/
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItems(ctx context.Context) ApiGetCompanyCompanyPickerItemsRequest {
	return ApiGetCompanyCompanyPickerItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyPickerItem
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItemsExecute(r ApiGetCompanyCompanyPickerItemsRequest) ([]CompanyPickerItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyPickerItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.GetCompanyCompanyPickerItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyPickerItemsByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyPickerItemsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) ClientId(clientId string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) Conditions(conditions string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) Fields(fields string) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) Page(page int32) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) PageId(pageId int32) ApiGetCompanyCompanyPickerItemsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsByIdRequest) Execute() (*CompanyPickerItem, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyPickerItemsByIdExecute(r)
}

/*
GetCompanyCompanyPickerItemsById Get CompanyPickerItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyPickerItemId
	@return ApiGetCompanyCompanyPickerItemsByIdRequest
*/
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItemsById(ctx context.Context, id int32) ApiGetCompanyCompanyPickerItemsByIdRequest {
	return ApiGetCompanyCompanyPickerItemsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyPickerItem
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItemsByIdExecute(r ApiGetCompanyCompanyPickerItemsByIdRequest) (*CompanyPickerItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyPickerItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.GetCompanyCompanyPickerItemsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompanyPickerItemsCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyPickerItemsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) ClientId(clientId string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) Conditions(conditions string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) OrderBy(orderBy string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) Fields(fields string) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) Page(page int32) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) PageSize(pageSize int32) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) PageId(pageId int32) ApiGetCompanyCompanyPickerItemsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompanyPickerItemsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompanyPickerItemsCountExecute(r)
}

/*
GetCompanyCompanyPickerItemsCount Get Count of CompanyPickerItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyCompanyPickerItemsCountRequest
*/
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItemsCount(ctx context.Context) ApiGetCompanyCompanyPickerItemsCountRequest {
	return ApiGetCompanyCompanyPickerItemsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyPickerItemsAPIService) GetCompanyCompanyPickerItemsCountExecute(r ApiGetCompanyCompanyPickerItemsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.GetCompanyCompanyPickerItemsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompanyPickerItemsRequest struct {
	ctx               context.Context
	ApiService        *CompanyPickerItemsAPIService
	clientId          *string
	companyPickerItem *CompanyPickerItem
}

func (r ApiPostCompanyCompanyPickerItemsRequest) ClientId(clientId string) ApiPostCompanyCompanyPickerItemsRequest {
	r.clientId = &clientId
	return r
}

// companyPickerItem
func (r ApiPostCompanyCompanyPickerItemsRequest) CompanyPickerItem(companyPickerItem CompanyPickerItem) ApiPostCompanyCompanyPickerItemsRequest {
	r.companyPickerItem = &companyPickerItem
	return r
}

func (r ApiPostCompanyCompanyPickerItemsRequest) Execute() (*CompanyPickerItem, *http.Response, error) {
	return r.ApiService.PostCompanyCompanyPickerItemsExecute(r)
}

/*
PostCompanyCompanyPickerItems Post CompanyPickerItem

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyCompanyPickerItemsRequest
*/
func (a *CompanyPickerItemsAPIService) PostCompanyCompanyPickerItems(ctx context.Context) ApiPostCompanyCompanyPickerItemsRequest {
	return ApiPostCompanyCompanyPickerItemsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyPickerItem
func (a *CompanyPickerItemsAPIService) PostCompanyCompanyPickerItemsExecute(r ApiPostCompanyCompanyPickerItemsRequest) (*CompanyPickerItem, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyPickerItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.PostCompanyCompanyPickerItems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyPickerItem == nil {
		return localVarReturnValue, nil, reportError("companyPickerItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyPickerItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompanyPickerItemsClearRequest struct {
	ctx                context.Context
	ApiService         *CompanyPickerItemsAPIService
	clientId           *string
	clearPickerRequest ClearPickerRequest
}

func (r ApiPostCompanyCompanyPickerItemsClearRequest) ClientId(clientId string) ApiPostCompanyCompanyPickerItemsClearRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostCompanyCompanyPickerItemsClearRequest) Execute() (*ClearPickerRequest, *http.Response, error) {
	return r.ApiService.PostCompanyCompanyPickerItemsClearExecute(r)
}

/*
PostCompanyCompanyPickerItemsClear Post ClearPickerRequest

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param clearPickerRequest clearPickerRequest
	@return ApiPostCompanyCompanyPickerItemsClearRequest
*/
func (a *CompanyPickerItemsAPIService) PostCompanyCompanyPickerItemsClear(ctx context.Context, clearPickerRequest ClearPickerRequest) ApiPostCompanyCompanyPickerItemsClearRequest {
	return ApiPostCompanyCompanyPickerItemsClearRequest{
		ApiService:         a,
		ctx:                ctx,
		clearPickerRequest: clearPickerRequest,
	}
}

// Execute executes the request
//
//	@return ClearPickerRequest
func (a *CompanyPickerItemsAPIService) PostCompanyCompanyPickerItemsClearExecute(r ApiPostCompanyCompanyPickerItemsClearRequest) (*ClearPickerRequest, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ClearPickerRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyPickerItemsAPIService.PostCompanyCompanyPickerItemsClear")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companyPickerItems/clear"
	localVarPath = strings.Replace(localVarPath, "{"+"clearPickerRequest"+"}", url.PathEscape(parameterValueToString(r.clearPickerRequest, "clearPickerRequest")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
