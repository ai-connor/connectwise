/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyTeamRoleAPIService CompanyTeamRoleAPI service
type CompanyTeamRoleAPIService service

type ApiDeleteCompanyTeamRolesByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyTeamRoleAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyTeamRolesByIdRequest) ClientId(clientId string) ApiDeleteCompanyTeamRolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyTeamRolesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyTeamRolesByIdExecute(r)
}

/*
DeleteCompanyTeamRolesById Delete TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiDeleteCompanyTeamRolesByIdRequest
*/
func (a *CompanyTeamRoleAPIService) DeleteCompanyTeamRolesById(ctx context.Context, id int32) ApiDeleteCompanyTeamRolesByIdRequest {
	return ApiDeleteCompanyTeamRolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CompanyTeamRoleAPIService) DeleteCompanyTeamRolesByIdExecute(r ApiDeleteCompanyTeamRolesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.DeleteCompanyTeamRolesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTeamRoleAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesRequest) ClientId(clientId string) ApiGetCompanyTeamRolesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesRequest) Conditions(conditions string) ApiGetCompanyTeamRolesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesRequest) Fields(fields string) ApiGetCompanyTeamRolesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesRequest) Page(page int32) ApiGetCompanyTeamRolesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesRequest) PageId(pageId int32) ApiGetCompanyTeamRolesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesRequest) Execute() ([]TeamRole, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesExecute(r)
}

/*
GetCompanyTeamRoles Get List of TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyTeamRolesRequest
*/
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRoles(ctx context.Context) ApiGetCompanyTeamRolesRequest {
	return ApiGetCompanyTeamRolesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []TeamRole
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesExecute(r ApiGetCompanyTeamRolesRequest) ([]TeamRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []TeamRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.GetCompanyTeamRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTeamRoleAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesByIdRequest) ClientId(clientId string) ApiGetCompanyTeamRolesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) Conditions(conditions string) ApiGetCompanyTeamRolesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) Fields(fields string) ApiGetCompanyTeamRolesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) Page(page int32) ApiGetCompanyTeamRolesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) PageId(pageId int32) ApiGetCompanyTeamRolesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesByIdRequest) Execute() (*TeamRole, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesByIdExecute(r)
}

/*
GetCompanyTeamRolesById Get TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiGetCompanyTeamRolesByIdRequest
*/
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesById(ctx context.Context, id int32) ApiGetCompanyTeamRolesByIdRequest {
	return ApiGetCompanyTeamRolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamRole
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesByIdExecute(r ApiGetCompanyTeamRolesByIdRequest) (*TeamRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.GetCompanyTeamRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTeamRoleAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) Fields(fields string) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) Page(page int32) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyTeamRolesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesByIdUsagesExecute(r)
}

/*
GetCompanyTeamRolesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiGetCompanyTeamRolesByIdUsagesRequest
*/
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesByIdUsages(ctx context.Context, id int32) ApiGetCompanyTeamRolesByIdUsagesRequest {
	return ApiGetCompanyTeamRolesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesByIdUsagesExecute(r ApiGetCompanyTeamRolesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.GetCompanyTeamRolesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTeamRoleAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) Page(page int32) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesByIdUsagesListExecute(r)
}

/*
GetCompanyTeamRolesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiGetCompanyTeamRolesByIdUsagesListRequest
*/
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyTeamRolesByIdUsagesListRequest {
	return ApiGetCompanyTeamRolesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesByIdUsagesListExecute(r ApiGetCompanyTeamRolesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.GetCompanyTeamRolesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyTeamRolesCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTeamRoleAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyTeamRolesCountRequest) ClientId(clientId string) ApiGetCompanyTeamRolesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) Conditions(conditions string) ApiGetCompanyTeamRolesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) ChildConditions(childConditions string) ApiGetCompanyTeamRolesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyTeamRolesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) OrderBy(orderBy string) ApiGetCompanyTeamRolesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) Fields(fields string) ApiGetCompanyTeamRolesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) Page(page int32) ApiGetCompanyTeamRolesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) PageSize(pageSize int32) ApiGetCompanyTeamRolesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) PageId(pageId int32) ApiGetCompanyTeamRolesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyTeamRolesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyTeamRolesCountExecute(r)
}

/*
GetCompanyTeamRolesCount Get Count of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyTeamRolesCountRequest
*/
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesCount(ctx context.Context) ApiGetCompanyTeamRolesCountRequest {
	return ApiGetCompanyTeamRolesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyTeamRoleAPIService) GetCompanyTeamRolesCountExecute(r ApiGetCompanyTeamRolesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.GetCompanyTeamRolesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyTeamRolesByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyTeamRoleAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyTeamRolesByIdRequest) ClientId(clientId string) ApiPatchCompanyTeamRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyTeamRolesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyTeamRolesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyTeamRolesByIdRequest) Execute() (*TeamRole, *http.Response, error) {
	return r.ApiService.PatchCompanyTeamRolesByIdExecute(r)
}

/*
PatchCompanyTeamRolesById Patch TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiPatchCompanyTeamRolesByIdRequest
*/
func (a *CompanyTeamRoleAPIService) PatchCompanyTeamRolesById(ctx context.Context, id int32) ApiPatchCompanyTeamRolesByIdRequest {
	return ApiPatchCompanyTeamRolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamRole
func (a *CompanyTeamRoleAPIService) PatchCompanyTeamRolesByIdExecute(r ApiPatchCompanyTeamRolesByIdRequest) (*TeamRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.PatchCompanyTeamRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyTeamRolesRequest struct {
	ctx        context.Context
	ApiService *CompanyTeamRoleAPIService
	clientId   *string
	teamRole   *TeamRole
}

func (r ApiPostCompanyTeamRolesRequest) ClientId(clientId string) ApiPostCompanyTeamRolesRequest {
	r.clientId = &clientId
	return r
}

// teamRole
func (r ApiPostCompanyTeamRolesRequest) TeamRole(teamRole TeamRole) ApiPostCompanyTeamRolesRequest {
	r.teamRole = &teamRole
	return r
}

func (r ApiPostCompanyTeamRolesRequest) Execute() (*TeamRole, *http.Response, error) {
	return r.ApiService.PostCompanyTeamRolesExecute(r)
}

/*
PostCompanyTeamRoles Post TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyTeamRolesRequest
*/
func (a *CompanyTeamRoleAPIService) PostCompanyTeamRoles(ctx context.Context) ApiPostCompanyTeamRolesRequest {
	return ApiPostCompanyTeamRolesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return TeamRole
func (a *CompanyTeamRoleAPIService) PostCompanyTeamRolesExecute(r ApiPostCompanyTeamRolesRequest) (*TeamRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.PostCompanyTeamRoles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.teamRole == nil {
		return localVarReturnValue, nil, reportError("teamRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.teamRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyTeamRolesByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyTeamRoleAPIService
	id         int32
	clientId   *string
	teamRole   *TeamRole
}

func (r ApiPutCompanyTeamRolesByIdRequest) ClientId(clientId string) ApiPutCompanyTeamRolesByIdRequest {
	r.clientId = &clientId
	return r
}

// teamRole
func (r ApiPutCompanyTeamRolesByIdRequest) TeamRole(teamRole TeamRole) ApiPutCompanyTeamRolesByIdRequest {
	r.teamRole = &teamRole
	return r
}

func (r ApiPutCompanyTeamRolesByIdRequest) Execute() (*TeamRole, *http.Response, error) {
	return r.ApiService.PutCompanyTeamRolesByIdExecute(r)
}

/*
PutCompanyTeamRolesById Put TeamRole

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id teamRoleId
	@return ApiPutCompanyTeamRolesByIdRequest
*/
func (a *CompanyTeamRoleAPIService) PutCompanyTeamRolesById(ctx context.Context, id int32) ApiPutCompanyTeamRolesByIdRequest {
	return ApiPutCompanyTeamRolesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return TeamRole
func (a *CompanyTeamRoleAPIService) PutCompanyTeamRolesByIdExecute(r ApiPutCompanyTeamRolesByIdRequest) (*TeamRole, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTeamRoleAPIService.PutCompanyTeamRolesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/teamRoles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.teamRole == nil {
		return localVarReturnValue, nil, reportError("teamRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.teamRole
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
