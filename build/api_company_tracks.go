/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyTracksAPIService CompanyTracksAPI service
type CompanyTracksAPIService service

type ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyTracksAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdTracksByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdTracksById Delete ContactTrack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id trackId
	@param parentId companyId
	@return ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest
*/
func (a *CompanyTracksAPIService) DeleteCompanyCompaniesByParentIdTracksById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *CompanyTracksAPIService) DeleteCompanyCompaniesByParentIdTracksByIdExecute(r ApiDeleteCompanyCompaniesByParentIdTracksByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTracksAPIService.DeleteCompanyCompaniesByParentIdTracksById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/tracks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTracksRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTracksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTracksRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksRequest) Execute() ([]ContactTrack, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTracksExecute(r)
}

/*
GetCompanyCompaniesByParentIdTracks Get List of ContactTrack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdTracksRequest
*/
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracks(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdTracksRequest {
	return ApiGetCompanyCompaniesByParentIdTracksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ContactTrack
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracksExecute(r ApiGetCompanyCompaniesByParentIdTracksRequest) ([]ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTracksAPIService.GetCompanyCompaniesByParentIdTracks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/tracks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTracksByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTracksAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) Execute() (*ContactTrack, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTracksByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdTracksById Get ContactTrack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id trackId
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdTracksByIdRequest
*/
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracksById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdTracksByIdRequest {
	return ApiGetCompanyCompaniesByParentIdTracksByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactTrack
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracksByIdExecute(r ApiGetCompanyCompaniesByParentIdTracksByIdRequest) (*ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTracksAPIService.GetCompanyCompaniesByParentIdTracksById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/tracks/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdTracksCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTracksAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdTracksCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdTracksCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdTracksCount Get Count of ContactTrack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdTracksCountRequest
*/
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracksCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdTracksCountRequest {
	return ApiGetCompanyCompaniesByParentIdTracksCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyTracksAPIService) GetCompanyCompaniesByParentIdTracksCountExecute(r ApiGetCompanyCompaniesByParentIdTracksCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTracksAPIService.GetCompanyCompaniesByParentIdTracksCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/tracks/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdTracksRequest struct {
	ctx          context.Context
	ApiService   *CompanyTracksAPIService
	parentId     int32
	clientId     *string
	contactTrack *ContactTrack
}

func (r ApiPostCompanyCompaniesByParentIdTracksRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdTracksRequest {
	r.clientId = &clientId
	return r
}

// track
func (r ApiPostCompanyCompaniesByParentIdTracksRequest) ContactTrack(contactTrack ContactTrack) ApiPostCompanyCompaniesByParentIdTracksRequest {
	r.contactTrack = &contactTrack
	return r
}

func (r ApiPostCompanyCompaniesByParentIdTracksRequest) Execute() (*ContactTrack, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdTracksExecute(r)
}

/*
PostCompanyCompaniesByParentIdTracks Post ContactTrack

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiPostCompanyCompaniesByParentIdTracksRequest
*/
func (a *CompanyTracksAPIService) PostCompanyCompaniesByParentIdTracks(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdTracksRequest {
	return ApiPostCompanyCompaniesByParentIdTracksRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactTrack
func (a *CompanyTracksAPIService) PostCompanyCompaniesByParentIdTracksExecute(r ApiPostCompanyCompaniesByParentIdTracksRequest) (*ContactTrack, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactTrack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTracksAPIService.PostCompanyCompaniesByParentIdTracks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/tracks"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactTrack == nil {
		return localVarReturnValue, nil, reportError("contactTrack is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactTrack
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
