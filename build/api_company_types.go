/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CompanyTypesAPIService CompanyTypesAPI service
type CompanyTypesAPIService service

type ApiDeleteCompanyCompaniesTypesByIdRequest struct {
	ctx        context.Context
	ApiService *CompanyTypesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyCompaniesTypesByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesTypesByIdExecute(r)
}

/*
DeleteCompanyCompaniesTypesById Delete Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiDeleteCompanyCompaniesTypesByIdRequest
*/
func (a *CompanyTypesAPIService) DeleteCompanyCompaniesTypesById(ctx context.Context, id int32) ApiDeleteCompanyCompaniesTypesByIdRequest {
	return ApiDeleteCompanyCompaniesTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *CompanyTypesAPIService) DeleteCompanyCompaniesTypesByIdExecute(r ApiDeleteCompanyCompaniesTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.DeleteCompanyCompaniesTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesTypesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesTypesRequest) ClientId(clientId string) ApiGetCompanyCompaniesTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) Conditions(conditions string) ApiGetCompanyCompaniesTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) Fields(fields string) ApiGetCompanyCompaniesTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) Page(page int32) ApiGetCompanyCompaniesTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) PageId(pageId int32) ApiGetCompanyCompaniesTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesTypesRequest) Execute() ([]CompanyType, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesTypesExecute(r)
}

/*
GetCompanyCompaniesTypes Get List of CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyCompaniesTypesRequest
*/
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypes(ctx context.Context) ApiGetCompanyCompaniesTypesRequest {
	return ApiGetCompanyCompaniesTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyType
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesExecute(r ApiGetCompanyCompaniesTypesRequest) ([]CompanyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.GetCompanyCompaniesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) Fields(fields string) ApiGetCompanyCompaniesTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) Page(page int32) ApiGetCompanyCompaniesTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdRequest) Execute() (*CompanyType, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesTypesByIdExecute(r)
}

/*
GetCompanyCompaniesTypesById Get CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiGetCompanyCompaniesTypesByIdRequest
*/
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesById(ctx context.Context, id int32) ApiGetCompanyCompaniesTypesByIdRequest {
	return ApiGetCompanyCompaniesTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyType
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesByIdExecute(r ApiGetCompanyCompaniesTypesByIdRequest) (*CompanyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.GetCompanyCompaniesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesTypesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) Fields(fields string) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) Page(page int32) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesTypesByIdUsagesExecute(r)
}

/*
GetCompanyCompaniesTypesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiGetCompanyCompaniesTypesByIdUsagesRequest
*/
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesByIdUsages(ctx context.Context, id int32) ApiGetCompanyCompaniesTypesByIdUsagesRequest {
	return ApiGetCompanyCompaniesTypesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesByIdUsagesExecute(r ApiGetCompanyCompaniesTypesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.GetCompanyCompaniesTypesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesTypesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) Page(page int32) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesTypesByIdUsagesListExecute(r)
}

/*
GetCompanyCompaniesTypesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiGetCompanyCompaniesTypesByIdUsagesListRequest
*/
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyCompaniesTypesByIdUsagesListRequest {
	return ApiGetCompanyCompaniesTypesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesByIdUsagesListExecute(r ApiGetCompanyCompaniesTypesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.GetCompanyCompaniesTypesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *CompanyTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesTypesCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) Fields(fields string) ApiGetCompanyCompaniesTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) Page(page int32) ApiGetCompanyCompaniesTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesTypesCountExecute(r)
}

/*
GetCompanyCompaniesTypesCount Get Count of CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyCompaniesTypesCountRequest
*/
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesCount(ctx context.Context) ApiGetCompanyCompaniesTypesCountRequest {
	return ApiGetCompanyCompaniesTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CompanyTypesAPIService) GetCompanyCompaniesTypesCountExecute(r ApiGetCompanyCompaniesTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.GetCompanyCompaniesTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesTypesByIdRequest struct {
	ctx            context.Context
	ApiService     *CompanyTypesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyCompaniesTypesByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesTypesByIdRequest) Execute() (*CompanyType, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesTypesByIdExecute(r)
}

/*
PatchCompanyCompaniesTypesById Patch CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiPatchCompanyCompaniesTypesByIdRequest
*/
func (a *CompanyTypesAPIService) PatchCompanyCompaniesTypesById(ctx context.Context, id int32) ApiPatchCompanyCompaniesTypesByIdRequest {
	return ApiPatchCompanyCompaniesTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyType
func (a *CompanyTypesAPIService) PatchCompanyCompaniesTypesByIdExecute(r ApiPatchCompanyCompaniesTypesByIdRequest) (*CompanyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.PatchCompanyCompaniesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesTypesRequest struct {
	ctx         context.Context
	ApiService  *CompanyTypesAPIService
	clientId    *string
	companyType *CompanyType
}

func (r ApiPostCompanyCompaniesTypesRequest) ClientId(clientId string) ApiPostCompanyCompaniesTypesRequest {
	r.clientId = &clientId
	return r
}

// companyType
func (r ApiPostCompanyCompaniesTypesRequest) CompanyType(companyType CompanyType) ApiPostCompanyCompaniesTypesRequest {
	r.companyType = &companyType
	return r
}

func (r ApiPostCompanyCompaniesTypesRequest) Execute() (*CompanyType, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesTypesExecute(r)
}

/*
PostCompanyCompaniesTypes Post CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyCompaniesTypesRequest
*/
func (a *CompanyTypesAPIService) PostCompanyCompaniesTypes(ctx context.Context) ApiPostCompanyCompaniesTypesRequest {
	return ApiPostCompanyCompaniesTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyType
func (a *CompanyTypesAPIService) PostCompanyCompaniesTypesExecute(r ApiPostCompanyCompaniesTypesRequest) (*CompanyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.PostCompanyCompaniesTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyType == nil {
		return localVarReturnValue, nil, reportError("companyType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesTypesByIdRequest struct {
	ctx         context.Context
	ApiService  *CompanyTypesAPIService
	id          int32
	clientId    *string
	companyType *CompanyType
}

func (r ApiPutCompanyCompaniesTypesByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// companyType
func (r ApiPutCompanyCompaniesTypesByIdRequest) CompanyType(companyType CompanyType) ApiPutCompanyCompaniesTypesByIdRequest {
	r.companyType = &companyType
	return r
}

func (r ApiPutCompanyCompaniesTypesByIdRequest) Execute() (*CompanyType, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesTypesByIdExecute(r)
}

/*
PutCompanyCompaniesTypesById Put CompanyType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiPutCompanyCompaniesTypesByIdRequest
*/
func (a *CompanyTypesAPIService) PutCompanyCompaniesTypesById(ctx context.Context, id int32) ApiPutCompanyCompaniesTypesByIdRequest {
	return ApiPutCompanyCompaniesTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyType
func (a *CompanyTypesAPIService) PutCompanyCompaniesTypesByIdExecute(r ApiPutCompanyCompaniesTypesByIdRequest) (*CompanyType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompanyTypesAPIService.PutCompanyCompaniesTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyType == nil {
		return localVarReturnValue, nil, reportError("companyType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
