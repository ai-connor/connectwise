/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ConfigurationStatusesAPIService ConfigurationStatusesAPI service
type ConfigurationStatusesAPIService service

type ApiDeleteCompanyConfigurationsStatusesByIdRequest struct {
	ctx        context.Context
	ApiService *ConfigurationStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyConfigurationsStatusesByIdRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsStatusesByIdExecute(r)
}

/*
DeleteCompanyConfigurationsStatusesById Delete ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiDeleteCompanyConfigurationsStatusesByIdRequest
*/
func (a *ConfigurationStatusesAPIService) DeleteCompanyConfigurationsStatusesById(ctx context.Context, id int32) ApiDeleteCompanyConfigurationsStatusesByIdRequest {
	return ApiDeleteCompanyConfigurationsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ConfigurationStatusesAPIService) DeleteCompanyConfigurationsStatusesByIdExecute(r ApiDeleteCompanyConfigurationsStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.DeleteCompanyConfigurationsStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsStatusesRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsStatusesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsStatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsStatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsStatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsStatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) Fields(fields string) ApiGetCompanyConfigurationsStatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) Page(page int32) ApiGetCompanyConfigurationsStatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsStatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesRequest) Execute() ([]ConfigurationStatus, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsStatusesExecute(r)
}

/*
GetCompanyConfigurationsStatuses Get List of ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyConfigurationsStatusesRequest
*/
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatuses(ctx context.Context) ApiGetCompanyConfigurationsStatusesRequest {
	return ApiGetCompanyConfigurationsStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ConfigurationStatus
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesExecute(r ApiGetCompanyConfigurationsStatusesRequest) ([]ConfigurationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ConfigurationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.GetCompanyConfigurationsStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsStatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) ClientId(clientId string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) Conditions(conditions string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) Fields(fields string) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) Page(page int32) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) PageId(pageId int32) ApiGetCompanyConfigurationsStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdRequest) Execute() (*ConfigurationStatus, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsStatusesByIdExecute(r)
}

/*
GetCompanyConfigurationsStatusesById Get ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetCompanyConfigurationsStatusesByIdRequest
*/
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesById(ctx context.Context, id int32) ApiGetCompanyConfigurationsStatusesByIdRequest {
	return ApiGetCompanyConfigurationsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigurationStatus
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesByIdExecute(r ApiGetCompanyConfigurationsStatusesByIdRequest) (*ConfigurationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.GetCompanyConfigurationsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsStatusesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) Fields(fields string) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) Page(page int32) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsStatusesByIdUsagesExecute(r)
}

/*
GetCompanyConfigurationsStatusesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetCompanyConfigurationsStatusesByIdUsagesRequest
*/
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesByIdUsages(ctx context.Context, id int32) ApiGetCompanyConfigurationsStatusesByIdUsagesRequest {
	return ApiGetCompanyConfigurationsStatusesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesByIdUsagesExecute(r ApiGetCompanyConfigurationsStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.GetCompanyConfigurationsStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) Fields(fields string) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) Page(page int32) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsStatusesByIdUsagesListExecute(r)
}

/*
GetCompanyConfigurationsStatusesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest
*/
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest {
	return ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesByIdUsagesListExecute(r ApiGetCompanyConfigurationsStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.GetCompanyConfigurationsStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsStatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) Fields(fields string) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) Page(page int32) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsStatusesCountExecute(r)
}

/*
GetCompanyConfigurationsStatusesCount Get Count of ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyConfigurationsStatusesCountRequest
*/
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesCount(ctx context.Context) ApiGetCompanyConfigurationsStatusesCountRequest {
	return ApiGetCompanyConfigurationsStatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ConfigurationStatusesAPIService) GetCompanyConfigurationsStatusesCountExecute(r ApiGetCompanyConfigurationsStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.GetCompanyConfigurationsStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *ConfigurationStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyConfigurationsStatusesByIdRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyConfigurationsStatusesByIdRequest) Execute() (*ConfigurationStatus, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsStatusesByIdExecute(r)
}

/*
PatchCompanyConfigurationsStatusesById Patch ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPatchCompanyConfigurationsStatusesByIdRequest
*/
func (a *ConfigurationStatusesAPIService) PatchCompanyConfigurationsStatusesById(ctx context.Context, id int32) ApiPatchCompanyConfigurationsStatusesByIdRequest {
	return ApiPatchCompanyConfigurationsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigurationStatus
func (a *ConfigurationStatusesAPIService) PatchCompanyConfigurationsStatusesByIdExecute(r ApiPatchCompanyConfigurationsStatusesByIdRequest) (*ConfigurationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.PatchCompanyConfigurationsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsStatusesRequest struct {
	ctx                 context.Context
	ApiService          *ConfigurationStatusesAPIService
	clientId            *string
	configurationStatus *ConfigurationStatus
}

func (r ApiPostCompanyConfigurationsStatusesRequest) ClientId(clientId string) ApiPostCompanyConfigurationsStatusesRequest {
	r.clientId = &clientId
	return r
}

// configurationStatus
func (r ApiPostCompanyConfigurationsStatusesRequest) ConfigurationStatus(configurationStatus ConfigurationStatus) ApiPostCompanyConfigurationsStatusesRequest {
	r.configurationStatus = &configurationStatus
	return r
}

func (r ApiPostCompanyConfigurationsStatusesRequest) Execute() (*ConfigurationStatus, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsStatusesExecute(r)
}

/*
PostCompanyConfigurationsStatuses Post ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyConfigurationsStatusesRequest
*/
func (a *ConfigurationStatusesAPIService) PostCompanyConfigurationsStatuses(ctx context.Context) ApiPostCompanyConfigurationsStatusesRequest {
	return ApiPostCompanyConfigurationsStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ConfigurationStatus
func (a *ConfigurationStatusesAPIService) PostCompanyConfigurationsStatusesExecute(r ApiPostCompanyConfigurationsStatusesRequest) (*ConfigurationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.PostCompanyConfigurationsStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.configurationStatus == nil {
		return localVarReturnValue, nil, reportError("configurationStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.configurationStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsStatusesByIdRequest struct {
	ctx                 context.Context
	ApiService          *ConfigurationStatusesAPIService
	id                  int32
	clientId            *string
	configurationStatus *ConfigurationStatus
}

func (r ApiPutCompanyConfigurationsStatusesByIdRequest) ClientId(clientId string) ApiPutCompanyConfigurationsStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// configurationStatus
func (r ApiPutCompanyConfigurationsStatusesByIdRequest) ConfigurationStatus(configurationStatus ConfigurationStatus) ApiPutCompanyConfigurationsStatusesByIdRequest {
	r.configurationStatus = &configurationStatus
	return r
}

func (r ApiPutCompanyConfigurationsStatusesByIdRequest) Execute() (*ConfigurationStatus, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsStatusesByIdExecute(r)
}

/*
PutCompanyConfigurationsStatusesById Put ConfigurationStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPutCompanyConfigurationsStatusesByIdRequest
*/
func (a *ConfigurationStatusesAPIService) PutCompanyConfigurationsStatusesById(ctx context.Context, id int32) ApiPutCompanyConfigurationsStatusesByIdRequest {
	return ApiPutCompanyConfigurationsStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ConfigurationStatus
func (a *ConfigurationStatusesAPIService) PutCompanyConfigurationsStatusesByIdExecute(r ApiPutCompanyConfigurationsStatusesByIdRequest) (*ConfigurationStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConfigurationStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationStatusesAPIService.PutCompanyConfigurationsStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.configurationStatus == nil {
		return localVarReturnValue, nil, reportError("configurationStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.configurationStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
