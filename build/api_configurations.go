/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ConfigurationsAPIService ConfigurationsAPI service
type ConfigurationsAPIService service

type ApiDeleteCompanyConfigurationsBulkRequest struct {
	ctx        context.Context
	ApiService *ConfigurationsAPIService
	clientId   *string
}

func (r ApiDeleteCompanyConfigurationsBulkRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsBulkRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsBulkRequest) Execute() (*BulkResult, *http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsBulkExecute(r)
}

/*
DeleteCompanyConfigurationsBulk Delete BulkResult

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeleteCompanyConfigurationsBulkRequest
*/
func (a *ConfigurationsAPIService) DeleteCompanyConfigurationsBulk(ctx context.Context) ApiDeleteCompanyConfigurationsBulkRequest {
	return ApiDeleteCompanyConfigurationsBulkRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BulkResult
func (a *ConfigurationsAPIService) DeleteCompanyConfigurationsBulkExecute(r ApiDeleteCompanyConfigurationsBulkRequest) (*BulkResult, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BulkResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.DeleteCompanyConfigurationsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCompanyConfigurationsByIdRequest struct {
	ctx        context.Context
	ApiService *ConfigurationsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyConfigurationsByIdExecute(r)
}

/*
DeleteCompanyConfigurationsById Delete Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiDeleteCompanyConfigurationsByIdRequest
*/
func (a *ConfigurationsAPIService) DeleteCompanyConfigurationsById(ctx context.Context, id int32) ApiDeleteCompanyConfigurationsByIdRequest {
	return ApiDeleteCompanyConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ConfigurationsAPIService) DeleteCompanyConfigurationsByIdExecute(r ApiDeleteCompanyConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.DeleteCompanyConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationsAPIService
	clientId              *string
	managedIdentifier     *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsRequest) ClientId(clientId string) ApiGetCompanyConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// managedIdentifier
func (r ApiGetCompanyConfigurationsRequest) ManagedIdentifier(managedIdentifier string) ApiGetCompanyConfigurationsRequest {
	r.managedIdentifier = &managedIdentifier
	return r
}

func (r ApiGetCompanyConfigurationsRequest) Conditions(conditions string) ApiGetCompanyConfigurationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsRequest) Fields(fields string) ApiGetCompanyConfigurationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsRequest) Page(page int32) ApiGetCompanyConfigurationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsRequest) PageId(pageId int32) ApiGetCompanyConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsRequest) Execute() ([]CompanyConfiguration, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsExecute(r)
}

/*
GetCompanyConfigurations Get List of Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyConfigurationsRequest
*/
func (a *ConfigurationsAPIService) GetCompanyConfigurations(ctx context.Context) ApiGetCompanyConfigurationsRequest {
	return ApiGetCompanyConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []CompanyConfiguration
func (a *ConfigurationsAPIService) GetCompanyConfigurationsExecute(r ApiGetCompanyConfigurationsRequest) ([]CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.GetCompanyConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.managedIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedIdentifier", r.managedIdentifier, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsByIdRequest) ClientId(clientId string) ApiGetCompanyConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) Conditions(conditions string) ApiGetCompanyConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) Fields(fields string) ApiGetCompanyConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) Page(page int32) ApiGetCompanyConfigurationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) PageId(pageId int32) ApiGetCompanyConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsByIdRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsByIdExecute(r)
}

/*
GetCompanyConfigurationsById Get Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiGetCompanyConfigurationsByIdRequest
*/
func (a *ConfigurationsAPIService) GetCompanyConfigurationsById(ctx context.Context, id int32) ApiGetCompanyConfigurationsByIdRequest {
	return ApiGetCompanyConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) GetCompanyConfigurationsByIdExecute(r ApiGetCompanyConfigurationsByIdRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.GetCompanyConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsByIdQuickAccessCountRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) Fields(fields string) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) Page(page int32) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsByIdQuickAccessCountExecute(r)
}

/*
GetCompanyConfigurationsByIdQuickAccessCount Get Configuration Tab Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiGetCompanyConfigurationsByIdQuickAccessCountRequest
*/
func (a *ConfigurationsAPIService) GetCompanyConfigurationsByIdQuickAccessCount(ctx context.Context, id int32) ApiGetCompanyConfigurationsByIdQuickAccessCountRequest {
	return ApiGetCompanyConfigurationsByIdQuickAccessCountRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return map[string]interface{}
func (a *ConfigurationsAPIService) GetCompanyConfigurationsByIdQuickAccessCountExecute(r ApiGetCompanyConfigurationsByIdQuickAccessCountRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.GetCompanyConfigurationsByIdQuickAccessCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}/quickAccess/count"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyConfigurationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ConfigurationsAPIService
	clientId              *string
	managedIdentifier     *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyConfigurationsCountRequest) ClientId(clientId string) ApiGetCompanyConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

// managedIdentifier
func (r ApiGetCompanyConfigurationsCountRequest) ManagedIdentifier(managedIdentifier string) ApiGetCompanyConfigurationsCountRequest {
	r.managedIdentifier = &managedIdentifier
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) Conditions(conditions string) ApiGetCompanyConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) OrderBy(orderBy string) ApiGetCompanyConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) Fields(fields string) ApiGetCompanyConfigurationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) Page(page int32) ApiGetCompanyConfigurationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) PageSize(pageSize int32) ApiGetCompanyConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) PageId(pageId int32) ApiGetCompanyConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyConfigurationsCountExecute(r)
}

/*
GetCompanyConfigurationsCount Get Count of Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyConfigurationsCountRequest
*/
func (a *ConfigurationsAPIService) GetCompanyConfigurationsCount(ctx context.Context) ApiGetCompanyConfigurationsCountRequest {
	return ApiGetCompanyConfigurationsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ConfigurationsAPIService) GetCompanyConfigurationsCountExecute(r ApiGetCompanyConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.GetCompanyConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.managedIdentifier != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedIdentifier", r.managedIdentifier, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsByIdRequest struct {
	ctx                context.Context
	ApiService         *ConfigurationsAPIService
	id                 int32
	clientId           *string
	patchOperation     *[]PatchOperation
	managedInformation *ManagedInformation
}

func (r ApiPatchCompanyConfigurationsByIdRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

// managedInformation
func (r ApiPatchCompanyConfigurationsByIdRequest) ManagedInformation(managedInformation ManagedInformation) ApiPatchCompanyConfigurationsByIdRequest {
	r.managedInformation = &managedInformation
	return r
}

func (r ApiPatchCompanyConfigurationsByIdRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsByIdExecute(r)
}

/*
PatchCompanyConfigurationsById Patch Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiPatchCompanyConfigurationsByIdRequest
*/
func (a *ConfigurationsAPIService) PatchCompanyConfigurationsById(ctx context.Context, id int32) ApiPatchCompanyConfigurationsByIdRequest {
	return ApiPatchCompanyConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PatchCompanyConfigurationsByIdExecute(r ApiPatchCompanyConfigurationsByIdRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PatchCompanyConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	if r.managedInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedInformation", r.managedInformation, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyConfigurationsByIdChangeTypeRequest struct {
	ctx            context.Context
	ApiService     *ConfigurationsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyConfigurationsByIdChangeTypeRequest) ClientId(clientId string) ApiPatchCompanyConfigurationsByIdChangeTypeRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyConfigurationsByIdChangeTypeRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyConfigurationsByIdChangeTypeRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyConfigurationsByIdChangeTypeRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PatchCompanyConfigurationsByIdChangeTypeExecute(r)
}

/*
PatchCompanyConfigurationsByIdChangeType Patch Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiPatchCompanyConfigurationsByIdChangeTypeRequest
*/
func (a *ConfigurationsAPIService) PatchCompanyConfigurationsByIdChangeType(ctx context.Context, id int32) ApiPatchCompanyConfigurationsByIdChangeTypeRequest {
	return ApiPatchCompanyConfigurationsByIdChangeTypeRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PatchCompanyConfigurationsByIdChangeTypeExecute(r ApiPatchCompanyConfigurationsByIdChangeTypeRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PatchCompanyConfigurationsByIdChangeType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}/changeType"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsRequest struct {
	ctx                  context.Context
	ApiService           *ConfigurationsAPIService
	clientId             *string
	companyConfiguration *CompanyConfiguration
	managedInformation   *ManagedInformation
}

func (r ApiPostCompanyConfigurationsRequest) ClientId(clientId string) ApiPostCompanyConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// configuration
func (r ApiPostCompanyConfigurationsRequest) CompanyConfiguration(companyConfiguration CompanyConfiguration) ApiPostCompanyConfigurationsRequest {
	r.companyConfiguration = &companyConfiguration
	return r
}

// managedInformation
func (r ApiPostCompanyConfigurationsRequest) ManagedInformation(managedInformation ManagedInformation) ApiPostCompanyConfigurationsRequest {
	r.managedInformation = &managedInformation
	return r
}

func (r ApiPostCompanyConfigurationsRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsExecute(r)
}

/*
PostCompanyConfigurations Post Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyConfigurationsRequest
*/
func (a *ConfigurationsAPIService) PostCompanyConfigurations(ctx context.Context) ApiPostCompanyConfigurationsRequest {
	return ApiPostCompanyConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PostCompanyConfigurationsExecute(r ApiPostCompanyConfigurationsRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PostCompanyConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyConfiguration == nil {
		return localVarReturnValue, nil, reportError("companyConfiguration is required and must be specified")
	}

	if r.managedInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedInformation", r.managedInformation, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyConfigurationsBulkRequest struct {
	ctx                  context.Context
	ApiService           *ConfigurationsAPIService
	clientId             *string
	companyConfiguration *[]CompanyConfiguration
	managedInformation   *ManagedInformation
}

func (r ApiPostCompanyConfigurationsBulkRequest) ClientId(clientId string) ApiPostCompanyConfigurationsBulkRequest {
	r.clientId = &clientId
	return r
}

// List of Configuration
func (r ApiPostCompanyConfigurationsBulkRequest) CompanyConfiguration(companyConfiguration []CompanyConfiguration) ApiPostCompanyConfigurationsBulkRequest {
	r.companyConfiguration = &companyConfiguration
	return r
}

// managedInformation
func (r ApiPostCompanyConfigurationsBulkRequest) ManagedInformation(managedInformation ManagedInformation) ApiPostCompanyConfigurationsBulkRequest {
	r.managedInformation = &managedInformation
	return r
}

func (r ApiPostCompanyConfigurationsBulkRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PostCompanyConfigurationsBulkExecute(r)
}

/*
PostCompanyConfigurationsBulk Post Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyConfigurationsBulkRequest
*/
func (a *ConfigurationsAPIService) PostCompanyConfigurationsBulk(ctx context.Context) ApiPostCompanyConfigurationsBulkRequest {
	return ApiPostCompanyConfigurationsBulkRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PostCompanyConfigurationsBulkExecute(r ApiPostCompanyConfigurationsBulkRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PostCompanyConfigurationsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyConfiguration == nil {
		return localVarReturnValue, nil, reportError("companyConfiguration is required and must be specified")
	}

	if r.managedInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedInformation", r.managedInformation, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsBulkRequest struct {
	ctx                  context.Context
	ApiService           *ConfigurationsAPIService
	clientId             *string
	companyConfiguration *[]CompanyConfiguration
	managedInformation   *ManagedInformation
}

func (r ApiPutCompanyConfigurationsBulkRequest) ClientId(clientId string) ApiPutCompanyConfigurationsBulkRequest {
	r.clientId = &clientId
	return r
}

// List of Configuration
func (r ApiPutCompanyConfigurationsBulkRequest) CompanyConfiguration(companyConfiguration []CompanyConfiguration) ApiPutCompanyConfigurationsBulkRequest {
	r.companyConfiguration = &companyConfiguration
	return r
}

// managedInformation
func (r ApiPutCompanyConfigurationsBulkRequest) ManagedInformation(managedInformation ManagedInformation) ApiPutCompanyConfigurationsBulkRequest {
	r.managedInformation = &managedInformation
	return r
}

func (r ApiPutCompanyConfigurationsBulkRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsBulkExecute(r)
}

/*
PutCompanyConfigurationsBulk Put Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPutCompanyConfigurationsBulkRequest
*/
func (a *ConfigurationsAPIService) PutCompanyConfigurationsBulk(ctx context.Context) ApiPutCompanyConfigurationsBulkRequest {
	return ApiPutCompanyConfigurationsBulkRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PutCompanyConfigurationsBulkExecute(r ApiPutCompanyConfigurationsBulkRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PutCompanyConfigurationsBulk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/bulk"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyConfiguration == nil {
		return localVarReturnValue, nil, reportError("companyConfiguration is required and must be specified")
	}

	if r.managedInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedInformation", r.managedInformation, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyConfigurationsByIdRequest struct {
	ctx                  context.Context
	ApiService           *ConfigurationsAPIService
	id                   int32
	clientId             *string
	companyConfiguration *CompanyConfiguration
	managedInformation   *ManagedInformation
}

func (r ApiPutCompanyConfigurationsByIdRequest) ClientId(clientId string) ApiPutCompanyConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// configuration
func (r ApiPutCompanyConfigurationsByIdRequest) CompanyConfiguration(companyConfiguration CompanyConfiguration) ApiPutCompanyConfigurationsByIdRequest {
	r.companyConfiguration = &companyConfiguration
	return r
}

// managedInformation
func (r ApiPutCompanyConfigurationsByIdRequest) ManagedInformation(managedInformation ManagedInformation) ApiPutCompanyConfigurationsByIdRequest {
	r.managedInformation = &managedInformation
	return r
}

func (r ApiPutCompanyConfigurationsByIdRequest) Execute() (*CompanyConfiguration, *http.Response, error) {
	return r.ApiService.PutCompanyConfigurationsByIdExecute(r)
}

/*
PutCompanyConfigurationsById Put Configuration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id configurationId
	@return ApiPutCompanyConfigurationsByIdRequest
*/
func (a *ConfigurationsAPIService) PutCompanyConfigurationsById(ctx context.Context, id int32) ApiPutCompanyConfigurationsByIdRequest {
	return ApiPutCompanyConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return CompanyConfiguration
func (a *ConfigurationsAPIService) PutCompanyConfigurationsByIdExecute(r ApiPutCompanyConfigurationsByIdRequest) (*CompanyConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CompanyConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConfigurationsAPIService.PutCompanyConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/configurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.companyConfiguration == nil {
		return localVarReturnValue, nil, reportError("companyConfiguration is required and must be specified")
	}

	if r.managedInformation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "managedInformation", r.managedInformation, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.companyConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
