/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ContactCommunicationsAPIService ContactCommunicationsAPI service
type ContactCommunicationsAPIService service

type ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest struct {
	ctx        context.Context
	ApiService *ContactCommunicationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsByParentIdCommunicationsByIdExecute(r)
}

/*
DeleteCompanyContactsByParentIdCommunicationsById Delete ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id communicationId
	@param parentId contactId
	@return ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest
*/
func (a *ContactCommunicationsAPIService) DeleteCompanyContactsByParentIdCommunicationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest {
	return ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ContactCommunicationsAPIService) DeleteCompanyContactsByParentIdCommunicationsByIdExecute(r ApiDeleteCompanyContactsByParentIdCommunicationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.DeleteCompanyContactsByParentIdCommunicationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdCommunicationsRequest struct {
	ctx                   context.Context
	ApiService            *ContactCommunicationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) Fields(fields string) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) Page(page int32) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsRequest) Execute() ([]ContactCommunication, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdCommunicationsExecute(r)
}

/*
GetCompanyContactsByParentIdCommunications Get List of ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdCommunicationsRequest
*/
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunications(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdCommunicationsRequest {
	return ApiGetCompanyContactsByParentIdCommunicationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ContactCommunication
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunicationsExecute(r ApiGetCompanyContactsByParentIdCommunicationsRequest) ([]ContactCommunication, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ContactCommunication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.GetCompanyContactsByParentIdCommunications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdCommunicationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ContactCommunicationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) Fields(fields string) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) Page(page int32) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) Execute() (*ContactCommunication, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdCommunicationsByIdExecute(r)
}

/*
GetCompanyContactsByParentIdCommunicationsById Get ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id communicationId
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdCommunicationsByIdRequest
*/
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunicationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyContactsByParentIdCommunicationsByIdRequest {
	return ApiGetCompanyContactsByParentIdCommunicationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactCommunication
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunicationsByIdExecute(r ApiGetCompanyContactsByParentIdCommunicationsByIdRequest) (*ContactCommunication, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactCommunication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.GetCompanyContactsByParentIdCommunicationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdCommunicationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ContactCommunicationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) Fields(fields string) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) Page(page int32) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdCommunicationsCountExecute(r)
}

/*
GetCompanyContactsByParentIdCommunicationsCount Get Count of ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdCommunicationsCountRequest
*/
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunicationsCount(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdCommunicationsCountRequest {
	return ApiGetCompanyContactsByParentIdCommunicationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ContactCommunicationsAPIService) GetCompanyContactsByParentIdCommunicationsCountExecute(r ApiGetCompanyContactsByParentIdCommunicationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.GetCompanyContactsByParentIdCommunicationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest struct {
	ctx            context.Context
	ApiService     *ContactCommunicationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest) Execute() (*ContactCommunication, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsByParentIdCommunicationsByIdExecute(r)
}

/*
PatchCompanyContactsByParentIdCommunicationsById Patch ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id communicationId
	@param parentId contactId
	@return ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest
*/
func (a *ContactCommunicationsAPIService) PatchCompanyContactsByParentIdCommunicationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest {
	return ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactCommunication
func (a *ContactCommunicationsAPIService) PatchCompanyContactsByParentIdCommunicationsByIdExecute(r ApiPatchCompanyContactsByParentIdCommunicationsByIdRequest) (*ContactCommunication, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactCommunication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.PatchCompanyContactsByParentIdCommunicationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsByParentIdCommunicationsRequest struct {
	ctx                  context.Context
	ApiService           *ContactCommunicationsAPIService
	parentId             int32
	clientId             *string
	contactCommunication *ContactCommunication
}

func (r ApiPostCompanyContactsByParentIdCommunicationsRequest) ClientId(clientId string) ApiPostCompanyContactsByParentIdCommunicationsRequest {
	r.clientId = &clientId
	return r
}

// contactCommunication
func (r ApiPostCompanyContactsByParentIdCommunicationsRequest) ContactCommunication(contactCommunication ContactCommunication) ApiPostCompanyContactsByParentIdCommunicationsRequest {
	r.contactCommunication = &contactCommunication
	return r
}

func (r ApiPostCompanyContactsByParentIdCommunicationsRequest) Execute() (*ContactCommunication, *http.Response, error) {
	return r.ApiService.PostCompanyContactsByParentIdCommunicationsExecute(r)
}

/*
PostCompanyContactsByParentIdCommunications Post ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiPostCompanyContactsByParentIdCommunicationsRequest
*/
func (a *ContactCommunicationsAPIService) PostCompanyContactsByParentIdCommunications(ctx context.Context, parentId int32) ApiPostCompanyContactsByParentIdCommunicationsRequest {
	return ApiPostCompanyContactsByParentIdCommunicationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactCommunication
func (a *ContactCommunicationsAPIService) PostCompanyContactsByParentIdCommunicationsExecute(r ApiPostCompanyContactsByParentIdCommunicationsRequest) (*ContactCommunication, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactCommunication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.PostCompanyContactsByParentIdCommunications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactCommunication == nil {
		return localVarReturnValue, nil, reportError("contactCommunication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactCommunication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsByParentIdCommunicationsByIdRequest struct {
	ctx                  context.Context
	ApiService           *ContactCommunicationsAPIService
	id                   int32
	parentId             int32
	clientId             *string
	contactCommunication *ContactCommunication
}

func (r ApiPutCompanyContactsByParentIdCommunicationsByIdRequest) ClientId(clientId string) ApiPutCompanyContactsByParentIdCommunicationsByIdRequest {
	r.clientId = &clientId
	return r
}

// contactCommunication
func (r ApiPutCompanyContactsByParentIdCommunicationsByIdRequest) ContactCommunication(contactCommunication ContactCommunication) ApiPutCompanyContactsByParentIdCommunicationsByIdRequest {
	r.contactCommunication = &contactCommunication
	return r
}

func (r ApiPutCompanyContactsByParentIdCommunicationsByIdRequest) Execute() (*ContactCommunication, *http.Response, error) {
	return r.ApiService.PutCompanyContactsByParentIdCommunicationsByIdExecute(r)
}

/*
PutCompanyContactsByParentIdCommunicationsById Put ContactCommunication

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id communicationId
	@param parentId contactId
	@return ApiPutCompanyContactsByParentIdCommunicationsByIdRequest
*/
func (a *ContactCommunicationsAPIService) PutCompanyContactsByParentIdCommunicationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyContactsByParentIdCommunicationsByIdRequest {
	return ApiPutCompanyContactsByParentIdCommunicationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactCommunication
func (a *ContactCommunicationsAPIService) PutCompanyContactsByParentIdCommunicationsByIdExecute(r ApiPutCompanyContactsByParentIdCommunicationsByIdRequest) (*ContactCommunication, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactCommunication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactCommunicationsAPIService.PutCompanyContactsByParentIdCommunicationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/communications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactCommunication == nil {
		return localVarReturnValue, nil, reportError("contactCommunication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactCommunication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
