/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ContactContactTypeAssociationsAPIService ContactContactTypeAssociationsAPI service
type ContactContactTypeAssociationsAPIService service

type ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest struct {
	ctx        context.Context
	ApiService *ContactContactTypeAssociationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyContactsByParentIdTypeAssociationsByIdExecute(r)
}

/*
DeleteCompanyContactsByParentIdTypeAssociationsById Delete ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeAssociationId
	@param parentId contactId
	@return ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest
*/
func (a *ContactContactTypeAssociationsAPIService) DeleteCompanyContactsByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest {
	return ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ContactContactTypeAssociationsAPIService) DeleteCompanyContactsByParentIdTypeAssociationsByIdExecute(r ApiDeleteCompanyContactsByParentIdTypeAssociationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.DeleteCompanyContactsByParentIdTypeAssociationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTypeAssociationsRequest struct {
	ctx                   context.Context
	ApiService            *ContactContactTypeAssociationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) Page(page int32) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) Execute() ([]ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTypeAssociationsExecute(r)
}

/*
GetCompanyContactsByParentIdTypeAssociations Get List of ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdTypeAssociationsRequest
*/
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociations(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdTypeAssociationsRequest {
	return ApiGetCompanyContactsByParentIdTypeAssociationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ContactContactTypeAssociationContactTypeAssociation
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociationsExecute(r ApiGetCompanyContactsByParentIdTypeAssociationsRequest) ([]ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ContactContactTypeAssociationContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.GetCompanyContactsByParentIdTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ContactContactTypeAssociationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) Page(page int32) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) Execute() (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTypeAssociationsByIdExecute(r)
}

/*
GetCompanyContactsByParentIdTypeAssociationsById Get ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeAssociationId
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest
*/
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest {
	return ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactContactTypeAssociationContactTypeAssociation
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociationsByIdExecute(r ApiGetCompanyContactsByParentIdTypeAssociationsByIdRequest) (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactContactTypeAssociationContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.GetCompanyContactsByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ContactContactTypeAssociationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) ClientId(clientId string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) Conditions(conditions string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) OrderBy(orderBy string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) Fields(fields string) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) Page(page int32) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) PageSize(pageSize int32) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) PageId(pageId int32) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyContactsByParentIdTypeAssociationsCountExecute(r)
}

/*
GetCompanyContactsByParentIdTypeAssociationsCount Get Count of ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest
*/
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociationsCount(ctx context.Context, parentId int32) ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest {
	return ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ContactContactTypeAssociationsAPIService) GetCompanyContactsByParentIdTypeAssociationsCountExecute(r ApiGetCompanyContactsByParentIdTypeAssociationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.GetCompanyContactsByParentIdTypeAssociationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest struct {
	ctx            context.Context
	ApiService     *ContactContactTypeAssociationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest) Execute() (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PatchCompanyContactsByParentIdTypeAssociationsByIdExecute(r)
}

/*
PatchCompanyContactsByParentIdTypeAssociationsById Patch ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeAssociationId
	@param parentId contactId
	@return ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest
*/
func (a *ContactContactTypeAssociationsAPIService) PatchCompanyContactsByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest {
	return ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactContactTypeAssociationContactTypeAssociation
func (a *ContactContactTypeAssociationsAPIService) PatchCompanyContactsByParentIdTypeAssociationsByIdExecute(r ApiPatchCompanyContactsByParentIdTypeAssociationsByIdRequest) (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactContactTypeAssociationContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.PatchCompanyContactsByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyContactsByParentIdTypeAssociationsRequest struct {
	ctx                                                 context.Context
	ApiService                                          *ContactContactTypeAssociationsAPIService
	parentId                                            int32
	clientId                                            *string
	contactContactTypeAssociationContactTypeAssociation *ContactContactTypeAssociationContactTypeAssociation
}

func (r ApiPostCompanyContactsByParentIdTypeAssociationsRequest) ClientId(clientId string) ApiPostCompanyContactsByParentIdTypeAssociationsRequest {
	r.clientId = &clientId
	return r
}

// contactTypeAssociation
func (r ApiPostCompanyContactsByParentIdTypeAssociationsRequest) ContactContactTypeAssociationContactTypeAssociation(contactContactTypeAssociationContactTypeAssociation ContactContactTypeAssociationContactTypeAssociation) ApiPostCompanyContactsByParentIdTypeAssociationsRequest {
	r.contactContactTypeAssociationContactTypeAssociation = &contactContactTypeAssociationContactTypeAssociation
	return r
}

func (r ApiPostCompanyContactsByParentIdTypeAssociationsRequest) Execute() (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PostCompanyContactsByParentIdTypeAssociationsExecute(r)
}

/*
PostCompanyContactsByParentIdTypeAssociations Post ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId contactId
	@return ApiPostCompanyContactsByParentIdTypeAssociationsRequest
*/
func (a *ContactContactTypeAssociationsAPIService) PostCompanyContactsByParentIdTypeAssociations(ctx context.Context, parentId int32) ApiPostCompanyContactsByParentIdTypeAssociationsRequest {
	return ApiPostCompanyContactsByParentIdTypeAssociationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactContactTypeAssociationContactTypeAssociation
func (a *ContactContactTypeAssociationsAPIService) PostCompanyContactsByParentIdTypeAssociationsExecute(r ApiPostCompanyContactsByParentIdTypeAssociationsRequest) (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactContactTypeAssociationContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.PostCompanyContactsByParentIdTypeAssociations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactContactTypeAssociationContactTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("contactContactTypeAssociationContactTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactContactTypeAssociationContactTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest struct {
	ctx                                                 context.Context
	ApiService                                          *ContactContactTypeAssociationsAPIService
	id                                                  int32
	parentId                                            int32
	clientId                                            *string
	contactContactTypeAssociationContactTypeAssociation *ContactContactTypeAssociationContactTypeAssociation
}

func (r ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest) ClientId(clientId string) ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.clientId = &clientId
	return r
}

// contactTypeAssociation
func (r ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest) ContactContactTypeAssociationContactTypeAssociation(contactContactTypeAssociationContactTypeAssociation ContactContactTypeAssociationContactTypeAssociation) ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest {
	r.contactContactTypeAssociationContactTypeAssociation = &contactContactTypeAssociationContactTypeAssociation
	return r
}

func (r ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest) Execute() (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	return r.ApiService.PutCompanyContactsByParentIdTypeAssociationsByIdExecute(r)
}

/*
PutCompanyContactsByParentIdTypeAssociationsById Put ContactTypeAssociation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeAssociationId
	@param parentId contactId
	@return ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest
*/
func (a *ContactContactTypeAssociationsAPIService) PutCompanyContactsByParentIdTypeAssociationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest {
	return ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ContactContactTypeAssociationContactTypeAssociation
func (a *ContactContactTypeAssociationsAPIService) PutCompanyContactsByParentIdTypeAssociationsByIdExecute(r ApiPutCompanyContactsByParentIdTypeAssociationsByIdRequest) (*ContactContactTypeAssociationContactTypeAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ContactContactTypeAssociationContactTypeAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactContactTypeAssociationsAPIService.PutCompanyContactsByParentIdTypeAssociationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/contacts/{parentId}/typeAssociations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.contactContactTypeAssociationContactTypeAssociation == nil {
		return localVarReturnValue, nil, reportError("contactContactTypeAssociationContactTypeAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.contactContactTypeAssociationContactTypeAssociation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
