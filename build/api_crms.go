/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// CrmsAPIService CrmsAPI service
type CrmsAPIService service

type ApiGetSystemMyCompanyCrmRequest struct {
	ctx                   context.Context
	ApiService            *CrmsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyCrmRequest) ClientId(clientId string) ApiGetSystemMyCompanyCrmRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) Conditions(conditions string) ApiGetSystemMyCompanyCrmRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyCrmRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyCrmRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyCrmRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) Fields(fields string) ApiGetSystemMyCompanyCrmRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) Page(page int32) ApiGetSystemMyCompanyCrmRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyCrmRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) PageId(pageId int32) ApiGetSystemMyCompanyCrmRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyCrmRequest) Execute() ([]Crm, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyCrmExecute(r)
}

/*
GetSystemMyCompanyCrm Get List of Crm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMyCompanyCrmRequest
*/
func (a *CrmsAPIService) GetSystemMyCompanyCrm(ctx context.Context) ApiGetSystemMyCompanyCrmRequest {
	return ApiGetSystemMyCompanyCrmRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Crm
func (a *CrmsAPIService) GetSystemMyCompanyCrmExecute(r ApiGetSystemMyCompanyCrmRequest) ([]Crm, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Crm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrmsAPIService.GetSystemMyCompanyCrm")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/crm"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyCrmByIdRequest struct {
	ctx                   context.Context
	ApiService            *CrmsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) ClientId(clientId string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) Conditions(conditions string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) Fields(fields string) ApiGetSystemMyCompanyCrmByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) Page(page int32) ApiGetSystemMyCompanyCrmByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyCrmByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) PageId(pageId int32) ApiGetSystemMyCompanyCrmByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyCrmByIdRequest) Execute() (*Crm, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyCrmByIdExecute(r)
}

/*
GetSystemMyCompanyCrmById Get Crm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id crmId
	@return ApiGetSystemMyCompanyCrmByIdRequest
*/
func (a *CrmsAPIService) GetSystemMyCompanyCrmById(ctx context.Context, id int32) ApiGetSystemMyCompanyCrmByIdRequest {
	return ApiGetSystemMyCompanyCrmByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Crm
func (a *CrmsAPIService) GetSystemMyCompanyCrmByIdExecute(r ApiGetSystemMyCompanyCrmByIdRequest) (*Crm, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Crm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrmsAPIService.GetSystemMyCompanyCrmById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/crm/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyCrmCountRequest struct {
	ctx                   context.Context
	ApiService            *CrmsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyCrmCountRequest) ClientId(clientId string) ApiGetSystemMyCompanyCrmCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) Conditions(conditions string) ApiGetSystemMyCompanyCrmCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyCrmCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyCrmCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyCrmCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) Fields(fields string) ApiGetSystemMyCompanyCrmCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) Page(page int32) ApiGetSystemMyCompanyCrmCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyCrmCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) PageId(pageId int32) ApiGetSystemMyCompanyCrmCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyCrmCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyCrmCountExecute(r)
}

/*
GetSystemMyCompanyCrmCount Get Count of Crm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMyCompanyCrmCountRequest
*/
func (a *CrmsAPIService) GetSystemMyCompanyCrmCount(ctx context.Context) ApiGetSystemMyCompanyCrmCountRequest {
	return ApiGetSystemMyCompanyCrmCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *CrmsAPIService) GetSystemMyCompanyCrmCountExecute(r ApiGetSystemMyCompanyCrmCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrmsAPIService.GetSystemMyCompanyCrmCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/crm/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMyCompanyCrmByIdRequest struct {
	ctx            context.Context
	ApiService     *CrmsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMyCompanyCrmByIdRequest) ClientId(clientId string) ApiPatchSystemMyCompanyCrmByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMyCompanyCrmByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMyCompanyCrmByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMyCompanyCrmByIdRequest) Execute() (*Crm, *http.Response, error) {
	return r.ApiService.PatchSystemMyCompanyCrmByIdExecute(r)
}

/*
PatchSystemMyCompanyCrmById Patch Crm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id crmId
	@return ApiPatchSystemMyCompanyCrmByIdRequest
*/
func (a *CrmsAPIService) PatchSystemMyCompanyCrmById(ctx context.Context, id int32) ApiPatchSystemMyCompanyCrmByIdRequest {
	return ApiPatchSystemMyCompanyCrmByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Crm
func (a *CrmsAPIService) PatchSystemMyCompanyCrmByIdExecute(r ApiPatchSystemMyCompanyCrmByIdRequest) (*Crm, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Crm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrmsAPIService.PatchSystemMyCompanyCrmById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/crm/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMyCompanyCrmByIdRequest struct {
	ctx        context.Context
	ApiService *CrmsAPIService
	id         int32
	clientId   *string
	crm        *Crm
}

func (r ApiPutSystemMyCompanyCrmByIdRequest) ClientId(clientId string) ApiPutSystemMyCompanyCrmByIdRequest {
	r.clientId = &clientId
	return r
}

// crm
func (r ApiPutSystemMyCompanyCrmByIdRequest) Crm(crm Crm) ApiPutSystemMyCompanyCrmByIdRequest {
	r.crm = &crm
	return r
}

func (r ApiPutSystemMyCompanyCrmByIdRequest) Execute() (*Crm, *http.Response, error) {
	return r.ApiService.PutSystemMyCompanyCrmByIdExecute(r)
}

/*
PutSystemMyCompanyCrmById Put Crm

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id crmId
	@return ApiPutSystemMyCompanyCrmByIdRequest
*/
func (a *CrmsAPIService) PutSystemMyCompanyCrmById(ctx context.Context, id int32) ApiPutSystemMyCompanyCrmByIdRequest {
	return ApiPutSystemMyCompanyCrmByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Crm
func (a *CrmsAPIService) PutSystemMyCompanyCrmByIdExecute(r ApiPutSystemMyCompanyCrmByIdRequest) (*Crm, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Crm
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CrmsAPIService.PutSystemMyCompanyCrmById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/crm/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.crm == nil {
		return localVarReturnValue, nil, reportError("crm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.crm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
