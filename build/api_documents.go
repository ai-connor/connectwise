/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// DocumentsAPIService DocumentsAPI service
type DocumentsAPIService service

type ApiDeleteSystemDocumentsByIdRequest struct {
	ctx        context.Context
	ApiService *DocumentsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemDocumentsByIdRequest) ClientId(clientId string) ApiDeleteSystemDocumentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemDocumentsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemDocumentsByIdExecute(r)
}

/*
DeleteSystemDocumentsById Delete DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id documentId
	@return ApiDeleteSystemDocumentsByIdRequest
*/
func (a *DocumentsAPIService) DeleteSystemDocumentsById(ctx context.Context, id int32) ApiDeleteSystemDocumentsByIdRequest {
	return ApiDeleteSystemDocumentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *DocumentsAPIService) DeleteSystemDocumentsByIdExecute(r ApiDeleteSystemDocumentsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.DeleteSystemDocumentsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	clientId              *string
	recordType            *string
	recordId              *int32
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsRequest) ClientId(clientId string) ApiGetSystemDocumentsRequest {
	r.clientId = &clientId
	return r
}

// recordType
func (r ApiGetSystemDocumentsRequest) RecordType(recordType string) ApiGetSystemDocumentsRequest {
	r.recordType = &recordType
	return r
}

// recordId
func (r ApiGetSystemDocumentsRequest) RecordId(recordId int32) ApiGetSystemDocumentsRequest {
	r.recordId = &recordId
	return r
}

func (r ApiGetSystemDocumentsRequest) Conditions(conditions string) ApiGetSystemDocumentsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsRequest) OrderBy(orderBy string) ApiGetSystemDocumentsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsRequest) Fields(fields string) ApiGetSystemDocumentsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsRequest) Page(page int32) ApiGetSystemDocumentsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsRequest) PageSize(pageSize int32) ApiGetSystemDocumentsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsRequest) PageId(pageId int32) ApiGetSystemDocumentsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsRequest) Execute() ([]DocumentInfo, *http.Response, error) {
	return r.ApiService.GetSystemDocumentsExecute(r)
}

/*
GetSystemDocuments Get List of DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemDocumentsRequest
*/
func (a *DocumentsAPIService) GetSystemDocuments(ctx context.Context) ApiGetSystemDocumentsRequest {
	return ApiGetSystemDocumentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []DocumentInfo
func (a *DocumentsAPIService) GetSystemDocumentsExecute(r ApiGetSystemDocumentsRequest) ([]DocumentInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []DocumentInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.recordType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordType", r.recordType, "form", "")
	}
	if r.recordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordId", r.recordId, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsByIdRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsByIdRequest) ClientId(clientId string) ApiGetSystemDocumentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) Conditions(conditions string) ApiGetSystemDocumentsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) OrderBy(orderBy string) ApiGetSystemDocumentsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) Fields(fields string) ApiGetSystemDocumentsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) Page(page int32) ApiGetSystemDocumentsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) PageSize(pageSize int32) ApiGetSystemDocumentsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) PageId(pageId int32) ApiGetSystemDocumentsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsByIdRequest) Execute() (*DocumentInfo, *http.Response, error) {
	return r.ApiService.GetSystemDocumentsByIdExecute(r)
}

/*
GetSystemDocumentsById Get DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id documentId
	@return ApiGetSystemDocumentsByIdRequest
*/
func (a *DocumentsAPIService) GetSystemDocumentsById(ctx context.Context, id int32) ApiGetSystemDocumentsByIdRequest {
	return ApiGetSystemDocumentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DocumentInfo
func (a *DocumentsAPIService) GetSystemDocumentsByIdExecute(r ApiGetSystemDocumentsByIdRequest) (*DocumentInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocumentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsByIdDownloadRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	id                    int32
	clientId              *string
	lastModified          *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) ClientId(clientId string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.clientId = &clientId
	return r
}

// lastModified
func (r ApiGetSystemDocumentsByIdDownloadRequest) LastModified(lastModified string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.lastModified = &lastModified
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) Conditions(conditions string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) OrderBy(orderBy string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) Fields(fields string) ApiGetSystemDocumentsByIdDownloadRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) Page(page int32) ApiGetSystemDocumentsByIdDownloadRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) PageSize(pageSize int32) ApiGetSystemDocumentsByIdDownloadRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) PageId(pageId int32) ApiGetSystemDocumentsByIdDownloadRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsByIdDownloadRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetSystemDocumentsByIdDownloadExecute(r)
}

/*
GetSystemDocumentsByIdDownload Get DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id documentId
	@return ApiGetSystemDocumentsByIdDownloadRequest
*/
func (a *DocumentsAPIService) GetSystemDocumentsByIdDownload(ctx context.Context, id int32) ApiGetSystemDocumentsByIdDownloadRequest {
	return ApiGetSystemDocumentsByIdDownloadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *DocumentsAPIService) GetSystemDocumentsByIdDownloadExecute(r ApiGetSystemDocumentsByIdDownloadRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocumentsByIdDownload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/{id}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.lastModified != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastModified", r.lastModified, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsByIdThumbnailRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	id                    int32
	clientId              *string
	lastModified          *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) ClientId(clientId string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.clientId = &clientId
	return r
}

// lastModified
func (r ApiGetSystemDocumentsByIdThumbnailRequest) LastModified(lastModified string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.lastModified = &lastModified
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) Conditions(conditions string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) OrderBy(orderBy string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) Fields(fields string) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) Page(page int32) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) PageSize(pageSize int32) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) PageId(pageId int32) ApiGetSystemDocumentsByIdThumbnailRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsByIdThumbnailRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetSystemDocumentsByIdThumbnailExecute(r)
}

/*
GetSystemDocumentsByIdThumbnail Get DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id documentId
	@return ApiGetSystemDocumentsByIdThumbnailRequest
*/
func (a *DocumentsAPIService) GetSystemDocumentsByIdThumbnail(ctx context.Context, id int32) ApiGetSystemDocumentsByIdThumbnailRequest {
	return ApiGetSystemDocumentsByIdThumbnailRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *DocumentsAPIService) GetSystemDocumentsByIdThumbnailExecute(r ApiGetSystemDocumentsByIdThumbnailRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocumentsByIdThumbnail")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/{id}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.lastModified != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lastModified", r.lastModified, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsCountRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	clientId              *string
	recordType            *string
	recordId              *int32
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsCountRequest) ClientId(clientId string) ApiGetSystemDocumentsCountRequest {
	r.clientId = &clientId
	return r
}

// recordType
func (r ApiGetSystemDocumentsCountRequest) RecordType(recordType string) ApiGetSystemDocumentsCountRequest {
	r.recordType = &recordType
	return r
}

// recordId
func (r ApiGetSystemDocumentsCountRequest) RecordId(recordId int32) ApiGetSystemDocumentsCountRequest {
	r.recordId = &recordId
	return r
}

func (r ApiGetSystemDocumentsCountRequest) Conditions(conditions string) ApiGetSystemDocumentsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsCountRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsCountRequest) OrderBy(orderBy string) ApiGetSystemDocumentsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsCountRequest) Fields(fields string) ApiGetSystemDocumentsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsCountRequest) Page(page int32) ApiGetSystemDocumentsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsCountRequest) PageSize(pageSize int32) ApiGetSystemDocumentsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsCountRequest) PageId(pageId int32) ApiGetSystemDocumentsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemDocumentsCountExecute(r)
}

/*
GetSystemDocumentsCount Get Count of DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemDocumentsCountRequest
*/
func (a *DocumentsAPIService) GetSystemDocumentsCount(ctx context.Context) ApiGetSystemDocumentsCountRequest {
	return ApiGetSystemDocumentsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *DocumentsAPIService) GetSystemDocumentsCountExecute(r ApiGetSystemDocumentsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocumentsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.recordType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordType", r.recordType, "form", "")
	}
	if r.recordId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "recordId", r.recordId, "form", "")
	}
	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemDocumentsUploadsampleRequest struct {
	ctx                   context.Context
	ApiService            *DocumentsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemDocumentsUploadsampleRequest) ClientId(clientId string) ApiGetSystemDocumentsUploadsampleRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) Conditions(conditions string) ApiGetSystemDocumentsUploadsampleRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) ChildConditions(childConditions string) ApiGetSystemDocumentsUploadsampleRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemDocumentsUploadsampleRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) OrderBy(orderBy string) ApiGetSystemDocumentsUploadsampleRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) Fields(fields string) ApiGetSystemDocumentsUploadsampleRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) Page(page int32) ApiGetSystemDocumentsUploadsampleRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) PageSize(pageSize int32) ApiGetSystemDocumentsUploadsampleRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) PageId(pageId int32) ApiGetSystemDocumentsUploadsampleRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemDocumentsUploadsampleRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSystemDocumentsUploadsampleExecute(r)
}

/*
GetSystemDocumentsUploadsample Get DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemDocumentsUploadsampleRequest
*/
func (a *DocumentsAPIService) GetSystemDocumentsUploadsample(ctx context.Context) ApiGetSystemDocumentsUploadsampleRequest {
	return ApiGetSystemDocumentsUploadsampleRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *DocumentsAPIService) GetSystemDocumentsUploadsampleExecute(r ApiGetSystemDocumentsUploadsampleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.GetSystemDocumentsUploadsample")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/uploadsample"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPostSystemDocumentsRequest struct {
	ctx          context.Context
	ApiService   *DocumentsAPIService
	clientId     *string
	file         *os.File
	recordId     *int32
	recordType   *string
	title        *string
	url          *string
	privateFlag  *bool
	readOnlyFlay *bool
	isAvatar     *bool
}

func (r ApiPostSystemDocumentsRequest) ClientId(clientId string) ApiPostSystemDocumentsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemDocumentsRequest) File(file *os.File) ApiPostSystemDocumentsRequest {
	r.file = file
	return r
}

func (r ApiPostSystemDocumentsRequest) RecordId(recordId int32) ApiPostSystemDocumentsRequest {
	r.recordId = &recordId
	return r
}

func (r ApiPostSystemDocumentsRequest) RecordType(recordType string) ApiPostSystemDocumentsRequest {
	r.recordType = &recordType
	return r
}

func (r ApiPostSystemDocumentsRequest) Title(title string) ApiPostSystemDocumentsRequest {
	r.title = &title
	return r
}

func (r ApiPostSystemDocumentsRequest) Url(url string) ApiPostSystemDocumentsRequest {
	r.url = &url
	return r
}

func (r ApiPostSystemDocumentsRequest) PrivateFlag(privateFlag bool) ApiPostSystemDocumentsRequest {
	r.privateFlag = &privateFlag
	return r
}

func (r ApiPostSystemDocumentsRequest) ReadOnlyFlay(readOnlyFlay bool) ApiPostSystemDocumentsRequest {
	r.readOnlyFlay = &readOnlyFlay
	return r
}

func (r ApiPostSystemDocumentsRequest) IsAvatar(isAvatar bool) ApiPostSystemDocumentsRequest {
	r.isAvatar = &isAvatar
	return r
}

func (r ApiPostSystemDocumentsRequest) Execute() (*DocumentInfo, *http.Response, error) {
	return r.ApiService.PostSystemDocumentsExecute(r)
}

/*
PostSystemDocuments Post DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemDocumentsRequest
*/
func (a *DocumentsAPIService) PostSystemDocuments(ctx context.Context) ApiPostSystemDocumentsRequest {
	return ApiPostSystemDocumentsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DocumentInfo
func (a *DocumentsAPIService) PostSystemDocumentsExecute(r ApiPostSystemDocumentsRequest) (*DocumentInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.PostSystemDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	var fileLocalVarFormFileName string
	var fileLocalVarFileName string
	var fileLocalVarFileBytes []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.recordId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recordId", r.recordId, "", "")
	}
	if r.recordType != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "recordType", r.recordType, "", "")
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "", "")
	}
	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "url", r.url, "", "")
	}
	if r.privateFlag != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "privateFlag", r.privateFlag, "", "")
	}
	if r.readOnlyFlay != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "readOnlyFlay", r.readOnlyFlay, "", "")
	}
	if r.isAvatar != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isAvatar", r.isAvatar, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemDocumentsByIdRequest struct {
	ctx        context.Context
	ApiService *DocumentsAPIService
	id         int32
	clientId   *string
}

func (r ApiPostSystemDocumentsByIdRequest) ClientId(clientId string) ApiPostSystemDocumentsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemDocumentsByIdRequest) Execute() (*DocumentInfo, *http.Response, error) {
	return r.ApiService.PostSystemDocumentsByIdExecute(r)
}

/*
PostSystemDocumentsById Post DocumentInfo

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id documentId
	@return ApiPostSystemDocumentsByIdRequest
*/
func (a *DocumentsAPIService) PostSystemDocumentsById(ctx context.Context, id int32) ApiPostSystemDocumentsByIdRequest {
	return ApiPostSystemDocumentsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DocumentInfo
func (a *DocumentsAPIService) PostSystemDocumentsByIdExecute(r ApiPostSystemDocumentsByIdRequest) (*DocumentInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DocumentInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DocumentsAPIService.PostSystemDocumentsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/documents/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
