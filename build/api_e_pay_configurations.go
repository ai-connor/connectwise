/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EPayConfigurationsAPIService EPayConfigurationsAPI service
type EPayConfigurationsAPIService service

type ApiDeleteSystemEPayConfigurationsByIdRequest struct {
	ctx        context.Context
	ApiService *EPayConfigurationsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemEPayConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteSystemEPayConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemEPayConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemEPayConfigurationsByIdExecute(r)
}

/*
DeleteSystemEPayConfigurationsById Delete EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ePayConfigurationId
	@return ApiDeleteSystemEPayConfigurationsByIdRequest
*/
func (a *EPayConfigurationsAPIService) DeleteSystemEPayConfigurationsById(ctx context.Context, id int32) ApiDeleteSystemEPayConfigurationsByIdRequest {
	return ApiDeleteSystemEPayConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EPayConfigurationsAPIService) DeleteSystemEPayConfigurationsByIdExecute(r ApiDeleteSystemEPayConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.DeleteSystemEPayConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemEPayConfigurationsRequest struct {
	ctx                   context.Context
	ApiService            *EPayConfigurationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEPayConfigurationsRequest) ClientId(clientId string) ApiGetSystemEPayConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) Conditions(conditions string) ApiGetSystemEPayConfigurationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) ChildConditions(childConditions string) ApiGetSystemEPayConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEPayConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) OrderBy(orderBy string) ApiGetSystemEPayConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) Fields(fields string) ApiGetSystemEPayConfigurationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) Page(page int32) ApiGetSystemEPayConfigurationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) PageSize(pageSize int32) ApiGetSystemEPayConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) PageId(pageId int32) ApiGetSystemEPayConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEPayConfigurationsRequest) Execute() ([]EPayConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemEPayConfigurationsExecute(r)
}

/*
GetSystemEPayConfigurations Get List of EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemEPayConfigurationsRequest
*/
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurations(ctx context.Context) ApiGetSystemEPayConfigurationsRequest {
	return ApiGetSystemEPayConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EPayConfiguration
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurationsExecute(r ApiGetSystemEPayConfigurationsRequest) ([]EPayConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EPayConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.GetSystemEPayConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEPayConfigurationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *EPayConfigurationsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) ClientId(clientId string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) Conditions(conditions string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) Fields(fields string) ApiGetSystemEPayConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) Page(page int32) ApiGetSystemEPayConfigurationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetSystemEPayConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) PageId(pageId int32) ApiGetSystemEPayConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEPayConfigurationsByIdRequest) Execute() (*EPayConfiguration, *http.Response, error) {
	return r.ApiService.GetSystemEPayConfigurationsByIdExecute(r)
}

/*
GetSystemEPayConfigurationsById Get EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ePayConfigurationId
	@return ApiGetSystemEPayConfigurationsByIdRequest
*/
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurationsById(ctx context.Context, id int32) ApiGetSystemEPayConfigurationsByIdRequest {
	return ApiGetSystemEPayConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EPayConfiguration
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurationsByIdExecute(r ApiGetSystemEPayConfigurationsByIdRequest) (*EPayConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EPayConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.GetSystemEPayConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEPayConfigurationsCountRequest struct {
	ctx                   context.Context
	ApiService            *EPayConfigurationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEPayConfigurationsCountRequest) ClientId(clientId string) ApiGetSystemEPayConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) Conditions(conditions string) ApiGetSystemEPayConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetSystemEPayConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEPayConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) OrderBy(orderBy string) ApiGetSystemEPayConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) Fields(fields string) ApiGetSystemEPayConfigurationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) Page(page int32) ApiGetSystemEPayConfigurationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) PageSize(pageSize int32) ApiGetSystemEPayConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) PageId(pageId int32) ApiGetSystemEPayConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEPayConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemEPayConfigurationsCountExecute(r)
}

/*
GetSystemEPayConfigurationsCount Get Count of EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemEPayConfigurationsCountRequest
*/
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurationsCount(ctx context.Context) ApiGetSystemEPayConfigurationsCountRequest {
	return ApiGetSystemEPayConfigurationsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *EPayConfigurationsAPIService) GetSystemEPayConfigurationsCountExecute(r ApiGetSystemEPayConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.GetSystemEPayConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemEPayConfigurationsByIdRequest struct {
	ctx            context.Context
	ApiService     *EPayConfigurationsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemEPayConfigurationsByIdRequest) ClientId(clientId string) ApiPatchSystemEPayConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemEPayConfigurationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemEPayConfigurationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemEPayConfigurationsByIdRequest) Execute() (*EPayConfiguration, *http.Response, error) {
	return r.ApiService.PatchSystemEPayConfigurationsByIdExecute(r)
}

/*
PatchSystemEPayConfigurationsById Patch EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ePayConfigurationId
	@return ApiPatchSystemEPayConfigurationsByIdRequest
*/
func (a *EPayConfigurationsAPIService) PatchSystemEPayConfigurationsById(ctx context.Context, id int32) ApiPatchSystemEPayConfigurationsByIdRequest {
	return ApiPatchSystemEPayConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EPayConfiguration
func (a *EPayConfigurationsAPIService) PatchSystemEPayConfigurationsByIdExecute(r ApiPatchSystemEPayConfigurationsByIdRequest) (*EPayConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EPayConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.PatchSystemEPayConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemEPayConfigurationsRequest struct {
	ctx               context.Context
	ApiService        *EPayConfigurationsAPIService
	clientId          *string
	ePayConfiguration *EPayConfiguration
}

func (r ApiPostSystemEPayConfigurationsRequest) ClientId(clientId string) ApiPostSystemEPayConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// ePayConfiguration
func (r ApiPostSystemEPayConfigurationsRequest) EPayConfiguration(ePayConfiguration EPayConfiguration) ApiPostSystemEPayConfigurationsRequest {
	r.ePayConfiguration = &ePayConfiguration
	return r
}

func (r ApiPostSystemEPayConfigurationsRequest) Execute() (*EPayConfiguration, *http.Response, error) {
	return r.ApiService.PostSystemEPayConfigurationsExecute(r)
}

/*
PostSystemEPayConfigurations Post EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemEPayConfigurationsRequest
*/
func (a *EPayConfigurationsAPIService) PostSystemEPayConfigurations(ctx context.Context) ApiPostSystemEPayConfigurationsRequest {
	return ApiPostSystemEPayConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EPayConfiguration
func (a *EPayConfigurationsAPIService) PostSystemEPayConfigurationsExecute(r ApiPostSystemEPayConfigurationsRequest) (*EPayConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EPayConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.PostSystemEPayConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ePayConfiguration == nil {
		return localVarReturnValue, nil, reportError("ePayConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ePayConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemEPayConfigurationsByIdRequest struct {
	ctx               context.Context
	ApiService        *EPayConfigurationsAPIService
	id                int32
	clientId          *string
	ePayConfiguration *EPayConfiguration
}

func (r ApiPutSystemEPayConfigurationsByIdRequest) ClientId(clientId string) ApiPutSystemEPayConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// ePayConfiguration
func (r ApiPutSystemEPayConfigurationsByIdRequest) EPayConfiguration(ePayConfiguration EPayConfiguration) ApiPutSystemEPayConfigurationsByIdRequest {
	r.ePayConfiguration = &ePayConfiguration
	return r
}

func (r ApiPutSystemEPayConfigurationsByIdRequest) Execute() (*EPayConfiguration, *http.Response, error) {
	return r.ApiService.PutSystemEPayConfigurationsByIdExecute(r)
}

/*
PutSystemEPayConfigurationsById Put EPayConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id ePayConfigurationId
	@return ApiPutSystemEPayConfigurationsByIdRequest
*/
func (a *EPayConfigurationsAPIService) PutSystemEPayConfigurationsById(ctx context.Context, id int32) ApiPutSystemEPayConfigurationsByIdRequest {
	return ApiPutSystemEPayConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EPayConfiguration
func (a *EPayConfigurationsAPIService) PutSystemEPayConfigurationsByIdExecute(r ApiPutSystemEPayConfigurationsByIdRequest) (*EPayConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EPayConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EPayConfigurationsAPIService.PutSystemEPayConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/ePayConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.ePayConfiguration == nil {
		return localVarReturnValue, nil, reportError("ePayConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.ePayConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
