/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// EmailExclusionsAPIService EmailExclusionsAPI service
type EmailExclusionsAPIService service

type ApiDeleteSystemEmailExclusionsByIdRequest struct {
	ctx        context.Context
	ApiService *EmailExclusionsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemEmailExclusionsByIdRequest) ClientId(clientId string) ApiDeleteSystemEmailExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemEmailExclusionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemEmailExclusionsByIdExecute(r)
}

/*
DeleteSystemEmailExclusionsById Delete EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailExclusionId
	@return ApiDeleteSystemEmailExclusionsByIdRequest
*/
func (a *EmailExclusionsAPIService) DeleteSystemEmailExclusionsById(ctx context.Context, id int32) ApiDeleteSystemEmailExclusionsByIdRequest {
	return ApiDeleteSystemEmailExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *EmailExclusionsAPIService) DeleteSystemEmailExclusionsByIdExecute(r ApiDeleteSystemEmailExclusionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.DeleteSystemEmailExclusionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemEmailExclusionsRequest struct {
	ctx                   context.Context
	ApiService            *EmailExclusionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEmailExclusionsRequest) ClientId(clientId string) ApiGetSystemEmailExclusionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) Conditions(conditions string) ApiGetSystemEmailExclusionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) ChildConditions(childConditions string) ApiGetSystemEmailExclusionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailExclusionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) OrderBy(orderBy string) ApiGetSystemEmailExclusionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) Fields(fields string) ApiGetSystemEmailExclusionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) Page(page int32) ApiGetSystemEmailExclusionsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) PageSize(pageSize int32) ApiGetSystemEmailExclusionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) PageId(pageId int32) ApiGetSystemEmailExclusionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailExclusionsRequest) Execute() ([]EmailExclusion, *http.Response, error) {
	return r.ApiService.GetSystemEmailExclusionsExecute(r)
}

/*
GetSystemEmailExclusions Get List of EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemEmailExclusionsRequest
*/
func (a *EmailExclusionsAPIService) GetSystemEmailExclusions(ctx context.Context) ApiGetSystemEmailExclusionsRequest {
	return ApiGetSystemEmailExclusionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []EmailExclusion
func (a *EmailExclusionsAPIService) GetSystemEmailExclusionsExecute(r ApiGetSystemEmailExclusionsRequest) ([]EmailExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []EmailExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.GetSystemEmailExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailExclusionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *EmailExclusionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEmailExclusionsByIdRequest) ClientId(clientId string) ApiGetSystemEmailExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) Conditions(conditions string) ApiGetSystemEmailExclusionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) ChildConditions(childConditions string) ApiGetSystemEmailExclusionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailExclusionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) OrderBy(orderBy string) ApiGetSystemEmailExclusionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) Fields(fields string) ApiGetSystemEmailExclusionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) Page(page int32) ApiGetSystemEmailExclusionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) PageSize(pageSize int32) ApiGetSystemEmailExclusionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) PageId(pageId int32) ApiGetSystemEmailExclusionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailExclusionsByIdRequest) Execute() (*EmailExclusion, *http.Response, error) {
	return r.ApiService.GetSystemEmailExclusionsByIdExecute(r)
}

/*
GetSystemEmailExclusionsById Get EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailExclusionId
	@return ApiGetSystemEmailExclusionsByIdRequest
*/
func (a *EmailExclusionsAPIService) GetSystemEmailExclusionsById(ctx context.Context, id int32) ApiGetSystemEmailExclusionsByIdRequest {
	return ApiGetSystemEmailExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EmailExclusion
func (a *EmailExclusionsAPIService) GetSystemEmailExclusionsByIdExecute(r ApiGetSystemEmailExclusionsByIdRequest) (*EmailExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmailExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.GetSystemEmailExclusionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemEmailExclusionsCountRequest struct {
	ctx                   context.Context
	ApiService            *EmailExclusionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemEmailExclusionsCountRequest) ClientId(clientId string) ApiGetSystemEmailExclusionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) Conditions(conditions string) ApiGetSystemEmailExclusionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) ChildConditions(childConditions string) ApiGetSystemEmailExclusionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemEmailExclusionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) OrderBy(orderBy string) ApiGetSystemEmailExclusionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) Fields(fields string) ApiGetSystemEmailExclusionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) Page(page int32) ApiGetSystemEmailExclusionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) PageSize(pageSize int32) ApiGetSystemEmailExclusionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) PageId(pageId int32) ApiGetSystemEmailExclusionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemEmailExclusionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemEmailExclusionsCountExecute(r)
}

/*
GetSystemEmailExclusionsCount Get Count of EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemEmailExclusionsCountRequest
*/
func (a *EmailExclusionsAPIService) GetSystemEmailExclusionsCount(ctx context.Context) ApiGetSystemEmailExclusionsCountRequest {
	return ApiGetSystemEmailExclusionsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *EmailExclusionsAPIService) GetSystemEmailExclusionsCountExecute(r ApiGetSystemEmailExclusionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.GetSystemEmailExclusionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemEmailExclusionsByIdRequest struct {
	ctx            context.Context
	ApiService     *EmailExclusionsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemEmailExclusionsByIdRequest) ClientId(clientId string) ApiPatchSystemEmailExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemEmailExclusionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemEmailExclusionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemEmailExclusionsByIdRequest) Execute() (*EmailExclusion, *http.Response, error) {
	return r.ApiService.PatchSystemEmailExclusionsByIdExecute(r)
}

/*
PatchSystemEmailExclusionsById Patch EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailExclusionId
	@return ApiPatchSystemEmailExclusionsByIdRequest
*/
func (a *EmailExclusionsAPIService) PatchSystemEmailExclusionsById(ctx context.Context, id int32) ApiPatchSystemEmailExclusionsByIdRequest {
	return ApiPatchSystemEmailExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EmailExclusion
func (a *EmailExclusionsAPIService) PatchSystemEmailExclusionsByIdExecute(r ApiPatchSystemEmailExclusionsByIdRequest) (*EmailExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmailExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.PatchSystemEmailExclusionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemEmailExclusionsRequest struct {
	ctx            context.Context
	ApiService     *EmailExclusionsAPIService
	clientId       *string
	emailExclusion *EmailExclusion
}

func (r ApiPostSystemEmailExclusionsRequest) ClientId(clientId string) ApiPostSystemEmailExclusionsRequest {
	r.clientId = &clientId
	return r
}

// emailExclusion
func (r ApiPostSystemEmailExclusionsRequest) EmailExclusion(emailExclusion EmailExclusion) ApiPostSystemEmailExclusionsRequest {
	r.emailExclusion = &emailExclusion
	return r
}

func (r ApiPostSystemEmailExclusionsRequest) Execute() (*EmailExclusion, *http.Response, error) {
	return r.ApiService.PostSystemEmailExclusionsExecute(r)
}

/*
PostSystemEmailExclusions Post EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemEmailExclusionsRequest
*/
func (a *EmailExclusionsAPIService) PostSystemEmailExclusions(ctx context.Context) ApiPostSystemEmailExclusionsRequest {
	return ApiPostSystemEmailExclusionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return EmailExclusion
func (a *EmailExclusionsAPIService) PostSystemEmailExclusionsExecute(r ApiPostSystemEmailExclusionsRequest) (*EmailExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmailExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.PostSystemEmailExclusions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailExclusion == nil {
		return localVarReturnValue, nil, reportError("emailExclusion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailExclusion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemEmailExclusionsByIdRequest struct {
	ctx            context.Context
	ApiService     *EmailExclusionsAPIService
	id             int32
	clientId       *string
	emailExclusion *EmailExclusion
}

func (r ApiPutSystemEmailExclusionsByIdRequest) ClientId(clientId string) ApiPutSystemEmailExclusionsByIdRequest {
	r.clientId = &clientId
	return r
}

// emailExclusion
func (r ApiPutSystemEmailExclusionsByIdRequest) EmailExclusion(emailExclusion EmailExclusion) ApiPutSystemEmailExclusionsByIdRequest {
	r.emailExclusion = &emailExclusion
	return r
}

func (r ApiPutSystemEmailExclusionsByIdRequest) Execute() (*EmailExclusion, *http.Response, error) {
	return r.ApiService.PutSystemEmailExclusionsByIdExecute(r)
}

/*
PutSystemEmailExclusionsById Put EmailExclusion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id emailExclusionId
	@return ApiPutSystemEmailExclusionsByIdRequest
*/
func (a *EmailExclusionsAPIService) PutSystemEmailExclusionsById(ctx context.Context, id int32) ApiPutSystemEmailExclusionsByIdRequest {
	return ApiPutSystemEmailExclusionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return EmailExclusion
func (a *EmailExclusionsAPIService) PutSystemEmailExclusionsByIdExecute(r ApiPutSystemEmailExclusionsByIdRequest) (*EmailExclusion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *EmailExclusion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EmailExclusionsAPIService.PutSystemEmailExclusionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/emailExclusions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.emailExclusion == nil {
		return localVarReturnValue, nil, reportError("emailExclusion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.emailExclusion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
