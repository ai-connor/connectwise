/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ExpenseEntriesAPIService ExpenseEntriesAPI service
type ExpenseEntriesAPIService service

type ApiDeleteExpenseEntriesByIdRequest struct {
	ctx        context.Context
	ApiService *ExpenseEntriesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteExpenseEntriesByIdRequest) ClientId(clientId string) ApiDeleteExpenseEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteExpenseEntriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExpenseEntriesByIdExecute(r)
}

/*
DeleteExpenseEntriesById Delete ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id entryId
	@return ApiDeleteExpenseEntriesByIdRequest
*/
func (a *ExpenseEntriesAPIService) DeleteExpenseEntriesById(ctx context.Context, id int32) ApiDeleteExpenseEntriesByIdRequest {
	return ApiDeleteExpenseEntriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ExpenseEntriesAPIService) DeleteExpenseEntriesByIdExecute(r ApiDeleteExpenseEntriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.DeleteExpenseEntriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetExpenseEntriesRequest struct {
	ctx                   context.Context
	ApiService            *ExpenseEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetExpenseEntriesRequest) ClientId(clientId string) ApiGetExpenseEntriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseEntriesRequest) Conditions(conditions string) ApiGetExpenseEntriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetExpenseEntriesRequest) ChildConditions(childConditions string) ApiGetExpenseEntriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetExpenseEntriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseEntriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetExpenseEntriesRequest) OrderBy(orderBy string) ApiGetExpenseEntriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetExpenseEntriesRequest) Fields(fields string) ApiGetExpenseEntriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetExpenseEntriesRequest) Page(page int32) ApiGetExpenseEntriesRequest {
	r.page = &page
	return r
}

func (r ApiGetExpenseEntriesRequest) PageSize(pageSize int32) ApiGetExpenseEntriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetExpenseEntriesRequest) PageId(pageId int32) ApiGetExpenseEntriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetExpenseEntriesRequest) Execute() ([]ExpenseEntry, *http.Response, error) {
	return r.ApiService.GetExpenseEntriesExecute(r)
}

/*
GetExpenseEntries Get List of ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExpenseEntriesRequest
*/
func (a *ExpenseEntriesAPIService) GetExpenseEntries(ctx context.Context) ApiGetExpenseEntriesRequest {
	return ApiGetExpenseEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ExpenseEntry
func (a *ExpenseEntriesAPIService) GetExpenseEntriesExecute(r ApiGetExpenseEntriesRequest) ([]ExpenseEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ExpenseEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.GetExpenseEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpenseEntriesByIdRequest struct {
	ctx                   context.Context
	ApiService            *ExpenseEntriesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetExpenseEntriesByIdRequest) ClientId(clientId string) ApiGetExpenseEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) Conditions(conditions string) ApiGetExpenseEntriesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) ChildConditions(childConditions string) ApiGetExpenseEntriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseEntriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) OrderBy(orderBy string) ApiGetExpenseEntriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) Fields(fields string) ApiGetExpenseEntriesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) Page(page int32) ApiGetExpenseEntriesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) PageSize(pageSize int32) ApiGetExpenseEntriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) PageId(pageId int32) ApiGetExpenseEntriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetExpenseEntriesByIdRequest) Execute() (*ExpenseEntry, *http.Response, error) {
	return r.ApiService.GetExpenseEntriesByIdExecute(r)
}

/*
GetExpenseEntriesById Get ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id entryId
	@return ApiGetExpenseEntriesByIdRequest
*/
func (a *ExpenseEntriesAPIService) GetExpenseEntriesById(ctx context.Context, id int32) ApiGetExpenseEntriesByIdRequest {
	return ApiGetExpenseEntriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExpenseEntry
func (a *ExpenseEntriesAPIService) GetExpenseEntriesByIdExecute(r ApiGetExpenseEntriesByIdRequest) (*ExpenseEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpenseEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.GetExpenseEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExpenseEntriesCountRequest struct {
	ctx                   context.Context
	ApiService            *ExpenseEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetExpenseEntriesCountRequest) ClientId(clientId string) ApiGetExpenseEntriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetExpenseEntriesCountRequest) Conditions(conditions string) ApiGetExpenseEntriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetExpenseEntriesCountRequest) ChildConditions(childConditions string) ApiGetExpenseEntriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetExpenseEntriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetExpenseEntriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetExpenseEntriesCountRequest) OrderBy(orderBy string) ApiGetExpenseEntriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetExpenseEntriesCountRequest) Fields(fields string) ApiGetExpenseEntriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetExpenseEntriesCountRequest) Page(page int32) ApiGetExpenseEntriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetExpenseEntriesCountRequest) PageSize(pageSize int32) ApiGetExpenseEntriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetExpenseEntriesCountRequest) PageId(pageId int32) ApiGetExpenseEntriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetExpenseEntriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetExpenseEntriesCountExecute(r)
}

/*
GetExpenseEntriesCount Get Count of ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExpenseEntriesCountRequest
*/
func (a *ExpenseEntriesAPIService) GetExpenseEntriesCount(ctx context.Context) ApiGetExpenseEntriesCountRequest {
	return ApiGetExpenseEntriesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ExpenseEntriesAPIService) GetExpenseEntriesCountExecute(r ApiGetExpenseEntriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.GetExpenseEntriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchExpenseEntriesByIdRequest struct {
	ctx            context.Context
	ApiService     *ExpenseEntriesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchExpenseEntriesByIdRequest) ClientId(clientId string) ApiPatchExpenseEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchExpenseEntriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchExpenseEntriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchExpenseEntriesByIdRequest) Execute() (*ExpenseEntry, *http.Response, error) {
	return r.ApiService.PatchExpenseEntriesByIdExecute(r)
}

/*
PatchExpenseEntriesById Patch ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id entryId
	@return ApiPatchExpenseEntriesByIdRequest
*/
func (a *ExpenseEntriesAPIService) PatchExpenseEntriesById(ctx context.Context, id int32) ApiPatchExpenseEntriesByIdRequest {
	return ApiPatchExpenseEntriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExpenseEntry
func (a *ExpenseEntriesAPIService) PatchExpenseEntriesByIdExecute(r ApiPatchExpenseEntriesByIdRequest) (*ExpenseEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpenseEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.PatchExpenseEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExpenseEntriesRequest struct {
	ctx          context.Context
	ApiService   *ExpenseEntriesAPIService
	clientId     *string
	expenseEntry *ExpenseEntry
}

func (r ApiPostExpenseEntriesRequest) ClientId(clientId string) ApiPostExpenseEntriesRequest {
	r.clientId = &clientId
	return r
}

// expenseEntry
func (r ApiPostExpenseEntriesRequest) ExpenseEntry(expenseEntry ExpenseEntry) ApiPostExpenseEntriesRequest {
	r.expenseEntry = &expenseEntry
	return r
}

func (r ApiPostExpenseEntriesRequest) Execute() (*ExpenseEntry, *http.Response, error) {
	return r.ApiService.PostExpenseEntriesExecute(r)
}

/*
PostExpenseEntries Post ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostExpenseEntriesRequest
*/
func (a *ExpenseEntriesAPIService) PostExpenseEntries(ctx context.Context) ApiPostExpenseEntriesRequest {
	return ApiPostExpenseEntriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ExpenseEntry
func (a *ExpenseEntriesAPIService) PostExpenseEntriesExecute(r ApiPostExpenseEntriesRequest) (*ExpenseEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpenseEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.PostExpenseEntries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.expenseEntry == nil {
		return localVarReturnValue, nil, reportError("expenseEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.expenseEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutExpenseEntriesByIdRequest struct {
	ctx          context.Context
	ApiService   *ExpenseEntriesAPIService
	id           int32
	clientId     *string
	expenseEntry *ExpenseEntry
}

func (r ApiPutExpenseEntriesByIdRequest) ClientId(clientId string) ApiPutExpenseEntriesByIdRequest {
	r.clientId = &clientId
	return r
}

// expenseEntry
func (r ApiPutExpenseEntriesByIdRequest) ExpenseEntry(expenseEntry ExpenseEntry) ApiPutExpenseEntriesByIdRequest {
	r.expenseEntry = &expenseEntry
	return r
}

func (r ApiPutExpenseEntriesByIdRequest) Execute() (*ExpenseEntry, *http.Response, error) {
	return r.ApiService.PutExpenseEntriesByIdExecute(r)
}

/*
PutExpenseEntriesById Put ExpenseEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id entryId
	@return ApiPutExpenseEntriesByIdRequest
*/
func (a *ExpenseEntriesAPIService) PutExpenseEntriesById(ctx context.Context, id int32) ApiPutExpenseEntriesByIdRequest {
	return ApiPutExpenseEntriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ExpenseEntry
func (a *ExpenseEntriesAPIService) PutExpenseEntriesByIdExecute(r ApiPutExpenseEntriesByIdRequest) (*ExpenseEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ExpenseEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExpenseEntriesAPIService.PutExpenseEntriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/expense/entries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.expenseEntry == nil {
		return localVarReturnValue, nil, reportError("expenseEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.expenseEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
