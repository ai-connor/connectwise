/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InventoryOnHandsAPIService InventoryOnHandsAPI service
type InventoryOnHandsAPIService service

type ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest struct {
	ctx                   context.Context
	ApiService            *InventoryOnHandsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) ClientId(clientId string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) Conditions(conditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) ChildConditions(childConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) OrderBy(orderBy string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) Fields(fields string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) Page(page int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) PageSize(pageSize int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) PageId(pageId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) Execute() ([]InventoryOnHand, *http.Response, error) {
	return r.ApiService.GetProcurementWarehouseBinsByParentIdInventoryOnHandExecute(r)
}

/*
GetProcurementWarehouseBinsByParentIdInventoryOnHand Get List of InventoryOnHand

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId warehouseBinId
	@return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest
*/
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHand(ctx context.Context, parentId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest {
	return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []InventoryOnHand
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHandExecute(r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandRequest) ([]InventoryOnHand, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InventoryOnHand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryOnHandsAPIService.GetProcurementWarehouseBinsByParentIdInventoryOnHand")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouseBins/{parentId}/inventoryOnHand"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest struct {
	ctx                   context.Context
	ApiService            *InventoryOnHandsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) ClientId(clientId string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) Conditions(conditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) ChildConditions(childConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) OrderBy(orderBy string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) Fields(fields string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) Page(page int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) PageSize(pageSize int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) PageId(pageId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) Execute() (*InventoryOnHand, *http.Response, error) {
	return r.ApiService.GetProcurementWarehouseBinsByParentIdInventoryOnHandByIdExecute(r)
}

/*
GetProcurementWarehouseBinsByParentIdInventoryOnHandById Get InventoryOnHand

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id inventoryOnHandId
	@param parentId warehouseBinId
	@return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest
*/
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHandById(ctx context.Context, id int32, parentId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest {
	return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return InventoryOnHand
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHandByIdExecute(r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandByIdRequest) (*InventoryOnHand, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InventoryOnHand
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryOnHandsAPIService.GetProcurementWarehouseBinsByParentIdInventoryOnHandById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouseBins/{parentId}/inventoryOnHand/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest struct {
	ctx                   context.Context
	ApiService            *InventoryOnHandsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) ClientId(clientId string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) Conditions(conditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) ChildConditions(childConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) OrderBy(orderBy string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) Fields(fields string) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) Page(page int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) PageSize(pageSize int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) PageId(pageId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementWarehouseBinsByParentIdInventoryOnHandCountExecute(r)
}

/*
GetProcurementWarehouseBinsByParentIdInventoryOnHandCount Get Count of InventoryOnHand

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId warehouseBinId
	@return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest
*/
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHandCount(ctx context.Context, parentId int32) ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest {
	return ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *InventoryOnHandsAPIService) GetProcurementWarehouseBinsByParentIdInventoryOnHandCountExecute(r ApiGetProcurementWarehouseBinsByParentIdInventoryOnHandCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InventoryOnHandsAPIService.GetProcurementWarehouseBinsByParentIdInventoryOnHandCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/warehouseBins/{parentId}/inventoryOnHand/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
