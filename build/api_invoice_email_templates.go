/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InvoiceEmailTemplatesAPIService InvoiceEmailTemplatesAPI service
type InvoiceEmailTemplatesAPIService service

type ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest struct {
	ctx        context.Context
	ApiService *InvoiceEmailTemplatesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceInvoiceEmailTemplatesByIdExecute(r)
}

/*
DeleteFinanceInvoiceEmailTemplatesById Delete InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest
*/
func (a *InvoiceEmailTemplatesAPIService) DeleteFinanceInvoiceEmailTemplatesById(ctx context.Context, id int32) ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest {
	return ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *InvoiceEmailTemplatesAPIService) DeleteFinanceInvoiceEmailTemplatesByIdExecute(r ApiDeleteFinanceInvoiceEmailTemplatesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.DeleteFinanceInvoiceEmailTemplatesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceEmailTemplatesRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceEmailTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) ClientId(clientId string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) Conditions(conditions string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) Fields(fields string) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) Page(page int32) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) PageId(pageId int32) ApiGetFinanceInvoiceEmailTemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesRequest) Execute() ([]InvoiceEmailTemplate, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceEmailTemplatesExecute(r)
}

/*
GetFinanceInvoiceEmailTemplates Get List of InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceInvoiceEmailTemplatesRequest
*/
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplates(ctx context.Context) ApiGetFinanceInvoiceEmailTemplatesRequest {
	return ApiGetFinanceInvoiceEmailTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []InvoiceEmailTemplate
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesExecute(r ApiGetFinanceInvoiceEmailTemplatesRequest) ([]InvoiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InvoiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.GetFinanceInvoiceEmailTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceEmailTemplatesByIdRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceEmailTemplatesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) Conditions(conditions string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) Fields(fields string) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) Page(page int32) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) PageId(pageId int32) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) Execute() (*InvoiceEmailTemplate, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceEmailTemplatesByIdExecute(r)
}

/*
GetFinanceInvoiceEmailTemplatesById Get InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiGetFinanceInvoiceEmailTemplatesByIdRequest
*/
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesById(ctx context.Context, id int32) ApiGetFinanceInvoiceEmailTemplatesByIdRequest {
	return ApiGetFinanceInvoiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InvoiceEmailTemplate
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesByIdExecute(r ApiGetFinanceInvoiceEmailTemplatesByIdRequest) (*InvoiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.GetFinanceInvoiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceEmailTemplatesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) ClientId(clientId string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) Conditions(conditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) Fields(fields string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) Page(page int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) PageId(pageId int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceEmailTemplatesByIdUsagesExecute(r)
}

/*
GetFinanceInvoiceEmailTemplatesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest
*/
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesByIdUsages(ctx context.Context, id int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest {
	return ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesByIdUsagesExecute(r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.GetFinanceInvoiceEmailTemplatesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceEmailTemplatesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) ClientId(clientId string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) Conditions(conditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) Fields(fields string) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) Page(page int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) PageId(pageId int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceEmailTemplatesByIdUsagesListExecute(r)
}

/*
GetFinanceInvoiceEmailTemplatesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest
*/
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesByIdUsagesList(ctx context.Context, id int32) ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest {
	return ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesByIdUsagesListExecute(r ApiGetFinanceInvoiceEmailTemplatesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.GetFinanceInvoiceEmailTemplatesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoiceEmailTemplatesCountRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceEmailTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) ClientId(clientId string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) Conditions(conditions string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) ChildConditions(childConditions string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) OrderBy(orderBy string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) Fields(fields string) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) Page(page int32) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) PageSize(pageSize int32) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) PageId(pageId int32) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoiceEmailTemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceInvoiceEmailTemplatesCountExecute(r)
}

/*
GetFinanceInvoiceEmailTemplatesCount Get Count of InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceInvoiceEmailTemplatesCountRequest
*/
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesCount(ctx context.Context) ApiGetFinanceInvoiceEmailTemplatesCountRequest {
	return ApiGetFinanceInvoiceEmailTemplatesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *InvoiceEmailTemplatesAPIService) GetFinanceInvoiceEmailTemplatesCountExecute(r ApiGetFinanceInvoiceEmailTemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.GetFinanceInvoiceEmailTemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceInvoiceEmailTemplatesByIdRequest struct {
	ctx            context.Context
	ApiService     *InvoiceEmailTemplatesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceInvoiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiPatchFinanceInvoiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceInvoiceEmailTemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceInvoiceEmailTemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceInvoiceEmailTemplatesByIdRequest) Execute() (*InvoiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PatchFinanceInvoiceEmailTemplatesByIdExecute(r)
}

/*
PatchFinanceInvoiceEmailTemplatesById Patch InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiPatchFinanceInvoiceEmailTemplatesByIdRequest
*/
func (a *InvoiceEmailTemplatesAPIService) PatchFinanceInvoiceEmailTemplatesById(ctx context.Context, id int32) ApiPatchFinanceInvoiceEmailTemplatesByIdRequest {
	return ApiPatchFinanceInvoiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InvoiceEmailTemplate
func (a *InvoiceEmailTemplatesAPIService) PatchFinanceInvoiceEmailTemplatesByIdExecute(r ApiPatchFinanceInvoiceEmailTemplatesByIdRequest) (*InvoiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.PatchFinanceInvoiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceInvoiceEmailTemplatesRequest struct {
	ctx                  context.Context
	ApiService           *InvoiceEmailTemplatesAPIService
	clientId             *string
	invoiceEmailTemplate *InvoiceEmailTemplate
}

func (r ApiPostFinanceInvoiceEmailTemplatesRequest) ClientId(clientId string) ApiPostFinanceInvoiceEmailTemplatesRequest {
	r.clientId = &clientId
	return r
}

// invoiceEmailTemplate
func (r ApiPostFinanceInvoiceEmailTemplatesRequest) InvoiceEmailTemplate(invoiceEmailTemplate InvoiceEmailTemplate) ApiPostFinanceInvoiceEmailTemplatesRequest {
	r.invoiceEmailTemplate = &invoiceEmailTemplate
	return r
}

func (r ApiPostFinanceInvoiceEmailTemplatesRequest) Execute() (*InvoiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PostFinanceInvoiceEmailTemplatesExecute(r)
}

/*
PostFinanceInvoiceEmailTemplates Post InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostFinanceInvoiceEmailTemplatesRequest
*/
func (a *InvoiceEmailTemplatesAPIService) PostFinanceInvoiceEmailTemplates(ctx context.Context) ApiPostFinanceInvoiceEmailTemplatesRequest {
	return ApiPostFinanceInvoiceEmailTemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return InvoiceEmailTemplate
func (a *InvoiceEmailTemplatesAPIService) PostFinanceInvoiceEmailTemplatesExecute(r ApiPostFinanceInvoiceEmailTemplatesRequest) (*InvoiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.PostFinanceInvoiceEmailTemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("invoiceEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceInvoiceEmailTemplatesByIdRequest struct {
	ctx                  context.Context
	ApiService           *InvoiceEmailTemplatesAPIService
	id                   int32
	clientId             *string
	invoiceEmailTemplate *InvoiceEmailTemplate
}

func (r ApiPutFinanceInvoiceEmailTemplatesByIdRequest) ClientId(clientId string) ApiPutFinanceInvoiceEmailTemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// invoiceEmailTemplate
func (r ApiPutFinanceInvoiceEmailTemplatesByIdRequest) InvoiceEmailTemplate(invoiceEmailTemplate InvoiceEmailTemplate) ApiPutFinanceInvoiceEmailTemplatesByIdRequest {
	r.invoiceEmailTemplate = &invoiceEmailTemplate
	return r
}

func (r ApiPutFinanceInvoiceEmailTemplatesByIdRequest) Execute() (*InvoiceEmailTemplate, *http.Response, error) {
	return r.ApiService.PutFinanceInvoiceEmailTemplatesByIdExecute(r)
}

/*
PutFinanceInvoiceEmailTemplatesById Put InvoiceEmailTemplate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceEmailTemplateId
	@return ApiPutFinanceInvoiceEmailTemplatesByIdRequest
*/
func (a *InvoiceEmailTemplatesAPIService) PutFinanceInvoiceEmailTemplatesById(ctx context.Context, id int32) ApiPutFinanceInvoiceEmailTemplatesByIdRequest {
	return ApiPutFinanceInvoiceEmailTemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return InvoiceEmailTemplate
func (a *InvoiceEmailTemplatesAPIService) PutFinanceInvoiceEmailTemplatesByIdExecute(r ApiPutFinanceInvoiceEmailTemplatesByIdRequest) (*InvoiceEmailTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceEmailTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceEmailTemplatesAPIService.PutFinanceInvoiceEmailTemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoiceEmailTemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceEmailTemplate == nil {
		return localVarReturnValue, nil, reportError("invoiceEmailTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceEmailTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
