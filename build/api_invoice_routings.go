/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// InvoiceRoutingsAPIService InvoiceRoutingsAPI service
type InvoiceRoutingsAPIService service

type ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest struct {
	ctx        context.Context
	ApiService *InvoiceRoutingsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceInvoicesByParentIdRoutingsByIdExecute(r)
}

/*
DeleteFinanceInvoicesByParentIdRoutingsById Delete Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id InvoiceRoutingsId
	@param parentId Invoice
	@return ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest
*/
func (a *InvoiceRoutingsAPIService) DeleteFinanceInvoicesByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest {
	return ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *InvoiceRoutingsAPIService) DeleteFinanceInvoicesByParentIdRoutingsByIdExecute(r ApiDeleteFinanceInvoicesByParentIdRoutingsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.DeleteFinanceInvoicesByParentIdRoutingsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesByParentIdRoutingsRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceRoutingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) ClientId(clientId string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) Conditions(conditions string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) Fields(fields string) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) Page(page int32) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) PageId(pageId int32) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsRequest) Execute() ([]InvoiceRouting, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesByParentIdRoutingsExecute(r)
}

/*
GetFinanceInvoicesByParentIdRoutings Get List of Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId Invoice
	@return ApiGetFinanceInvoicesByParentIdRoutingsRequest
*/
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutings(ctx context.Context, parentId int32) ApiGetFinanceInvoicesByParentIdRoutingsRequest {
	return ApiGetFinanceInvoicesByParentIdRoutingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []InvoiceRouting
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutingsExecute(r ApiGetFinanceInvoicesByParentIdRoutingsRequest) ([]InvoiceRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []InvoiceRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.GetFinanceInvoicesByParentIdRoutings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceRoutingsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) Conditions(conditions string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) Fields(fields string) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) Page(page int32) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) PageId(pageId int32) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) Execute() (*InvoiceRouting, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesByParentIdRoutingsByIdExecute(r)
}

/*
GetFinanceInvoicesByParentIdRoutingsById Get Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id InvoiceRoutingsId
	@param parentId Invoice
	@return ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest
*/
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest {
	return ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return InvoiceRouting
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutingsByIdExecute(r ApiGetFinanceInvoicesByParentIdRoutingsByIdRequest) (*InvoiceRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.GetFinanceInvoicesByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesByParentIdRoutingsCountRequest struct {
	ctx                   context.Context
	ApiService            *InvoiceRoutingsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) ClientId(clientId string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) Conditions(conditions string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) Fields(fields string) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) Page(page int32) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) PageId(pageId int32) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesByParentIdRoutingsCountExecute(r)
}

/*
GetFinanceInvoicesByParentIdRoutingsCount Get Count of Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId Invoice
	@return ApiGetFinanceInvoicesByParentIdRoutingsCountRequest
*/
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutingsCount(ctx context.Context, parentId int32) ApiGetFinanceInvoicesByParentIdRoutingsCountRequest {
	return ApiGetFinanceInvoicesByParentIdRoutingsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *InvoiceRoutingsAPIService) GetFinanceInvoicesByParentIdRoutingsCountExecute(r ApiGetFinanceInvoicesByParentIdRoutingsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.GetFinanceInvoicesByParentIdRoutingsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest struct {
	ctx            context.Context
	ApiService     *InvoiceRoutingsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest) Execute() (*InvoiceRouting, *http.Response, error) {
	return r.ApiService.PatchFinanceInvoicesByParentIdRoutingsByIdExecute(r)
}

/*
PatchFinanceInvoicesByParentIdRoutingsById Patch Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id InvoiceRoutingsId
	@param parentId Invoice
	@return ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest
*/
func (a *InvoiceRoutingsAPIService) PatchFinanceInvoicesByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest {
	return ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return InvoiceRouting
func (a *InvoiceRoutingsAPIService) PatchFinanceInvoicesByParentIdRoutingsByIdExecute(r ApiPatchFinanceInvoicesByParentIdRoutingsByIdRequest) (*InvoiceRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.PatchFinanceInvoicesByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceInvoicesByParentIdRoutingsRequest struct {
	ctx            context.Context
	ApiService     *InvoiceRoutingsAPIService
	parentId       int32
	clientId       *string
	invoiceRouting *InvoiceRouting
}

func (r ApiPostFinanceInvoicesByParentIdRoutingsRequest) ClientId(clientId string) ApiPostFinanceInvoicesByParentIdRoutingsRequest {
	r.clientId = &clientId
	return r
}

// InvoiceRouting
func (r ApiPostFinanceInvoicesByParentIdRoutingsRequest) InvoiceRouting(invoiceRouting InvoiceRouting) ApiPostFinanceInvoicesByParentIdRoutingsRequest {
	r.invoiceRouting = &invoiceRouting
	return r
}

func (r ApiPostFinanceInvoicesByParentIdRoutingsRequest) Execute() (*InvoiceRouting, *http.Response, error) {
	return r.ApiService.PostFinanceInvoicesByParentIdRoutingsExecute(r)
}

/*
PostFinanceInvoicesByParentIdRoutings Post Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId Invoice
	@return ApiPostFinanceInvoicesByParentIdRoutingsRequest
*/
func (a *InvoiceRoutingsAPIService) PostFinanceInvoicesByParentIdRoutings(ctx context.Context, parentId int32) ApiPostFinanceInvoicesByParentIdRoutingsRequest {
	return ApiPostFinanceInvoicesByParentIdRoutingsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return InvoiceRouting
func (a *InvoiceRoutingsAPIService) PostFinanceInvoicesByParentIdRoutingsExecute(r ApiPostFinanceInvoicesByParentIdRoutingsRequest) (*InvoiceRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.PostFinanceInvoicesByParentIdRoutings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceRouting == nil {
		return localVarReturnValue, nil, reportError("invoiceRouting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceRouting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest struct {
	ctx            context.Context
	ApiService     *InvoiceRoutingsAPIService
	id             int32
	parentId       int32
	clientId       *string
	invoiceRouting *InvoiceRouting
}

func (r ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest) ClientId(clientId string) ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.clientId = &clientId
	return r
}

// companyTypeAssociation
func (r ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest) InvoiceRouting(invoiceRouting InvoiceRouting) ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest {
	r.invoiceRouting = &invoiceRouting
	return r
}

func (r ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest) Execute() (*InvoiceRouting, *http.Response, error) {
	return r.ApiService.PutFinanceInvoicesByParentIdRoutingsByIdExecute(r)
}

/*
PutFinanceInvoicesByParentIdRoutingsById Put Invoice Routings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id InvoiceRoutingId
	@param parentId Invoice
	@return ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest
*/
func (a *InvoiceRoutingsAPIService) PutFinanceInvoicesByParentIdRoutingsById(ctx context.Context, id int32, parentId int32) ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest {
	return ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return InvoiceRouting
func (a *InvoiceRoutingsAPIService) PutFinanceInvoicesByParentIdRoutingsByIdExecute(r ApiPutFinanceInvoicesByParentIdRoutingsByIdRequest) (*InvoiceRouting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InvoiceRouting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoiceRoutingsAPIService.PutFinanceInvoicesByParentIdRoutingsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{parentId}/routings/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoiceRouting == nil {
		return localVarReturnValue, nil, reportError("invoiceRouting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoiceRouting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
