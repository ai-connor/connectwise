/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// InvoicesAPIService InvoicesAPI service
type InvoicesAPIService service

type ApiDeleteFinanceInvoicesByIdRequest struct {
	ctx        context.Context
	ApiService *InvoicesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteFinanceInvoicesByIdRequest) ClientId(clientId string) ApiDeleteFinanceInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteFinanceInvoicesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteFinanceInvoicesByIdExecute(r)
}

/*
DeleteFinanceInvoicesById Delete Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceId
	@return ApiDeleteFinanceInvoicesByIdRequest
*/
func (a *InvoicesAPIService) DeleteFinanceInvoicesById(ctx context.Context, id int32) ApiDeleteFinanceInvoicesByIdRequest {
	return ApiDeleteFinanceInvoicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *InvoicesAPIService) DeleteFinanceInvoicesByIdExecute(r ApiDeleteFinanceInvoicesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.DeleteFinanceInvoicesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesRequest struct {
	ctx                   context.Context
	ApiService            *InvoicesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesRequest) ClientId(clientId string) ApiGetFinanceInvoicesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesRequest) Conditions(conditions string) ApiGetFinanceInvoicesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesRequest) Fields(fields string) ApiGetFinanceInvoicesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesRequest) Page(page int32) ApiGetFinanceInvoicesRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesRequest) PageId(pageId int32) ApiGetFinanceInvoicesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesRequest) Execute() ([]Invoice, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesExecute(r)
}

/*
GetFinanceInvoices Get List of Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceInvoicesRequest
*/
func (a *InvoicesAPIService) GetFinanceInvoices(ctx context.Context) ApiGetFinanceInvoicesRequest {
	return ApiGetFinanceInvoicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Invoice
func (a *InvoicesAPIService) GetFinanceInvoicesExecute(r ApiGetFinanceInvoicesRequest) ([]Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.GetFinanceInvoices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesByIdRequest struct {
	ctx                   context.Context
	ApiService            *InvoicesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesByIdRequest) ClientId(clientId string) ApiGetFinanceInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) Conditions(conditions string) ApiGetFinanceInvoicesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) Fields(fields string) ApiGetFinanceInvoicesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) Page(page int32) ApiGetFinanceInvoicesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) PageId(pageId int32) ApiGetFinanceInvoicesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesByIdRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesByIdExecute(r)
}

/*
GetFinanceInvoicesById Get Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceId
	@return ApiGetFinanceInvoicesByIdRequest
*/
func (a *InvoicesAPIService) GetFinanceInvoicesById(ctx context.Context, id int32) ApiGetFinanceInvoicesByIdRequest {
	return ApiGetFinanceInvoicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesAPIService) GetFinanceInvoicesByIdExecute(r ApiGetFinanceInvoicesByIdRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.GetFinanceInvoicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesByIdPdfRequest struct {
	ctx                   context.Context
	ApiService            *InvoicesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) ClientId(clientId string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) Conditions(conditions string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) Fields(fields string) ApiGetFinanceInvoicesByIdPdfRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) Page(page int32) ApiGetFinanceInvoicesByIdPdfRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesByIdPdfRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) PageId(pageId int32) ApiGetFinanceInvoicesByIdPdfRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesByIdPdfRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesByIdPdfExecute(r)
}

/*
GetFinanceInvoicesByIdPdf Get Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceId
	@return ApiGetFinanceInvoicesByIdPdfRequest
*/
func (a *InvoicesAPIService) GetFinanceInvoicesByIdPdf(ctx context.Context, id int32) ApiGetFinanceInvoicesByIdPdfRequest {
	return ApiGetFinanceInvoicesByIdPdfRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return *os.File
func (a *InvoicesAPIService) GetFinanceInvoicesByIdPdfExecute(r ApiGetFinanceInvoicesByIdPdfRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.GetFinanceInvoicesByIdPdf")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{id}/pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFinanceInvoicesCountRequest struct {
	ctx                   context.Context
	ApiService            *InvoicesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetFinanceInvoicesCountRequest) ClientId(clientId string) ApiGetFinanceInvoicesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) Conditions(conditions string) ApiGetFinanceInvoicesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) ChildConditions(childConditions string) ApiGetFinanceInvoicesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetFinanceInvoicesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) OrderBy(orderBy string) ApiGetFinanceInvoicesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) Fields(fields string) ApiGetFinanceInvoicesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) Page(page int32) ApiGetFinanceInvoicesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) PageSize(pageSize int32) ApiGetFinanceInvoicesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) PageId(pageId int32) ApiGetFinanceInvoicesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetFinanceInvoicesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetFinanceInvoicesCountExecute(r)
}

/*
GetFinanceInvoicesCount Get Count of Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFinanceInvoicesCountRequest
*/
func (a *InvoicesAPIService) GetFinanceInvoicesCount(ctx context.Context) ApiGetFinanceInvoicesCountRequest {
	return ApiGetFinanceInvoicesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *InvoicesAPIService) GetFinanceInvoicesCountExecute(r ApiGetFinanceInvoicesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.GetFinanceInvoicesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchFinanceInvoicesByIdRequest struct {
	ctx            context.Context
	ApiService     *InvoicesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchFinanceInvoicesByIdRequest) ClientId(clientId string) ApiPatchFinanceInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchFinanceInvoicesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchFinanceInvoicesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchFinanceInvoicesByIdRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.PatchFinanceInvoicesByIdExecute(r)
}

/*
PatchFinanceInvoicesById Patch Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceId
	@return ApiPatchFinanceInvoicesByIdRequest
*/
func (a *InvoicesAPIService) PatchFinanceInvoicesById(ctx context.Context, id int32) ApiPatchFinanceInvoicesByIdRequest {
	return ApiPatchFinanceInvoicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesAPIService) PatchFinanceInvoicesByIdExecute(r ApiPatchFinanceInvoicesByIdRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.PatchFinanceInvoicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostFinanceInvoicesRequest struct {
	ctx        context.Context
	ApiService *InvoicesAPIService
	clientId   *string
	invoice    *Invoice
}

func (r ApiPostFinanceInvoicesRequest) ClientId(clientId string) ApiPostFinanceInvoicesRequest {
	r.clientId = &clientId
	return r
}

// invoice
func (r ApiPostFinanceInvoicesRequest) Invoice(invoice Invoice) ApiPostFinanceInvoicesRequest {
	r.invoice = &invoice
	return r
}

func (r ApiPostFinanceInvoicesRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.PostFinanceInvoicesExecute(r)
}

/*
PostFinanceInvoices Post Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostFinanceInvoicesRequest
*/
func (a *InvoicesAPIService) PostFinanceInvoices(ctx context.Context) ApiPostFinanceInvoicesRequest {
	return ApiPostFinanceInvoicesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesAPIService) PostFinanceInvoicesExecute(r ApiPostFinanceInvoicesRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.PostFinanceInvoices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoice == nil {
		return localVarReturnValue, nil, reportError("invoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutFinanceInvoicesByIdRequest struct {
	ctx        context.Context
	ApiService *InvoicesAPIService
	id         int32
	clientId   *string
	invoice    *Invoice
}

func (r ApiPutFinanceInvoicesByIdRequest) ClientId(clientId string) ApiPutFinanceInvoicesByIdRequest {
	r.clientId = &clientId
	return r
}

// invoice
func (r ApiPutFinanceInvoicesByIdRequest) Invoice(invoice Invoice) ApiPutFinanceInvoicesByIdRequest {
	r.invoice = &invoice
	return r
}

func (r ApiPutFinanceInvoicesByIdRequest) Execute() (*Invoice, *http.Response, error) {
	return r.ApiService.PutFinanceInvoicesByIdExecute(r)
}

/*
PutFinanceInvoicesById Put Invoice

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id invoiceId
	@return ApiPutFinanceInvoicesByIdRequest
*/
func (a *InvoicesAPIService) PutFinanceInvoicesById(ctx context.Context, id int32) ApiPutFinanceInvoicesByIdRequest {
	return ApiPutFinanceInvoicesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Invoice
func (a *InvoicesAPIService) PutFinanceInvoicesByIdExecute(r ApiPutFinanceInvoicesByIdRequest) (*Invoice, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Invoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvoicesAPIService.PutFinanceInvoicesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/finance/invoices/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.invoice == nil {
		return localVarReturnValue, nil, reportError("invoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.invoice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
