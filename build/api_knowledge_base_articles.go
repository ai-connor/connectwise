/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// KnowledgeBaseArticlesAPIService KnowledgeBaseArticlesAPI service
type KnowledgeBaseArticlesAPIService service

type ApiDeleteServiceKnowledgeBaseArticlesByIdRequest struct {
	ctx        context.Context
	ApiService *KnowledgeBaseArticlesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteServiceKnowledgeBaseArticlesByIdRequest) ClientId(clientId string) ApiDeleteServiceKnowledgeBaseArticlesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteServiceKnowledgeBaseArticlesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteServiceKnowledgeBaseArticlesByIdExecute(r)
}

/*
DeleteServiceKnowledgeBaseArticlesById Delete KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id knowledgeBaseArticleId
	@return ApiDeleteServiceKnowledgeBaseArticlesByIdRequest
*/
func (a *KnowledgeBaseArticlesAPIService) DeleteServiceKnowledgeBaseArticlesById(ctx context.Context, id int32) ApiDeleteServiceKnowledgeBaseArticlesByIdRequest {
	return ApiDeleteServiceKnowledgeBaseArticlesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *KnowledgeBaseArticlesAPIService) DeleteServiceKnowledgeBaseArticlesByIdExecute(r ApiDeleteServiceKnowledgeBaseArticlesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.DeleteServiceKnowledgeBaseArticlesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseArticlesRequest struct {
	ctx                   context.Context
	ApiService            *KnowledgeBaseArticlesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) Fields(fields string) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) Page(page int32) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseArticlesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesRequest) Execute() ([]KnowledgeBaseArticle, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseArticlesExecute(r)
}

/*
GetServiceKnowledgeBaseArticles Get List of KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceKnowledgeBaseArticlesRequest
*/
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticles(ctx context.Context) ApiGetServiceKnowledgeBaseArticlesRequest {
	return ApiGetServiceKnowledgeBaseArticlesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []KnowledgeBaseArticle
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticlesExecute(r ApiGetServiceKnowledgeBaseArticlesRequest) ([]KnowledgeBaseArticle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []KnowledgeBaseArticle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.GetServiceKnowledgeBaseArticles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseArticlesByIdRequest struct {
	ctx                   context.Context
	ApiService            *KnowledgeBaseArticlesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) Fields(fields string) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) Page(page int32) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesByIdRequest) Execute() (*KnowledgeBaseArticle, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseArticlesByIdExecute(r)
}

/*
GetServiceKnowledgeBaseArticlesById Get KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id knowledgeBaseArticleId
	@return ApiGetServiceKnowledgeBaseArticlesByIdRequest
*/
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticlesById(ctx context.Context, id int32) ApiGetServiceKnowledgeBaseArticlesByIdRequest {
	return ApiGetServiceKnowledgeBaseArticlesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return KnowledgeBaseArticle
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticlesByIdExecute(r ApiGetServiceKnowledgeBaseArticlesByIdRequest) (*KnowledgeBaseArticle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KnowledgeBaseArticle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.GetServiceKnowledgeBaseArticlesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetServiceKnowledgeBaseArticlesCountRequest struct {
	ctx                   context.Context
	ApiService            *KnowledgeBaseArticlesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) ClientId(clientId string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) Conditions(conditions string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) ChildConditions(childConditions string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) OrderBy(orderBy string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) Fields(fields string) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) Page(page int32) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) PageSize(pageSize int32) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) PageId(pageId int32) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetServiceKnowledgeBaseArticlesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetServiceKnowledgeBaseArticlesCountExecute(r)
}

/*
GetServiceKnowledgeBaseArticlesCount Get Count of KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetServiceKnowledgeBaseArticlesCountRequest
*/
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticlesCount(ctx context.Context) ApiGetServiceKnowledgeBaseArticlesCountRequest {
	return ApiGetServiceKnowledgeBaseArticlesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *KnowledgeBaseArticlesAPIService) GetServiceKnowledgeBaseArticlesCountExecute(r ApiGetServiceKnowledgeBaseArticlesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.GetServiceKnowledgeBaseArticlesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchServiceKnowledgeBaseArticlesByIdRequest struct {
	ctx            context.Context
	ApiService     *KnowledgeBaseArticlesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchServiceKnowledgeBaseArticlesByIdRequest) ClientId(clientId string) ApiPatchServiceKnowledgeBaseArticlesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchServiceKnowledgeBaseArticlesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchServiceKnowledgeBaseArticlesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchServiceKnowledgeBaseArticlesByIdRequest) Execute() (*KnowledgeBaseArticle, *http.Response, error) {
	return r.ApiService.PatchServiceKnowledgeBaseArticlesByIdExecute(r)
}

/*
PatchServiceKnowledgeBaseArticlesById Patch KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id knowledgeBaseArticleId
	@return ApiPatchServiceKnowledgeBaseArticlesByIdRequest
*/
func (a *KnowledgeBaseArticlesAPIService) PatchServiceKnowledgeBaseArticlesById(ctx context.Context, id int32) ApiPatchServiceKnowledgeBaseArticlesByIdRequest {
	return ApiPatchServiceKnowledgeBaseArticlesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return KnowledgeBaseArticle
func (a *KnowledgeBaseArticlesAPIService) PatchServiceKnowledgeBaseArticlesByIdExecute(r ApiPatchServiceKnowledgeBaseArticlesByIdRequest) (*KnowledgeBaseArticle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KnowledgeBaseArticle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.PatchServiceKnowledgeBaseArticlesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostServiceKnowledgeBaseArticlesRequest struct {
	ctx                  context.Context
	ApiService           *KnowledgeBaseArticlesAPIService
	clientId             *string
	knowledgeBaseArticle *KnowledgeBaseArticle
}

func (r ApiPostServiceKnowledgeBaseArticlesRequest) ClientId(clientId string) ApiPostServiceKnowledgeBaseArticlesRequest {
	r.clientId = &clientId
	return r
}

// knowledgeBaseArticle
func (r ApiPostServiceKnowledgeBaseArticlesRequest) KnowledgeBaseArticle(knowledgeBaseArticle KnowledgeBaseArticle) ApiPostServiceKnowledgeBaseArticlesRequest {
	r.knowledgeBaseArticle = &knowledgeBaseArticle
	return r
}

func (r ApiPostServiceKnowledgeBaseArticlesRequest) Execute() (*KnowledgeBaseArticle, *http.Response, error) {
	return r.ApiService.PostServiceKnowledgeBaseArticlesExecute(r)
}

/*
PostServiceKnowledgeBaseArticles Post KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostServiceKnowledgeBaseArticlesRequest
*/
func (a *KnowledgeBaseArticlesAPIService) PostServiceKnowledgeBaseArticles(ctx context.Context) ApiPostServiceKnowledgeBaseArticlesRequest {
	return ApiPostServiceKnowledgeBaseArticlesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return KnowledgeBaseArticle
func (a *KnowledgeBaseArticlesAPIService) PostServiceKnowledgeBaseArticlesExecute(r ApiPostServiceKnowledgeBaseArticlesRequest) (*KnowledgeBaseArticle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KnowledgeBaseArticle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.PostServiceKnowledgeBaseArticles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.knowledgeBaseArticle == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseArticle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.knowledgeBaseArticle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutServiceKnowledgeBaseArticlesByIdRequest struct {
	ctx                  context.Context
	ApiService           *KnowledgeBaseArticlesAPIService
	id                   int32
	clientId             *string
	knowledgeBaseArticle *KnowledgeBaseArticle
}

func (r ApiPutServiceKnowledgeBaseArticlesByIdRequest) ClientId(clientId string) ApiPutServiceKnowledgeBaseArticlesByIdRequest {
	r.clientId = &clientId
	return r
}

// knowledgeBaseArticle
func (r ApiPutServiceKnowledgeBaseArticlesByIdRequest) KnowledgeBaseArticle(knowledgeBaseArticle KnowledgeBaseArticle) ApiPutServiceKnowledgeBaseArticlesByIdRequest {
	r.knowledgeBaseArticle = &knowledgeBaseArticle
	return r
}

func (r ApiPutServiceKnowledgeBaseArticlesByIdRequest) Execute() (*KnowledgeBaseArticle, *http.Response, error) {
	return r.ApiService.PutServiceKnowledgeBaseArticlesByIdExecute(r)
}

/*
PutServiceKnowledgeBaseArticlesById Put KnowledgeBaseArticle

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id knowledgeBaseArticleId
	@return ApiPutServiceKnowledgeBaseArticlesByIdRequest
*/
func (a *KnowledgeBaseArticlesAPIService) PutServiceKnowledgeBaseArticlesById(ctx context.Context, id int32) ApiPutServiceKnowledgeBaseArticlesByIdRequest {
	return ApiPutServiceKnowledgeBaseArticlesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return KnowledgeBaseArticle
func (a *KnowledgeBaseArticlesAPIService) PutServiceKnowledgeBaseArticlesByIdExecute(r ApiPutServiceKnowledgeBaseArticlesByIdRequest) (*KnowledgeBaseArticle, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *KnowledgeBaseArticle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeBaseArticlesAPIService.PutServiceKnowledgeBaseArticlesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service/knowledgeBaseArticles/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.knowledgeBaseArticle == nil {
		return localVarReturnValue, nil, reportError("knowledgeBaseArticle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.knowledgeBaseArticle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
