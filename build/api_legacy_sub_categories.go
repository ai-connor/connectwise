/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// LegacySubCategoriesAPIService LegacySubCategoriesAPI service
type LegacySubCategoriesAPIService service

type ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest struct {
	ctx        context.Context
	ApiService *LegacySubCategoriesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest) ClientId(clientId string) ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteProcurementCategoriesByParentIdSubcategoriesByIdExecute(r)
}

/*
DeleteProcurementCategoriesByParentIdSubcategoriesById Delete LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subcategoryId
	@param parentId categoryId
	@return ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest
*/
func (a *LegacySubCategoriesAPIService) DeleteProcurementCategoriesByParentIdSubcategoriesById(ctx context.Context, id int32, parentId int32) ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	return ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *LegacySubCategoriesAPIService) DeleteProcurementCategoriesByParentIdSubcategoriesByIdExecute(r ApiDeleteProcurementCategoriesByParentIdSubcategoriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.DeleteProcurementCategoriesByParentIdSubcategoriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetProcurementCategoriesByParentIdSubcategoriesRequest struct {
	ctx                   context.Context
	ApiService            *LegacySubCategoriesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) ClientId(clientId string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) Conditions(conditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) ChildConditions(childConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) OrderBy(orderBy string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) Fields(fields string) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) Page(page int32) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) PageSize(pageSize int32) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) PageId(pageId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) Execute() ([]LegacySubCategory, *http.Response, error) {
	return r.ApiService.GetProcurementCategoriesByParentIdSubcategoriesExecute(r)
}

/*
GetProcurementCategoriesByParentIdSubcategories Get List of LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId categoryId
	@return ApiGetProcurementCategoriesByParentIdSubcategoriesRequest
*/
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategories(ctx context.Context, parentId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesRequest {
	return ApiGetProcurementCategoriesByParentIdSubcategoriesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []LegacySubCategory
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategoriesExecute(r ApiGetProcurementCategoriesByParentIdSubcategoriesRequest) ([]LegacySubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []LegacySubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.GetProcurementCategoriesByParentIdSubcategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest struct {
	ctx                   context.Context
	ApiService            *LegacySubCategoriesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) ClientId(clientId string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) Conditions(conditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) ChildConditions(childConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) OrderBy(orderBy string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) Fields(fields string) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) Page(page int32) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) PageSize(pageSize int32) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) PageId(pageId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) Execute() (*LegacySubCategory, *http.Response, error) {
	return r.ApiService.GetProcurementCategoriesByParentIdSubcategoriesByIdExecute(r)
}

/*
GetProcurementCategoriesByParentIdSubcategoriesById Get LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subcategoryId
	@param parentId categoryId
	@return ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest
*/
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategoriesById(ctx context.Context, id int32, parentId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	return ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return LegacySubCategory
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategoriesByIdExecute(r ApiGetProcurementCategoriesByParentIdSubcategoriesByIdRequest) (*LegacySubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LegacySubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.GetProcurementCategoriesByParentIdSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest struct {
	ctx                   context.Context
	ApiService            *LegacySubCategoriesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) ClientId(clientId string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) Conditions(conditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) ChildConditions(childConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) OrderBy(orderBy string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) Fields(fields string) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) Page(page int32) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) PageSize(pageSize int32) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) PageId(pageId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetProcurementCategoriesByParentIdSubcategoriesCountExecute(r)
}

/*
GetProcurementCategoriesByParentIdSubcategoriesCount Get Count of LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId categoryId
	@return ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest
*/
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategoriesCount(ctx context.Context, parentId int32) ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest {
	return ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *LegacySubCategoriesAPIService) GetProcurementCategoriesByParentIdSubcategoriesCountExecute(r ApiGetProcurementCategoriesByParentIdSubcategoriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.GetProcurementCategoriesByParentIdSubcategoriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest struct {
	ctx            context.Context
	ApiService     *LegacySubCategoriesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest) ClientId(clientId string) ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest) Execute() (*LegacySubCategory, *http.Response, error) {
	return r.ApiService.PatchProcurementCategoriesByParentIdSubcategoriesByIdExecute(r)
}

/*
PatchProcurementCategoriesByParentIdSubcategoriesById Patch LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subcategoryId
	@param parentId categoryId
	@return ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest
*/
func (a *LegacySubCategoriesAPIService) PatchProcurementCategoriesByParentIdSubcategoriesById(ctx context.Context, id int32, parentId int32) ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	return ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return LegacySubCategory
func (a *LegacySubCategoriesAPIService) PatchProcurementCategoriesByParentIdSubcategoriesByIdExecute(r ApiPatchProcurementCategoriesByParentIdSubcategoriesByIdRequest) (*LegacySubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LegacySubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.PatchProcurementCategoriesByParentIdSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostProcurementCategoriesByParentIdSubcategoriesRequest struct {
	ctx               context.Context
	ApiService        *LegacySubCategoriesAPIService
	parentId          int32
	clientId          *string
	legacySubCategory *LegacySubCategory
}

func (r ApiPostProcurementCategoriesByParentIdSubcategoriesRequest) ClientId(clientId string) ApiPostProcurementCategoriesByParentIdSubcategoriesRequest {
	r.clientId = &clientId
	return r
}

// subCategory
func (r ApiPostProcurementCategoriesByParentIdSubcategoriesRequest) LegacySubCategory(legacySubCategory LegacySubCategory) ApiPostProcurementCategoriesByParentIdSubcategoriesRequest {
	r.legacySubCategory = &legacySubCategory
	return r
}

func (r ApiPostProcurementCategoriesByParentIdSubcategoriesRequest) Execute() (*LegacySubCategory, *http.Response, error) {
	return r.ApiService.PostProcurementCategoriesByParentIdSubcategoriesExecute(r)
}

/*
PostProcurementCategoriesByParentIdSubcategories Post LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId categoryId
	@return ApiPostProcurementCategoriesByParentIdSubcategoriesRequest
*/
func (a *LegacySubCategoriesAPIService) PostProcurementCategoriesByParentIdSubcategories(ctx context.Context, parentId int32) ApiPostProcurementCategoriesByParentIdSubcategoriesRequest {
	return ApiPostProcurementCategoriesByParentIdSubcategoriesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return LegacySubCategory
func (a *LegacySubCategoriesAPIService) PostProcurementCategoriesByParentIdSubcategoriesExecute(r ApiPostProcurementCategoriesByParentIdSubcategoriesRequest) (*LegacySubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LegacySubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.PostProcurementCategoriesByParentIdSubcategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.legacySubCategory == nil {
		return localVarReturnValue, nil, reportError("legacySubCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.legacySubCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest struct {
	ctx               context.Context
	ApiService        *LegacySubCategoriesAPIService
	id                int32
	parentId          int32
	clientId          *string
	legacySubCategory *LegacySubCategory
}

func (r ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest) ClientId(clientId string) ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.clientId = &clientId
	return r
}

// subCategory
func (r ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest) LegacySubCategory(legacySubCategory LegacySubCategory) ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	r.legacySubCategory = &legacySubCategory
	return r
}

func (r ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest) Execute() (*LegacySubCategory, *http.Response, error) {
	return r.ApiService.PutProcurementCategoriesByParentIdSubcategoriesByIdExecute(r)
}

/*
PutProcurementCategoriesByParentIdSubcategoriesById Put LegacySubCategory

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id subcategoryId
	@param parentId categoryId
	@return ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest
*/
func (a *LegacySubCategoriesAPIService) PutProcurementCategoriesByParentIdSubcategoriesById(ctx context.Context, id int32, parentId int32) ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest {
	return ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return LegacySubCategory
func (a *LegacySubCategoriesAPIService) PutProcurementCategoriesByParentIdSubcategoriesByIdExecute(r ApiPutProcurementCategoriesByParentIdSubcategoriesByIdRequest) (*LegacySubCategory, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *LegacySubCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LegacySubCategoriesAPIService.PutProcurementCategoriesByParentIdSubcategoriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/procurement/categories/{parentId}/subcategories/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.legacySubCategory == nil {
		return localVarReturnValue, nil, reportError("legacySubCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.legacySubCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
