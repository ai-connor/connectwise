/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ManagedDevicesIntegrationNotificationsAPIService ManagedDevicesIntegrationNotificationsAPI service
type ManagedDevicesIntegrationNotificationsAPIService service

type ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest struct {
	ctx        context.Context
	ApiService *ManagedDevicesIntegrationNotificationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Execute() (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.DeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r)
}

/*
DeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsById Delete ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId managedDevicesIntegrationId
	@return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	return ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) DeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r ApiDeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.DeleteCompanyManagedDevicesIntegrationsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest struct {
	ctx                   context.Context
	ApiService            *ManagedDevicesIntegrationNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) Execute() ([]ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdNotificationsExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdNotifications Get List of ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managedDevicesIntegrationId
	@return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotifications(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotificationsExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) ([]ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ManagedDevicesIntegrationNotificationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Execute() (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdNotificationsById Get ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId managedDevicesIntegrationId
	@return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ManagedDevicesIntegrationNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) Fields(fields string) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) Page(page int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountExecute(r)
}

/*
GetCompanyManagedDevicesIntegrationsByParentIdNotificationsCount Get Count of ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managedDevicesIntegrationId
	@return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotificationsCount(ctx context.Context, parentId int32) ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest {
	return ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ManagedDevicesIntegrationNotificationsAPIService) GetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountExecute(r ApiGetCompanyManagedDevicesIntegrationsByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.GetCompanyManagedDevicesIntegrationsByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest struct {
	ctx            context.Context
	ApiService     *ManagedDevicesIntegrationNotificationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Execute() (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.PatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r)
}

/*
PatchCompanyManagedDevicesIntegrationsByParentIdNotificationsById Patch ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId managedDevicesIntegrationId
	@return ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	return ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) PatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r ApiPatchCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.PatchCompanyManagedDevicesIntegrationsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest struct {
	ctx                                   context.Context
	ApiService                            *ManagedDevicesIntegrationNotificationsAPIService
	parentId                              int32
	clientId                              *string
	managedDevicesIntegrationNotification *ManagedDevicesIntegrationNotification
}

func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) ClientId(clientId string) ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// notification
func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) ManagedDevicesIntegrationNotification(managedDevicesIntegrationNotification ManagedDevicesIntegrationNotification) ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	r.managedDevicesIntegrationNotification = &managedDevicesIntegrationNotification
	return r
}

func (r ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) Execute() (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.PostCompanyManagedDevicesIntegrationsByParentIdNotificationsExecute(r)
}

/*
PostCompanyManagedDevicesIntegrationsByParentIdNotifications Post ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managedDevicesIntegrationId
	@return ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) PostCompanyManagedDevicesIntegrationsByParentIdNotifications(ctx context.Context, parentId int32) ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest {
	return ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) PostCompanyManagedDevicesIntegrationsByParentIdNotificationsExecute(r ApiPostCompanyManagedDevicesIntegrationsByParentIdNotificationsRequest) (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.PostCompanyManagedDevicesIntegrationsByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managedDevicesIntegrationNotification == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managedDevicesIntegrationNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest struct {
	ctx                                   context.Context
	ApiService                            *ManagedDevicesIntegrationNotificationsAPIService
	id                                    int32
	parentId                              int32
	clientId                              *string
	managedDevicesIntegrationNotification *ManagedDevicesIntegrationNotification
}

func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// notification
func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) ManagedDevicesIntegrationNotification(managedDevicesIntegrationNotification ManagedDevicesIntegrationNotification) ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	r.managedDevicesIntegrationNotification = &managedDevicesIntegrationNotification
	return r
}

func (r ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) Execute() (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	return r.ApiService.PutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r)
}

/*
PutCompanyManagedDevicesIntegrationsByParentIdNotificationsById Put ManagedDevicesIntegrationNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId managedDevicesIntegrationId
	@return ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest
*/
func (a *ManagedDevicesIntegrationNotificationsAPIService) PutCompanyManagedDevicesIntegrationsByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest {
	return ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagedDevicesIntegrationNotification
func (a *ManagedDevicesIntegrationNotificationsAPIService) PutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdExecute(r ApiPutCompanyManagedDevicesIntegrationsByParentIdNotificationsByIdRequest) (*ManagedDevicesIntegrationNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagedDevicesIntegrationNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagedDevicesIntegrationNotificationsAPIService.PutCompanyManagedDevicesIntegrationsByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managedDevicesIntegrations/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managedDevicesIntegrationNotification == nil {
		return localVarReturnValue, nil, reportError("managedDevicesIntegrationNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managedDevicesIntegrationNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
