/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ManagementItSolutionsAPIService ManagementItSolutionsAPI service
type ManagementItSolutionsAPIService service

type ApiDeleteCompanyManagementItSolutionsByIdRequest struct {
	ctx        context.Context
	ApiService *ManagementItSolutionsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyManagementItSolutionsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagementItSolutionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagementItSolutionsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyManagementItSolutionsByIdExecute(r)
}

/*
DeleteCompanyManagementItSolutionsById Delete ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiDeleteCompanyManagementItSolutionsByIdRequest
*/
func (a *ManagementItSolutionsAPIService) DeleteCompanyManagementItSolutionsById(ctx context.Context, id int32) ApiDeleteCompanyManagementItSolutionsByIdRequest {
	return ApiDeleteCompanyManagementItSolutionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *ManagementItSolutionsAPIService) DeleteCompanyManagementItSolutionsByIdExecute(r ApiDeleteCompanyManagementItSolutionsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.DeleteCompanyManagementItSolutionsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsRequest struct {
	ctx                   context.Context
	ApiService            *ManagementItSolutionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementItSolutionsRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) Page(page int32) ApiGetCompanyManagementItSolutionsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsRequest) Execute() ([]ManagementItSolution, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsExecute(r)
}

/*
GetCompanyManagementItSolutions Get List of ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyManagementItSolutionsRequest
*/
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutions(ctx context.Context) ApiGetCompanyManagementItSolutionsRequest {
	return ApiGetCompanyManagementItSolutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []ManagementItSolution
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsExecute(r ApiGetCompanyManagementItSolutionsRequest) ([]ManagementItSolution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ManagementItSolution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.GetCompanyManagementItSolutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ManagementItSolutionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdRequest) Execute() (*ManagementItSolution, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByIdExecute(r)
}

/*
GetCompanyManagementItSolutionsById Get ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiGetCompanyManagementItSolutionsByIdRequest
*/
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsById(ctx context.Context, id int32) ApiGetCompanyManagementItSolutionsByIdRequest {
	return ApiGetCompanyManagementItSolutionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ManagementItSolution
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsByIdExecute(r ApiGetCompanyManagementItSolutionsByIdRequest) (*ManagementItSolution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementItSolution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.GetCompanyManagementItSolutionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *ManagementItSolutionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByIdUsagesExecute(r)
}

/*
GetCompanyManagementItSolutionsByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiGetCompanyManagementItSolutionsByIdUsagesRequest
*/
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsByIdUsages(ctx context.Context, id int32) ApiGetCompanyManagementItSolutionsByIdUsagesRequest {
	return ApiGetCompanyManagementItSolutionsByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsByIdUsagesExecute(r ApiGetCompanyManagementItSolutionsByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.GetCompanyManagementItSolutionsByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *ManagementItSolutionsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) Page(page int32) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsByIdUsagesListExecute(r)
}

/*
GetCompanyManagementItSolutionsByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiGetCompanyManagementItSolutionsByIdUsagesListRequest
*/
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsByIdUsagesList(ctx context.Context, id int32) ApiGetCompanyManagementItSolutionsByIdUsagesListRequest {
	return ApiGetCompanyManagementItSolutionsByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsByIdUsagesListExecute(r ApiGetCompanyManagementItSolutionsByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.GetCompanyManagementItSolutionsByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementItSolutionsCountRequest struct {
	ctx                   context.Context
	ApiService            *ManagementItSolutionsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) ClientId(clientId string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) Conditions(conditions string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) Fields(fields string) ApiGetCompanyManagementItSolutionsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) Page(page int32) ApiGetCompanyManagementItSolutionsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagementItSolutionsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) PageId(pageId int32) ApiGetCompanyManagementItSolutionsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementItSolutionsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagementItSolutionsCountExecute(r)
}

/*
GetCompanyManagementItSolutionsCount Get Count of ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyManagementItSolutionsCountRequest
*/
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsCount(ctx context.Context) ApiGetCompanyManagementItSolutionsCountRequest {
	return ApiGetCompanyManagementItSolutionsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ManagementItSolutionsAPIService) GetCompanyManagementItSolutionsCountExecute(r ApiGetCompanyManagementItSolutionsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.GetCompanyManagementItSolutionsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagementItSolutionsByIdRequest struct {
	ctx            context.Context
	ApiService     *ManagementItSolutionsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyManagementItSolutionsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagementItSolutionsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyManagementItSolutionsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagementItSolutionsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyManagementItSolutionsByIdRequest) Execute() (*ManagementItSolution, *http.Response, error) {
	return r.ApiService.PatchCompanyManagementItSolutionsByIdExecute(r)
}

/*
PatchCompanyManagementItSolutionsById Patch ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiPatchCompanyManagementItSolutionsByIdRequest
*/
func (a *ManagementItSolutionsAPIService) PatchCompanyManagementItSolutionsById(ctx context.Context, id int32) ApiPatchCompanyManagementItSolutionsByIdRequest {
	return ApiPatchCompanyManagementItSolutionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ManagementItSolution
func (a *ManagementItSolutionsAPIService) PatchCompanyManagementItSolutionsByIdExecute(r ApiPatchCompanyManagementItSolutionsByIdRequest) (*ManagementItSolution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementItSolution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.PatchCompanyManagementItSolutionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagementItSolutionsRequest struct {
	ctx                  context.Context
	ApiService           *ManagementItSolutionsAPIService
	clientId             *string
	managementItSolution *ManagementItSolution
}

func (r ApiPostCompanyManagementItSolutionsRequest) ClientId(clientId string) ApiPostCompanyManagementItSolutionsRequest {
	r.clientId = &clientId
	return r
}

// managementItSolution
func (r ApiPostCompanyManagementItSolutionsRequest) ManagementItSolution(managementItSolution ManagementItSolution) ApiPostCompanyManagementItSolutionsRequest {
	r.managementItSolution = &managementItSolution
	return r
}

func (r ApiPostCompanyManagementItSolutionsRequest) Execute() (*ManagementItSolution, *http.Response, error) {
	return r.ApiService.PostCompanyManagementItSolutionsExecute(r)
}

/*
PostCompanyManagementItSolutions Post ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyManagementItSolutionsRequest
*/
func (a *ManagementItSolutionsAPIService) PostCompanyManagementItSolutions(ctx context.Context) ApiPostCompanyManagementItSolutionsRequest {
	return ApiPostCompanyManagementItSolutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ManagementItSolution
func (a *ManagementItSolutionsAPIService) PostCompanyManagementItSolutionsExecute(r ApiPostCompanyManagementItSolutionsRequest) (*ManagementItSolution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementItSolution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.PostCompanyManagementItSolutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementItSolution == nil {
		return localVarReturnValue, nil, reportError("managementItSolution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementItSolution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagementItSolutionsByIdRequest struct {
	ctx                  context.Context
	ApiService           *ManagementItSolutionsAPIService
	id                   int32
	clientId             *string
	managementItSolution *ManagementItSolution
}

func (r ApiPutCompanyManagementItSolutionsByIdRequest) ClientId(clientId string) ApiPutCompanyManagementItSolutionsByIdRequest {
	r.clientId = &clientId
	return r
}

// managementItSolution
func (r ApiPutCompanyManagementItSolutionsByIdRequest) ManagementItSolution(managementItSolution ManagementItSolution) ApiPutCompanyManagementItSolutionsByIdRequest {
	r.managementItSolution = &managementItSolution
	return r
}

func (r ApiPutCompanyManagementItSolutionsByIdRequest) Execute() (*ManagementItSolution, *http.Response, error) {
	return r.ApiService.PutCompanyManagementItSolutionsByIdExecute(r)
}

/*
PutCompanyManagementItSolutionsById Put ManagementItSolution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementItSolutionId
	@return ApiPutCompanyManagementItSolutionsByIdRequest
*/
func (a *ManagementItSolutionsAPIService) PutCompanyManagementItSolutionsById(ctx context.Context, id int32) ApiPutCompanyManagementItSolutionsByIdRequest {
	return ApiPutCompanyManagementItSolutionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return ManagementItSolution
func (a *ManagementItSolutionsAPIService) PutCompanyManagementItSolutionsByIdExecute(r ApiPutCompanyManagementItSolutionsByIdRequest) (*ManagementItSolution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementItSolution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementItSolutionsAPIService.PutCompanyManagementItSolutionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/managementItSolutions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementItSolution == nil {
		return localVarReturnValue, nil, reportError("managementItSolution is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementItSolution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
