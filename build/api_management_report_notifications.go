/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// ManagementReportNotificationsAPIService ManagementReportNotificationsAPI service
type ManagementReportNotificationsAPIService service

type ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest struct {
	ctx        context.Context
	ApiService *ManagementReportNotificationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
DeleteCompanyCompaniesByParentIdManagementReportNotificationsById Delete ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId companyId
	@return ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) DeleteCompanyCompaniesByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	return ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ManagementReportNotificationsAPIService) DeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r ApiDeleteCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.DeleteCompanyCompaniesByParentIdManagementReportNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest struct {
	ctx        context.Context
	ApiService *ManagementReportNotificationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
DeleteCompanyManagementByParentIdManagementReportNotificationsById Delete ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId managementId
	@return ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) DeleteCompanyManagementByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	return ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *ManagementReportNotificationsAPIService) DeleteCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r ApiDeleteCompanyManagementByParentIdManagementReportNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.DeleteCompanyManagementByParentIdManagementReportNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) Execute() ([]ManagementReportNotification, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementReportNotificationsExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementReportNotifications Get List of ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotifications(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotificationsExecute(r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsRequest) ([]ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyCompaniesByParentIdManagementReportNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementReportNotificationsById Get ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyCompaniesByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) ClientId(clientId string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) Conditions(conditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) OrderBy(orderBy string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) Fields(fields string) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) Page(page int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) PageSize(pageSize int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) PageId(pageId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyCompaniesByParentIdManagementReportNotificationsCountExecute(r)
}

/*
GetCompanyCompaniesByParentIdManagementReportNotificationsCount Get Count of ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotificationsCount(ctx context.Context, parentId int32) ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest {
	return ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ManagementReportNotificationsAPIService) GetCompanyCompaniesByParentIdManagementReportNotificationsCountExecute(r ApiGetCompanyCompaniesByParentIdManagementReportNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyCompaniesByParentIdManagementReportNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) ClientId(clientId string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) Conditions(conditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) ChildConditions(childConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) OrderBy(orderBy string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) Fields(fields string) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) Page(page int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) PageSize(pageSize int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) PageId(pageId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) Execute() ([]ManagementReportNotification, *http.Response, error) {
	return r.ApiService.GetCompanyManagementByParentIdManagementReportNotificationsExecute(r)
}

/*
GetCompanyManagementByParentIdManagementReportNotifications Get List of ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managementId
	@return ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotifications(ctx context.Context, parentId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest {
	return ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotificationsExecute(r ApiGetCompanyManagementByParentIdManagementReportNotificationsRequest) ([]ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyManagementByParentIdManagementReportNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Conditions(conditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Fields(fields string) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Page(page int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) PageId(pageId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.GetCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
GetCompanyManagementByParentIdManagementReportNotificationsById Get ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId managementId
	@return ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	return ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r ApiGetCompanyManagementByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyManagementByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest struct {
	ctx                   context.Context
	ApiService            *ManagementReportNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) ClientId(clientId string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) Conditions(conditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) OrderBy(orderBy string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) Fields(fields string) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) Page(page int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) PageSize(pageSize int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) PageId(pageId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyManagementByParentIdManagementReportNotificationsCountExecute(r)
}

/*
GetCompanyManagementByParentIdManagementReportNotificationsCount Get Count of ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managementId
	@return ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest
*/
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotificationsCount(ctx context.Context, parentId int32) ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest {
	return ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *ManagementReportNotificationsAPIService) GetCompanyManagementByParentIdManagementReportNotificationsCountExecute(r ApiGetCompanyManagementByParentIdManagementReportNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.GetCompanyManagementByParentIdManagementReportNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest struct {
	ctx            context.Context
	ApiService     *ManagementReportNotificationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PatchCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
PatchCompanyCompaniesByParentIdManagementReportNotificationsById Patch ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId companyId
	@return ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) PatchCompanyCompaniesByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	return ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PatchCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r ApiPatchCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PatchCompanyCompaniesByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest struct {
	ctx            context.Context
	ApiService     *ManagementReportNotificationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PatchCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
PatchCompanyManagementByParentIdManagementReportNotificationsById Patch ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId managementId
	@return ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) PatchCompanyManagementByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	return ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PatchCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r ApiPatchCompanyManagementByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PatchCompanyManagementByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest struct {
	ctx                          context.Context
	ApiService                   *ManagementReportNotificationsAPIService
	parentId                     int32
	clientId                     *string
	managementReportNotification *ManagementReportNotification
}

func (r ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest) ClientId(clientId string) ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.clientId = &clientId
	return r
}

// managementReportNotification
func (r ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest) ManagementReportNotification(managementReportNotification ManagementReportNotification) ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	r.managementReportNotification = &managementReportNotification
	return r
}

func (r ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PostCompanyCompaniesByParentIdManagementReportNotificationsExecute(r)
}

/*
PostCompanyCompaniesByParentIdManagementReportNotifications Post ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId companyId
	@return ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest
*/
func (a *ManagementReportNotificationsAPIService) PostCompanyCompaniesByParentIdManagementReportNotifications(ctx context.Context, parentId int32) ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest {
	return ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PostCompanyCompaniesByParentIdManagementReportNotificationsExecute(r ApiPostCompanyCompaniesByParentIdManagementReportNotificationsRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PostCompanyCompaniesByParentIdManagementReportNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportNotification == nil {
		return localVarReturnValue, nil, reportError("managementReportNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest struct {
	ctx                          context.Context
	ApiService                   *ManagementReportNotificationsAPIService
	parentId                     int32
	clientId                     *string
	managementReportNotification *ManagementReportNotification
}

func (r ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest) ClientId(clientId string) ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.clientId = &clientId
	return r
}

// managementReportNotification
func (r ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest) ManagementReportNotification(managementReportNotification ManagementReportNotification) ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest {
	r.managementReportNotification = &managementReportNotification
	return r
}

func (r ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PostCompanyManagementByParentIdManagementReportNotificationsExecute(r)
}

/*
PostCompanyManagementByParentIdManagementReportNotifications Post ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId managementId
	@return ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest
*/
func (a *ManagementReportNotificationsAPIService) PostCompanyManagementByParentIdManagementReportNotifications(ctx context.Context, parentId int32) ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest {
	return ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PostCompanyManagementByParentIdManagementReportNotificationsExecute(r ApiPostCompanyManagementByParentIdManagementReportNotificationsRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PostCompanyManagementByParentIdManagementReportNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportNotification == nil {
		return localVarReturnValue, nil, reportError("managementReportNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest struct {
	ctx                          context.Context
	ApiService                   *ManagementReportNotificationsAPIService
	id                           int32
	parentId                     int32
	clientId                     *string
	managementReportNotification *ManagementReportNotification
}

func (r ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// managementReportNotification
func (r ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) ManagementReportNotification(managementReportNotification ManagementReportNotification) ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	r.managementReportNotification = &managementReportNotification
	return r
}

func (r ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PutCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
PutCompanyCompaniesByParentIdManagementReportNotificationsById Put ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId companyId
	@return ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) PutCompanyCompaniesByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest {
	return ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PutCompanyCompaniesByParentIdManagementReportNotificationsByIdExecute(r ApiPutCompanyCompaniesByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PutCompanyCompaniesByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/companies/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportNotification == nil {
		return localVarReturnValue, nil, reportError("managementReportNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest struct {
	ctx                          context.Context
	ApiService                   *ManagementReportNotificationsAPIService
	id                           int32
	parentId                     int32
	clientId                     *string
	managementReportNotification *ManagementReportNotification
}

func (r ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ClientId(clientId string) ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// managementReportNotification
func (r ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest) ManagementReportNotification(managementReportNotification ManagementReportNotification) ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	r.managementReportNotification = &managementReportNotification
	return r
}

func (r ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest) Execute() (*ManagementReportNotification, *http.Response, error) {
	return r.ApiService.PutCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r)
}

/*
PutCompanyManagementByParentIdManagementReportNotificationsById Put ManagementReportNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id managementReportNotificationId
	@param parentId managementId
	@return ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest
*/
func (a *ManagementReportNotificationsAPIService) PutCompanyManagementByParentIdManagementReportNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest {
	return ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return ManagementReportNotification
func (a *ManagementReportNotificationsAPIService) PutCompanyManagementByParentIdManagementReportNotificationsByIdExecute(r ApiPutCompanyManagementByParentIdManagementReportNotificationsByIdRequest) (*ManagementReportNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ManagementReportNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ManagementReportNotificationsAPIService.PutCompanyManagementByParentIdManagementReportNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/management/{parentId}/managementReportNotifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.managementReportNotification == nil {
		return localVarReturnValue, nil, reportError("managementReportNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.managementReportNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
