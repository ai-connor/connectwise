/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MarketingCompaniesAPIService MarketingCompaniesAPI service
type MarketingCompaniesAPIService service

type ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest struct {
	ctx        context.Context
	ApiService *MarketingCompaniesAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest) ClientId(clientId string) ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMarketingGroupsByParentIdCompaniesByIdExecute(r)
}

/*
DeleteMarketingGroupsByParentIdCompaniesById Delete MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@param parentId groupId
	@return ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest
*/
func (a *MarketingCompaniesAPIService) DeleteMarketingGroupsByParentIdCompaniesById(ctx context.Context, id int32, parentId int32) ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest {
	return ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *MarketingCompaniesAPIService) DeleteMarketingGroupsByParentIdCompaniesByIdExecute(r ApiDeleteMarketingGroupsByParentIdCompaniesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.DeleteMarketingGroupsByParentIdCompaniesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdCompaniesRequest struct {
	ctx                   context.Context
	ApiService            *MarketingCompaniesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) Page(page int32) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesRequest) Execute() ([]MarketingCompany, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdCompaniesExecute(r)
}

/*
GetMarketingGroupsByParentIdCompanies Get List of MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId groupId
	@return ApiGetMarketingGroupsByParentIdCompaniesRequest
*/
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompanies(ctx context.Context, parentId int32) ApiGetMarketingGroupsByParentIdCompaniesRequest {
	return ApiGetMarketingGroupsByParentIdCompaniesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []MarketingCompany
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompaniesExecute(r ApiGetMarketingGroupsByParentIdCompaniesRequest) ([]MarketingCompany, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MarketingCompany
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.GetMarketingGroupsByParentIdCompanies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdCompaniesByIdRequest struct {
	ctx                   context.Context
	ApiService            *MarketingCompaniesAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) Page(page int32) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) Execute() (*MarketingCompany, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdCompaniesByIdExecute(r)
}

/*
GetMarketingGroupsByParentIdCompaniesById Get MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@param parentId groupId
	@return ApiGetMarketingGroupsByParentIdCompaniesByIdRequest
*/
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompaniesById(ctx context.Context, id int32, parentId int32) ApiGetMarketingGroupsByParentIdCompaniesByIdRequest {
	return ApiGetMarketingGroupsByParentIdCompaniesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MarketingCompany
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompaniesByIdExecute(r ApiGetMarketingGroupsByParentIdCompaniesByIdRequest) (*MarketingCompany, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingCompany
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.GetMarketingGroupsByParentIdCompaniesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMarketingGroupsByParentIdCompaniesCountRequest struct {
	ctx                   context.Context
	ApiService            *MarketingCompaniesAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) ClientId(clientId string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) Conditions(conditions string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) ChildConditions(childConditions string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) OrderBy(orderBy string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) Fields(fields string) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) Page(page int32) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) PageSize(pageSize int32) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) PageId(pageId int32) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetMarketingGroupsByParentIdCompaniesCountExecute(r)
}

/*
GetMarketingGroupsByParentIdCompaniesCount Get Count of MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId groupId
	@return ApiGetMarketingGroupsByParentIdCompaniesCountRequest
*/
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompaniesCount(ctx context.Context, parentId int32) ApiGetMarketingGroupsByParentIdCompaniesCountRequest {
	return ApiGetMarketingGroupsByParentIdCompaniesCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MarketingCompaniesAPIService) GetMarketingGroupsByParentIdCompaniesCountExecute(r ApiGetMarketingGroupsByParentIdCompaniesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.GetMarketingGroupsByParentIdCompaniesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest struct {
	ctx            context.Context
	ApiService     *MarketingCompaniesAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest) ClientId(clientId string) ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest) Execute() (*MarketingCompany, *http.Response, error) {
	return r.ApiService.PatchMarketingGroupsByParentIdCompaniesByIdExecute(r)
}

/*
PatchMarketingGroupsByParentIdCompaniesById Patch MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@param parentId groupId
	@return ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest
*/
func (a *MarketingCompaniesAPIService) PatchMarketingGroupsByParentIdCompaniesById(ctx context.Context, id int32, parentId int32) ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest {
	return ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MarketingCompany
func (a *MarketingCompaniesAPIService) PatchMarketingGroupsByParentIdCompaniesByIdExecute(r ApiPatchMarketingGroupsByParentIdCompaniesByIdRequest) (*MarketingCompany, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingCompany
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.PatchMarketingGroupsByParentIdCompaniesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostMarketingGroupsByParentIdCompaniesRequest struct {
	ctx              context.Context
	ApiService       *MarketingCompaniesAPIService
	parentId         int32
	clientId         *string
	marketingCompany *MarketingCompany
}

func (r ApiPostMarketingGroupsByParentIdCompaniesRequest) ClientId(clientId string) ApiPostMarketingGroupsByParentIdCompaniesRequest {
	r.clientId = &clientId
	return r
}

// marketingCompany
func (r ApiPostMarketingGroupsByParentIdCompaniesRequest) MarketingCompany(marketingCompany MarketingCompany) ApiPostMarketingGroupsByParentIdCompaniesRequest {
	r.marketingCompany = &marketingCompany
	return r
}

func (r ApiPostMarketingGroupsByParentIdCompaniesRequest) Execute() (*MarketingCompany, *http.Response, error) {
	return r.ApiService.PostMarketingGroupsByParentIdCompaniesExecute(r)
}

/*
PostMarketingGroupsByParentIdCompanies Post MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId groupId
	@return ApiPostMarketingGroupsByParentIdCompaniesRequest
*/
func (a *MarketingCompaniesAPIService) PostMarketingGroupsByParentIdCompanies(ctx context.Context, parentId int32) ApiPostMarketingGroupsByParentIdCompaniesRequest {
	return ApiPostMarketingGroupsByParentIdCompaniesRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MarketingCompany
func (a *MarketingCompaniesAPIService) PostMarketingGroupsByParentIdCompaniesExecute(r ApiPostMarketingGroupsByParentIdCompaniesRequest) (*MarketingCompany, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingCompany
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.PostMarketingGroupsByParentIdCompanies")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.marketingCompany == nil {
		return localVarReturnValue, nil, reportError("marketingCompany is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.marketingCompany
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutMarketingGroupsByParentIdCompaniesByIdRequest struct {
	ctx              context.Context
	ApiService       *MarketingCompaniesAPIService
	id               int32
	parentId         int32
	clientId         *string
	marketingCompany *MarketingCompany
}

func (r ApiPutMarketingGroupsByParentIdCompaniesByIdRequest) ClientId(clientId string) ApiPutMarketingGroupsByParentIdCompaniesByIdRequest {
	r.clientId = &clientId
	return r
}

// marketingCompany
func (r ApiPutMarketingGroupsByParentIdCompaniesByIdRequest) MarketingCompany(marketingCompany MarketingCompany) ApiPutMarketingGroupsByParentIdCompaniesByIdRequest {
	r.marketingCompany = &marketingCompany
	return r
}

func (r ApiPutMarketingGroupsByParentIdCompaniesByIdRequest) Execute() (*MarketingCompany, *http.Response, error) {
	return r.ApiService.PutMarketingGroupsByParentIdCompaniesByIdExecute(r)
}

/*
PutMarketingGroupsByParentIdCompaniesById Put MarketingCompany

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id companyId
	@param parentId groupId
	@return ApiPutMarketingGroupsByParentIdCompaniesByIdRequest
*/
func (a *MarketingCompaniesAPIService) PutMarketingGroupsByParentIdCompaniesById(ctx context.Context, id int32, parentId int32) ApiPutMarketingGroupsByParentIdCompaniesByIdRequest {
	return ApiPutMarketingGroupsByParentIdCompaniesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MarketingCompany
func (a *MarketingCompaniesAPIService) PutMarketingGroupsByParentIdCompaniesByIdExecute(r ApiPutMarketingGroupsByParentIdCompaniesByIdRequest) (*MarketingCompany, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MarketingCompany
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MarketingCompaniesAPIService.PutMarketingGroupsByParentIdCompaniesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketing/groups/{parentId}/companies/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.marketingCompany == nil {
		return localVarReturnValue, nil, reportError("marketingCompany is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.marketingCompany
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
