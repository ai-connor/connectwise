/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MemberDelegationsAPIService MemberDelegationsAPI service
type MemberDelegationsAPIService service

type ApiDeleteSystemMembersByParentIdDelegationsByIdRequest struct {
	ctx        context.Context
	ApiService *MemberDelegationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSystemMembersByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdDelegationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdDelegationsByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdDelegationsById Delete MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiDeleteSystemMembersByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) DeleteSystemMembersByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdDelegationsByIdRequest {
	return ApiDeleteSystemMembersByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *MemberDelegationsAPIService) DeleteSystemMembersByParentIdDelegationsByIdExecute(r ApiDeleteSystemMembersByParentIdDelegationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.DeleteSystemMembersByParentIdDelegationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest struct {
	ctx        context.Context
	ApiService *MemberDelegationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMyAccountByParentIdDelegationsByIdExecute(r)
}

/*
DeleteSystemMyAccountByParentIdDelegationsById Delete MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) DeleteSystemMyAccountByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest {
	return ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *MemberDelegationsAPIService) DeleteSystemMyAccountByParentIdDelegationsByIdExecute(r ApiDeleteSystemMyAccountByParentIdDelegationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.DeleteSystemMyAccountByParentIdDelegationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdDelegationsRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) Fields(fields string) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) Page(page int32) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdDelegationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsRequest) Execute() ([]MemberDelegation, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdDelegationsExecute(r)
}

/*
GetSystemMembersByParentIdDelegations Get List of MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdDelegationsRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegations(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdDelegationsRequest {
	return ApiGetSystemMembersByParentIdDelegationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []MemberDelegation
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegationsExecute(r ApiGetSystemMembersByParentIdDelegationsRequest) ([]MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMembersByParentIdDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdDelegationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdDelegationsByIdExecute(r)
}

/*
GetSystemMembersByParentIdDelegationsById Get MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdDelegationsByIdRequest {
	return ApiGetSystemMembersByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegationsByIdExecute(r ApiGetSystemMembersByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMembersByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdDelegationsCountRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) Page(page int32) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdDelegationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdDelegationsCountExecute(r)
}

/*
GetSystemMembersByParentIdDelegationsCount Get Count of MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdDelegationsCountRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegationsCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdDelegationsCountRequest {
	return ApiGetSystemMembersByParentIdDelegationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MemberDelegationsAPIService) GetSystemMembersByParentIdDelegationsCountExecute(r ApiGetSystemMembersByParentIdDelegationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMembersByParentIdDelegationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdDelegationsRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) Page(page int32) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsRequest) Execute() ([]MemberDelegation, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdDelegationsExecute(r)
}

/*
GetSystemMyAccountByParentIdDelegations Get List of MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMyAccountByParentIdDelegationsRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegations(ctx context.Context, parentId int32) ApiGetSystemMyAccountByParentIdDelegationsRequest {
	return ApiGetSystemMyAccountByParentIdDelegationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []MemberDelegation
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegationsExecute(r ApiGetSystemMyAccountByParentIdDelegationsRequest) ([]MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMyAccountByParentIdDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdDelegationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) Page(page int32) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdDelegationsByIdExecute(r)
}

/*
GetSystemMyAccountByParentIdDelegationsById Get MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiGetSystemMyAccountByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMyAccountByParentIdDelegationsByIdRequest {
	return ApiGetSystemMyAccountByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegationsByIdExecute(r ApiGetSystemMyAccountByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMyAccountByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyAccountByParentIdDelegationsCountRequest struct {
	ctx                   context.Context
	ApiService            *MemberDelegationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) ClientId(clientId string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) Conditions(conditions string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) ChildConditions(childConditions string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) OrderBy(orderBy string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) Fields(fields string) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) Page(page int32) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) PageSize(pageSize int32) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) PageId(pageId int32) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMyAccountByParentIdDelegationsCountExecute(r)
}

/*
GetSystemMyAccountByParentIdDelegationsCount Get Count of MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMyAccountByParentIdDelegationsCountRequest
*/
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegationsCount(ctx context.Context, parentId int32) ApiGetSystemMyAccountByParentIdDelegationsCountRequest {
	return ApiGetSystemMyAccountByParentIdDelegationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MemberDelegationsAPIService) GetSystemMyAccountByParentIdDelegationsCountExecute(r ApiGetSystemMyAccountByParentIdDelegationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.GetSystemMyAccountByParentIdDelegationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdDelegationsByIdRequest struct {
	ctx            context.Context
	ApiService     *MemberDelegationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMembersByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdDelegationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdDelegationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdDelegationsByIdExecute(r)
}

/*
PatchSystemMembersByParentIdDelegationsById Patch MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiPatchSystemMembersByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) PatchSystemMembersByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdDelegationsByIdRequest {
	return ApiPatchSystemMembersByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PatchSystemMembersByParentIdDelegationsByIdExecute(r ApiPatchSystemMembersByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PatchSystemMembersByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest struct {
	ctx            context.Context
	ApiService     *MemberDelegationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PatchSystemMyAccountByParentIdDelegationsByIdExecute(r)
}

/*
PatchSystemMyAccountByParentIdDelegationsById Patch MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) PatchSystemMyAccountByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest {
	return ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PatchSystemMyAccountByParentIdDelegationsByIdExecute(r ApiPatchSystemMyAccountByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PatchSystemMyAccountByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdDelegationsRequest struct {
	ctx              context.Context
	ApiService       *MemberDelegationsAPIService
	parentId         int32
	clientId         *string
	memberDelegation *MemberDelegation
}

func (r ApiPostSystemMembersByParentIdDelegationsRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdDelegationsRequest {
	r.clientId = &clientId
	return r
}

// memberDelegation
func (r ApiPostSystemMembersByParentIdDelegationsRequest) MemberDelegation(memberDelegation MemberDelegation) ApiPostSystemMembersByParentIdDelegationsRequest {
	r.memberDelegation = &memberDelegation
	return r
}

func (r ApiPostSystemMembersByParentIdDelegationsRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdDelegationsExecute(r)
}

/*
PostSystemMembersByParentIdDelegations Post MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiPostSystemMembersByParentIdDelegationsRequest
*/
func (a *MemberDelegationsAPIService) PostSystemMembersByParentIdDelegations(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdDelegationsRequest {
	return ApiPostSystemMembersByParentIdDelegationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PostSystemMembersByParentIdDelegationsExecute(r ApiPostSystemMembersByParentIdDelegationsRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PostSystemMembersByParentIdDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberDelegation == nil {
		return localVarReturnValue, nil, reportError("memberDelegation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberDelegation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMyAccountByParentIdDelegationsRequest struct {
	ctx              context.Context
	ApiService       *MemberDelegationsAPIService
	parentId         int32
	clientId         *string
	memberDelegation *MemberDelegation
}

func (r ApiPostSystemMyAccountByParentIdDelegationsRequest) ClientId(clientId string) ApiPostSystemMyAccountByParentIdDelegationsRequest {
	r.clientId = &clientId
	return r
}

// memberDelegation
func (r ApiPostSystemMyAccountByParentIdDelegationsRequest) MemberDelegation(memberDelegation MemberDelegation) ApiPostSystemMyAccountByParentIdDelegationsRequest {
	r.memberDelegation = &memberDelegation
	return r
}

func (r ApiPostSystemMyAccountByParentIdDelegationsRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PostSystemMyAccountByParentIdDelegationsExecute(r)
}

/*
PostSystemMyAccountByParentIdDelegations Post MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiPostSystemMyAccountByParentIdDelegationsRequest
*/
func (a *MemberDelegationsAPIService) PostSystemMyAccountByParentIdDelegations(ctx context.Context, parentId int32) ApiPostSystemMyAccountByParentIdDelegationsRequest {
	return ApiPostSystemMyAccountByParentIdDelegationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PostSystemMyAccountByParentIdDelegationsExecute(r ApiPostSystemMyAccountByParentIdDelegationsRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PostSystemMyAccountByParentIdDelegations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberDelegation == nil {
		return localVarReturnValue, nil, reportError("memberDelegation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberDelegation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdDelegationsByIdRequest struct {
	ctx              context.Context
	ApiService       *MemberDelegationsAPIService
	id               int32
	parentId         int32
	clientId         *string
	memberDelegation *MemberDelegation
}

func (r ApiPutSystemMembersByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberDelegation
func (r ApiPutSystemMembersByParentIdDelegationsByIdRequest) MemberDelegation(memberDelegation MemberDelegation) ApiPutSystemMembersByParentIdDelegationsByIdRequest {
	r.memberDelegation = &memberDelegation
	return r
}

func (r ApiPutSystemMembersByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdDelegationsByIdExecute(r)
}

/*
PutSystemMembersByParentIdDelegationsById Put MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiPutSystemMembersByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) PutSystemMembersByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdDelegationsByIdRequest {
	return ApiPutSystemMembersByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PutSystemMembersByParentIdDelegationsByIdExecute(r ApiPutSystemMembersByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PutSystemMembersByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberDelegation == nil {
		return localVarReturnValue, nil, reportError("memberDelegation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberDelegation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMyAccountByParentIdDelegationsByIdRequest struct {
	ctx              context.Context
	ApiService       *MemberDelegationsAPIService
	id               int32
	parentId         int32
	clientId         *string
	memberDelegation *MemberDelegation
}

func (r ApiPutSystemMyAccountByParentIdDelegationsByIdRequest) ClientId(clientId string) ApiPutSystemMyAccountByParentIdDelegationsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberDelegation
func (r ApiPutSystemMyAccountByParentIdDelegationsByIdRequest) MemberDelegation(memberDelegation MemberDelegation) ApiPutSystemMyAccountByParentIdDelegationsByIdRequest {
	r.memberDelegation = &memberDelegation
	return r
}

func (r ApiPutSystemMyAccountByParentIdDelegationsByIdRequest) Execute() (*MemberDelegation, *http.Response, error) {
	return r.ApiService.PutSystemMyAccountByParentIdDelegationsByIdExecute(r)
}

/*
PutSystemMyAccountByParentIdDelegationsById Put MemberDelegation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id delegationId
	@param parentId memberId
	@return ApiPutSystemMyAccountByParentIdDelegationsByIdRequest
*/
func (a *MemberDelegationsAPIService) PutSystemMyAccountByParentIdDelegationsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMyAccountByParentIdDelegationsByIdRequest {
	return ApiPutSystemMyAccountByParentIdDelegationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberDelegation
func (a *MemberDelegationsAPIService) PutSystemMyAccountByParentIdDelegationsByIdExecute(r ApiPutSystemMyAccountByParentIdDelegationsByIdRequest) (*MemberDelegation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDelegation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberDelegationsAPIService.PutSystemMyAccountByParentIdDelegationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myAccount/{parentId}/delegations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberDelegation == nil {
		return localVarReturnValue, nil, reportError("memberDelegation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberDelegation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
