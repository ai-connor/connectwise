/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MemberTemplatesAPIService MemberTemplatesAPI service
type MemberTemplatesAPIService service

type ApiGetSystemMembertemplatesRequest struct {
	ctx                   context.Context
	ApiService            *MemberTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembertemplatesRequest) ClientId(clientId string) ApiGetSystemMembertemplatesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembertemplatesRequest) Conditions(conditions string) ApiGetSystemMembertemplatesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembertemplatesRequest) ChildConditions(childConditions string) ApiGetSystemMembertemplatesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembertemplatesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembertemplatesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembertemplatesRequest) OrderBy(orderBy string) ApiGetSystemMembertemplatesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembertemplatesRequest) Fields(fields string) ApiGetSystemMembertemplatesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembertemplatesRequest) Page(page int32) ApiGetSystemMembertemplatesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembertemplatesRequest) PageSize(pageSize int32) ApiGetSystemMembertemplatesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembertemplatesRequest) PageId(pageId int32) ApiGetSystemMembertemplatesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembertemplatesRequest) Execute() ([]MemberTemplate, *http.Response, error) {
	return r.ApiService.GetSystemMembertemplatesExecute(r)
}

/*
GetSystemMembertemplates Get List of MemberTemplates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembertemplatesRequest
*/
func (a *MemberTemplatesAPIService) GetSystemMembertemplates(ctx context.Context) ApiGetSystemMembertemplatesRequest {
	return ApiGetSystemMembertemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MemberTemplate
func (a *MemberTemplatesAPIService) GetSystemMembertemplatesExecute(r ApiGetSystemMembertemplatesRequest) ([]MemberTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTemplatesAPIService.GetSystemMembertemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/membertemplates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembertemplatesByIdRequest struct {
	ctx                   context.Context
	ApiService            *MemberTemplatesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembertemplatesByIdRequest) ClientId(clientId string) ApiGetSystemMembertemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) Conditions(conditions string) ApiGetSystemMembertemplatesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembertemplatesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembertemplatesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) OrderBy(orderBy string) ApiGetSystemMembertemplatesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) Fields(fields string) ApiGetSystemMembertemplatesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) Page(page int32) ApiGetSystemMembertemplatesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) PageSize(pageSize int32) ApiGetSystemMembertemplatesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) PageId(pageId int32) ApiGetSystemMembertemplatesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembertemplatesByIdRequest) Execute() (*MemberTemplate, *http.Response, error) {
	return r.ApiService.GetSystemMembertemplatesByIdExecute(r)
}

/*
GetSystemMembertemplatesById Get MemberTemplates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id MemberTemplateId
	@return ApiGetSystemMembertemplatesByIdRequest
*/
func (a *MemberTemplatesAPIService) GetSystemMembertemplatesById(ctx context.Context, id int32) ApiGetSystemMembertemplatesByIdRequest {
	return ApiGetSystemMembertemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberTemplate
func (a *MemberTemplatesAPIService) GetSystemMembertemplatesByIdExecute(r ApiGetSystemMembertemplatesByIdRequest) (*MemberTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTemplatesAPIService.GetSystemMembertemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/membertemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembertemplatesCountRequest struct {
	ctx                   context.Context
	ApiService            *MemberTemplatesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembertemplatesCountRequest) ClientId(clientId string) ApiGetSystemMembertemplatesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) Conditions(conditions string) ApiGetSystemMembertemplatesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) ChildConditions(childConditions string) ApiGetSystemMembertemplatesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembertemplatesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) OrderBy(orderBy string) ApiGetSystemMembertemplatesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) Fields(fields string) ApiGetSystemMembertemplatesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) Page(page int32) ApiGetSystemMembertemplatesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) PageSize(pageSize int32) ApiGetSystemMembertemplatesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) PageId(pageId int32) ApiGetSystemMembertemplatesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembertemplatesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembertemplatesCountExecute(r)
}

/*
GetSystemMembertemplatesCount Get Count of MemberTemplates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembertemplatesCountRequest
*/
func (a *MemberTemplatesAPIService) GetSystemMembertemplatesCount(ctx context.Context) ApiGetSystemMembertemplatesCountRequest {
	return ApiGetSystemMembertemplatesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MemberTemplatesAPIService) GetSystemMembertemplatesCountExecute(r ApiGetSystemMembertemplatesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTemplatesAPIService.GetSystemMembertemplatesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/membertemplates/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembertemplatesByIdRequest struct {
	ctx            context.Context
	ApiService     *MemberTemplatesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMembertemplatesByIdRequest) ClientId(clientId string) ApiPatchSystemMembertemplatesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembertemplatesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembertemplatesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembertemplatesByIdRequest) Execute() (*MemberTemplate, *http.Response, error) {
	return r.ApiService.PatchSystemMembertemplatesByIdExecute(r)
}

/*
PatchSystemMembertemplatesById Patch MemberTemplates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id MemberTemplateId
	@return ApiPatchSystemMembertemplatesByIdRequest
*/
func (a *MemberTemplatesAPIService) PatchSystemMembertemplatesById(ctx context.Context, id int32) ApiPatchSystemMembertemplatesByIdRequest {
	return ApiPatchSystemMembertemplatesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberTemplate
func (a *MemberTemplatesAPIService) PatchSystemMembertemplatesByIdExecute(r ApiPatchSystemMembertemplatesByIdRequest) (*MemberTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTemplatesAPIService.PatchSystemMembertemplatesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/membertemplates/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembertemplatesRequest struct {
	ctx            context.Context
	ApiService     *MemberTemplatesAPIService
	clientId       *string
	memberTemplate *MemberTemplate
}

func (r ApiPostSystemMembertemplatesRequest) ClientId(clientId string) ApiPostSystemMembertemplatesRequest {
	r.clientId = &clientId
	return r
}

// MemberTemplate
func (r ApiPostSystemMembertemplatesRequest) MemberTemplate(memberTemplate MemberTemplate) ApiPostSystemMembertemplatesRequest {
	r.memberTemplate = &memberTemplate
	return r
}

func (r ApiPostSystemMembertemplatesRequest) Execute() (*MemberTemplate, *http.Response, error) {
	return r.ApiService.PostSystemMembertemplatesExecute(r)
}

/*
PostSystemMembertemplates Post MemberTemplates

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemMembertemplatesRequest
*/
func (a *MemberTemplatesAPIService) PostSystemMembertemplates(ctx context.Context) ApiPostSystemMembertemplatesRequest {
	return ApiPostSystemMembertemplatesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MemberTemplate
func (a *MemberTemplatesAPIService) PostSystemMembertemplatesExecute(r ApiPostSystemMembertemplatesRequest) (*MemberTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTemplatesAPIService.PostSystemMembertemplates")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/membertemplates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberTemplate == nil {
		return localVarReturnValue, nil, reportError("memberTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberTemplate
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
