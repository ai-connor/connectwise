/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MemberTypesAPIService MemberTypesAPI service
type MemberTypesAPIService service

type ApiDeleteSystemMembersTypesByIdRequest struct {
	ctx        context.Context
	ApiService *MemberTypesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemMembersTypesByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersTypesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersTypesByIdExecute(r)
}

/*
DeleteSystemMembersTypesById Delete MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiDeleteSystemMembersTypesByIdRequest
*/
func (a *MemberTypesAPIService) DeleteSystemMembersTypesById(ctx context.Context, id int32) ApiDeleteSystemMembersTypesByIdRequest {
	return ApiDeleteSystemMembersTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *MemberTypesAPIService) DeleteSystemMembersTypesByIdExecute(r ApiDeleteSystemMembersTypesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.DeleteSystemMembersTypesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesRequest) ClientId(clientId string) ApiGetSystemMembersTypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesRequest) Conditions(conditions string) ApiGetSystemMembersTypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesRequest) Fields(fields string) ApiGetSystemMembersTypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesRequest) Page(page int32) ApiGetSystemMembersTypesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesRequest) PageId(pageId int32) ApiGetSystemMembersTypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesRequest) Execute() ([]MemberType, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesExecute(r)
}

/*
GetSystemMembersTypes Get List of MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersTypesRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypes(ctx context.Context) ApiGetSystemMembersTypesRequest {
	return ApiGetSystemMembersTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MemberType
func (a *MemberTypesAPIService) GetSystemMembersTypesExecute(r ApiGetSystemMembersTypesRequest) ([]MemberType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesByIdRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesByIdRequest) ClientId(clientId string) ApiGetSystemMembersTypesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) Conditions(conditions string) ApiGetSystemMembersTypesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) Fields(fields string) ApiGetSystemMembersTypesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) Page(page int32) ApiGetSystemMembersTypesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) PageId(pageId int32) ApiGetSystemMembersTypesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesByIdRequest) Execute() (*MemberType, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesByIdExecute(r)
}

/*
GetSystemMembersTypesById Get MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiGetSystemMembersTypesByIdRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypesById(ctx context.Context, id int32) ApiGetSystemMembersTypesByIdRequest {
	return ApiGetSystemMembersTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberType
func (a *MemberTypesAPIService) GetSystemMembersTypesByIdExecute(r ApiGetSystemMembersTypesByIdRequest) (*MemberType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesByIdInfoRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) ClientId(clientId string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) Conditions(conditions string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) Fields(fields string) ApiGetSystemMembersTypesByIdInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) Page(page int32) ApiGetSystemMembersTypesByIdInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesByIdInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) PageId(pageId int32) ApiGetSystemMembersTypesByIdInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesByIdInfoRequest) Execute() (*MemberTypeInfo, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesByIdInfoExecute(r)
}

/*
GetSystemMembersTypesByIdInfo Get MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiGetSystemMembersTypesByIdInfoRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypesByIdInfo(ctx context.Context, id int32) ApiGetSystemMembersTypesByIdInfoRequest {
	return ApiGetSystemMembersTypesByIdInfoRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberTypeInfo
func (a *MemberTypesAPIService) GetSystemMembersTypesByIdInfoExecute(r ApiGetSystemMembersTypesByIdInfoRequest) (*MemberTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypesByIdInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/{id}/info"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesCountRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesCountRequest) ClientId(clientId string) ApiGetSystemMembersTypesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) Conditions(conditions string) ApiGetSystemMembersTypesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) Fields(fields string) ApiGetSystemMembersTypesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) Page(page int32) ApiGetSystemMembersTypesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) PageId(pageId int32) ApiGetSystemMembersTypesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesCountExecute(r)
}

/*
GetSystemMembersTypesCount Get Count of MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersTypesCountRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypesCount(ctx context.Context) ApiGetSystemMembersTypesCountRequest {
	return ApiGetSystemMembersTypesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MemberTypesAPIService) GetSystemMembersTypesCountExecute(r ApiGetSystemMembersTypesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesInfoRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesInfoRequest) ClientId(clientId string) ApiGetSystemMembersTypesInfoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) Conditions(conditions string) ApiGetSystemMembersTypesInfoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesInfoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesInfoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesInfoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) Fields(fields string) ApiGetSystemMembersTypesInfoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) Page(page int32) ApiGetSystemMembersTypesInfoRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesInfoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) PageId(pageId int32) ApiGetSystemMembersTypesInfoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesInfoRequest) Execute() ([]MemberTypeInfo, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesInfoExecute(r)
}

/*
GetSystemMembersTypesInfo Get List of MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersTypesInfoRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypesInfo(ctx context.Context) ApiGetSystemMembersTypesInfoRequest {
	return ApiGetSystemMembersTypesInfoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MemberTypeInfo
func (a *MemberTypesAPIService) GetSystemMembersTypesInfoExecute(r ApiGetSystemMembersTypesInfoRequest) ([]MemberTypeInfo, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberTypeInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersTypesInfoCountRequest struct {
	ctx                   context.Context
	ApiService            *MemberTypesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersTypesInfoCountRequest) ClientId(clientId string) ApiGetSystemMembersTypesInfoCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) Conditions(conditions string) ApiGetSystemMembersTypesInfoCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersTypesInfoCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersTypesInfoCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) OrderBy(orderBy string) ApiGetSystemMembersTypesInfoCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) Fields(fields string) ApiGetSystemMembersTypesInfoCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) Page(page int32) ApiGetSystemMembersTypesInfoCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) PageSize(pageSize int32) ApiGetSystemMembersTypesInfoCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) PageId(pageId int32) ApiGetSystemMembersTypesInfoCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersTypesInfoCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersTypesInfoCountExecute(r)
}

/*
GetSystemMembersTypesInfoCount Get Count of MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersTypesInfoCountRequest
*/
func (a *MemberTypesAPIService) GetSystemMembersTypesInfoCount(ctx context.Context) ApiGetSystemMembersTypesInfoCountRequest {
	return ApiGetSystemMembersTypesInfoCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MemberTypesAPIService) GetSystemMembersTypesInfoCountExecute(r ApiGetSystemMembersTypesInfoCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.GetSystemMembersTypesInfoCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/info/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersTypesByIdRequest struct {
	ctx            context.Context
	ApiService     *MemberTypesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMembersTypesByIdRequest) ClientId(clientId string) ApiPatchSystemMembersTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersTypesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersTypesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersTypesByIdRequest) Execute() (*MemberType, *http.Response, error) {
	return r.ApiService.PatchSystemMembersTypesByIdExecute(r)
}

/*
PatchSystemMembersTypesById Patch MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiPatchSystemMembersTypesByIdRequest
*/
func (a *MemberTypesAPIService) PatchSystemMembersTypesById(ctx context.Context, id int32) ApiPatchSystemMembersTypesByIdRequest {
	return ApiPatchSystemMembersTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberType
func (a *MemberTypesAPIService) PatchSystemMembersTypesByIdExecute(r ApiPatchSystemMembersTypesByIdRequest) (*MemberType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.PatchSystemMembersTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersTypesRequest struct {
	ctx        context.Context
	ApiService *MemberTypesAPIService
	clientId   *string
	memberType *MemberType
}

func (r ApiPostSystemMembersTypesRequest) ClientId(clientId string) ApiPostSystemMembersTypesRequest {
	r.clientId = &clientId
	return r
}

// type
func (r ApiPostSystemMembersTypesRequest) MemberType(memberType MemberType) ApiPostSystemMembersTypesRequest {
	r.memberType = &memberType
	return r
}

func (r ApiPostSystemMembersTypesRequest) Execute() (*MemberType, *http.Response, error) {
	return r.ApiService.PostSystemMembersTypesExecute(r)
}

/*
PostSystemMembersTypes Post MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemMembersTypesRequest
*/
func (a *MemberTypesAPIService) PostSystemMembersTypes(ctx context.Context) ApiPostSystemMembersTypesRequest {
	return ApiPostSystemMembersTypesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MemberType
func (a *MemberTypesAPIService) PostSystemMembersTypesExecute(r ApiPostSystemMembersTypesRequest) (*MemberType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.PostSystemMembersTypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberType == nil {
		return localVarReturnValue, nil, reportError("memberType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersTypesByIdRequest struct {
	ctx        context.Context
	ApiService *MemberTypesAPIService
	id         int32
	clientId   *string
	memberType *MemberType
}

func (r ApiPutSystemMembersTypesByIdRequest) ClientId(clientId string) ApiPutSystemMembersTypesByIdRequest {
	r.clientId = &clientId
	return r
}

// type
func (r ApiPutSystemMembersTypesByIdRequest) MemberType(memberType MemberType) ApiPutSystemMembersTypesByIdRequest {
	r.memberType = &memberType
	return r
}

func (r ApiPutSystemMembersTypesByIdRequest) Execute() (*MemberType, *http.Response, error) {
	return r.ApiService.PutSystemMembersTypesByIdExecute(r)
}

/*
PutSystemMembersTypesById Put MemberType

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id typeId
	@return ApiPutSystemMembersTypesByIdRequest
*/
func (a *MemberTypesAPIService) PutSystemMembersTypesById(ctx context.Context, id int32) ApiPutSystemMembersTypesByIdRequest {
	return ApiPutSystemMembersTypesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberType
func (a *MemberTypesAPIService) PutSystemMembersTypesByIdExecute(r ApiPutSystemMembersTypesByIdRequest) (*MemberType, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MemberTypesAPIService.PutSystemMembersTypesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/types/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberType == nil {
		return localVarReturnValue, nil, reportError("memberType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberType
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
