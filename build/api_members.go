/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MembersAPIService MembersAPI service
type MembersAPIService service

type ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest struct {
	ctx        context.Context
	ApiService *MembersAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest) ClientId(clientId string) ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByIdUnusedTimeSheetsExecute(r)
}

/*
DeleteSystemMembersByIdUnusedTimeSheets Delete Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest
*/
func (a *MembersAPIService) DeleteSystemMembersByIdUnusedTimeSheets(ctx context.Context, id int32) ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest {
	return ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *MembersAPIService) DeleteSystemMembersByIdUnusedTimeSheetsExecute(r ApiDeleteSystemMembersByIdUnusedTimeSheetsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.DeleteSystemMembersByIdUnusedTimeSheets")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/unusedTimeSheets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersRequest) ClientId(clientId string) ApiGetSystemMembersRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersRequest) Conditions(conditions string) ApiGetSystemMembersRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersRequest) ChildConditions(childConditions string) ApiGetSystemMembersRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersRequest) OrderBy(orderBy string) ApiGetSystemMembersRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersRequest) Fields(fields string) ApiGetSystemMembersRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersRequest) Page(page int32) ApiGetSystemMembersRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersRequest) PageSize(pageSize int32) ApiGetSystemMembersRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersRequest) PageId(pageId int32) ApiGetSystemMembersRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersRequest) Execute() ([]Member, *http.Response, error) {
	return r.ApiService.GetSystemMembersExecute(r)
}

/*
GetSystemMembers Get List of Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersRequest
*/
func (a *MembersAPIService) GetSystemMembers(ctx context.Context) ApiGetSystemMembersRequest {
	return ApiGetSystemMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Member
func (a *MembersAPIService) GetSystemMembersExecute(r ApiGetSystemMembersRequest) ([]Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByIdRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByIdRequest) ClientId(clientId string) ApiGetSystemMembersByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByIdRequest) Conditions(conditions string) ApiGetSystemMembersByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByIdRequest) Fields(fields string) ApiGetSystemMembersByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByIdRequest) Page(page int32) ApiGetSystemMembersByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByIdRequest) PageId(pageId int32) ApiGetSystemMembersByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByIdRequest) Execute() (*Member, *http.Response, error) {
	return r.ApiService.GetSystemMembersByIdExecute(r)
}

/*
GetSystemMembersById Get Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiGetSystemMembersByIdRequest
*/
func (a *MembersAPIService) GetSystemMembersById(ctx context.Context, id int32) ApiGetSystemMembersByIdRequest {
	return ApiGetSystemMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Member
func (a *MembersAPIService) GetSystemMembersByIdExecute(r ApiGetSystemMembersByIdRequest) (*Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByIdUsagesRequest) ClientId(clientId string) ApiGetSystemMembersByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) Conditions(conditions string) ApiGetSystemMembersByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSystemMembersByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) OrderBy(orderBy string) ApiGetSystemMembersByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) Fields(fields string) ApiGetSystemMembersByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) Page(page int32) ApiGetSystemMembersByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) PageSize(pageSize int32) ApiGetSystemMembersByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) PageId(pageId int32) ApiGetSystemMembersByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSystemMembersByIdUsagesExecute(r)
}

/*
GetSystemMembersByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiGetSystemMembersByIdUsagesRequest
*/
func (a *MembersAPIService) GetSystemMembersByIdUsages(ctx context.Context, id int32) ApiGetSystemMembersByIdUsagesRequest {
	return ApiGetSystemMembersByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *MembersAPIService) GetSystemMembersByIdUsagesExecute(r ApiGetSystemMembersByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByIdUsagesListRequest) ClientId(clientId string) ApiGetSystemMembersByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) Conditions(conditions string) ApiGetSystemMembersByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSystemMembersByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSystemMembersByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) Fields(fields string) ApiGetSystemMembersByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) Page(page int32) ApiGetSystemMembersByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSystemMembersByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) PageId(pageId int32) ApiGetSystemMembersByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSystemMembersByIdUsagesListExecute(r)
}

/*
GetSystemMembersByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiGetSystemMembersByIdUsagesListRequest
*/
func (a *MembersAPIService) GetSystemMembersByIdUsagesList(ctx context.Context, id int32) ApiGetSystemMembersByIdUsagesListRequest {
	return ApiGetSystemMembersByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *MembersAPIService) GetSystemMembersByIdUsagesListExecute(r ApiGetSystemMembersByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersCalendarsyncRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersCalendarsyncRequest) ClientId(clientId string) ApiGetSystemMembersCalendarsyncRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) Conditions(conditions string) ApiGetSystemMembersCalendarsyncRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) ChildConditions(childConditions string) ApiGetSystemMembersCalendarsyncRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersCalendarsyncRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) OrderBy(orderBy string) ApiGetSystemMembersCalendarsyncRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) Fields(fields string) ApiGetSystemMembersCalendarsyncRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) Page(page int32) ApiGetSystemMembersCalendarsyncRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) PageSize(pageSize int32) ApiGetSystemMembersCalendarsyncRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) PageId(pageId int32) ApiGetSystemMembersCalendarsyncRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersCalendarsyncRequest) Execute() ([]MemberForCalSync, *http.Response, error) {
	return r.ApiService.GetSystemMembersCalendarsyncExecute(r)
}

/*
GetSystemMembersCalendarsync Get List of Member to be use for calendar sync subscriptions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersCalendarsyncRequest
*/
func (a *MembersAPIService) GetSystemMembersCalendarsync(ctx context.Context) ApiGetSystemMembersCalendarsyncRequest {
	return ApiGetSystemMembersCalendarsyncRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MemberForCalSync
func (a *MembersAPIService) GetSystemMembersCalendarsyncExecute(r ApiGetSystemMembersCalendarsyncRequest) ([]MemberForCalSync, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberForCalSync
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersCalendarsync")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/calendarsync"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersCountRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersCountRequest) ClientId(clientId string) ApiGetSystemMembersCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersCountRequest) Conditions(conditions string) ApiGetSystemMembersCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersCountRequest) OrderBy(orderBy string) ApiGetSystemMembersCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersCountRequest) Fields(fields string) ApiGetSystemMembersCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersCountRequest) Page(page int32) ApiGetSystemMembersCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersCountRequest) PageSize(pageSize int32) ApiGetSystemMembersCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersCountRequest) PageId(pageId int32) ApiGetSystemMembersCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersCountExecute(r)
}

/*
GetSystemMembersCount Get Count of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersCountRequest
*/
func (a *MembersAPIService) GetSystemMembersCount(ctx context.Context) ApiGetSystemMembersCountRequest {
	return ApiGetSystemMembersCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MembersAPIService) GetSystemMembersCountExecute(r ApiGetSystemMembersCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersWithSsoRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersWithSsoRequest) ClientId(clientId string) ApiGetSystemMembersWithSsoRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) Conditions(conditions string) ApiGetSystemMembersWithSsoRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) ChildConditions(childConditions string) ApiGetSystemMembersWithSsoRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersWithSsoRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) OrderBy(orderBy string) ApiGetSystemMembersWithSsoRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) Fields(fields string) ApiGetSystemMembersWithSsoRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) Page(page int32) ApiGetSystemMembersWithSsoRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) PageSize(pageSize int32) ApiGetSystemMembersWithSsoRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) PageId(pageId int32) ApiGetSystemMembersWithSsoRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersWithSsoRequest) Execute() ([]Member, *http.Response, error) {
	return r.ApiService.GetSystemMembersWithSsoExecute(r)
}

/*
GetSystemMembersWithSso Get List of Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMembersWithSsoRequest
*/
func (a *MembersAPIService) GetSystemMembersWithSso(ctx context.Context) ApiGetSystemMembersWithSsoRequest {
	return ApiGetSystemMembersWithSsoRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Member
func (a *MembersAPIService) GetSystemMembersWithSsoExecute(r ApiGetSystemMembersWithSsoRequest) ([]Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersWithSso")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/withSso"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersmemberIdentifierregextypesRequest struct {
	ctx                   context.Context
	ApiService            *MembersAPIService
	clientId              *string
	memberIdentifier      string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) ClientId(clientId string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) Conditions(conditions string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) ChildConditions(childConditions string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) OrderBy(orderBy string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) Fields(fields string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) Page(page int32) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) PageSize(pageSize int32) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) PageId(pageId int32) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersmemberIdentifierregextypesRequest) Execute() (*Member, *http.Response, error) {
	return r.ApiService.GetSystemMembersmemberIdentifierregextypesExecute(r)
}

/*
GetSystemMembersmemberIdentifierregextypes Get Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param memberIdentifier memberIdentifier
	@return ApiGetSystemMembersmemberIdentifierregextypesRequest
*/
func (a *MembersAPIService) GetSystemMembersmemberIdentifierregextypes(ctx context.Context, memberIdentifier string) ApiGetSystemMembersmemberIdentifierregextypesRequest {
	return ApiGetSystemMembersmemberIdentifierregextypesRequest{
		ApiService:       a,
		ctx:              ctx,
		memberIdentifier: memberIdentifier,
	}
}

// Execute executes the request
//
//	@return Member
func (a *MembersAPIService) GetSystemMembersmemberIdentifierregextypesExecute(r ApiGetSystemMembersmemberIdentifierregextypesRequest) (*Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.GetSystemMembersmemberIdentifierregextypes")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{memberIdentifier:regex(^(types. |("
	localVarPath = strings.Replace(localVarPath, "{"+"memberIdentifier"+"}", url.PathEscape(parameterValueToString(r.memberIdentifier, "memberIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByIdRequest struct {
	ctx            context.Context
	ApiService     *MembersAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMembersByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersByIdRequest) Execute() (*Member, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByIdExecute(r)
}

/*
PatchSystemMembersById Patch Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPatchSystemMembersByIdRequest
*/
func (a *MembersAPIService) PatchSystemMembersById(ctx context.Context, id int32) ApiPatchSystemMembersByIdRequest {
	return ApiPatchSystemMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Member
func (a *MembersAPIService) PatchSystemMembersByIdExecute(r ApiPatchSystemMembersByIdRequest) (*Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PatchSystemMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersRequest struct {
	ctx        context.Context
	ApiService *MembersAPIService
	clientId   *string
	member     *Member
}

func (r ApiPostSystemMembersRequest) ClientId(clientId string) ApiPostSystemMembersRequest {
	r.clientId = &clientId
	return r
}

// member
func (r ApiPostSystemMembersRequest) Member(member Member) ApiPostSystemMembersRequest {
	r.member = &member
	return r
}

func (r ApiPostSystemMembersRequest) Execute() (*Member, *http.Response, error) {
	return r.ApiService.PostSystemMembersExecute(r)
}

/*
PostSystemMembers Post Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemMembersRequest
*/
func (a *MembersAPIService) PostSystemMembers(ctx context.Context) ApiPostSystemMembersRequest {
	return ApiPostSystemMembersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Member
func (a *MembersAPIService) PostSystemMembersExecute(r ApiPostSystemMembersRequest) (*Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.member == nil {
		return localVarReturnValue, nil, reportError("member is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.member
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByIdDeactivateRequest struct {
	ctx                context.Context
	ApiService         *MembersAPIService
	id                 int32
	clientId           *string
	memberDeactivation *MemberDeactivation
}

func (r ApiPostSystemMembersByIdDeactivateRequest) ClientId(clientId string) ApiPostSystemMembersByIdDeactivateRequest {
	r.clientId = &clientId
	return r
}

// item
func (r ApiPostSystemMembersByIdDeactivateRequest) MemberDeactivation(memberDeactivation MemberDeactivation) ApiPostSystemMembersByIdDeactivateRequest {
	r.memberDeactivation = &memberDeactivation
	return r
}

func (r ApiPostSystemMembersByIdDeactivateRequest) Execute() (*MemberDeactivation, *http.Response, error) {
	return r.ApiService.PostSystemMembersByIdDeactivateExecute(r)
}

/*
PostSystemMembersByIdDeactivate Post MemberDeactivation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPostSystemMembersByIdDeactivateRequest
*/
func (a *MembersAPIService) PostSystemMembersByIdDeactivate(ctx context.Context, id int32) ApiPostSystemMembersByIdDeactivateRequest {
	return ApiPostSystemMembersByIdDeactivateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MemberDeactivation
func (a *MembersAPIService) PostSystemMembersByIdDeactivateExecute(r ApiPostSystemMembersByIdDeactivateRequest) (*MemberDeactivation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberDeactivation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersByIdDeactivate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/deactivate"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberDeactivation == nil {
		return localVarReturnValue, nil, reportError("memberDeactivation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberDeactivation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByIdLinkSsoUserRequest struct {
	ctx               context.Context
	ApiService        *MembersAPIService
	id                int32
	clientId          *string
	memberLinkSsoUser *MemberLinkSsoUser
}

func (r ApiPostSystemMembersByIdLinkSsoUserRequest) ClientId(clientId string) ApiPostSystemMembersByIdLinkSsoUserRequest {
	r.clientId = &clientId
	return r
}

// item
func (r ApiPostSystemMembersByIdLinkSsoUserRequest) MemberLinkSsoUser(memberLinkSsoUser MemberLinkSsoUser) ApiPostSystemMembersByIdLinkSsoUserRequest {
	r.memberLinkSsoUser = &memberLinkSsoUser
	return r
}

func (r ApiPostSystemMembersByIdLinkSsoUserRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemMembersByIdLinkSsoUserExecute(r)
}

/*
PostSystemMembersByIdLinkSsoUser Post SuccessResponse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPostSystemMembersByIdLinkSsoUserRequest
*/
func (a *MembersAPIService) PostSystemMembersByIdLinkSsoUser(ctx context.Context, id int32) ApiPostSystemMembersByIdLinkSsoUserRequest {
	return ApiPostSystemMembersByIdLinkSsoUserRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *MembersAPIService) PostSystemMembersByIdLinkSsoUserExecute(r ApiPostSystemMembersByIdLinkSsoUserRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersByIdLinkSsoUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/linkSsoUser"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberLinkSsoUser == nil {
		return localVarReturnValue, nil, reportError("memberLinkSsoUser is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberLinkSsoUser
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByIdSubmitRequest struct {
	ctx            context.Context
	ApiService     *MembersAPIService
	id             int32
	clientId       *string
	memberSsoToken *MemberSsoToken
}

func (r ApiPostSystemMembersByIdSubmitRequest) ClientId(clientId string) ApiPostSystemMembersByIdSubmitRequest {
	r.clientId = &clientId
	return r
}

// item
func (r ApiPostSystemMembersByIdSubmitRequest) MemberSsoToken(memberSsoToken MemberSsoToken) ApiPostSystemMembersByIdSubmitRequest {
	r.memberSsoToken = &memberSsoToken
	return r
}

func (r ApiPostSystemMembersByIdSubmitRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemMembersByIdSubmitExecute(r)
}

/*
PostSystemMembersByIdSubmit Post SuccessResponse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPostSystemMembersByIdSubmitRequest
*/
func (a *MembersAPIService) PostSystemMembersByIdSubmit(ctx context.Context, id int32) ApiPostSystemMembersByIdSubmitRequest {
	return ApiPostSystemMembersByIdSubmitRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *MembersAPIService) PostSystemMembersByIdSubmitExecute(r ApiPostSystemMembersByIdSubmitRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersByIdSubmit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/submit"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberSsoToken == nil {
		return localVarReturnValue, nil, reportError("memberSsoToken is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberSsoToken
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByIdUnlinkSsoUserRequest struct {
	ctx        context.Context
	ApiService *MembersAPIService
	id         int32
	clientId   *string
}

func (r ApiPostSystemMembersByIdUnlinkSsoUserRequest) ClientId(clientId string) ApiPostSystemMembersByIdUnlinkSsoUserRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMembersByIdUnlinkSsoUserRequest) Execute() (*SuccessResponse, *http.Response, error) {
	return r.ApiService.PostSystemMembersByIdUnlinkSsoUserExecute(r)
}

/*
PostSystemMembersByIdUnlinkSsoUser Post SuccessResponse

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPostSystemMembersByIdUnlinkSsoUserRequest
*/
func (a *MembersAPIService) PostSystemMembersByIdUnlinkSsoUser(ctx context.Context, id int32) ApiPostSystemMembersByIdUnlinkSsoUserRequest {
	return ApiPostSystemMembersByIdUnlinkSsoUserRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SuccessResponse
func (a *MembersAPIService) PostSystemMembersByIdUnlinkSsoUserExecute(r ApiPostSystemMembersByIdUnlinkSsoUserRequest) (*SuccessResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SuccessResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersByIdUnlinkSsoUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}/unlinkSsoUser"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByMemberIdentifierTokensRequest struct {
	ctx              context.Context
	ApiService       *MembersAPIService
	memberIdentifier string
	clientId         *string
}

func (r ApiPostSystemMembersByMemberIdentifierTokensRequest) ClientId(clientId string) ApiPostSystemMembersByMemberIdentifierTokensRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMembersByMemberIdentifierTokensRequest) Execute() (*Token, *http.Response, error) {
	return r.ApiService.PostSystemMembersByMemberIdentifierTokensExecute(r)
}

/*
PostSystemMembersByMemberIdentifierTokens Post Token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param memberIdentifier memberIdentifier
	@return ApiPostSystemMembersByMemberIdentifierTokensRequest
*/
func (a *MembersAPIService) PostSystemMembersByMemberIdentifierTokens(ctx context.Context, memberIdentifier string) ApiPostSystemMembersByMemberIdentifierTokensRequest {
	return ApiPostSystemMembersByMemberIdentifierTokensRequest{
		ApiService:       a,
		ctx:              ctx,
		memberIdentifier: memberIdentifier,
	}
}

// Execute executes the request
//
//	@return Token
func (a *MembersAPIService) PostSystemMembersByMemberIdentifierTokensExecute(r ApiPostSystemMembersByMemberIdentifierTokensRequest) (*Token, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Token
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersByMemberIdentifierTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{memberIdentifier}/tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"memberIdentifier"+"}", url.PathEscape(parameterValueToString(r.memberIdentifier, "memberIdentifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersBySsoidDeactivateIamMemberRequest struct {
	ctx        context.Context
	ApiService *MembersAPIService
	ssoid      string
	clientId   *string
}

func (r ApiPostSystemMembersBySsoidDeactivateIamMemberRequest) ClientId(clientId string) ApiPostSystemMembersBySsoidDeactivateIamMemberRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMembersBySsoidDeactivateIamMemberRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSystemMembersBySsoidDeactivateIamMemberExecute(r)
}

/*
PostSystemMembersBySsoidDeactivateIamMember Delete Member Via IAM

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param ssoid ssoId
	@return ApiPostSystemMembersBySsoidDeactivateIamMemberRequest
*/
func (a *MembersAPIService) PostSystemMembersBySsoidDeactivateIamMember(ctx context.Context, ssoid string) ApiPostSystemMembersBySsoidDeactivateIamMemberRequest {
	return ApiPostSystemMembersBySsoidDeactivateIamMemberRequest{
		ApiService: a,
		ctx:        ctx,
		ssoid:      ssoid,
	}
}

// Execute executes the request
func (a *MembersAPIService) PostSystemMembersBySsoidDeactivateIamMemberExecute(r ApiPostSystemMembersBySsoidDeactivateIamMemberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PostSystemMembersBySsoidDeactivateIamMember")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{ssoid}/deactivateIamMember"
	localVarPath = strings.Replace(localVarPath, "{"+"ssoid"+"}", url.PathEscape(parameterValueToString(r.ssoid, "ssoid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutSystemMembersByIdRequest struct {
	ctx        context.Context
	ApiService *MembersAPIService
	id         int32
	clientId   *string
	member     *Member
}

func (r ApiPutSystemMembersByIdRequest) ClientId(clientId string) ApiPutSystemMembersByIdRequest {
	r.clientId = &clientId
	return r
}

// member
func (r ApiPutSystemMembersByIdRequest) Member(member Member) ApiPutSystemMembersByIdRequest {
	r.member = &member
	return r
}

func (r ApiPutSystemMembersByIdRequest) Execute() (*Member, *http.Response, error) {
	return r.ApiService.PutSystemMembersByIdExecute(r)
}

/*
PutSystemMembersById Put Member

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id memberId
	@return ApiPutSystemMembersByIdRequest
*/
func (a *MembersAPIService) PutSystemMembersById(ctx context.Context, id int32) ApiPutSystemMembersByIdRequest {
	return ApiPutSystemMembersByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Member
func (a *MembersAPIService) PutSystemMembersByIdExecute(r ApiPutSystemMembersByIdRequest) (*Member, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Member
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersAPIService.PutSystemMembersById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.member == nil {
		return localVarReturnValue, nil, reportError("member is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.member
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
