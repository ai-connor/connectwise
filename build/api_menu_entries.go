/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MenuEntriesAPIService MenuEntriesAPI service
type MenuEntriesAPIService service

type ApiDeleteSystemMenuentriesByIdRequest struct {
	ctx        context.Context
	ApiService *MenuEntriesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSystemMenuentriesByIdRequest) ClientId(clientId string) ApiDeleteSystemMenuentriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMenuentriesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMenuentriesByIdExecute(r)
}

/*
DeleteSystemMenuentriesById Delete MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@return ApiDeleteSystemMenuentriesByIdRequest
*/
func (a *MenuEntriesAPIService) DeleteSystemMenuentriesById(ctx context.Context, id int32) ApiDeleteSystemMenuentriesByIdRequest {
	return ApiDeleteSystemMenuentriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *MenuEntriesAPIService) DeleteSystemMenuentriesByIdExecute(r ApiDeleteSystemMenuentriesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.DeleteSystemMenuentriesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMenuentriesRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuentriesRequest) ClientId(clientId string) ApiGetSystemMenuentriesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuentriesRequest) Conditions(conditions string) ApiGetSystemMenuentriesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuentriesRequest) ChildConditions(childConditions string) ApiGetSystemMenuentriesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuentriesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuentriesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuentriesRequest) OrderBy(orderBy string) ApiGetSystemMenuentriesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuentriesRequest) Fields(fields string) ApiGetSystemMenuentriesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuentriesRequest) Page(page int32) ApiGetSystemMenuentriesRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuentriesRequest) PageSize(pageSize int32) ApiGetSystemMenuentriesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuentriesRequest) PageId(pageId int32) ApiGetSystemMenuentriesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuentriesRequest) Execute() ([]MenuEntry, *http.Response, error) {
	return r.ApiService.GetSystemMenuentriesExecute(r)
}

/*
GetSystemMenuentries Get List of MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMenuentriesRequest
*/
func (a *MenuEntriesAPIService) GetSystemMenuentries(ctx context.Context) ApiGetSystemMenuentriesRequest {
	return ApiGetSystemMenuentriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []MenuEntry
func (a *MenuEntriesAPIService) GetSystemMenuentriesExecute(r ApiGetSystemMenuentriesRequest) ([]MenuEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MenuEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.GetSystemMenuentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMenuentriesByIdRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntriesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuentriesByIdRequest) ClientId(clientId string) ApiGetSystemMenuentriesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) Conditions(conditions string) ApiGetSystemMenuentriesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) ChildConditions(childConditions string) ApiGetSystemMenuentriesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuentriesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) OrderBy(orderBy string) ApiGetSystemMenuentriesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) Fields(fields string) ApiGetSystemMenuentriesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) Page(page int32) ApiGetSystemMenuentriesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) PageSize(pageSize int32) ApiGetSystemMenuentriesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) PageId(pageId int32) ApiGetSystemMenuentriesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuentriesByIdRequest) Execute() (*MenuEntry, *http.Response, error) {
	return r.ApiService.GetSystemMenuentriesByIdExecute(r)
}

/*
GetSystemMenuentriesById Get MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@return ApiGetSystemMenuentriesByIdRequest
*/
func (a *MenuEntriesAPIService) GetSystemMenuentriesById(ctx context.Context, id int32) ApiGetSystemMenuentriesByIdRequest {
	return ApiGetSystemMenuentriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MenuEntry
func (a *MenuEntriesAPIService) GetSystemMenuentriesByIdExecute(r ApiGetSystemMenuentriesByIdRequest) (*MenuEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.GetSystemMenuentriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMenuentriesByIdImageRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntriesAPIService
	id                    int32
	clientId              *string
	lastmodified          string
	largeFlag             bool
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuentriesByIdImageRequest) ClientId(clientId string) ApiGetSystemMenuentriesByIdImageRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) Conditions(conditions string) ApiGetSystemMenuentriesByIdImageRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) ChildConditions(childConditions string) ApiGetSystemMenuentriesByIdImageRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuentriesByIdImageRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) OrderBy(orderBy string) ApiGetSystemMenuentriesByIdImageRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) Fields(fields string) ApiGetSystemMenuentriesByIdImageRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) Page(page int32) ApiGetSystemMenuentriesByIdImageRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) PageSize(pageSize int32) ApiGetSystemMenuentriesByIdImageRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) PageId(pageId int32) ApiGetSystemMenuentriesByIdImageRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuentriesByIdImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSystemMenuentriesByIdImageExecute(r)
}

/*
GetSystemMenuentriesByIdImage Get MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@param lastmodified lastmodified
	@param largeFlag largeFlag
	@return ApiGetSystemMenuentriesByIdImageRequest
*/
func (a *MenuEntriesAPIService) GetSystemMenuentriesByIdImage(ctx context.Context, id int32, lastmodified string, largeFlag bool) ApiGetSystemMenuentriesByIdImageRequest {
	return ApiGetSystemMenuentriesByIdImageRequest{
		ApiService:   a,
		ctx:          ctx,
		id:           id,
		lastmodified: lastmodified,
		largeFlag:    largeFlag,
	}
}

// Execute executes the request
func (a *MenuEntriesAPIService) GetSystemMenuentriesByIdImageExecute(r ApiGetSystemMenuentriesByIdImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.GetSystemMenuentriesByIdImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}/image"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lastmodified"+"}", url.PathEscape(parameterValueToString(r.lastmodified, "lastmodified")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"largeFlag"+"}", url.PathEscape(parameterValueToString(r.largeFlag, "largeFlag")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMenuentriesCountRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntriesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuentriesCountRequest) ClientId(clientId string) ApiGetSystemMenuentriesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) Conditions(conditions string) ApiGetSystemMenuentriesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) ChildConditions(childConditions string) ApiGetSystemMenuentriesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuentriesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) OrderBy(orderBy string) ApiGetSystemMenuentriesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) Fields(fields string) ApiGetSystemMenuentriesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) Page(page int32) ApiGetSystemMenuentriesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) PageSize(pageSize int32) ApiGetSystemMenuentriesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) PageId(pageId int32) ApiGetSystemMenuentriesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuentriesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMenuentriesCountExecute(r)
}

/*
GetSystemMenuentriesCount Get Count of MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMenuentriesCountRequest
*/
func (a *MenuEntriesAPIService) GetSystemMenuentriesCount(ctx context.Context) ApiGetSystemMenuentriesCountRequest {
	return ApiGetSystemMenuentriesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MenuEntriesAPIService) GetSystemMenuentriesCountExecute(r ApiGetSystemMenuentriesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.GetSystemMenuentriesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMenuentriesByIdRequest struct {
	ctx            context.Context
	ApiService     *MenuEntriesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMenuentriesByIdRequest) ClientId(clientId string) ApiPatchSystemMenuentriesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMenuentriesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMenuentriesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMenuentriesByIdRequest) Execute() (*MenuEntry, *http.Response, error) {
	return r.ApiService.PatchSystemMenuentriesByIdExecute(r)
}

/*
PatchSystemMenuentriesById Patch MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@return ApiPatchSystemMenuentriesByIdRequest
*/
func (a *MenuEntriesAPIService) PatchSystemMenuentriesById(ctx context.Context, id int32) ApiPatchSystemMenuentriesByIdRequest {
	return ApiPatchSystemMenuentriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MenuEntry
func (a *MenuEntriesAPIService) PatchSystemMenuentriesByIdExecute(r ApiPatchSystemMenuentriesByIdRequest) (*MenuEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.PatchSystemMenuentriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMenuentriesRequest struct {
	ctx        context.Context
	ApiService *MenuEntriesAPIService
	clientId   *string
	menuEntry  *MenuEntry
}

func (r ApiPostSystemMenuentriesRequest) ClientId(clientId string) ApiPostSystemMenuentriesRequest {
	r.clientId = &clientId
	return r
}

// menuEntry
func (r ApiPostSystemMenuentriesRequest) MenuEntry(menuEntry MenuEntry) ApiPostSystemMenuentriesRequest {
	r.menuEntry = &menuEntry
	return r
}

func (r ApiPostSystemMenuentriesRequest) Execute() (*MenuEntry, *http.Response, error) {
	return r.ApiService.PostSystemMenuentriesExecute(r)
}

/*
PostSystemMenuentries Post MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSystemMenuentriesRequest
*/
func (a *MenuEntriesAPIService) PostSystemMenuentries(ctx context.Context) ApiPostSystemMenuentriesRequest {
	return ApiPostSystemMenuentriesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return MenuEntry
func (a *MenuEntriesAPIService) PostSystemMenuentriesExecute(r ApiPostSystemMenuentriesRequest) (*MenuEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.PostSystemMenuentries")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.menuEntry == nil {
		return localVarReturnValue, nil, reportError("menuEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.menuEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMenuentriesByIdImageRequest struct {
	ctx        context.Context
	ApiService *MenuEntriesAPIService
	id         int32
	clientId   *string
}

func (r ApiPostSystemMenuentriesByIdImageRequest) ClientId(clientId string) ApiPostSystemMenuentriesByIdImageRequest {
	r.clientId = &clientId
	return r
}

func (r ApiPostSystemMenuentriesByIdImageRequest) Execute() (*http.Response, error) {
	return r.ApiService.PostSystemMenuentriesByIdImageExecute(r)
}

/*
PostSystemMenuentriesByIdImage Post MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@return ApiPostSystemMenuentriesByIdImageRequest
*/
func (a *MenuEntriesAPIService) PostSystemMenuentriesByIdImage(ctx context.Context, id int32) ApiPostSystemMenuentriesByIdImageRequest {
	return ApiPostSystemMenuentriesByIdImageRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *MenuEntriesAPIService) PostSystemMenuentriesByIdImageExecute(r ApiPostSystemMenuentriesByIdImageRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.PostSystemMenuentriesByIdImage")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}/image"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiPutSystemMenuentriesByIdRequest struct {
	ctx        context.Context
	ApiService *MenuEntriesAPIService
	id         int32
	clientId   *string
	menuEntry  *MenuEntry
}

func (r ApiPutSystemMenuentriesByIdRequest) ClientId(clientId string) ApiPutSystemMenuentriesByIdRequest {
	r.clientId = &clientId
	return r
}

// menuEntry
func (r ApiPutSystemMenuentriesByIdRequest) MenuEntry(menuEntry MenuEntry) ApiPutSystemMenuentriesByIdRequest {
	r.menuEntry = &menuEntry
	return r
}

func (r ApiPutSystemMenuentriesByIdRequest) Execute() (*MenuEntry, *http.Response, error) {
	return r.ApiService.PutSystemMenuentriesByIdExecute(r)
}

/*
PutSystemMenuentriesById Put MenuEntry

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id menuentryId
	@return ApiPutSystemMenuentriesByIdRequest
*/
func (a *MenuEntriesAPIService) PutSystemMenuentriesById(ctx context.Context, id int32) ApiPutSystemMenuentriesByIdRequest {
	return ApiPutSystemMenuentriesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return MenuEntry
func (a *MenuEntriesAPIService) PutSystemMenuentriesByIdExecute(r ApiPutSystemMenuentriesByIdRequest) (*MenuEntry, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntriesAPIService.PutSystemMenuentriesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuentries/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.menuEntry == nil {
		return localVarReturnValue, nil, reportError("menuEntry is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.menuEntry
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
