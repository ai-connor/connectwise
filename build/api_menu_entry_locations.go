/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MenuEntryLocationsAPIService MenuEntryLocationsAPI service
type MenuEntryLocationsAPIService service

type ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest struct {
	ctx        context.Context
	ApiService *MenuEntryLocationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMenuEntriesByParentIdLocationsByIdExecute(r)
}

/*
DeleteSystemMenuEntriesByParentIdLocationsById Delete MenuEntryLocation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id locationId
	@param parentId menuEntryId
	@return ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest
*/
func (a *MenuEntryLocationsAPIService) DeleteSystemMenuEntriesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest {
	return ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *MenuEntryLocationsAPIService) DeleteSystemMenuEntriesByParentIdLocationsByIdExecute(r ApiDeleteSystemMenuEntriesByParentIdLocationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntryLocationsAPIService.DeleteSystemMenuEntriesByParentIdLocationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuEntries/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMenuEntriesByParentIdLocationsRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntryLocationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) ClientId(clientId string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) Conditions(conditions string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) ChildConditions(childConditions string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) OrderBy(orderBy string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) Fields(fields string) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) Page(page int32) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) PageSize(pageSize int32) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) PageId(pageId int32) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsRequest) Execute() ([]MenuEntryLocation, *http.Response, error) {
	return r.ApiService.GetSystemMenuEntriesByParentIdLocationsExecute(r)
}

/*
GetSystemMenuEntriesByParentIdLocations Get List of MenuEntryLocation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId menuEntryId
	@return ApiGetSystemMenuEntriesByParentIdLocationsRequest
*/
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocations(ctx context.Context, parentId int32) ApiGetSystemMenuEntriesByParentIdLocationsRequest {
	return ApiGetSystemMenuEntriesByParentIdLocationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []MenuEntryLocation
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocationsExecute(r ApiGetSystemMenuEntriesByParentIdLocationsRequest) ([]MenuEntryLocation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MenuEntryLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntryLocationsAPIService.GetSystemMenuEntriesByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuEntries/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntryLocationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) ClientId(clientId string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) Conditions(conditions string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) OrderBy(orderBy string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) Fields(fields string) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) Page(page int32) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) PageSize(pageSize int32) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) PageId(pageId int32) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) Execute() (*MenuEntryLocation, *http.Response, error) {
	return r.ApiService.GetSystemMenuEntriesByParentIdLocationsByIdExecute(r)
}

/*
GetSystemMenuEntriesByParentIdLocationsById Get MenuEntryLocation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id locationId
	@param parentId menuEntryId
	@return ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest
*/
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest {
	return ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MenuEntryLocation
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocationsByIdExecute(r ApiGetSystemMenuEntriesByParentIdLocationsByIdRequest) (*MenuEntryLocation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntryLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntryLocationsAPIService.GetSystemMenuEntriesByParentIdLocationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuEntries/{parentId}/locations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMenuEntriesByParentIdLocationsCountRequest struct {
	ctx                   context.Context
	ApiService            *MenuEntryLocationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) ClientId(clientId string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) Conditions(conditions string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) ChildConditions(childConditions string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) OrderBy(orderBy string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) Fields(fields string) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) Page(page int32) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) PageSize(pageSize int32) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) PageId(pageId int32) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMenuEntriesByParentIdLocationsCountExecute(r)
}

/*
GetSystemMenuEntriesByParentIdLocationsCount Get Count of MenuEntryLocation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId menuEntryId
	@return ApiGetSystemMenuEntriesByParentIdLocationsCountRequest
*/
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocationsCount(ctx context.Context, parentId int32) ApiGetSystemMenuEntriesByParentIdLocationsCountRequest {
	return ApiGetSystemMenuEntriesByParentIdLocationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MenuEntryLocationsAPIService) GetSystemMenuEntriesByParentIdLocationsCountExecute(r ApiGetSystemMenuEntriesByParentIdLocationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntryLocationsAPIService.GetSystemMenuEntriesByParentIdLocationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuEntries/{parentId}/locations/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMenuEntriesByParentIdLocationsRequest struct {
	ctx               context.Context
	ApiService        *MenuEntryLocationsAPIService
	parentId          int32
	clientId          *string
	menuEntryLocation *MenuEntryLocation
}

func (r ApiPostSystemMenuEntriesByParentIdLocationsRequest) ClientId(clientId string) ApiPostSystemMenuEntriesByParentIdLocationsRequest {
	r.clientId = &clientId
	return r
}

// menuEntryLocation
func (r ApiPostSystemMenuEntriesByParentIdLocationsRequest) MenuEntryLocation(menuEntryLocation MenuEntryLocation) ApiPostSystemMenuEntriesByParentIdLocationsRequest {
	r.menuEntryLocation = &menuEntryLocation
	return r
}

func (r ApiPostSystemMenuEntriesByParentIdLocationsRequest) Execute() (*MenuEntryLocation, *http.Response, error) {
	return r.ApiService.PostSystemMenuEntriesByParentIdLocationsExecute(r)
}

/*
PostSystemMenuEntriesByParentIdLocations Post MenuEntryLocation

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId menuEntryId
	@return ApiPostSystemMenuEntriesByParentIdLocationsRequest
*/
func (a *MenuEntryLocationsAPIService) PostSystemMenuEntriesByParentIdLocations(ctx context.Context, parentId int32) ApiPostSystemMenuEntriesByParentIdLocationsRequest {
	return ApiPostSystemMenuEntriesByParentIdLocationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MenuEntryLocation
func (a *MenuEntryLocationsAPIService) PostSystemMenuEntriesByParentIdLocationsExecute(r ApiPostSystemMenuEntriesByParentIdLocationsRequest) (*MenuEntryLocation, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MenuEntryLocation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MenuEntryLocationsAPIService.PostSystemMenuEntriesByParentIdLocations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/menuEntries/{parentId}/locations"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.menuEntryLocation == nil {
		return localVarReturnValue, nil, reportError("menuEntryLocation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.menuEntryLocation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
