/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// MyMemberCertificationsAPIService MyMemberCertificationsAPI service
type MyMemberCertificationsAPIService service

type ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest struct {
	ctx        context.Context
	ApiService *MyMemberCertificationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest) ClientId(clientId string) ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSystemMembersByParentIdMycertificationsByIdExecute(r)
}

/*
DeleteSystemMembersByParentIdMycertificationsById Delete MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id mycertificationId
	@param parentId memberId
	@return ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest
*/
func (a *MyMemberCertificationsAPIService) DeleteSystemMembersByParentIdMycertificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest {
	return ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *MyMemberCertificationsAPIService) DeleteSystemMembersByParentIdMycertificationsByIdExecute(r ApiDeleteSystemMembersByParentIdMycertificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.DeleteSystemMembersByParentIdMycertificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdMycertificationsRequest struct {
	ctx                   context.Context
	ApiService            *MyMemberCertificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) Fields(fields string) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) Page(page int32) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdMycertificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsRequest) Execute() ([]MemberCertification, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdMycertificationsExecute(r)
}

/*
GetSystemMembersByParentIdMycertifications Get List of MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdMycertificationsRequest
*/
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertifications(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdMycertificationsRequest {
	return ApiGetSystemMembersByParentIdMycertificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []MemberCertification
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertificationsExecute(r ApiGetSystemMembersByParentIdMycertificationsRequest) ([]MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.GetSystemMembersByParentIdMycertifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdMycertificationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *MyMemberCertificationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) Fields(fields string) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) Page(page int32) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdMycertificationsByIdExecute(r)
}

/*
GetSystemMembersByParentIdMycertificationsById Get MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id mycertificationId
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdMycertificationsByIdRequest
*/
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertificationsById(ctx context.Context, id int32, parentId int32) ApiGetSystemMembersByParentIdMycertificationsByIdRequest {
	return ApiGetSystemMembersByParentIdMycertificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberCertification
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertificationsByIdExecute(r ApiGetSystemMembersByParentIdMycertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.GetSystemMembersByParentIdMycertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMembersByParentIdMycertificationsCountRequest struct {
	ctx                   context.Context
	ApiService            *MyMemberCertificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) ClientId(clientId string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) Conditions(conditions string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) ChildConditions(childConditions string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) OrderBy(orderBy string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) Fields(fields string) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) Page(page int32) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) PageSize(pageSize int32) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) PageId(pageId int32) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMembersByParentIdMycertificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMembersByParentIdMycertificationsCountExecute(r)
}

/*
GetSystemMembersByParentIdMycertificationsCount Get Count of MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiGetSystemMembersByParentIdMycertificationsCountRequest
*/
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertificationsCount(ctx context.Context, parentId int32) ApiGetSystemMembersByParentIdMycertificationsCountRequest {
	return ApiGetSystemMembersByParentIdMycertificationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *MyMemberCertificationsAPIService) GetSystemMembersByParentIdMycertificationsCountExecute(r ApiGetSystemMembersByParentIdMycertificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.GetSystemMembersByParentIdMycertificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMembersByParentIdMycertificationsByIdRequest struct {
	ctx            context.Context
	ApiService     *MyMemberCertificationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMembersByParentIdMycertificationsByIdRequest) ClientId(clientId string) ApiPatchSystemMembersByParentIdMycertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMembersByParentIdMycertificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMembersByParentIdMycertificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMembersByParentIdMycertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PatchSystemMembersByParentIdMycertificationsByIdExecute(r)
}

/*
PatchSystemMembersByParentIdMycertificationsById Patch MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id mycertificationId
	@param parentId memberId
	@return ApiPatchSystemMembersByParentIdMycertificationsByIdRequest
*/
func (a *MyMemberCertificationsAPIService) PatchSystemMembersByParentIdMycertificationsById(ctx context.Context, id int32, parentId int32) ApiPatchSystemMembersByParentIdMycertificationsByIdRequest {
	return ApiPatchSystemMembersByParentIdMycertificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberCertification
func (a *MyMemberCertificationsAPIService) PatchSystemMembersByParentIdMycertificationsByIdExecute(r ApiPatchSystemMembersByParentIdMycertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.PatchSystemMembersByParentIdMycertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSystemMembersByParentIdMycertificationsRequest struct {
	ctx                 context.Context
	ApiService          *MyMemberCertificationsAPIService
	parentId            int32
	clientId            *string
	memberCertification *MemberCertification
}

func (r ApiPostSystemMembersByParentIdMycertificationsRequest) ClientId(clientId string) ApiPostSystemMembersByParentIdMycertificationsRequest {
	r.clientId = &clientId
	return r
}

// memberCertification
func (r ApiPostSystemMembersByParentIdMycertificationsRequest) MemberCertification(memberCertification MemberCertification) ApiPostSystemMembersByParentIdMycertificationsRequest {
	r.memberCertification = &memberCertification
	return r
}

func (r ApiPostSystemMembersByParentIdMycertificationsRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PostSystemMembersByParentIdMycertificationsExecute(r)
}

/*
PostSystemMembersByParentIdMycertifications Post MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId memberId
	@return ApiPostSystemMembersByParentIdMycertificationsRequest
*/
func (a *MyMemberCertificationsAPIService) PostSystemMembersByParentIdMycertifications(ctx context.Context, parentId int32) ApiPostSystemMembersByParentIdMycertificationsRequest {
	return ApiPostSystemMembersByParentIdMycertificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberCertification
func (a *MyMemberCertificationsAPIService) PostSystemMembersByParentIdMycertificationsExecute(r ApiPostSystemMembersByParentIdMycertificationsRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.PostSystemMembersByParentIdMycertifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberCertification == nil {
		return localVarReturnValue, nil, reportError("memberCertification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberCertification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMembersByParentIdMycertificationsByIdRequest struct {
	ctx                 context.Context
	ApiService          *MyMemberCertificationsAPIService
	id                  int32
	parentId            int32
	clientId            *string
	memberCertification *MemberCertification
}

func (r ApiPutSystemMembersByParentIdMycertificationsByIdRequest) ClientId(clientId string) ApiPutSystemMembersByParentIdMycertificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// memberCertification
func (r ApiPutSystemMembersByParentIdMycertificationsByIdRequest) MemberCertification(memberCertification MemberCertification) ApiPutSystemMembersByParentIdMycertificationsByIdRequest {
	r.memberCertification = &memberCertification
	return r
}

func (r ApiPutSystemMembersByParentIdMycertificationsByIdRequest) Execute() (*MemberCertification, *http.Response, error) {
	return r.ApiService.PutSystemMembersByParentIdMycertificationsByIdExecute(r)
}

/*
PutSystemMembersByParentIdMycertificationsById Put MemberCertification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id mycertificationId
	@param parentId memberId
	@return ApiPutSystemMembersByParentIdMycertificationsByIdRequest
*/
func (a *MyMemberCertificationsAPIService) PutSystemMembersByParentIdMycertificationsById(ctx context.Context, id int32, parentId int32) ApiPutSystemMembersByParentIdMycertificationsByIdRequest {
	return ApiPutSystemMembersByParentIdMycertificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return MemberCertification
func (a *MyMemberCertificationsAPIService) PutSystemMembersByParentIdMycertificationsByIdExecute(r ApiPutSystemMembersByParentIdMycertificationsByIdRequest) (*MemberCertification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *MemberCertification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MyMemberCertificationsAPIService.PutSystemMembersByParentIdMycertificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/members/{parentId}/mycertifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.memberCertification == nil {
		return localVarReturnValue, nil, reportError("memberCertification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.memberCertification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
