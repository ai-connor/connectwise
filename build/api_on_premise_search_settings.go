/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OnPremiseSearchSettingsAPIService OnPremiseSearchSettingsAPI service
type OnPremiseSearchSettingsAPIService service

type ApiGetSystemOnPremiseSearchSettingRequest struct {
	ctx                   context.Context
	ApiService            *OnPremiseSearchSettingsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) ClientId(clientId string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) Conditions(conditions string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) ChildConditions(childConditions string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) OrderBy(orderBy string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) Fields(fields string) ApiGetSystemOnPremiseSearchSettingRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) Page(page int32) ApiGetSystemOnPremiseSearchSettingRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) PageSize(pageSize int32) ApiGetSystemOnPremiseSearchSettingRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) PageId(pageId int32) ApiGetSystemOnPremiseSearchSettingRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingRequest) Execute() ([]OnPremiseSearchSetting, *http.Response, error) {
	return r.ApiService.GetSystemOnPremiseSearchSettingExecute(r)
}

/*
GetSystemOnPremiseSearchSetting Get List of OnPremiseSearchSettings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemOnPremiseSearchSettingRequest
*/
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSetting(ctx context.Context) ApiGetSystemOnPremiseSearchSettingRequest {
	return ApiGetSystemOnPremiseSearchSettingRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OnPremiseSearchSetting
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSettingExecute(r ApiGetSystemOnPremiseSearchSettingRequest) ([]OnPremiseSearchSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OnPremiseSearchSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnPremiseSearchSettingsAPIService.GetSystemOnPremiseSearchSetting")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/onPremiseSearchSetting/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOnPremiseSearchSettingByIdRequest struct {
	ctx                   context.Context
	ApiService            *OnPremiseSearchSettingsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) ClientId(clientId string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) Conditions(conditions string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) ChildConditions(childConditions string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) OrderBy(orderBy string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) Fields(fields string) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) Page(page int32) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) PageSize(pageSize int32) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) PageId(pageId int32) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingByIdRequest) Execute() (*OnPremiseSearchSetting, *http.Response, error) {
	return r.ApiService.GetSystemOnPremiseSearchSettingByIdExecute(r)
}

/*
GetSystemOnPremiseSearchSettingById Get OnPremiseSearchSettings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id OnPremiseSearchSettingId
	@return ApiGetSystemOnPremiseSearchSettingByIdRequest
*/
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSettingById(ctx context.Context, id int32) ApiGetSystemOnPremiseSearchSettingByIdRequest {
	return ApiGetSystemOnPremiseSearchSettingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OnPremiseSearchSetting
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSettingByIdExecute(r ApiGetSystemOnPremiseSearchSettingByIdRequest) (*OnPremiseSearchSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnPremiseSearchSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnPremiseSearchSettingsAPIService.GetSystemOnPremiseSearchSettingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/onPremiseSearchSetting/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemOnPremiseSearchSettingCountRequest struct {
	ctx                   context.Context
	ApiService            *OnPremiseSearchSettingsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) ClientId(clientId string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) Conditions(conditions string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) ChildConditions(childConditions string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) OrderBy(orderBy string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) Fields(fields string) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) Page(page int32) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) PageSize(pageSize int32) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) PageId(pageId int32) ApiGetSystemOnPremiseSearchSettingCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemOnPremiseSearchSettingCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemOnPremiseSearchSettingCountExecute(r)
}

/*
GetSystemOnPremiseSearchSettingCount Get Count of OnPremiseSearchSettings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemOnPremiseSearchSettingCountRequest
*/
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSettingCount(ctx context.Context) ApiGetSystemOnPremiseSearchSettingCountRequest {
	return ApiGetSystemOnPremiseSearchSettingCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OnPremiseSearchSettingsAPIService) GetSystemOnPremiseSearchSettingCountExecute(r ApiGetSystemOnPremiseSearchSettingCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnPremiseSearchSettingsAPIService.GetSystemOnPremiseSearchSettingCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/onPremiseSearchSetting/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemOnPremiseSearchSettingByIdRequest struct {
	ctx            context.Context
	ApiService     *OnPremiseSearchSettingsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemOnPremiseSearchSettingByIdRequest) ClientId(clientId string) ApiPatchSystemOnPremiseSearchSettingByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemOnPremiseSearchSettingByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemOnPremiseSearchSettingByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemOnPremiseSearchSettingByIdRequest) Execute() (*OnPremiseSearchSetting, *http.Response, error) {
	return r.ApiService.PatchSystemOnPremiseSearchSettingByIdExecute(r)
}

/*
PatchSystemOnPremiseSearchSettingById Patch OnPremiseSearchSettings

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id OnPremiseSearchSettingId
	@return ApiPatchSystemOnPremiseSearchSettingByIdRequest
*/
func (a *OnPremiseSearchSettingsAPIService) PatchSystemOnPremiseSearchSettingById(ctx context.Context, id int32) ApiPatchSystemOnPremiseSearchSettingByIdRequest {
	return ApiPatchSystemOnPremiseSearchSettingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OnPremiseSearchSetting
func (a *OnPremiseSearchSettingsAPIService) PatchSystemOnPremiseSearchSettingByIdExecute(r ApiPatchSystemOnPremiseSearchSettingByIdRequest) (*OnPremiseSearchSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnPremiseSearchSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnPremiseSearchSettingsAPIService.PatchSystemOnPremiseSearchSettingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/onPremiseSearchSetting/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemOnPremiseSearchSettingByIdRequest struct {
	ctx                    context.Context
	ApiService             *OnPremiseSearchSettingsAPIService
	id                     int32
	clientId               *string
	onPremiseSearchSetting *OnPremiseSearchSetting
}

func (r ApiPutSystemOnPremiseSearchSettingByIdRequest) ClientId(clientId string) ApiPutSystemOnPremiseSearchSettingByIdRequest {
	r.clientId = &clientId
	return r
}

// onPremiseSearchSetting
func (r ApiPutSystemOnPremiseSearchSettingByIdRequest) OnPremiseSearchSetting(onPremiseSearchSetting OnPremiseSearchSetting) ApiPutSystemOnPremiseSearchSettingByIdRequest {
	r.onPremiseSearchSetting = &onPremiseSearchSetting
	return r
}

func (r ApiPutSystemOnPremiseSearchSettingByIdRequest) Execute() (*OnPremiseSearchSetting, *http.Response, error) {
	return r.ApiService.PutSystemOnPremiseSearchSettingByIdExecute(r)
}

/*
PutSystemOnPremiseSearchSettingById Put OnPremiseSearchSettings              This does not update Solr. This allows you to set Manage to the Solr password.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id OnPremiseSearchSettingId
	@return ApiPutSystemOnPremiseSearchSettingByIdRequest
*/
func (a *OnPremiseSearchSettingsAPIService) PutSystemOnPremiseSearchSettingById(ctx context.Context, id int32) ApiPutSystemOnPremiseSearchSettingByIdRequest {
	return ApiPutSystemOnPremiseSearchSettingByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OnPremiseSearchSetting
func (a *OnPremiseSearchSettingsAPIService) PutSystemOnPremiseSearchSettingByIdExecute(r ApiPutSystemOnPremiseSearchSettingByIdRequest) (*OnPremiseSearchSetting, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OnPremiseSearchSetting
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OnPremiseSearchSettingsAPIService.PutSystemOnPremiseSearchSettingById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/onPremiseSearchSetting/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.onPremiseSearchSetting == nil {
		return localVarReturnValue, nil, reportError("onPremiseSearchSetting is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.onPremiseSearchSetting
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
