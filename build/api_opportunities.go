/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OpportunitiesAPIService OpportunitiesAPI service
type OpportunitiesAPIService service

type ApiDeleteSalesOpportunitiesByIdRequest struct {
	ctx        context.Context
	ApiService *OpportunitiesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSalesOpportunitiesByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesByIdExecute(r)
}

/*
DeleteSalesOpportunitiesById Delete ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiDeleteSalesOpportunitiesByIdRequest
*/
func (a *OpportunitiesAPIService) DeleteSalesOpportunitiesById(ctx context.Context, id int32) ApiDeleteSalesOpportunitiesByIdRequest {
	return ApiDeleteSalesOpportunitiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *OpportunitiesAPIService) DeleteSalesOpportunitiesByIdExecute(r ApiDeleteSalesOpportunitiesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.DeleteSalesOpportunitiesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesRequest struct {
	ctx                   context.Context
	ApiService            *OpportunitiesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesRequest) Fields(fields string) ApiGetSalesOpportunitiesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesRequest) Page(page int32) ApiGetSalesOpportunitiesRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesRequest) Execute() ([]Opportunity, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesExecute(r)
}

/*
GetSalesOpportunities Get List of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesOpportunitiesRequest
*/
func (a *OpportunitiesAPIService) GetSalesOpportunities(ctx context.Context) ApiGetSalesOpportunitiesRequest {
	return ApiGetSalesOpportunitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Opportunity
func (a *OpportunitiesAPIService) GetSalesOpportunitiesExecute(r ApiGetSalesOpportunitiesRequest) ([]Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.GetSalesOpportunities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByIdRequest struct {
	ctx                   context.Context
	ApiService            *OpportunitiesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) Page(page int32) ApiGetSalesOpportunitiesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByIdRequest) Execute() (*Opportunity, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByIdExecute(r)
}

/*
GetSalesOpportunitiesById Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiGetSalesOpportunitiesByIdRequest
*/
func (a *OpportunitiesAPIService) GetSalesOpportunitiesById(ctx context.Context, id int32) ApiGetSalesOpportunitiesByIdRequest {
	return ApiGetSalesOpportunitiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Opportunity
func (a *OpportunitiesAPIService) GetSalesOpportunitiesByIdExecute(r ApiGetSalesOpportunitiesByIdRequest) (*Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.GetSalesOpportunitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesConversionsByIdRequest struct {
	ctx                   context.Context
	ApiService            *OpportunitiesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) Page(page int32) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesConversionsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesConversionsByIdRequest) Execute() ([]SalesConversion, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesConversionsByIdExecute(r)
}

/*
GetSalesOpportunitiesConversionsById Get Conversion

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiGetSalesOpportunitiesConversionsByIdRequest
*/
func (a *OpportunitiesAPIService) GetSalesOpportunitiesConversionsById(ctx context.Context, id int32) ApiGetSalesOpportunitiesConversionsByIdRequest {
	return ApiGetSalesOpportunitiesConversionsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []SalesConversion
func (a *OpportunitiesAPIService) GetSalesOpportunitiesConversionsByIdExecute(r ApiGetSalesOpportunitiesConversionsByIdRequest) ([]SalesConversion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []SalesConversion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.GetSalesOpportunitiesConversionsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/conversions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesCountRequest struct {
	ctx                   context.Context
	ApiService            *OpportunitiesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) Fields(fields string) ApiGetSalesOpportunitiesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) Page(page int32) ApiGetSalesOpportunitiesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesCountExecute(r)
}

/*
GetSalesOpportunitiesCount Get Count of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesOpportunitiesCountRequest
*/
func (a *OpportunitiesAPIService) GetSalesOpportunitiesCount(ctx context.Context) ApiGetSalesOpportunitiesCountRequest {
	return ApiGetSalesOpportunitiesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OpportunitiesAPIService) GetSalesOpportunitiesCountExecute(r ApiGetSalesOpportunitiesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.GetSalesOpportunitiesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesDefaultRequest struct {
	ctx                   context.Context
	ApiService            *OpportunitiesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesDefaultRequest) ClientId(clientId string) ApiGetSalesOpportunitiesDefaultRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) Conditions(conditions string) ApiGetSalesOpportunitiesDefaultRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesDefaultRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesDefaultRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesDefaultRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) Fields(fields string) ApiGetSalesOpportunitiesDefaultRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) Page(page int32) ApiGetSalesOpportunitiesDefaultRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesDefaultRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) PageId(pageId int32) ApiGetSalesOpportunitiesDefaultRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesDefaultRequest) Execute() (*Opportunity, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesDefaultExecute(r)
}

/*
GetSalesOpportunitiesDefault Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesOpportunitiesDefaultRequest
*/
func (a *OpportunitiesAPIService) GetSalesOpportunitiesDefault(ctx context.Context) ApiGetSalesOpportunitiesDefaultRequest {
	return ApiGetSalesOpportunitiesDefaultRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Opportunity
func (a *OpportunitiesAPIService) GetSalesOpportunitiesDefaultExecute(r ApiGetSalesOpportunitiesDefaultRequest) (*Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.GetSalesOpportunitiesDefault")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/default"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesByIdRequest struct {
	ctx            context.Context
	ApiService     *OpportunitiesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesOpportunitiesByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesByIdRequest) Execute() (*Opportunity, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesByIdExecute(r)
}

/*
PatchSalesOpportunitiesById Patch ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPatchSalesOpportunitiesByIdRequest
*/
func (a *OpportunitiesAPIService) PatchSalesOpportunitiesById(ctx context.Context, id int32) ApiPatchSalesOpportunitiesByIdRequest {
	return ApiPatchSalesOpportunitiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Opportunity
func (a *OpportunitiesAPIService) PatchSalesOpportunitiesByIdExecute(r ApiPatchSalesOpportunitiesByIdRequest) (*Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PatchSalesOpportunitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesRequest struct {
	ctx         context.Context
	ApiService  *OpportunitiesAPIService
	clientId    *string
	opportunity *Opportunity
}

func (r ApiPostSalesOpportunitiesRequest) ClientId(clientId string) ApiPostSalesOpportunitiesRequest {
	r.clientId = &clientId
	return r
}

// opportunity
func (r ApiPostSalesOpportunitiesRequest) Opportunity(opportunity Opportunity) ApiPostSalesOpportunitiesRequest {
	r.opportunity = &opportunity
	return r
}

func (r ApiPostSalesOpportunitiesRequest) Execute() (*Opportunity, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesExecute(r)
}

/*
PostSalesOpportunities Post ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSalesOpportunitiesRequest
*/
func (a *OpportunitiesAPIService) PostSalesOpportunities(ctx context.Context) ApiPostSalesOpportunitiesRequest {
	return ApiPostSalesOpportunitiesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Opportunity
func (a *OpportunitiesAPIService) PostSalesOpportunitiesExecute(r ApiPostSalesOpportunitiesRequest) (*Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PostSalesOpportunities")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunity == nil {
		return localVarReturnValue, nil, reportError("opportunity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByIdConvertToAgreementRequest struct {
	ctx                              context.Context
	ApiService                       *OpportunitiesAPIService
	id                               int32
	clientId                         *string
	opportunityToAgreementConversion *OpportunityToAgreementConversion
}

func (r ApiPostSalesOpportunitiesByIdConvertToAgreementRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByIdConvertToAgreementRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostSalesOpportunitiesByIdConvertToAgreementRequest) OpportunityToAgreementConversion(opportunityToAgreementConversion OpportunityToAgreementConversion) ApiPostSalesOpportunitiesByIdConvertToAgreementRequest {
	r.opportunityToAgreementConversion = &opportunityToAgreementConversion
	return r
}

func (r ApiPostSalesOpportunitiesByIdConvertToAgreementRequest) Execute() (*Agreement, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByIdConvertToAgreementExecute(r)
}

/*
PostSalesOpportunitiesByIdConvertToAgreement Post ApiAgreement

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPostSalesOpportunitiesByIdConvertToAgreementRequest
*/
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToAgreement(ctx context.Context, id int32) ApiPostSalesOpportunitiesByIdConvertToAgreementRequest {
	return ApiPostSalesOpportunitiesByIdConvertToAgreementRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Agreement
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToAgreementExecute(r ApiPostSalesOpportunitiesByIdConvertToAgreementRequest) (*Agreement, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Agreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PostSalesOpportunitiesByIdConvertToAgreement")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}/convertToAgreement"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityToAgreementConversion == nil {
		return localVarReturnValue, nil, reportError("opportunityToAgreementConversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityToAgreementConversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByIdConvertToProjectRequest struct {
	ctx                            context.Context
	ApiService                     *OpportunitiesAPIService
	id                             int32
	clientId                       *string
	opportunityToProjectConversion *OpportunityToProjectConversion
}

func (r ApiPostSalesOpportunitiesByIdConvertToProjectRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByIdConvertToProjectRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostSalesOpportunitiesByIdConvertToProjectRequest) OpportunityToProjectConversion(opportunityToProjectConversion OpportunityToProjectConversion) ApiPostSalesOpportunitiesByIdConvertToProjectRequest {
	r.opportunityToProjectConversion = &opportunityToProjectConversion
	return r
}

func (r ApiPostSalesOpportunitiesByIdConvertToProjectRequest) Execute() (*Project, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByIdConvertToProjectExecute(r)
}

/*
PostSalesOpportunitiesByIdConvertToProject Post ApiProject

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPostSalesOpportunitiesByIdConvertToProjectRequest
*/
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToProject(ctx context.Context, id int32) ApiPostSalesOpportunitiesByIdConvertToProjectRequest {
	return ApiPostSalesOpportunitiesByIdConvertToProjectRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Project
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToProjectExecute(r ApiPostSalesOpportunitiesByIdConvertToProjectRequest) (*Project, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PostSalesOpportunitiesByIdConvertToProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}/convertToProject"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityToProjectConversion == nil {
		return localVarReturnValue, nil, reportError("opportunityToProjectConversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityToProjectConversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest struct {
	ctx                               context.Context
	ApiService                        *OpportunitiesAPIService
	id                                int32
	clientId                          *string
	opportunityToSalesOrderConversion *OpportunityToSalesOrderConversion
}

func (r ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest) OpportunityToSalesOrderConversion(opportunityToSalesOrderConversion OpportunityToSalesOrderConversion) ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest {
	r.opportunityToSalesOrderConversion = &opportunityToSalesOrderConversion
	return r
}

func (r ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest) Execute() (*Order, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByIdConvertToSalesOrderExecute(r)
}

/*
PostSalesOpportunitiesByIdConvertToSalesOrder Post ApiSalesOrder

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest
*/
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToSalesOrder(ctx context.Context, id int32) ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest {
	return ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Order
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToSalesOrderExecute(r ApiPostSalesOpportunitiesByIdConvertToSalesOrderRequest) (*Order, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Order
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PostSalesOpportunitiesByIdConvertToSalesOrder")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}/convertToSalesOrder"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityToSalesOrderConversion == nil {
		return localVarReturnValue, nil, reportError("opportunityToSalesOrderConversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityToSalesOrderConversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest struct {
	ctx                                  context.Context
	ApiService                           *OpportunitiesAPIService
	id                                   int32
	clientId                             *string
	opportunityToServiceTicketConversion *OpportunityToServiceTicketConversion
}

func (r ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest {
	r.clientId = &clientId
	return r
}

// conversion
func (r ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest) OpportunityToServiceTicketConversion(opportunityToServiceTicketConversion OpportunityToServiceTicketConversion) ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest {
	r.opportunityToServiceTicketConversion = &opportunityToServiceTicketConversion
	return r
}

func (r ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest) Execute() (*Ticket, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByIdConvertToServiceTicketExecute(r)
}

/*
PostSalesOpportunitiesByIdConvertToServiceTicket Post ApiTicket

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest
*/
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToServiceTicket(ctx context.Context, id int32) ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest {
	return ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Ticket
func (a *OpportunitiesAPIService) PostSalesOpportunitiesByIdConvertToServiceTicketExecute(r ApiPostSalesOpportunitiesByIdConvertToServiceTicketRequest) (*Ticket, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Ticket
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PostSalesOpportunitiesByIdConvertToServiceTicket")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}/convertToServiceTicket"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityToServiceTicketConversion == nil {
		return localVarReturnValue, nil, reportError("opportunityToServiceTicketConversion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityToServiceTicketConversion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesByIdRequest struct {
	ctx         context.Context
	ApiService  *OpportunitiesAPIService
	id          int32
	clientId    *string
	opportunity *Opportunity
}

func (r ApiPutSalesOpportunitiesByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesByIdRequest {
	r.clientId = &clientId
	return r
}

// opportunity
func (r ApiPutSalesOpportunitiesByIdRequest) Opportunity(opportunity Opportunity) ApiPutSalesOpportunitiesByIdRequest {
	r.opportunity = &opportunity
	return r
}

func (r ApiPutSalesOpportunitiesByIdRequest) Execute() (*Opportunity, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesByIdExecute(r)
}

/*
PutSalesOpportunitiesById Put ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunityId
	@return ApiPutSalesOpportunitiesByIdRequest
*/
func (a *OpportunitiesAPIService) PutSalesOpportunitiesById(ctx context.Context, id int32) ApiPutSalesOpportunitiesByIdRequest {
	return ApiPutSalesOpportunitiesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Opportunity
func (a *OpportunitiesAPIService) PutSalesOpportunitiesByIdExecute(r ApiPutSalesOpportunitiesByIdRequest) (*Opportunity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Opportunity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunitiesAPIService.PutSalesOpportunitiesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunity == nil {
		return localVarReturnValue, nil, reportError("opportunity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
