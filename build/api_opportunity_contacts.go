/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OpportunityContactsAPIService OpportunityContactsAPI service
type OpportunityContactsAPIService service

type ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest struct {
	ctx        context.Context
	ApiService *OpportunityContactsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesByParentIdContactsByIdExecute(r)
}

/*
DeleteSalesOpportunitiesByParentIdContactsById Delete OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId opportunityId
	@return ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest
*/
func (a *OpportunityContactsAPIService) DeleteSalesOpportunitiesByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest {
	return ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *OpportunityContactsAPIService) DeleteSalesOpportunitiesByParentIdContactsByIdExecute(r ApiDeleteSalesOpportunitiesByParentIdContactsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.DeleteSalesOpportunitiesByParentIdContactsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdContactsRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityContactsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsRequest) Execute() ([]OpportunityContact, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdContactsExecute(r)
}

/*
GetSalesOpportunitiesByParentIdContacts Get List of OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId opportunityId
	@return ApiGetSalesOpportunitiesByParentIdContactsRequest
*/
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContacts(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdContactsRequest {
	return ApiGetSalesOpportunitiesByParentIdContactsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []OpportunityContact
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContactsExecute(r ApiGetSalesOpportunitiesByParentIdContactsRequest) ([]OpportunityContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OpportunityContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.GetSalesOpportunitiesByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdContactsByIdRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityContactsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) Execute() (*OpportunityContact, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdContactsByIdExecute(r)
}

/*
GetSalesOpportunitiesByParentIdContactsById Get OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId opportunityId
	@return ApiGetSalesOpportunitiesByParentIdContactsByIdRequest
*/
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiGetSalesOpportunitiesByParentIdContactsByIdRequest {
	return ApiGetSalesOpportunitiesByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OpportunityContact
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContactsByIdExecute(r ApiGetSalesOpportunitiesByParentIdContactsByIdRequest) (*OpportunityContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.GetSalesOpportunitiesByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesByParentIdContactsCountRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityContactsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) Fields(fields string) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) Page(page int32) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesByParentIdContactsCountExecute(r)
}

/*
GetSalesOpportunitiesByParentIdContactsCount Get Count of OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId opportunityId
	@return ApiGetSalesOpportunitiesByParentIdContactsCountRequest
*/
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContactsCount(ctx context.Context, parentId int32) ApiGetSalesOpportunitiesByParentIdContactsCountRequest {
	return ApiGetSalesOpportunitiesByParentIdContactsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OpportunityContactsAPIService) GetSalesOpportunitiesByParentIdContactsCountExecute(r ApiGetSalesOpportunitiesByParentIdContactsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.GetSalesOpportunitiesByParentIdContactsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest struct {
	ctx            context.Context
	ApiService     *OpportunityContactsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest) Execute() (*OpportunityContact, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesByParentIdContactsByIdExecute(r)
}

/*
PatchSalesOpportunitiesByParentIdContactsById Patch OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId opportunityId
	@return ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest
*/
func (a *OpportunityContactsAPIService) PatchSalesOpportunitiesByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest {
	return ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OpportunityContact
func (a *OpportunityContactsAPIService) PatchSalesOpportunitiesByParentIdContactsByIdExecute(r ApiPatchSalesOpportunitiesByParentIdContactsByIdRequest) (*OpportunityContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.PatchSalesOpportunitiesByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesByParentIdContactsRequest struct {
	ctx                context.Context
	ApiService         *OpportunityContactsAPIService
	parentId           int32
	clientId           *string
	opportunityContact *OpportunityContact
}

func (r ApiPostSalesOpportunitiesByParentIdContactsRequest) ClientId(clientId string) ApiPostSalesOpportunitiesByParentIdContactsRequest {
	r.clientId = &clientId
	return r
}

// opportunityContact
func (r ApiPostSalesOpportunitiesByParentIdContactsRequest) OpportunityContact(opportunityContact OpportunityContact) ApiPostSalesOpportunitiesByParentIdContactsRequest {
	r.opportunityContact = &opportunityContact
	return r
}

func (r ApiPostSalesOpportunitiesByParentIdContactsRequest) Execute() (*OpportunityContact, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesByParentIdContactsExecute(r)
}

/*
PostSalesOpportunitiesByParentIdContacts Post OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId opportunityId
	@return ApiPostSalesOpportunitiesByParentIdContactsRequest
*/
func (a *OpportunityContactsAPIService) PostSalesOpportunitiesByParentIdContacts(ctx context.Context, parentId int32) ApiPostSalesOpportunitiesByParentIdContactsRequest {
	return ApiPostSalesOpportunitiesByParentIdContactsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OpportunityContact
func (a *OpportunityContactsAPIService) PostSalesOpportunitiesByParentIdContactsExecute(r ApiPostSalesOpportunitiesByParentIdContactsRequest) (*OpportunityContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.PostSalesOpportunitiesByParentIdContacts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityContact == nil {
		return localVarReturnValue, nil, reportError("opportunityContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesByParentIdContactsByIdRequest struct {
	ctx                context.Context
	ApiService         *OpportunityContactsAPIService
	id                 int32
	parentId           int32
	clientId           *string
	opportunityContact *OpportunityContact
}

func (r ApiPutSalesOpportunitiesByParentIdContactsByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesByParentIdContactsByIdRequest {
	r.clientId = &clientId
	return r
}

// opportunityContact
func (r ApiPutSalesOpportunitiesByParentIdContactsByIdRequest) OpportunityContact(opportunityContact OpportunityContact) ApiPutSalesOpportunitiesByParentIdContactsByIdRequest {
	r.opportunityContact = &opportunityContact
	return r
}

func (r ApiPutSalesOpportunitiesByParentIdContactsByIdRequest) Execute() (*OpportunityContact, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesByParentIdContactsByIdExecute(r)
}

/*
PutSalesOpportunitiesByParentIdContactsById Put OpportunityContact

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id contactId
	@param parentId opportunityId
	@return ApiPutSalesOpportunitiesByParentIdContactsByIdRequest
*/
func (a *OpportunityContactsAPIService) PutSalesOpportunitiesByParentIdContactsById(ctx context.Context, id int32, parentId int32) ApiPutSalesOpportunitiesByParentIdContactsByIdRequest {
	return ApiPutSalesOpportunitiesByParentIdContactsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OpportunityContact
func (a *OpportunityContactsAPIService) PutSalesOpportunitiesByParentIdContactsByIdExecute(r ApiPutSalesOpportunitiesByParentIdContactsByIdRequest) (*OpportunityContact, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityContact
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityContactsAPIService.PutSalesOpportunitiesByParentIdContactsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/{parentId}/contacts/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityContact == nil {
		return localVarReturnValue, nil, reportError("opportunityContact is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityContact
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
