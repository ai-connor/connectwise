/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OpportunityStatusesAPIService OpportunityStatusesAPI service
type OpportunityStatusesAPIService service

type ApiDeleteSalesOpportunitiesStatusesByIdRequest struct {
	ctx        context.Context
	ApiService *OpportunityStatusesAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteSalesOpportunitiesStatusesByIdRequest) ClientId(clientId string) ApiDeleteSalesOpportunitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOpportunitiesStatusesByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOpportunitiesStatusesByIdExecute(r)
}

/*
DeleteSalesOpportunitiesStatusesById Delete OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiDeleteSalesOpportunitiesStatusesByIdRequest
*/
func (a *OpportunityStatusesAPIService) DeleteSalesOpportunitiesStatusesById(ctx context.Context, id int32) ApiDeleteSalesOpportunitiesStatusesByIdRequest {
	return ApiDeleteSalesOpportunitiesStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *OpportunityStatusesAPIService) DeleteSalesOpportunitiesStatusesByIdExecute(r ApiDeleteSalesOpportunitiesStatusesByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.DeleteSalesOpportunitiesStatusesById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesStatusesRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesStatusesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesStatusesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesStatusesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesStatusesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesStatusesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesStatusesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) Fields(fields string) ApiGetSalesOpportunitiesStatusesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) Page(page int32) ApiGetSalesOpportunitiesStatusesRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesStatusesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesStatusesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesRequest) Execute() ([]OpportunityStatus, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesStatusesExecute(r)
}

/*
GetSalesOpportunitiesStatuses Get List of OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesOpportunitiesStatusesRequest
*/
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatuses(ctx context.Context) ApiGetSalesOpportunitiesStatusesRequest {
	return ApiGetSalesOpportunitiesStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []OpportunityStatus
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesExecute(r ApiGetSalesOpportunitiesStatusesRequest) ([]OpportunityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OpportunityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.GetSalesOpportunitiesStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesStatusesByIdRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) ClientId(clientId string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) Conditions(conditions string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) Fields(fields string) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) Page(page int32) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) PageId(pageId int32) ApiGetSalesOpportunitiesStatusesByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdRequest) Execute() (*OpportunityStatus, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesStatusesByIdExecute(r)
}

/*
GetSalesOpportunitiesStatusesById Get OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetSalesOpportunitiesStatusesByIdRequest
*/
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesById(ctx context.Context, id int32) ApiGetSalesOpportunitiesStatusesByIdRequest {
	return ApiGetSalesOpportunitiesStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OpportunityStatus
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesByIdExecute(r ApiGetSalesOpportunitiesStatusesByIdRequest) (*OpportunityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.GetSalesOpportunitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesStatusesByIdUsagesRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) ClientId(clientId string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) Conditions(conditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) Fields(fields string) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) Page(page int32) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) PageId(pageId int32) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesStatusesByIdUsagesExecute(r)
}

/*
GetSalesOpportunitiesStatusesByIdUsages Get List of Usage Count

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetSalesOpportunitiesStatusesByIdUsagesRequest
*/
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesByIdUsages(ctx context.Context, id int32) ApiGetSalesOpportunitiesStatusesByIdUsagesRequest {
	return ApiGetSalesOpportunitiesStatusesByIdUsagesRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesByIdUsagesExecute(r ApiGetSalesOpportunitiesStatusesByIdUsagesRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.GetSalesOpportunitiesStatusesByIdUsages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}/usages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityStatusesAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) ClientId(clientId string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) Conditions(conditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) Fields(fields string) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) Page(page int32) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) PageId(pageId int32) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) Execute() ([]Usage, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesStatusesByIdUsagesListExecute(r)
}

/*
GetSalesOpportunitiesStatusesByIdUsagesList Get List of Usage

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest
*/
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesByIdUsagesList(ctx context.Context, id int32) ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest {
	return ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return []Usage
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesByIdUsagesListExecute(r ApiGetSalesOpportunitiesStatusesByIdUsagesListRequest) ([]Usage, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Usage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.GetSalesOpportunitiesStatusesByIdUsagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}/usages/list"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOpportunitiesStatusesCountRequest struct {
	ctx                   context.Context
	ApiService            *OpportunityStatusesAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) ClientId(clientId string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) Conditions(conditions string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) ChildConditions(childConditions string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) OrderBy(orderBy string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) Fields(fields string) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) Page(page int32) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) PageSize(pageSize int32) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) PageId(pageId int32) ApiGetSalesOpportunitiesStatusesCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOpportunitiesStatusesCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOpportunitiesStatusesCountExecute(r)
}

/*
GetSalesOpportunitiesStatusesCount Get Count of OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSalesOpportunitiesStatusesCountRequest
*/
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesCount(ctx context.Context) ApiGetSalesOpportunitiesStatusesCountRequest {
	return ApiGetSalesOpportunitiesStatusesCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OpportunityStatusesAPIService) GetSalesOpportunitiesStatusesCountExecute(r ApiGetSalesOpportunitiesStatusesCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.GetSalesOpportunitiesStatusesCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOpportunitiesStatusesByIdRequest struct {
	ctx            context.Context
	ApiService     *OpportunityStatusesAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesOpportunitiesStatusesByIdRequest) ClientId(clientId string) ApiPatchSalesOpportunitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOpportunitiesStatusesByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOpportunitiesStatusesByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOpportunitiesStatusesByIdRequest) Execute() (*OpportunityStatus, *http.Response, error) {
	return r.ApiService.PatchSalesOpportunitiesStatusesByIdExecute(r)
}

/*
PatchSalesOpportunitiesStatusesById Patch OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPatchSalesOpportunitiesStatusesByIdRequest
*/
func (a *OpportunityStatusesAPIService) PatchSalesOpportunitiesStatusesById(ctx context.Context, id int32) ApiPatchSalesOpportunitiesStatusesByIdRequest {
	return ApiPatchSalesOpportunitiesStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OpportunityStatus
func (a *OpportunityStatusesAPIService) PatchSalesOpportunitiesStatusesByIdExecute(r ApiPatchSalesOpportunitiesStatusesByIdRequest) (*OpportunityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.PatchSalesOpportunitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOpportunitiesStatusesRequest struct {
	ctx               context.Context
	ApiService        *OpportunityStatusesAPIService
	clientId          *string
	opportunityStatus *OpportunityStatus
}

func (r ApiPostSalesOpportunitiesStatusesRequest) ClientId(clientId string) ApiPostSalesOpportunitiesStatusesRequest {
	r.clientId = &clientId
	return r
}

// status
func (r ApiPostSalesOpportunitiesStatusesRequest) OpportunityStatus(opportunityStatus OpportunityStatus) ApiPostSalesOpportunitiesStatusesRequest {
	r.opportunityStatus = &opportunityStatus
	return r
}

func (r ApiPostSalesOpportunitiesStatusesRequest) Execute() (*OpportunityStatus, *http.Response, error) {
	return r.ApiService.PostSalesOpportunitiesStatusesExecute(r)
}

/*
PostSalesOpportunitiesStatuses Post OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostSalesOpportunitiesStatusesRequest
*/
func (a *OpportunityStatusesAPIService) PostSalesOpportunitiesStatuses(ctx context.Context) ApiPostSalesOpportunitiesStatusesRequest {
	return ApiPostSalesOpportunitiesStatusesRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OpportunityStatus
func (a *OpportunityStatusesAPIService) PostSalesOpportunitiesStatusesExecute(r ApiPostSalesOpportunitiesStatusesRequest) (*OpportunityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.PostSalesOpportunitiesStatuses")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityStatus == nil {
		return localVarReturnValue, nil, reportError("opportunityStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOpportunitiesStatusesByIdRequest struct {
	ctx               context.Context
	ApiService        *OpportunityStatusesAPIService
	id                int32
	clientId          *string
	opportunityStatus *OpportunityStatus
}

func (r ApiPutSalesOpportunitiesStatusesByIdRequest) ClientId(clientId string) ApiPutSalesOpportunitiesStatusesByIdRequest {
	r.clientId = &clientId
	return r
}

// status
func (r ApiPutSalesOpportunitiesStatusesByIdRequest) OpportunityStatus(opportunityStatus OpportunityStatus) ApiPutSalesOpportunitiesStatusesByIdRequest {
	r.opportunityStatus = &opportunityStatus
	return r
}

func (r ApiPutSalesOpportunitiesStatusesByIdRequest) Execute() (*OpportunityStatus, *http.Response, error) {
	return r.ApiService.PutSalesOpportunitiesStatusesByIdExecute(r)
}

/*
PutSalesOpportunitiesStatusesById Put OpportunityStatus

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id statusId
	@return ApiPutSalesOpportunitiesStatusesByIdRequest
*/
func (a *OpportunityStatusesAPIService) PutSalesOpportunitiesStatusesById(ctx context.Context, id int32) ApiPutSalesOpportunitiesStatusesByIdRequest {
	return ApiPutSalesOpportunitiesStatusesByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return OpportunityStatus
func (a *OpportunityStatusesAPIService) PutSalesOpportunitiesStatusesByIdExecute(r ApiPutSalesOpportunitiesStatusesByIdRequest) (*OpportunityStatus, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OpportunityStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OpportunityStatusesAPIService.PutSalesOpportunitiesStatusesById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/opportunities/statuses/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.opportunityStatus == nil {
		return localVarReturnValue, nil, reportError("opportunityStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.opportunityStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
