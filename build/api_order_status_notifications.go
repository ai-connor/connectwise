/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OrderStatusNotificationsAPIService OrderStatusNotificationsAPI service
type OrderStatusNotificationsAPIService service

type ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest struct {
	ctx        context.Context
	ApiService *OrderStatusNotificationsAPIService
	id         int32
	parentId   int32
	clientId   *string
}

func (r ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteSalesOrdersStatusesByParentIdNotificationsByIdExecute(r)
}

/*
DeleteSalesOrdersStatusesByParentIdNotificationsById Delete OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId statusId
	@return ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest
*/
func (a *OrderStatusNotificationsAPIService) DeleteSalesOrdersStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	return ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
func (a *OrderStatusNotificationsAPIService) DeleteSalesOrdersStatusesByParentIdNotificationsByIdExecute(r ApiDeleteSalesOrdersStatusesByParentIdNotificationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.DeleteSalesOrdersStatusesByParentIdNotificationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdNotificationsRequest struct {
	ctx                   context.Context
	ApiService            *OrderStatusNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) Execute() ([]OrderStatusNotification, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdNotificationsExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdNotifications Get List of OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId statusId
	@return ApiGetSalesOrdersStatusesByParentIdNotificationsRequest
*/
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsRequest {
	return ApiGetSalesOrdersStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []OrderStatusNotification
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotificationsExecute(r ApiGetSalesOrdersStatusesByParentIdNotificationsRequest) ([]OrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []OrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.GetSalesOrdersStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *OrderStatusNotificationsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) Execute() (*OrderStatusNotification, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdNotificationsByIdExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdNotificationsById Get OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId statusId
	@return ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest
*/
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	return ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OrderStatusNotification
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotificationsByIdExecute(r ApiGetSalesOrdersStatusesByParentIdNotificationsByIdRequest) (*OrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.GetSalesOrdersStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest struct {
	ctx                   context.Context
	ApiService            *OrderStatusNotificationsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) ClientId(clientId string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) Conditions(conditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) ChildConditions(childConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) OrderBy(orderBy string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) Fields(fields string) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) Page(page int32) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) PageSize(pageSize int32) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) PageId(pageId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSalesOrdersStatusesByParentIdNotificationsCountExecute(r)
}

/*
GetSalesOrdersStatusesByParentIdNotificationsCount Get Count of OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId statusId
	@return ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest
*/
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotificationsCount(ctx context.Context, parentId int32) ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest {
	return ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OrderStatusNotificationsAPIService) GetSalesOrdersStatusesByParentIdNotificationsCountExecute(r ApiGetSalesOrdersStatusesByParentIdNotificationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.GetSalesOrdersStatusesByParentIdNotificationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications/count"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest struct {
	ctx            context.Context
	ApiService     *OrderStatusNotificationsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest) Execute() (*OrderStatusNotification, *http.Response, error) {
	return r.ApiService.PatchSalesOrdersStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PatchSalesOrdersStatusesByParentIdNotificationsById Patch OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId statusId
	@return ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest
*/
func (a *OrderStatusNotificationsAPIService) PatchSalesOrdersStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	return ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OrderStatusNotification
func (a *OrderStatusNotificationsAPIService) PatchSalesOrdersStatusesByParentIdNotificationsByIdExecute(r ApiPatchSalesOrdersStatusesByParentIdNotificationsByIdRequest) (*OrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.PatchSalesOrdersStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostSalesOrdersStatusesByParentIdNotificationsRequest struct {
	ctx                     context.Context
	ApiService              *OrderStatusNotificationsAPIService
	parentId                int32
	clientId                *string
	orderStatusNotification *OrderStatusNotification
}

func (r ApiPostSalesOrdersStatusesByParentIdNotificationsRequest) ClientId(clientId string) ApiPostSalesOrdersStatusesByParentIdNotificationsRequest {
	r.clientId = &clientId
	return r
}

// orderStatusNotification
func (r ApiPostSalesOrdersStatusesByParentIdNotificationsRequest) OrderStatusNotification(orderStatusNotification OrderStatusNotification) ApiPostSalesOrdersStatusesByParentIdNotificationsRequest {
	r.orderStatusNotification = &orderStatusNotification
	return r
}

func (r ApiPostSalesOrdersStatusesByParentIdNotificationsRequest) Execute() (*OrderStatusNotification, *http.Response, error) {
	return r.ApiService.PostSalesOrdersStatusesByParentIdNotificationsExecute(r)
}

/*
PostSalesOrdersStatusesByParentIdNotifications Post OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId statusId
	@return ApiPostSalesOrdersStatusesByParentIdNotificationsRequest
*/
func (a *OrderStatusNotificationsAPIService) PostSalesOrdersStatusesByParentIdNotifications(ctx context.Context, parentId int32) ApiPostSalesOrdersStatusesByParentIdNotificationsRequest {
	return ApiPostSalesOrdersStatusesByParentIdNotificationsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OrderStatusNotification
func (a *OrderStatusNotificationsAPIService) PostSalesOrdersStatusesByParentIdNotificationsExecute(r ApiPostSalesOrdersStatusesByParentIdNotificationsRequest) (*OrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.PostSalesOrdersStatusesByParentIdNotifications")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.orderStatusNotification == nil {
		return localVarReturnValue, nil, reportError("orderStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.orderStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest struct {
	ctx                     context.Context
	ApiService              *OrderStatusNotificationsAPIService
	id                      int32
	parentId                int32
	clientId                *string
	orderStatusNotification *OrderStatusNotification
}

func (r ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest) ClientId(clientId string) ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.clientId = &clientId
	return r
}

// orderStatusNotification
func (r ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest) OrderStatusNotification(orderStatusNotification OrderStatusNotification) ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	r.orderStatusNotification = &orderStatusNotification
	return r
}

func (r ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest) Execute() (*OrderStatusNotification, *http.Response, error) {
	return r.ApiService.PutSalesOrdersStatusesByParentIdNotificationsByIdExecute(r)
}

/*
PutSalesOrdersStatusesByParentIdNotificationsById Put OrderStatusNotification

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id notificationId
	@param parentId statusId
	@return ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest
*/
func (a *OrderStatusNotificationsAPIService) PutSalesOrdersStatusesByParentIdNotificationsById(ctx context.Context, id int32, parentId int32) ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest {
	return ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return OrderStatusNotification
func (a *OrderStatusNotificationsAPIService) PutSalesOrdersStatusesByParentIdNotificationsByIdExecute(r ApiPutSalesOrdersStatusesByParentIdNotificationsByIdRequest) (*OrderStatusNotification, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OrderStatusNotification
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrderStatusNotificationsAPIService.PutSalesOrdersStatusesByParentIdNotificationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sales/orders/statuses/{parentId}/notifications/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.orderStatusNotification == nil {
		return localVarReturnValue, nil, reportError("orderStatusNotification is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.orderStatusNotification
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
