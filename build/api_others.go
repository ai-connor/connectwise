/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// OthersAPIService OthersAPI service
type OthersAPIService service

type ApiGetSystemMyCompanyOtherRequest struct {
	ctx                   context.Context
	ApiService            *OthersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyOtherRequest) ClientId(clientId string) ApiGetSystemMyCompanyOtherRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) Conditions(conditions string) ApiGetSystemMyCompanyOtherRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyOtherRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyOtherRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyOtherRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) Fields(fields string) ApiGetSystemMyCompanyOtherRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) Page(page int32) ApiGetSystemMyCompanyOtherRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyOtherRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) PageId(pageId int32) ApiGetSystemMyCompanyOtherRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyOtherRequest) Execute() ([]Other, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyOtherExecute(r)
}

/*
GetSystemMyCompanyOther Get List of Other

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMyCompanyOtherRequest
*/
func (a *OthersAPIService) GetSystemMyCompanyOther(ctx context.Context) ApiGetSystemMyCompanyOtherRequest {
	return ApiGetSystemMyCompanyOtherRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []Other
func (a *OthersAPIService) GetSystemMyCompanyOtherExecute(r ApiGetSystemMyCompanyOtherRequest) ([]Other, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []Other
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OthersAPIService.GetSystemMyCompanyOther")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/other"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyOtherByIdRequest struct {
	ctx                   context.Context
	ApiService            *OthersAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) ClientId(clientId string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) Conditions(conditions string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) Fields(fields string) ApiGetSystemMyCompanyOtherByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) Page(page int32) ApiGetSystemMyCompanyOtherByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyOtherByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) PageId(pageId int32) ApiGetSystemMyCompanyOtherByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyOtherByIdRequest) Execute() (*Other, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyOtherByIdExecute(r)
}

/*
GetSystemMyCompanyOtherById Get Other

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id otherId
	@return ApiGetSystemMyCompanyOtherByIdRequest
*/
func (a *OthersAPIService) GetSystemMyCompanyOtherById(ctx context.Context, id int32) ApiGetSystemMyCompanyOtherByIdRequest {
	return ApiGetSystemMyCompanyOtherByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Other
func (a *OthersAPIService) GetSystemMyCompanyOtherByIdExecute(r ApiGetSystemMyCompanyOtherByIdRequest) (*Other, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Other
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OthersAPIService.GetSystemMyCompanyOtherById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/other/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSystemMyCompanyOtherCountRequest struct {
	ctx                   context.Context
	ApiService            *OthersAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetSystemMyCompanyOtherCountRequest) ClientId(clientId string) ApiGetSystemMyCompanyOtherCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) Conditions(conditions string) ApiGetSystemMyCompanyOtherCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) ChildConditions(childConditions string) ApiGetSystemMyCompanyOtherCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetSystemMyCompanyOtherCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) OrderBy(orderBy string) ApiGetSystemMyCompanyOtherCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) Fields(fields string) ApiGetSystemMyCompanyOtherCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) Page(page int32) ApiGetSystemMyCompanyOtherCountRequest {
	r.page = &page
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) PageSize(pageSize int32) ApiGetSystemMyCompanyOtherCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) PageId(pageId int32) ApiGetSystemMyCompanyOtherCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetSystemMyCompanyOtherCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetSystemMyCompanyOtherCountExecute(r)
}

/*
GetSystemMyCompanyOtherCount Get Count of Other

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetSystemMyCompanyOtherCountRequest
*/
func (a *OthersAPIService) GetSystemMyCompanyOtherCount(ctx context.Context) ApiGetSystemMyCompanyOtherCountRequest {
	return ApiGetSystemMyCompanyOtherCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *OthersAPIService) GetSystemMyCompanyOtherCountExecute(r ApiGetSystemMyCompanyOtherCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OthersAPIService.GetSystemMyCompanyOtherCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/other/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchSystemMyCompanyOtherByIdRequest struct {
	ctx            context.Context
	ApiService     *OthersAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchSystemMyCompanyOtherByIdRequest) ClientId(clientId string) ApiPatchSystemMyCompanyOtherByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchSystemMyCompanyOtherByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchSystemMyCompanyOtherByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchSystemMyCompanyOtherByIdRequest) Execute() (*Other, *http.Response, error) {
	return r.ApiService.PatchSystemMyCompanyOtherByIdExecute(r)
}

/*
PatchSystemMyCompanyOtherById Patch Other

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id otherId
	@return ApiPatchSystemMyCompanyOtherByIdRequest
*/
func (a *OthersAPIService) PatchSystemMyCompanyOtherById(ctx context.Context, id int32) ApiPatchSystemMyCompanyOtherByIdRequest {
	return ApiPatchSystemMyCompanyOtherByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Other
func (a *OthersAPIService) PatchSystemMyCompanyOtherByIdExecute(r ApiPatchSystemMyCompanyOtherByIdRequest) (*Other, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Other
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OthersAPIService.PatchSystemMyCompanyOtherById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/other/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutSystemMyCompanyOtherByIdRequest struct {
	ctx        context.Context
	ApiService *OthersAPIService
	id         int32
	clientId   *string
	other      *Other
}

func (r ApiPutSystemMyCompanyOtherByIdRequest) ClientId(clientId string) ApiPutSystemMyCompanyOtherByIdRequest {
	r.clientId = &clientId
	return r
}

// other
func (r ApiPutSystemMyCompanyOtherByIdRequest) Other(other Other) ApiPutSystemMyCompanyOtherByIdRequest {
	r.other = &other
	return r
}

func (r ApiPutSystemMyCompanyOtherByIdRequest) Execute() (*Other, *http.Response, error) {
	return r.ApiService.PutSystemMyCompanyOtherByIdExecute(r)
}

/*
PutSystemMyCompanyOtherById Put Other

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id otherId
	@return ApiPutSystemMyCompanyOtherByIdRequest
*/
func (a *OthersAPIService) PutSystemMyCompanyOtherById(ctx context.Context, id int32) ApiPutSystemMyCompanyOtherByIdRequest {
	return ApiPutSystemMyCompanyOtherByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return Other
func (a *OthersAPIService) PutSystemMyCompanyOtherByIdExecute(r ApiPutSystemMyCompanyOtherByIdRequest) (*Other, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Other
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OthersAPIService.PutSystemMyCompanyOtherById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/system/myCompany/other/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.other == nil {
		return localVarReturnValue, nil, reportError("other is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.other
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
