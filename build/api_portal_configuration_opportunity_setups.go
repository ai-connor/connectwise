/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PortalConfigurationOpportunitySetupsAPIService PortalConfigurationOpportunitySetupsAPI service
type PortalConfigurationOpportunitySetupsAPIService service

type ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationOpportunitySetupsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Execute() ([]PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdOpportunitySetups Get List of PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId portalConfigurationId
	@return ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) GetCompanyPortalConfigurationsByParentIdOpportunitySetups(ctx context.Context, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) GetCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) ([]PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.GetCompanyPortalConfigurationsByParentIdOpportunitySetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationOpportunitySetupsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Execute() (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdOpportunitySetupsById Get PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunitySetupId
	@param parentId portalConfigurationId
	@return ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) GetCompanyPortalConfigurationsByParentIdOpportunitySetupsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) GetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r ApiGetCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.GetCompanyPortalConfigurationsByParentIdOpportunitySetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest struct {
	ctx            context.Context
	ApiService     *PortalConfigurationOpportunitySetupsAPIService
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) ClientId(clientId string) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Execute() (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r)
}

/*
PatchCompanyPortalConfigurationsByParentIdOpportunitySetups Patch PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId portalConfigurationId
	@return ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) PatchCompanyPortalConfigurationsByParentIdOpportunitySetups(ctx context.Context, parentId int32) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	return ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.PatchCompanyPortalConfigurationsByParentIdOpportunitySetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest struct {
	ctx            context.Context
	ApiService     *PortalConfigurationOpportunitySetupsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Execute() (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r)
}

/*
PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsById Patch PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunitySetupId
	@param parentId portalConfigurationId
	@return ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	return ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r ApiPatchCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.PatchCompanyPortalConfigurationsByParentIdOpportunitySetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest struct {
	ctx                                 context.Context
	ApiService                          *PortalConfigurationOpportunitySetupsAPIService
	parentId                            int32
	clientId                            *string
	portalConfigurationOpportunitySetup *PortalConfigurationOpportunitySetup
}

func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) ClientId(clientId string) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.clientId = &clientId
	return r
}

// opportunitySetup
func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) PortalConfigurationOpportunitySetup(portalConfigurationOpportunitySetup PortalConfigurationOpportunitySetup) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	r.portalConfigurationOpportunitySetup = &portalConfigurationOpportunitySetup
	return r
}

func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) Execute() (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.PutCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r)
}

/*
PutCompanyPortalConfigurationsByParentIdOpportunitySetups Put PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId portalConfigurationId
	@return ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) PutCompanyPortalConfigurationsByParentIdOpportunitySetups(ctx context.Context, parentId int32) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest {
	return ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) PutCompanyPortalConfigurationsByParentIdOpportunitySetupsExecute(r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsRequest) (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.PutCompanyPortalConfigurationsByParentIdOpportunitySetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfigurationOpportunitySetup == nil {
		return localVarReturnValue, nil, reportError("portalConfigurationOpportunitySetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfigurationOpportunitySetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest struct {
	ctx                                 context.Context
	ApiService                          *PortalConfigurationOpportunitySetupsAPIService
	id                                  int32
	parentId                            int32
	clientId                            *string
	portalConfigurationOpportunitySetup *PortalConfigurationOpportunitySetup
}

func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// opportunitySetup
func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) PortalConfigurationOpportunitySetup(portalConfigurationOpportunitySetup PortalConfigurationOpportunitySetup) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	r.portalConfigurationOpportunitySetup = &portalConfigurationOpportunitySetup
	return r
}

func (r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) Execute() (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	return r.ApiService.PutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r)
}

/*
PutCompanyPortalConfigurationsByParentIdOpportunitySetupsById Put PortalConfigurationOpportunitySetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id opportunitySetupId
	@param parentId portalConfigurationId
	@return ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest
*/
func (a *PortalConfigurationOpportunitySetupsAPIService) PutCompanyPortalConfigurationsByParentIdOpportunitySetupsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest {
	return ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationOpportunitySetup
func (a *PortalConfigurationOpportunitySetupsAPIService) PutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdExecute(r ApiPutCompanyPortalConfigurationsByParentIdOpportunitySetupsByIdRequest) (*PortalConfigurationOpportunitySetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationOpportunitySetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationOpportunitySetupsAPIService.PutCompanyPortalConfigurationsByParentIdOpportunitySetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/opportunitySetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfigurationOpportunitySetup == nil {
		return localVarReturnValue, nil, reportError("portalConfigurationOpportunitySetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfigurationOpportunitySetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
