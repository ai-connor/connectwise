/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PortalConfigurationPasswordEmailSetupsAPIService PortalConfigurationPasswordEmailSetupsAPI service
type PortalConfigurationPasswordEmailSetupsAPIService service

type ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationPasswordEmailSetupsAPIService
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) Execute() ([]PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdPasswordEmailSetups Get List of PortalConfigurationPasswordEmailSetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param parentId portalConfigurationId
	@return ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest
*/
func (a *PortalConfigurationPasswordEmailSetupsAPIService) GetCompanyPortalConfigurationsByParentIdPasswordEmailSetups(ctx context.Context, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest{
		ApiService: a,
		ctx:        ctx,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return []PortalConfigurationPasswordEmailSetup
func (a *PortalConfigurationPasswordEmailSetupsAPIService) GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsExecute(r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsRequest) ([]PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PortalConfigurationPasswordEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationPasswordEmailSetupsAPIService.GetCompanyPortalConfigurationsByParentIdPasswordEmailSetups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/passwordEmailSetups"
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationPasswordEmailSetupsAPIService
	id                    int32
	parentId              int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Execute() (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r)
}

/*
GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById Get PortalConfigurationPasswordEmailSetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id passwordEmailSetupId
	@param parentId portalConfigurationId
	@return ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest
*/
func (a *PortalConfigurationPasswordEmailSetupsAPIService) GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(ctx context.Context, id int32, parentId int32) ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	return ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationPasswordEmailSetup
func (a *PortalConfigurationPasswordEmailSetupsAPIService) GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r ApiGetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationPasswordEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationPasswordEmailSetupsAPIService.GetCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/passwordEmailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest struct {
	ctx            context.Context
	ApiService     *PortalConfigurationPasswordEmailSetupsAPIService
	id             int32
	parentId       int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Execute() (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r)
}

/*
PatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById Patch PortalConfigurationPasswordEmailSetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id passwordEmailSetupId
	@param parentId portalConfigurationId
	@return ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest
*/
func (a *PortalConfigurationPasswordEmailSetupsAPIService) PatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(ctx context.Context, id int32, parentId int32) ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	return ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationPasswordEmailSetup
func (a *PortalConfigurationPasswordEmailSetupsAPIService) PatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r ApiPatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationPasswordEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationPasswordEmailSetupsAPIService.PatchCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/passwordEmailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest struct {
	ctx                                   context.Context
	ApiService                            *PortalConfigurationPasswordEmailSetupsAPIService
	id                                    int32
	parentId                              int32
	clientId                              *string
	portalConfigurationPasswordEmailSetup *PortalConfigurationPasswordEmailSetup
}

func (r ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.clientId = &clientId
	return r
}

// passwordEmailSetup
func (r ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) PortalConfigurationPasswordEmailSetup(portalConfigurationPasswordEmailSetup PortalConfigurationPasswordEmailSetup) ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	r.portalConfigurationPasswordEmailSetup = &portalConfigurationPasswordEmailSetup
	return r
}

func (r ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) Execute() (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	return r.ApiService.PutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r)
}

/*
PutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById Put PortalConfigurationPasswordEmailSetup

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id passwordEmailSetupId
	@param parentId portalConfigurationId
	@return ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest
*/
func (a *PortalConfigurationPasswordEmailSetupsAPIService) PutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById(ctx context.Context, id int32, parentId int32) ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest {
	return ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		parentId:   parentId,
	}
}

// Execute executes the request
//
//	@return PortalConfigurationPasswordEmailSetup
func (a *PortalConfigurationPasswordEmailSetupsAPIService) PutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdExecute(r ApiPutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsByIdRequest) (*PortalConfigurationPasswordEmailSetup, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfigurationPasswordEmailSetup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationPasswordEmailSetupsAPIService.PutCompanyPortalConfigurationsByParentIdPasswordEmailSetupsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{parentId}/passwordEmailSetups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"parentId"+"}", url.PathEscape(parameterValueToString(r.parentId, "parentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfigurationPasswordEmailSetup == nil {
		return localVarReturnValue, nil, reportError("portalConfigurationPasswordEmailSetup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfigurationPasswordEmailSetup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
