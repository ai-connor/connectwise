/*
Connectwise Manage Public Endpoints

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2025.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cwapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PortalConfigurationsAPIService PortalConfigurationsAPI service
type PortalConfigurationsAPIService service

type ApiDeleteCompanyPortalConfigurationsByIdRequest struct {
	ctx        context.Context
	ApiService *PortalConfigurationsAPIService
	id         int32
	clientId   *string
}

func (r ApiDeleteCompanyPortalConfigurationsByIdRequest) ClientId(clientId string) ApiDeleteCompanyPortalConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiDeleteCompanyPortalConfigurationsByIdRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyPortalConfigurationsByIdExecute(r)
}

/*
DeleteCompanyPortalConfigurationsById Delete PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id portalConfigurationId
	@return ApiDeleteCompanyPortalConfigurationsByIdRequest
*/
func (a *PortalConfigurationsAPIService) DeleteCompanyPortalConfigurationsById(ctx context.Context, id int32) ApiDeleteCompanyPortalConfigurationsByIdRequest {
	return ApiDeleteCompanyPortalConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *PortalConfigurationsAPIService) DeleteCompanyPortalConfigurationsByIdExecute(r ApiDeleteCompanyPortalConfigurationsByIdRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.DeleteCompanyPortalConfigurationsById")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return nil, reportError("clientId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) Page(page int32) ApiGetCompanyPortalConfigurationsRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsRequest) Execute() ([]PortalConfiguration, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsExecute(r)
}

/*
GetCompanyPortalConfigurations Get List of PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyPortalConfigurationsRequest
*/
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurations(ctx context.Context) ApiGetCompanyPortalConfigurationsRequest {
	return ApiGetCompanyPortalConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []PortalConfiguration
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurationsExecute(r ApiGetCompanyPortalConfigurationsRequest) ([]PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.GetCompanyPortalConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsByIdRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationsAPIService
	id                    int32
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) Page(page int32) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsByIdRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsByIdRequest) Execute() (*PortalConfiguration, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsByIdExecute(r)
}

/*
GetCompanyPortalConfigurationsById Get PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id portalConfigurationId
	@return ApiGetCompanyPortalConfigurationsByIdRequest
*/
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurationsById(ctx context.Context, id int32) ApiGetCompanyPortalConfigurationsByIdRequest {
	return ApiGetCompanyPortalConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PortalConfiguration
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurationsByIdExecute(r ApiGetCompanyPortalConfigurationsByIdRequest) (*PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.GetCompanyPortalConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyPortalConfigurationsCountRequest struct {
	ctx                   context.Context
	ApiService            *PortalConfigurationsAPIService
	clientId              *string
	conditions            *string
	childConditions       *string
	customFieldConditions *string
	orderBy               *string
	fields                *string
	page                  *int32
	pageSize              *int32
	pageId                *int32
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) ClientId(clientId string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.clientId = &clientId
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) Conditions(conditions string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.conditions = &conditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) ChildConditions(childConditions string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.childConditions = &childConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) CustomFieldConditions(customFieldConditions string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.customFieldConditions = &customFieldConditions
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) OrderBy(orderBy string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) Fields(fields string) ApiGetCompanyPortalConfigurationsCountRequest {
	r.fields = &fields
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) Page(page int32) ApiGetCompanyPortalConfigurationsCountRequest {
	r.page = &page
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) PageSize(pageSize int32) ApiGetCompanyPortalConfigurationsCountRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) PageId(pageId int32) ApiGetCompanyPortalConfigurationsCountRequest {
	r.pageId = &pageId
	return r
}

func (r ApiGetCompanyPortalConfigurationsCountRequest) Execute() (*Count, *http.Response, error) {
	return r.ApiService.GetCompanyPortalConfigurationsCountExecute(r)
}

/*
GetCompanyPortalConfigurationsCount Get Count of PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCompanyPortalConfigurationsCountRequest
*/
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurationsCount(ctx context.Context) ApiGetCompanyPortalConfigurationsCountRequest {
	return ApiGetCompanyPortalConfigurationsCountRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return Count
func (a *PortalConfigurationsAPIService) GetCompanyPortalConfigurationsCountExecute(r ApiGetCompanyPortalConfigurationsCountRequest) (*Count, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *Count
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.GetCompanyPortalConfigurationsCount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/count"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}

	if r.conditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "conditions", r.conditions, "form", "")
	}
	if r.childConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "childConditions", r.childConditions, "form", "")
	}
	if r.customFieldConditions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "customFieldConditions", r.customFieldConditions, "form", "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "orderBy", r.orderBy, "form", "")
	}
	if r.fields != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields", r.fields, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	}
	if r.pageId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageId", r.pageId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchCompanyPortalConfigurationsByIdRequest struct {
	ctx            context.Context
	ApiService     *PortalConfigurationsAPIService
	id             int32
	clientId       *string
	patchOperation *[]PatchOperation
}

func (r ApiPatchCompanyPortalConfigurationsByIdRequest) ClientId(clientId string) ApiPatchCompanyPortalConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// List of PatchOperation
func (r ApiPatchCompanyPortalConfigurationsByIdRequest) PatchOperation(patchOperation []PatchOperation) ApiPatchCompanyPortalConfigurationsByIdRequest {
	r.patchOperation = &patchOperation
	return r
}

func (r ApiPatchCompanyPortalConfigurationsByIdRequest) Execute() (*PortalConfiguration, *http.Response, error) {
	return r.ApiService.PatchCompanyPortalConfigurationsByIdExecute(r)
}

/*
PatchCompanyPortalConfigurationsById Patch PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id portalConfigurationId
	@return ApiPatchCompanyPortalConfigurationsByIdRequest
*/
func (a *PortalConfigurationsAPIService) PatchCompanyPortalConfigurationsById(ctx context.Context, id int32) ApiPatchCompanyPortalConfigurationsByIdRequest {
	return ApiPatchCompanyPortalConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PortalConfiguration
func (a *PortalConfigurationsAPIService) PatchCompanyPortalConfigurationsByIdExecute(r ApiPatchCompanyPortalConfigurationsByIdRequest) (*PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.PatchCompanyPortalConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.patchOperation == nil {
		return localVarReturnValue, nil, reportError("patchOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.patchOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyPortalConfigurationsRequest struct {
	ctx                 context.Context
	ApiService          *PortalConfigurationsAPIService
	clientId            *string
	portalConfiguration *PortalConfiguration
}

func (r ApiPostCompanyPortalConfigurationsRequest) ClientId(clientId string) ApiPostCompanyPortalConfigurationsRequest {
	r.clientId = &clientId
	return r
}

// portalConfiguration
func (r ApiPostCompanyPortalConfigurationsRequest) PortalConfiguration(portalConfiguration PortalConfiguration) ApiPostCompanyPortalConfigurationsRequest {
	r.portalConfiguration = &portalConfiguration
	return r
}

func (r ApiPostCompanyPortalConfigurationsRequest) Execute() (*PortalConfiguration, *http.Response, error) {
	return r.ApiService.PostCompanyPortalConfigurationsExecute(r)
}

/*
PostCompanyPortalConfigurations Post PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyPortalConfigurationsRequest
*/
func (a *PortalConfigurationsAPIService) PostCompanyPortalConfigurations(ctx context.Context) ApiPostCompanyPortalConfigurationsRequest {
	return ApiPostCompanyPortalConfigurationsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PortalConfiguration
func (a *PortalConfigurationsAPIService) PostCompanyPortalConfigurationsExecute(r ApiPostCompanyPortalConfigurationsRequest) (*PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.PostCompanyPortalConfigurations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfiguration == nil {
		return localVarReturnValue, nil, reportError("portalConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostCompanyPortalConfigurationsCopyRequest struct {
	ctx                 context.Context
	ApiService          *PortalConfigurationsAPIService
	clientId            *string
	portalConfiguration *PortalConfiguration
}

func (r ApiPostCompanyPortalConfigurationsCopyRequest) ClientId(clientId string) ApiPostCompanyPortalConfigurationsCopyRequest {
	r.clientId = &clientId
	return r
}

// copy
func (r ApiPostCompanyPortalConfigurationsCopyRequest) PortalConfiguration(portalConfiguration PortalConfiguration) ApiPostCompanyPortalConfigurationsCopyRequest {
	r.portalConfiguration = &portalConfiguration
	return r
}

func (r ApiPostCompanyPortalConfigurationsCopyRequest) Execute() (*PortalConfiguration, *http.Response, error) {
	return r.ApiService.PostCompanyPortalConfigurationsCopyExecute(r)
}

/*
PostCompanyPortalConfigurationsCopy Post PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostCompanyPortalConfigurationsCopyRequest
*/
func (a *PortalConfigurationsAPIService) PostCompanyPortalConfigurationsCopy(ctx context.Context) ApiPostCompanyPortalConfigurationsCopyRequest {
	return ApiPostCompanyPortalConfigurationsCopyRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PortalConfiguration
func (a *PortalConfigurationsAPIService) PostCompanyPortalConfigurationsCopyExecute(r ApiPostCompanyPortalConfigurationsCopyRequest) (*PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.PostCompanyPortalConfigurationsCopy")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/copy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfiguration == nil {
		return localVarReturnValue, nil, reportError("portalConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPutCompanyPortalConfigurationsByIdRequest struct {
	ctx                 context.Context
	ApiService          *PortalConfigurationsAPIService
	id                  int32
	clientId            *string
	portalConfiguration *PortalConfiguration
}

func (r ApiPutCompanyPortalConfigurationsByIdRequest) ClientId(clientId string) ApiPutCompanyPortalConfigurationsByIdRequest {
	r.clientId = &clientId
	return r
}

// portalConfiguration
func (r ApiPutCompanyPortalConfigurationsByIdRequest) PortalConfiguration(portalConfiguration PortalConfiguration) ApiPutCompanyPortalConfigurationsByIdRequest {
	r.portalConfiguration = &portalConfiguration
	return r
}

func (r ApiPutCompanyPortalConfigurationsByIdRequest) Execute() (*PortalConfiguration, *http.Response, error) {
	return r.ApiService.PutCompanyPortalConfigurationsByIdExecute(r)
}

/*
PutCompanyPortalConfigurationsById Put PortalConfiguration

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id portalConfigurationId
	@return ApiPutCompanyPortalConfigurationsByIdRequest
*/
func (a *PortalConfigurationsAPIService) PutCompanyPortalConfigurationsById(ctx context.Context, id int32) ApiPutCompanyPortalConfigurationsByIdRequest {
	return ApiPutCompanyPortalConfigurationsByIdRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PortalConfiguration
func (a *PortalConfigurationsAPIService) PutCompanyPortalConfigurationsByIdExecute(r ApiPutCompanyPortalConfigurationsByIdRequest) (*PortalConfiguration, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PortalConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PortalConfigurationsAPIService.PutCompanyPortalConfigurationsById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/company/portalConfigurations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clientId == nil {
		return localVarReturnValue, nil, reportError("clientId is required and must be specified")
	}
	if r.portalConfiguration == nil {
		return localVarReturnValue, nil, reportError("portalConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.connectwise.com+json; version=2025.1"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarHeaderParams, "clientId", r.clientId, "simple", "")
	// body params
	localVarPostBody = r.portalConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
